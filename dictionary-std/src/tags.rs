//! Automatically generated. Edit at your own risk.

use dicom_core::dictionary::{DictionaryEntryRef, TagRange, TagRange::*};
use dicom_core::Tag;
use dicom_core::VR::*;

/// CommandGroupLength (0000,0000) UL 1 DICOM
#[rustfmt::skip]
pub const COMMAND_GROUP_LENGTH: Tag = Tag(0x0000, 0x0000); // (0000,0000)
/// AffectedSOPClassUID (0000,0002) UI 1 DICOM
#[rustfmt::skip]
pub const AFFECTED_SOP_CLASS_UID: Tag = Tag(0x0000, 0x0002); // (0000,0002)
/// RequestedSOPClassUID (0000,0003) UI 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_SOP_CLASS_UID: Tag = Tag(0x0000, 0x0003); // (0000,0003)
/// CommandField (0000,0100) US 1 DICOM
#[rustfmt::skip]
pub const COMMAND_FIELD: Tag = Tag(0x0000, 0x0100); // (0000,0100)
/// MessageID (0000,0110) US 1 DICOM
#[rustfmt::skip]
pub const MESSAGE_ID: Tag = Tag(0x0000, 0x0110); // (0000,0110)
/// MessageIDBeingRespondedTo (0000,0120) US 1 DICOM
#[rustfmt::skip]
pub const MESSAGE_ID_BEING_RESPONDED_TO: Tag = Tag(0x0000, 0x0120); // (0000,0120)
/// MoveDestination (0000,0600) AE 1 DICOM
#[rustfmt::skip]
pub const MOVE_DESTINATION: Tag = Tag(0x0000, 0x0600); // (0000,0600)
/// Priority (0000,0700) US 1 DICOM
#[rustfmt::skip]
pub const PRIORITY: Tag = Tag(0x0000, 0x0700); // (0000,0700)
/// CommandDataSetType (0000,0800) US 1 DICOM
#[rustfmt::skip]
pub const COMMAND_DATA_SET_TYPE: Tag = Tag(0x0000, 0x0800); // (0000,0800)
/// Status (0000,0900) US 1 DICOM
#[rustfmt::skip]
pub const STATUS: Tag = Tag(0x0000, 0x0900); // (0000,0900)
/// OffendingElement (0000,0901) AT 1-n DICOM
#[rustfmt::skip]
pub const OFFENDING_ELEMENT: Tag = Tag(0x0000, 0x0901); // (0000,0901)
/// ErrorComment (0000,0902) LO 1 DICOM
#[rustfmt::skip]
pub const ERROR_COMMENT: Tag = Tag(0x0000, 0x0902); // (0000,0902)
/// ErrorID (0000,0903) US 1 DICOM
#[rustfmt::skip]
pub const ERROR_ID: Tag = Tag(0x0000, 0x0903); // (0000,0903)
/// AffectedSOPInstanceUID (0000,1000) UI 1 DICOM
#[rustfmt::skip]
pub const AFFECTED_SOP_INSTANCE_UID: Tag = Tag(0x0000, 0x1000); // (0000,1000)
/// RequestedSOPInstanceUID (0000,1001) UI 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_SOP_INSTANCE_UID: Tag = Tag(0x0000, 0x1001); // (0000,1001)
/// EventTypeID (0000,1002) US 1 DICOM
#[rustfmt::skip]
pub const EVENT_TYPE_ID: Tag = Tag(0x0000, 0x1002); // (0000,1002)
/// AttributeIdentifierList (0000,1005) AT 1-n DICOM
#[rustfmt::skip]
pub const ATTRIBUTE_IDENTIFIER_LIST: Tag = Tag(0x0000, 0x1005); // (0000,1005)
/// ActionTypeID (0000,1008) US 1 DICOM
#[rustfmt::skip]
pub const ACTION_TYPE_ID: Tag = Tag(0x0000, 0x1008); // (0000,1008)
/// NumberOfRemainingSuboperations (0000,1020) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_REMAINING_SUBOPERATIONS: Tag = Tag(0x0000, 0x1020); // (0000,1020)
/// NumberOfCompletedSuboperations (0000,1021) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_COMPLETED_SUBOPERATIONS: Tag = Tag(0x0000, 0x1021); // (0000,1021)
/// NumberOfFailedSuboperations (0000,1022) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FAILED_SUBOPERATIONS: Tag = Tag(0x0000, 0x1022); // (0000,1022)
/// NumberOfWarningSuboperations (0000,1023) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_WARNING_SUBOPERATIONS: Tag = Tag(0x0000, 0x1023); // (0000,1023)
/// MoveOriginatorApplicationEntityTitle (0000,1030) AE 1 DICOM
#[rustfmt::skip]
pub const MOVE_ORIGINATOR_APPLICATION_ENTITY_TITLE: Tag = Tag(0x0000, 0x1030); // (0000,1030)
/// MoveOriginatorMessageID (0000,1031) US 1 DICOM
#[rustfmt::skip]
pub const MOVE_ORIGINATOR_MESSAGE_ID: Tag = Tag(0x0000, 0x1031); // (0000,1031)
/// FileMetaInformationGroupLength (0002,0000) UL 1 DICOM
#[rustfmt::skip]
pub const FILE_META_INFORMATION_GROUP_LENGTH: Tag = Tag(0x0002, 0x0000); // (0002,0000)
/// FileMetaInformationVersion (0002,0001) OB 1 DICOM
#[rustfmt::skip]
pub const FILE_META_INFORMATION_VERSION: Tag = Tag(0x0002, 0x0001); // (0002,0001)
/// MediaStorageSOPClassUID (0002,0002) UI 1 DICOM
#[rustfmt::skip]
pub const MEDIA_STORAGE_SOP_CLASS_UID: Tag = Tag(0x0002, 0x0002); // (0002,0002)
/// MediaStorageSOPInstanceUID (0002,0003) UI 1 DICOM
#[rustfmt::skip]
pub const MEDIA_STORAGE_SOP_INSTANCE_UID: Tag = Tag(0x0002, 0x0003); // (0002,0003)
/// TransferSyntaxUID (0002,0010) UI 1 DICOM
#[rustfmt::skip]
pub const TRANSFER_SYNTAX_UID: Tag = Tag(0x0002, 0x0010); // (0002,0010)
/// ImplementationClassUID (0002,0012) UI 1 DICOM
#[rustfmt::skip]
pub const IMPLEMENTATION_CLASS_UID: Tag = Tag(0x0002, 0x0012); // (0002,0012)
/// ImplementationVersionName (0002,0013) SH 1 DICOM
#[rustfmt::skip]
pub const IMPLEMENTATION_VERSION_NAME: Tag = Tag(0x0002, 0x0013); // (0002,0013)
/// SourceApplicationEntityTitle (0002,0016) AE 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATION_ENTITY_TITLE: Tag = Tag(0x0002, 0x0016); // (0002,0016)
/// SendingApplicationEntityTitle (0002,0017) AE 1 DICOM
#[rustfmt::skip]
pub const SENDING_APPLICATION_ENTITY_TITLE: Tag = Tag(0x0002, 0x0017); // (0002,0017)
/// ReceivingApplicationEntityTitle (0002,0018) AE 1 DICOM
#[rustfmt::skip]
pub const RECEIVING_APPLICATION_ENTITY_TITLE: Tag = Tag(0x0002, 0x0018); // (0002,0018)
/// PrivateInformationCreatorUID (0002,0100) UI 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_INFORMATION_CREATOR_UID: Tag = Tag(0x0002, 0x0100); // (0002,0100)
/// PrivateInformation (0002,0102) OB 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_INFORMATION: Tag = Tag(0x0002, 0x0102); // (0002,0102)
/// FileSetID (0004,1130) CS 1 DICOM
#[rustfmt::skip]
pub const FILE_SET_ID: Tag = Tag(0x0004, 0x1130); // (0004,1130)
/// FileSetDescriptorFileID (0004,1141) CS 1-8 DICOM
#[rustfmt::skip]
pub const FILE_SET_DESCRIPTOR_FILE_ID: Tag = Tag(0x0004, 0x1141); // (0004,1141)
/// SpecificCharacterSetOfFileSetDescriptorFile (0004,1142) CS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE: Tag = Tag(0x0004, 0x1142); // (0004,1142)
/// OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity (0004,1200) UL 1 DICOM
#[rustfmt::skip]
pub const OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY: Tag = Tag(0x0004, 0x1200); // (0004,1200)
/// OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity (0004,1202) UL 1 DICOM
#[rustfmt::skip]
pub const OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY: Tag = Tag(0x0004, 0x1202); // (0004,1202)
/// FileSetConsistencyFlag (0004,1212) US 1 DICOM
#[rustfmt::skip]
pub const FILE_SET_CONSISTENCY_FLAG: Tag = Tag(0x0004, 0x1212); // (0004,1212)
/// DirectoryRecordSequence (0004,1220) SQ 1 DICOM
#[rustfmt::skip]
pub const DIRECTORY_RECORD_SEQUENCE: Tag = Tag(0x0004, 0x1220); // (0004,1220)
/// OffsetOfTheNextDirectoryRecord (0004,1400) UL 1 DICOM
#[rustfmt::skip]
pub const OFFSET_OF_THE_NEXT_DIRECTORY_RECORD: Tag = Tag(0x0004, 0x1400); // (0004,1400)
/// RecordInUseFlag (0004,1410) US 1 DICOM
#[rustfmt::skip]
pub const RECORD_IN_USE_FLAG: Tag = Tag(0x0004, 0x1410); // (0004,1410)
/// OffsetOfReferencedLowerLevelDirectoryEntity (0004,1420) UL 1 DICOM
#[rustfmt::skip]
pub const OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY: Tag = Tag(0x0004, 0x1420); // (0004,1420)
/// DirectoryRecordType (0004,1430) CS 1 DICOM
#[rustfmt::skip]
pub const DIRECTORY_RECORD_TYPE: Tag = Tag(0x0004, 0x1430); // (0004,1430)
/// PrivateRecordUID (0004,1432) UI 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_RECORD_UID: Tag = Tag(0x0004, 0x1432); // (0004,1432)
/// ReferencedFileID (0004,1500) CS 1-8 DICOM
#[rustfmt::skip]
pub const REFERENCED_FILE_ID: Tag = Tag(0x0004, 0x1500); // (0004,1500)
/// ReferencedSOPClassUIDInFile (0004,1510) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOP_CLASS_UID_IN_FILE: Tag = Tag(0x0004, 0x1510); // (0004,1510)
/// ReferencedSOPInstanceUIDInFile (0004,1511) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOP_INSTANCE_UID_IN_FILE: Tag = Tag(0x0004, 0x1511); // (0004,1511)
/// ReferencedTransferSyntaxUIDInFile (0004,1512) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_TRANSFER_SYNTAX_UID_IN_FILE: Tag = Tag(0x0004, 0x1512); // (0004,1512)
/// ReferencedRelatedGeneralSOPClassUIDInFile (0004,151A) UI 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_RELATED_GENERAL_SOP_CLASS_UID_IN_FILE: Tag = Tag(0x0004, 0x151A); // (0004,151A)
/// SpecificCharacterSet (0008,0005) CS 1-n DICOM
#[rustfmt::skip]
pub const SPECIFIC_CHARACTER_SET: Tag = Tag(0x0008, 0x0005); // (0008,0005)
/// LanguageCodeSequence (0008,0006) SQ 1 DICOM
#[rustfmt::skip]
pub const LANGUAGE_CODE_SEQUENCE: Tag = Tag(0x0008, 0x0006); // (0008,0006)
/// ImageType (0008,0008) CS 2-n DICOM
#[rustfmt::skip]
pub const IMAGE_TYPE: Tag = Tag(0x0008, 0x0008); // (0008,0008)
/// InstanceCreationDate (0008,0012) DA 1 DICOM
#[rustfmt::skip]
pub const INSTANCE_CREATION_DATE: Tag = Tag(0x0008, 0x0012); // (0008,0012)
/// InstanceCreationTime (0008,0013) TM 1 DICOM
#[rustfmt::skip]
pub const INSTANCE_CREATION_TIME: Tag = Tag(0x0008, 0x0013); // (0008,0013)
/// InstanceCreatorUID (0008,0014) UI 1 DICOM
#[rustfmt::skip]
pub const INSTANCE_CREATOR_UID: Tag = Tag(0x0008, 0x0014); // (0008,0014)
/// InstanceCoercionDateTime (0008,0015) DT 1 DICOM
#[rustfmt::skip]
pub const INSTANCE_COERCION_DATE_TIME: Tag = Tag(0x0008, 0x0015); // (0008,0015)
/// SOPClassUID (0008,0016) UI 1 DICOM
#[rustfmt::skip]
pub const SOP_CLASS_UID: Tag = Tag(0x0008, 0x0016); // (0008,0016)
/// SOPInstanceUID (0008,0018) UI 1 DICOM
#[rustfmt::skip]
pub const SOP_INSTANCE_UID: Tag = Tag(0x0008, 0x0018); // (0008,0018)
/// RelatedGeneralSOPClassUID (0008,001A) UI 1-n DICOM
#[rustfmt::skip]
pub const RELATED_GENERAL_SOP_CLASS_UID: Tag = Tag(0x0008, 0x001A); // (0008,001A)
/// OriginalSpecializedSOPClassUID (0008,001B) UI 1 DICOM
#[rustfmt::skip]
pub const ORIGINAL_SPECIALIZED_SOP_CLASS_UID: Tag = Tag(0x0008, 0x001B); // (0008,001B)
/// StudyDate (0008,0020) DA 1 DICOM
#[rustfmt::skip]
pub const STUDY_DATE: Tag = Tag(0x0008, 0x0020); // (0008,0020)
/// SeriesDate (0008,0021) DA 1 DICOM
#[rustfmt::skip]
pub const SERIES_DATE: Tag = Tag(0x0008, 0x0021); // (0008,0021)
/// AcquisitionDate (0008,0022) DA 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_DATE: Tag = Tag(0x0008, 0x0022); // (0008,0022)
/// ContentDate (0008,0023) DA 1 DICOM
#[rustfmt::skip]
pub const CONTENT_DATE: Tag = Tag(0x0008, 0x0023); // (0008,0023)
/// AcquisitionDateTime (0008,002A) DT 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_DATE_TIME: Tag = Tag(0x0008, 0x002A); // (0008,002A)
/// StudyTime (0008,0030) TM 1 DICOM
#[rustfmt::skip]
pub const STUDY_TIME: Tag = Tag(0x0008, 0x0030); // (0008,0030)
/// SeriesTime (0008,0031) TM 1 DICOM
#[rustfmt::skip]
pub const SERIES_TIME: Tag = Tag(0x0008, 0x0031); // (0008,0031)
/// AcquisitionTime (0008,0032) TM 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_TIME: Tag = Tag(0x0008, 0x0032); // (0008,0032)
/// ContentTime (0008,0033) TM 1 DICOM
#[rustfmt::skip]
pub const CONTENT_TIME: Tag = Tag(0x0008, 0x0033); // (0008,0033)
/// AccessionNumber (0008,0050) SH 1 DICOM
#[rustfmt::skip]
pub const ACCESSION_NUMBER: Tag = Tag(0x0008, 0x0050); // (0008,0050)
/// IssuerOfAccessionNumberSequence (0008,0051) SQ 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_ACCESSION_NUMBER_SEQUENCE: Tag = Tag(0x0008, 0x0051); // (0008,0051)
/// QueryRetrieveLevel (0008,0052) CS 1 DICOM
#[rustfmt::skip]
pub const QUERY_RETRIEVE_LEVEL: Tag = Tag(0x0008, 0x0052); // (0008,0052)
/// QueryRetrieveView (0008,0053) CS 1 DICOM
#[rustfmt::skip]
pub const QUERY_RETRIEVE_VIEW: Tag = Tag(0x0008, 0x0053); // (0008,0053)
/// RetrieveAETitle (0008,0054) AE 1-n DICOM
#[rustfmt::skip]
pub const RETRIEVE_AE_TITLE: Tag = Tag(0x0008, 0x0054); // (0008,0054)
/// StationAETitle (0008,0055) AE 1 DICOM
#[rustfmt::skip]
pub const STATION_AE_TITLE: Tag = Tag(0x0008, 0x0055); // (0008,0055)
/// InstanceAvailability (0008,0056) CS 1 DICOM
#[rustfmt::skip]
pub const INSTANCE_AVAILABILITY: Tag = Tag(0x0008, 0x0056); // (0008,0056)
/// FailedSOPInstanceUIDList (0008,0058) UI 1-n DICOM
#[rustfmt::skip]
pub const FAILED_SOP_INSTANCE_UID_LIST: Tag = Tag(0x0008, 0x0058); // (0008,0058)
/// Modality (0008,0060) CS 1 DICOM
#[rustfmt::skip]
pub const MODALITY: Tag = Tag(0x0008, 0x0060); // (0008,0060)
/// ModalitiesInStudy (0008,0061) CS 1-n DICOM
#[rustfmt::skip]
pub const MODALITIES_IN_STUDY: Tag = Tag(0x0008, 0x0061); // (0008,0061)
/// SOPClassesInStudy (0008,0062) UI 1-n DICOM
#[rustfmt::skip]
pub const SOP_CLASSES_IN_STUDY: Tag = Tag(0x0008, 0x0062); // (0008,0062)
/// AnatomicRegionsInStudyCodeSequence (0008,0063) SQ 1 DICOM
#[rustfmt::skip]
pub const ANATOMIC_REGIONS_IN_STUDY_CODE_SEQUENCE: Tag = Tag(0x0008, 0x0063); // (0008,0063)
/// ConversionType (0008,0064) CS 1 DICOM
#[rustfmt::skip]
pub const CONVERSION_TYPE: Tag = Tag(0x0008, 0x0064); // (0008,0064)
/// PresentationIntentType (0008,0068) CS 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_INTENT_TYPE: Tag = Tag(0x0008, 0x0068); // (0008,0068)
/// Manufacturer (0008,0070) LO 1 DICOM
#[rustfmt::skip]
pub const MANUFACTURER: Tag = Tag(0x0008, 0x0070); // (0008,0070)
/// InstitutionName (0008,0080) LO 1 DICOM
#[rustfmt::skip]
pub const INSTITUTION_NAME: Tag = Tag(0x0008, 0x0080); // (0008,0080)
/// InstitutionAddress (0008,0081) ST 1 DICOM
#[rustfmt::skip]
pub const INSTITUTION_ADDRESS: Tag = Tag(0x0008, 0x0081); // (0008,0081)
/// InstitutionCodeSequence (0008,0082) SQ 1 DICOM
#[rustfmt::skip]
pub const INSTITUTION_CODE_SEQUENCE: Tag = Tag(0x0008, 0x0082); // (0008,0082)
/// ReferringPhysicianName (0008,0090) PN 1 DICOM
#[rustfmt::skip]
pub const REFERRING_PHYSICIAN_NAME: Tag = Tag(0x0008, 0x0090); // (0008,0090)
/// ReferringPhysicianAddress (0008,0092) ST 1 DICOM
#[rustfmt::skip]
pub const REFERRING_PHYSICIAN_ADDRESS: Tag = Tag(0x0008, 0x0092); // (0008,0092)
/// ReferringPhysicianTelephoneNumbers (0008,0094) SH 1-n DICOM
#[rustfmt::skip]
pub const REFERRING_PHYSICIAN_TELEPHONE_NUMBERS: Tag = Tag(0x0008, 0x0094); // (0008,0094)
/// ReferringPhysicianIdentificationSequence (0008,0096) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x0096); // (0008,0096)
/// ConsultingPhysicianName (0008,009C) PN 1-n DICOM
#[rustfmt::skip]
pub const CONSULTING_PHYSICIAN_NAME: Tag = Tag(0x0008, 0x009C); // (0008,009C)
/// ConsultingPhysicianIdentificationSequence (0008,009D) SQ 1 DICOM
#[rustfmt::skip]
pub const CONSULTING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x009D); // (0008,009D)
/// CodeValue (0008,0100) SH 1 DICOM
#[rustfmt::skip]
pub const CODE_VALUE: Tag = Tag(0x0008, 0x0100); // (0008,0100)
/// ExtendedCodeValue (0008,0101) LO 1 DICOM/DICOS
#[rustfmt::skip]
pub const EXTENDED_CODE_VALUE: Tag = Tag(0x0008, 0x0101); // (0008,0101)
/// CodingSchemeDesignator (0008,0102) SH 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_DESIGNATOR: Tag = Tag(0x0008, 0x0102); // (0008,0102)
/// CodingSchemeVersion (0008,0103) SH 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_VERSION: Tag = Tag(0x0008, 0x0103); // (0008,0103)
/// CodeMeaning (0008,0104) LO 1 DICOM
#[rustfmt::skip]
pub const CODE_MEANING: Tag = Tag(0x0008, 0x0104); // (0008,0104)
/// MappingResource (0008,0105) CS 1 DICOM
#[rustfmt::skip]
pub const MAPPING_RESOURCE: Tag = Tag(0x0008, 0x0105); // (0008,0105)
/// ContextGroupVersion (0008,0106) DT 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_GROUP_VERSION: Tag = Tag(0x0008, 0x0106); // (0008,0106)
/// ContextGroupLocalVersion (0008,0107) DT 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_GROUP_LOCAL_VERSION: Tag = Tag(0x0008, 0x0107); // (0008,0107)
/// ExtendedCodeMeaning (0008,0108) LT 1 DICOM/DICOS
#[rustfmt::skip]
pub const EXTENDED_CODE_MEANING: Tag = Tag(0x0008, 0x0108); // (0008,0108)
/// CodingSchemeResourcesSequence (0008,0109) SQ 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_RESOURCES_SEQUENCE: Tag = Tag(0x0008, 0x0109); // (0008,0109)
/// CodingSchemeURLType (0008,010A) CS 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_URL_TYPE: Tag = Tag(0x0008, 0x010A); // (0008,010A)
/// ContextGroupExtensionFlag (0008,010B) CS 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_GROUP_EXTENSION_FLAG: Tag = Tag(0x0008, 0x010B); // (0008,010B)
/// CodingSchemeUID (0008,010C) UI 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_UID: Tag = Tag(0x0008, 0x010C); // (0008,010C)
/// ContextGroupExtensionCreatorUID (0008,010D) UI 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_GROUP_EXTENSION_CREATOR_UID: Tag = Tag(0x0008, 0x010D); // (0008,010D)
/// CodingSchemeURL (0008,010E) UR 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_URL: Tag = Tag(0x0008, 0x010E); // (0008,010E)
/// ContextIdentifier (0008,010F) CS 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_IDENTIFIER: Tag = Tag(0x0008, 0x010F); // (0008,010F)
/// CodingSchemeIdentificationSequence (0008,0110) SQ 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x0110); // (0008,0110)
/// CodingSchemeRegistry (0008,0112) LO 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_REGISTRY: Tag = Tag(0x0008, 0x0112); // (0008,0112)
/// CodingSchemeExternalID (0008,0114) ST 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_EXTERNAL_ID: Tag = Tag(0x0008, 0x0114); // (0008,0114)
/// CodingSchemeName (0008,0115) ST 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_NAME: Tag = Tag(0x0008, 0x0115); // (0008,0115)
/// CodingSchemeResponsibleOrganization (0008,0116) ST 1 DICOM
#[rustfmt::skip]
pub const CODING_SCHEME_RESPONSIBLE_ORGANIZATION: Tag = Tag(0x0008, 0x0116); // (0008,0116)
/// ContextUID (0008,0117) UI 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_UID: Tag = Tag(0x0008, 0x0117); // (0008,0117)
/// MappingResourceUID (0008,0118) UI 1 DICOM
#[rustfmt::skip]
pub const MAPPING_RESOURCE_UID: Tag = Tag(0x0008, 0x0118); // (0008,0118)
/// LongCodeValue (0008,0119) UC 1 DICOM
#[rustfmt::skip]
pub const LONG_CODE_VALUE: Tag = Tag(0x0008, 0x0119); // (0008,0119)
/// URNCodeValue (0008,0120) UR 1 DICOM
#[rustfmt::skip]
pub const URN_CODE_VALUE: Tag = Tag(0x0008, 0x0120); // (0008,0120)
/// EquivalentCodeSequence (0008,0121) SQ 1 DICOM
#[rustfmt::skip]
pub const EQUIVALENT_CODE_SEQUENCE: Tag = Tag(0x0008, 0x0121); // (0008,0121)
/// MappingResourceName (0008,0122) LO 1 DICOM
#[rustfmt::skip]
pub const MAPPING_RESOURCE_NAME: Tag = Tag(0x0008, 0x0122); // (0008,0122)
/// ContextGroupIdentificationSequence (0008,0123) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTEXT_GROUP_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x0123); // (0008,0123)
/// MappingResourceIdentificationSequence (0008,0124) SQ 1 DICOM
#[rustfmt::skip]
pub const MAPPING_RESOURCE_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x0124); // (0008,0124)
/// TimezoneOffsetFromUTC (0008,0201) SH 1 DICOM
#[rustfmt::skip]
pub const TIMEZONE_OFFSET_FROM_UTC: Tag = Tag(0x0008, 0x0201); // (0008,0201)
/// ResponsibleGroupCodeSequence (0008,0220) SQ 1 DICOM
#[rustfmt::skip]
pub const RESPONSIBLE_GROUP_CODE_SEQUENCE: Tag = Tag(0x0008, 0x0220); // (0008,0220)
/// EquipmentModality (0008,0221) CS 1 DICOM
#[rustfmt::skip]
pub const EQUIPMENT_MODALITY: Tag = Tag(0x0008, 0x0221); // (0008,0221)
/// ManufacturerRelatedModelGroup (0008,0222) LO 1 DICOM
#[rustfmt::skip]
pub const MANUFACTURER_RELATED_MODEL_GROUP: Tag = Tag(0x0008, 0x0222); // (0008,0222)
/// PrivateDataElementCharacteristicsSequence (0008,0300) SQ 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_CHARACTERISTICS_SEQUENCE: Tag = Tag(0x0008, 0x0300); // (0008,0300)
/// PrivateGroupReference (0008,0301) US 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_GROUP_REFERENCE: Tag = Tag(0x0008, 0x0301); // (0008,0301)
/// PrivateCreatorReference (0008,0302) LO 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_CREATOR_REFERENCE: Tag = Tag(0x0008, 0x0302); // (0008,0302)
/// BlockIdentifyingInformationStatus (0008,0303) CS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_IDENTIFYING_INFORMATION_STATUS: Tag = Tag(0x0008, 0x0303); // (0008,0303)
/// NonidentifyingPrivateElements (0008,0304) US 1-n DICOM
#[rustfmt::skip]
pub const NONIDENTIFYING_PRIVATE_ELEMENTS: Tag = Tag(0x0008, 0x0304); // (0008,0304)
/// DeidentificationActionSequence (0008,0305) SQ 1 DICOM
#[rustfmt::skip]
pub const DEIDENTIFICATION_ACTION_SEQUENCE: Tag = Tag(0x0008, 0x0305); // (0008,0305)
/// IdentifyingPrivateElements (0008,0306) US 1-n DICOM
#[rustfmt::skip]
pub const IDENTIFYING_PRIVATE_ELEMENTS: Tag = Tag(0x0008, 0x0306); // (0008,0306)
/// DeidentificationAction (0008,0307) CS 1 DICOM
#[rustfmt::skip]
pub const DEIDENTIFICATION_ACTION: Tag = Tag(0x0008, 0x0307); // (0008,0307)
/// PrivateDataElement (0008,0308) US 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT: Tag = Tag(0x0008, 0x0308); // (0008,0308)
/// PrivateDataElementValueMultiplicity (0008,0309) UL 1-3 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_VALUE_MULTIPLICITY: Tag = Tag(0x0008, 0x0309); // (0008,0309)
/// PrivateDataElementValueRepresentation (0008,030A) CS 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_VALUE_REPRESENTATION: Tag = Tag(0x0008, 0x030A); // (0008,030A)
/// PrivateDataElementNumberOfItems (0008,030B) UL 1-2 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_NUMBER_OF_ITEMS: Tag = Tag(0x0008, 0x030B); // (0008,030B)
/// PrivateDataElementName (0008,030C) UC 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_NAME: Tag = Tag(0x0008, 0x030C); // (0008,030C)
/// PrivateDataElementKeyword (0008,030D) UC 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_KEYWORD: Tag = Tag(0x0008, 0x030D); // (0008,030D)
/// PrivateDataElementDescription (0008,030E) UT 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_DESCRIPTION: Tag = Tag(0x0008, 0x030E); // (0008,030E)
/// PrivateDataElementEncoding (0008,030F) UT 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_ENCODING: Tag = Tag(0x0008, 0x030F); // (0008,030F)
/// PrivateDataElementDefinitionSequence (0008,0310) SQ 1 DICOM
#[rustfmt::skip]
pub const PRIVATE_DATA_ELEMENT_DEFINITION_SEQUENCE: Tag = Tag(0x0008, 0x0310); // (0008,0310)
/// StationName (0008,1010) SH 1 DICOM
#[rustfmt::skip]
pub const STATION_NAME: Tag = Tag(0x0008, 0x1010); // (0008,1010)
/// StudyDescription (0008,1030) LO 1 DICOM
#[rustfmt::skip]
pub const STUDY_DESCRIPTION: Tag = Tag(0x0008, 0x1030); // (0008,1030)
/// ProcedureCodeSequence (0008,1032) SQ 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0008, 0x1032); // (0008,1032)
/// SeriesDescription (0008,103E) LO 1 DICOM
#[rustfmt::skip]
pub const SERIES_DESCRIPTION: Tag = Tag(0x0008, 0x103E); // (0008,103E)
/// SeriesDescriptionCodeSequence (0008,103F) SQ 1 DICOM
#[rustfmt::skip]
pub const SERIES_DESCRIPTION_CODE_SEQUENCE: Tag = Tag(0x0008, 0x103F); // (0008,103F)
/// InstitutionalDepartmentName (0008,1040) LO 1 DICOM
#[rustfmt::skip]
pub const INSTITUTIONAL_DEPARTMENT_NAME: Tag = Tag(0x0008, 0x1040); // (0008,1040)
/// PhysiciansOfRecord (0008,1048) PN 1-n DICOM
#[rustfmt::skip]
pub const PHYSICIANS_OF_RECORD: Tag = Tag(0x0008, 0x1048); // (0008,1048)
/// PhysiciansOfRecordIdentificationSequence (0008,1049) SQ 1 DICOM
#[rustfmt::skip]
pub const PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x1049); // (0008,1049)
/// PerformingPhysicianName (0008,1050) PN 1-n DICOM
#[rustfmt::skip]
pub const PERFORMING_PHYSICIAN_NAME: Tag = Tag(0x0008, 0x1050); // (0008,1050)
/// PerformingPhysicianIdentificationSequence (0008,1052) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x1052); // (0008,1052)
/// NameOfPhysiciansReadingStudy (0008,1060) PN 1-n DICOM
#[rustfmt::skip]
pub const NAME_OF_PHYSICIANS_READING_STUDY: Tag = Tag(0x0008, 0x1060); // (0008,1060)
/// PhysiciansReadingStudyIdentificationSequence (0008,1062) SQ 1 DICOM
#[rustfmt::skip]
pub const PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x1062); // (0008,1062)
/// OperatorsName (0008,1070) PN 1-n DICOM
#[rustfmt::skip]
pub const OPERATORS_NAME: Tag = Tag(0x0008, 0x1070); // (0008,1070)
/// OperatorIdentificationSequence (0008,1072) SQ 1 DICOM
#[rustfmt::skip]
pub const OPERATOR_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0008, 0x1072); // (0008,1072)
/// AdmittingDiagnosesDescription (0008,1080) LO 1-n DICOM
#[rustfmt::skip]
pub const ADMITTING_DIAGNOSES_DESCRIPTION: Tag = Tag(0x0008, 0x1080); // (0008,1080)
/// AdmittingDiagnosesCodeSequence (0008,1084) SQ 1 DICOM
#[rustfmt::skip]
pub const ADMITTING_DIAGNOSES_CODE_SEQUENCE: Tag = Tag(0x0008, 0x1084); // (0008,1084)
/// ManufacturerModelName (0008,1090) LO 1 DICOM
#[rustfmt::skip]
pub const MANUFACTURER_MODEL_NAME: Tag = Tag(0x0008, 0x1090); // (0008,1090)
/// ReferencedStudySequence (0008,1110) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_STUDY_SEQUENCE: Tag = Tag(0x0008, 0x1110); // (0008,1110)
/// ReferencedPerformedProcedureStepSequence (0008,1111) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0008, 0x1111); // (0008,1111)
/// ReferencedSeriesSequence (0008,1115) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SERIES_SEQUENCE: Tag = Tag(0x0008, 0x1115); // (0008,1115)
/// ReferencedPatientSequence (0008,1120) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PATIENT_SEQUENCE: Tag = Tag(0x0008, 0x1120); // (0008,1120)
/// ReferencedVisitSequence (0008,1125) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_VISIT_SEQUENCE: Tag = Tag(0x0008, 0x1125); // (0008,1125)
/// ReferencedStereometricInstanceSequence (0008,1134) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE: Tag = Tag(0x0008, 0x1134); // (0008,1134)
/// ReferencedWaveformSequence (0008,113A) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_WAVEFORM_SEQUENCE: Tag = Tag(0x0008, 0x113A); // (0008,113A)
/// ReferencedImageSequence (0008,1140) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_IMAGE_SEQUENCE: Tag = Tag(0x0008, 0x1140); // (0008,1140)
/// ReferencedInstanceSequence (0008,114A) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_INSTANCE_SEQUENCE: Tag = Tag(0x0008, 0x114A); // (0008,114A)
/// ReferencedRealWorldValueMappingInstanceSequence (0008,114B) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE: Tag = Tag(0x0008, 0x114B); // (0008,114B)
/// ReferencedSOPClassUID (0008,1150) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOP_CLASS_UID: Tag = Tag(0x0008, 0x1150); // (0008,1150)
/// ReferencedSOPInstanceUID (0008,1155) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOP_INSTANCE_UID: Tag = Tag(0x0008, 0x1155); // (0008,1155)
/// SOPClassesSupported (0008,115A) UI 1-n DICOM
#[rustfmt::skip]
pub const SOP_CLASSES_SUPPORTED: Tag = Tag(0x0008, 0x115A); // (0008,115A)
/// ReferencedFrameNumber (0008,1160) IS 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_FRAME_NUMBER: Tag = Tag(0x0008, 0x1160); // (0008,1160)
/// SimpleFrameList (0008,1161) UL 1-n DICOM
#[rustfmt::skip]
pub const SIMPLE_FRAME_LIST: Tag = Tag(0x0008, 0x1161); // (0008,1161)
/// CalculatedFrameList (0008,1162) UL 3-3n DICOM
#[rustfmt::skip]
pub const CALCULATED_FRAME_LIST: Tag = Tag(0x0008, 0x1162); // (0008,1162)
/// TimeRange (0008,1163) FD 2 DICOM
#[rustfmt::skip]
pub const TIME_RANGE: Tag = Tag(0x0008, 0x1163); // (0008,1163)
/// FrameExtractionSequence (0008,1164) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_EXTRACTION_SEQUENCE: Tag = Tag(0x0008, 0x1164); // (0008,1164)
/// MultiFrameSourceSOPInstanceUID (0008,1167) UI 1 DICOM
#[rustfmt::skip]
pub const MULTI_FRAME_SOURCE_SOP_INSTANCE_UID: Tag = Tag(0x0008, 0x1167); // (0008,1167)
/// RetrieveURL (0008,1190) UR 1 DICOM
#[rustfmt::skip]
pub const RETRIEVE_URL: Tag = Tag(0x0008, 0x1190); // (0008,1190)
/// TransactionUID (0008,1195) UI 1 DICOM
#[rustfmt::skip]
pub const TRANSACTION_UID: Tag = Tag(0x0008, 0x1195); // (0008,1195)
/// WarningReason (0008,1196) US 1 DICOM
#[rustfmt::skip]
pub const WARNING_REASON: Tag = Tag(0x0008, 0x1196); // (0008,1196)
/// FailureReason (0008,1197) US 1 DICOM
#[rustfmt::skip]
pub const FAILURE_REASON: Tag = Tag(0x0008, 0x1197); // (0008,1197)
/// FailedSOPSequence (0008,1198) SQ 1 DICOM
#[rustfmt::skip]
pub const FAILED_SOP_SEQUENCE: Tag = Tag(0x0008, 0x1198); // (0008,1198)
/// ReferencedSOPSequence (0008,1199) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOP_SEQUENCE: Tag = Tag(0x0008, 0x1199); // (0008,1199)
/// OtherFailuresSequence (0008,119A) SQ 1 DICOM
#[rustfmt::skip]
pub const OTHER_FAILURES_SEQUENCE: Tag = Tag(0x0008, 0x119A); // (0008,119A)
/// StudiesContainingOtherReferencedInstancesSequence (0008,1200) SQ 1 DICOM
#[rustfmt::skip]
pub const STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE: Tag = Tag(0x0008, 0x1200); // (0008,1200)
/// RelatedSeriesSequence (0008,1250) SQ 1 DICOM
#[rustfmt::skip]
pub const RELATED_SERIES_SEQUENCE: Tag = Tag(0x0008, 0x1250); // (0008,1250)
/// DerivationDescription (0008,2111) ST 1 DICOM
#[rustfmt::skip]
pub const DERIVATION_DESCRIPTION: Tag = Tag(0x0008, 0x2111); // (0008,2111)
/// SourceImageSequence (0008,2112) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_IMAGE_SEQUENCE: Tag = Tag(0x0008, 0x2112); // (0008,2112)
/// StageName (0008,2120) SH 1 DICOM
#[rustfmt::skip]
pub const STAGE_NAME: Tag = Tag(0x0008, 0x2120); // (0008,2120)
/// StageNumber (0008,2122) IS 1 DICOM
#[rustfmt::skip]
pub const STAGE_NUMBER: Tag = Tag(0x0008, 0x2122); // (0008,2122)
/// NumberOfStages (0008,2124) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_STAGES: Tag = Tag(0x0008, 0x2124); // (0008,2124)
/// ViewName (0008,2127) SH 1 DICOM
#[rustfmt::skip]
pub const VIEW_NAME: Tag = Tag(0x0008, 0x2127); // (0008,2127)
/// ViewNumber (0008,2128) IS 1 DICOM
#[rustfmt::skip]
pub const VIEW_NUMBER: Tag = Tag(0x0008, 0x2128); // (0008,2128)
/// NumberOfEventTimers (0008,2129) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_EVENT_TIMERS: Tag = Tag(0x0008, 0x2129); // (0008,2129)
/// NumberOfViewsInStage (0008,212A) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_VIEWS_IN_STAGE: Tag = Tag(0x0008, 0x212A); // (0008,212A)
/// EventElapsedTimes (0008,2130) DS 1-n DICOM
#[rustfmt::skip]
pub const EVENT_ELAPSED_TIMES: Tag = Tag(0x0008, 0x2130); // (0008,2130)
/// EventTimerNames (0008,2132) LO 1-n DICOM
#[rustfmt::skip]
pub const EVENT_TIMER_NAMES: Tag = Tag(0x0008, 0x2132); // (0008,2132)
/// EventTimerSequence (0008,2133) SQ 1 DICOM
#[rustfmt::skip]
pub const EVENT_TIMER_SEQUENCE: Tag = Tag(0x0008, 0x2133); // (0008,2133)
/// EventTimeOffset (0008,2134) FD 1 DICOM
#[rustfmt::skip]
pub const EVENT_TIME_OFFSET: Tag = Tag(0x0008, 0x2134); // (0008,2134)
/// EventCodeSequence (0008,2135) SQ 1 DICOM
#[rustfmt::skip]
pub const EVENT_CODE_SEQUENCE: Tag = Tag(0x0008, 0x2135); // (0008,2135)
/// StartTrim (0008,2142) IS 1 DICOM
#[rustfmt::skip]
pub const START_TRIM: Tag = Tag(0x0008, 0x2142); // (0008,2142)
/// StopTrim (0008,2143) IS 1 DICOM
#[rustfmt::skip]
pub const STOP_TRIM: Tag = Tag(0x0008, 0x2143); // (0008,2143)
/// RecommendedDisplayFrameRate (0008,2144) IS 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_DISPLAY_FRAME_RATE: Tag = Tag(0x0008, 0x2144); // (0008,2144)
/// AnatomicRegionSequence (0008,2218) SQ 1 DICOM
#[rustfmt::skip]
pub const ANATOMIC_REGION_SEQUENCE: Tag = Tag(0x0008, 0x2218); // (0008,2218)
/// AnatomicRegionModifierSequence (0008,2220) SQ 1 DICOM
#[rustfmt::skip]
pub const ANATOMIC_REGION_MODIFIER_SEQUENCE: Tag = Tag(0x0008, 0x2220); // (0008,2220)
/// PrimaryAnatomicStructureSequence (0008,2228) SQ 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE: Tag = Tag(0x0008, 0x2228); // (0008,2228)
/// PrimaryAnatomicStructureModifierSequence (0008,2230) SQ 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE: Tag = Tag(0x0008, 0x2230); // (0008,2230)
/// AlternateRepresentationSequence (0008,3001) SQ 1 DICOM
#[rustfmt::skip]
pub const ALTERNATE_REPRESENTATION_SEQUENCE: Tag = Tag(0x0008, 0x3001); // (0008,3001)
/// IrradiationEventUID (0008,3010) UI 1-n DICOM
#[rustfmt::skip]
pub const IRRADIATION_EVENT_UID: Tag = Tag(0x0008, 0x3010); // (0008,3010)
/// SourceIrradiationEventSequence (0008,3011) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_IRRADIATION_EVENT_SEQUENCE: Tag = Tag(0x0008, 0x3011); // (0008,3011)
/// RadiopharmaceuticalAdministrationEventUID (0008,3012) UI 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_ADMINISTRATION_EVENT_UID: Tag = Tag(0x0008, 0x3012); // (0008,3012)
/// FrameType (0008,9007) CS 4 DICOM
#[rustfmt::skip]
pub const FRAME_TYPE: Tag = Tag(0x0008, 0x9007); // (0008,9007)
/// ReferencedImageEvidenceSequence (0008,9092) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_IMAGE_EVIDENCE_SEQUENCE: Tag = Tag(0x0008, 0x9092); // (0008,9092)
/// ReferencedRawDataSequence (0008,9121) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_RAW_DATA_SEQUENCE: Tag = Tag(0x0008, 0x9121); // (0008,9121)
/// CreatorVersionUID (0008,9123) UI 1 DICOM
#[rustfmt::skip]
pub const CREATOR_VERSION_UID: Tag = Tag(0x0008, 0x9123); // (0008,9123)
/// DerivationImageSequence (0008,9124) SQ 1 DICOM
#[rustfmt::skip]
pub const DERIVATION_IMAGE_SEQUENCE: Tag = Tag(0x0008, 0x9124); // (0008,9124)
/// SourceImageEvidenceSequence (0008,9154) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_IMAGE_EVIDENCE_SEQUENCE: Tag = Tag(0x0008, 0x9154); // (0008,9154)
/// PixelPresentation (0008,9205) CS 1 DICOM
#[rustfmt::skip]
pub const PIXEL_PRESENTATION: Tag = Tag(0x0008, 0x9205); // (0008,9205)
/// VolumetricProperties (0008,9206) CS 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PROPERTIES: Tag = Tag(0x0008, 0x9206); // (0008,9206)
/// VolumeBasedCalculationTechnique (0008,9207) CS 1 DICOM
#[rustfmt::skip]
pub const VOLUME_BASED_CALCULATION_TECHNIQUE: Tag = Tag(0x0008, 0x9207); // (0008,9207)
/// ComplexImageComponent (0008,9208) CS 1 DICOM
#[rustfmt::skip]
pub const COMPLEX_IMAGE_COMPONENT: Tag = Tag(0x0008, 0x9208); // (0008,9208)
/// AcquisitionContrast (0008,9209) CS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_CONTRAST: Tag = Tag(0x0008, 0x9209); // (0008,9209)
/// DerivationCodeSequence (0008,9215) SQ 1 DICOM
#[rustfmt::skip]
pub const DERIVATION_CODE_SEQUENCE: Tag = Tag(0x0008, 0x9215); // (0008,9215)
/// ReferencedPresentationStateSequence (0008,9237) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PRESENTATION_STATE_SEQUENCE: Tag = Tag(0x0008, 0x9237); // (0008,9237)
/// ReferencedOtherPlaneSequence (0008,9410) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_OTHER_PLANE_SEQUENCE: Tag = Tag(0x0008, 0x9410); // (0008,9410)
/// FrameDisplaySequence (0008,9458) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_DISPLAY_SEQUENCE: Tag = Tag(0x0008, 0x9458); // (0008,9458)
/// RecommendedDisplayFrameRateInFloat (0008,9459) FL 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT: Tag = Tag(0x0008, 0x9459); // (0008,9459)
/// SkipFrameRangeFlag (0008,9460) CS 1 DICOM
#[rustfmt::skip]
pub const SKIP_FRAME_RANGE_FLAG: Tag = Tag(0x0008, 0x9460); // (0008,9460)
/// PatientName (0010,0010) PN 1 DICOM
#[rustfmt::skip]
pub const PATIENT_NAME: Tag = Tag(0x0010, 0x0010); // (0010,0010)
/// PatientID (0010,0020) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ID: Tag = Tag(0x0010, 0x0020); // (0010,0020)
/// IssuerOfPatientID (0010,0021) LO 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_PATIENT_ID: Tag = Tag(0x0010, 0x0021); // (0010,0021)
/// TypeOfPatientID (0010,0022) CS 1 DICOM
#[rustfmt::skip]
pub const TYPE_OF_PATIENT_ID: Tag = Tag(0x0010, 0x0022); // (0010,0022)
/// IssuerOfPatientIDQualifiersSequence (0010,0024) SQ 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_PATIENT_ID_QUALIFIERS_SEQUENCE: Tag = Tag(0x0010, 0x0024); // (0010,0024)
/// SourcePatientGroupIdentificationSequence (0010,0026) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_PATIENT_GROUP_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0010, 0x0026); // (0010,0026)
/// GroupOfPatientsIdentificationSequence (0010,0027) SQ 1 DICOM
#[rustfmt::skip]
pub const GROUP_OF_PATIENTS_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0010, 0x0027); // (0010,0027)
/// SubjectRelativePositionInImage (0010,0028) US 3 DICOM
#[rustfmt::skip]
pub const SUBJECT_RELATIVE_POSITION_IN_IMAGE: Tag = Tag(0x0010, 0x0028); // (0010,0028)
/// PatientBirthDate (0010,0030) DA 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BIRTH_DATE: Tag = Tag(0x0010, 0x0030); // (0010,0030)
/// PatientBirthTime (0010,0032) TM 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BIRTH_TIME: Tag = Tag(0x0010, 0x0032); // (0010,0032)
/// PatientBirthDateInAlternativeCalendar (0010,0033) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BIRTH_DATE_IN_ALTERNATIVE_CALENDAR: Tag = Tag(0x0010, 0x0033); // (0010,0033)
/// PatientDeathDateInAlternativeCalendar (0010,0034) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_DEATH_DATE_IN_ALTERNATIVE_CALENDAR: Tag = Tag(0x0010, 0x0034); // (0010,0034)
/// PatientAlternativeCalendar (0010,0035) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ALTERNATIVE_CALENDAR: Tag = Tag(0x0010, 0x0035); // (0010,0035)
/// PatientSex (0010,0040) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SEX: Tag = Tag(0x0010, 0x0040); // (0010,0040)
/// PatientInsurancePlanCodeSequence (0010,0050) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_INSURANCE_PLAN_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0050); // (0010,0050)
/// PatientPrimaryLanguageCodeSequence (0010,0101) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0101); // (0010,0101)
/// PatientPrimaryLanguageModifierCodeSequence (0010,0102) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0102); // (0010,0102)
/// QualityControlSubject (0010,0200) CS 1 DICOM
#[rustfmt::skip]
pub const QUALITY_CONTROL_SUBJECT: Tag = Tag(0x0010, 0x0200); // (0010,0200)
/// QualityControlSubjectTypeCodeSequence (0010,0201) SQ 1 DICOM
#[rustfmt::skip]
pub const QUALITY_CONTROL_SUBJECT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0201); // (0010,0201)
/// StrainDescription (0010,0212) UC 1 DICOM
#[rustfmt::skip]
pub const STRAIN_DESCRIPTION: Tag = Tag(0x0010, 0x0212); // (0010,0212)
/// StrainNomenclature (0010,0213) LO 1 DICOM
#[rustfmt::skip]
pub const STRAIN_NOMENCLATURE: Tag = Tag(0x0010, 0x0213); // (0010,0213)
/// StrainStockNumber (0010,0214) LO 1 DICOM
#[rustfmt::skip]
pub const STRAIN_STOCK_NUMBER: Tag = Tag(0x0010, 0x0214); // (0010,0214)
/// StrainSourceRegistryCodeSequence (0010,0215) SQ 1 DICOM
#[rustfmt::skip]
pub const STRAIN_SOURCE_REGISTRY_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0215); // (0010,0215)
/// StrainStockSequence (0010,0216) SQ 1 DICOM
#[rustfmt::skip]
pub const STRAIN_STOCK_SEQUENCE: Tag = Tag(0x0010, 0x0216); // (0010,0216)
/// StrainSource (0010,0217) LO 1 DICOM
#[rustfmt::skip]
pub const STRAIN_SOURCE: Tag = Tag(0x0010, 0x0217); // (0010,0217)
/// StrainAdditionalInformation (0010,0218) UT 1 DICOM
#[rustfmt::skip]
pub const STRAIN_ADDITIONAL_INFORMATION: Tag = Tag(0x0010, 0x0218); // (0010,0218)
/// StrainCodeSequence (0010,0219) SQ 1 DICOM
#[rustfmt::skip]
pub const STRAIN_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0219); // (0010,0219)
/// GeneticModificationsSequence (0010,0221) SQ 1 DICOM
#[rustfmt::skip]
pub const GENETIC_MODIFICATIONS_SEQUENCE: Tag = Tag(0x0010, 0x0221); // (0010,0221)
/// GeneticModificationsDescription (0010,0222) UC 1 DICOM
#[rustfmt::skip]
pub const GENETIC_MODIFICATIONS_DESCRIPTION: Tag = Tag(0x0010, 0x0222); // (0010,0222)
/// GeneticModificationsNomenclature (0010,0223) LO 1 DICOM
#[rustfmt::skip]
pub const GENETIC_MODIFICATIONS_NOMENCLATURE: Tag = Tag(0x0010, 0x0223); // (0010,0223)
/// GeneticModificationsCodeSequence (0010,0229) SQ 1 DICOM
#[rustfmt::skip]
pub const GENETIC_MODIFICATIONS_CODE_SEQUENCE: Tag = Tag(0x0010, 0x0229); // (0010,0229)
/// OtherPatientNames (0010,1001) PN 1-n DICOM
#[rustfmt::skip]
pub const OTHER_PATIENT_NAMES: Tag = Tag(0x0010, 0x1001); // (0010,1001)
/// OtherPatientIDsSequence (0010,1002) SQ 1 DICOM
#[rustfmt::skip]
pub const OTHER_PATIENT_I_DS_SEQUENCE: Tag = Tag(0x0010, 0x1002); // (0010,1002)
/// PatientBirthName (0010,1005) PN 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BIRTH_NAME: Tag = Tag(0x0010, 0x1005); // (0010,1005)
/// PatientAge (0010,1010) AS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_AGE: Tag = Tag(0x0010, 0x1010); // (0010,1010)
/// PatientSize (0010,1020) DS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SIZE: Tag = Tag(0x0010, 0x1020); // (0010,1020)
/// PatientSizeCodeSequence (0010,1021) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SIZE_CODE_SEQUENCE: Tag = Tag(0x0010, 0x1021); // (0010,1021)
/// PatientBodyMassIndex (0010,1022) DS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BODY_MASS_INDEX: Tag = Tag(0x0010, 0x1022); // (0010,1022)
/// MeasuredAPDimension (0010,1023) DS 1 DICOM
#[rustfmt::skip]
pub const MEASURED_AP_DIMENSION: Tag = Tag(0x0010, 0x1023); // (0010,1023)
/// MeasuredLateralDimension (0010,1024) DS 1 DICOM
#[rustfmt::skip]
pub const MEASURED_LATERAL_DIMENSION: Tag = Tag(0x0010, 0x1024); // (0010,1024)
/// PatientWeight (0010,1030) DS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_WEIGHT: Tag = Tag(0x0010, 0x1030); // (0010,1030)
/// PatientAddress (0010,1040) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ADDRESS: Tag = Tag(0x0010, 0x1040); // (0010,1040)
/// PatientMotherBirthName (0010,1060) PN 1 DICOM
#[rustfmt::skip]
pub const PATIENT_MOTHER_BIRTH_NAME: Tag = Tag(0x0010, 0x1060); // (0010,1060)
/// MilitaryRank (0010,1080) LO 1 DICOM
#[rustfmt::skip]
pub const MILITARY_RANK: Tag = Tag(0x0010, 0x1080); // (0010,1080)
/// BranchOfService (0010,1081) LO 1 DICOM
#[rustfmt::skip]
pub const BRANCH_OF_SERVICE: Tag = Tag(0x0010, 0x1081); // (0010,1081)
/// ReferencedPatientPhotoSequence (0010,1100) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PATIENT_PHOTO_SEQUENCE: Tag = Tag(0x0010, 0x1100); // (0010,1100)
/// MedicalAlerts (0010,2000) LO 1-n DICOM
#[rustfmt::skip]
pub const MEDICAL_ALERTS: Tag = Tag(0x0010, 0x2000); // (0010,2000)
/// Allergies (0010,2110) LO 1-n DICOM
#[rustfmt::skip]
pub const ALLERGIES: Tag = Tag(0x0010, 0x2110); // (0010,2110)
/// CountryOfResidence (0010,2150) LO 1 DICOM
#[rustfmt::skip]
pub const COUNTRY_OF_RESIDENCE: Tag = Tag(0x0010, 0x2150); // (0010,2150)
/// RegionOfResidence (0010,2152) LO 1 DICOM
#[rustfmt::skip]
pub const REGION_OF_RESIDENCE: Tag = Tag(0x0010, 0x2152); // (0010,2152)
/// PatientTelephoneNumbers (0010,2154) SH 1-n DICOM
#[rustfmt::skip]
pub const PATIENT_TELEPHONE_NUMBERS: Tag = Tag(0x0010, 0x2154); // (0010,2154)
/// PatientTelecomInformation (0010,2155) LT 1 DICOM
#[rustfmt::skip]
pub const PATIENT_TELECOM_INFORMATION: Tag = Tag(0x0010, 0x2155); // (0010,2155)
/// EthnicGroup (0010,2160) SH 1 DICOM
#[rustfmt::skip]
pub const ETHNIC_GROUP: Tag = Tag(0x0010, 0x2160); // (0010,2160)
/// Occupation (0010,2180) SH 1 DICOM
#[rustfmt::skip]
pub const OCCUPATION: Tag = Tag(0x0010, 0x2180); // (0010,2180)
/// SmokingStatus (0010,21A0) CS 1 DICOM
#[rustfmt::skip]
pub const SMOKING_STATUS: Tag = Tag(0x0010, 0x21A0); // (0010,21A0)
/// AdditionalPatientHistory (0010,21B0) LT 1 DICOM
#[rustfmt::skip]
pub const ADDITIONAL_PATIENT_HISTORY: Tag = Tag(0x0010, 0x21B0); // (0010,21B0)
/// PregnancyStatus (0010,21C0) US 1 DICOM
#[rustfmt::skip]
pub const PREGNANCY_STATUS: Tag = Tag(0x0010, 0x21C0); // (0010,21C0)
/// LastMenstrualDate (0010,21D0) DA 1 DICOM
#[rustfmt::skip]
pub const LAST_MENSTRUAL_DATE: Tag = Tag(0x0010, 0x21D0); // (0010,21D0)
/// PatientReligiousPreference (0010,21F0) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_RELIGIOUS_PREFERENCE: Tag = Tag(0x0010, 0x21F0); // (0010,21F0)
/// PatientSpeciesDescription (0010,2201) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SPECIES_DESCRIPTION: Tag = Tag(0x0010, 0x2201); // (0010,2201)
/// PatientSpeciesCodeSequence (0010,2202) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SPECIES_CODE_SEQUENCE: Tag = Tag(0x0010, 0x2202); // (0010,2202)
/// PatientSexNeutered (0010,2203) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SEX_NEUTERED: Tag = Tag(0x0010, 0x2203); // (0010,2203)
/// AnatomicalOrientationType (0010,2210) CS 1 DICOM
#[rustfmt::skip]
pub const ANATOMICAL_ORIENTATION_TYPE: Tag = Tag(0x0010, 0x2210); // (0010,2210)
/// PatientBreedDescription (0010,2292) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BREED_DESCRIPTION: Tag = Tag(0x0010, 0x2292); // (0010,2292)
/// PatientBreedCodeSequence (0010,2293) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_BREED_CODE_SEQUENCE: Tag = Tag(0x0010, 0x2293); // (0010,2293)
/// BreedRegistrationSequence (0010,2294) SQ 1 DICOM
#[rustfmt::skip]
pub const BREED_REGISTRATION_SEQUENCE: Tag = Tag(0x0010, 0x2294); // (0010,2294)
/// BreedRegistrationNumber (0010,2295) LO 1 DICOM
#[rustfmt::skip]
pub const BREED_REGISTRATION_NUMBER: Tag = Tag(0x0010, 0x2295); // (0010,2295)
/// BreedRegistryCodeSequence (0010,2296) SQ 1 DICOM
#[rustfmt::skip]
pub const BREED_REGISTRY_CODE_SEQUENCE: Tag = Tag(0x0010, 0x2296); // (0010,2296)
/// ResponsiblePerson (0010,2297) PN 1 DICOM
#[rustfmt::skip]
pub const RESPONSIBLE_PERSON: Tag = Tag(0x0010, 0x2297); // (0010,2297)
/// ResponsiblePersonRole (0010,2298) CS 1 DICOM
#[rustfmt::skip]
pub const RESPONSIBLE_PERSON_ROLE: Tag = Tag(0x0010, 0x2298); // (0010,2298)
/// ResponsibleOrganization (0010,2299) LO 1 DICOM
#[rustfmt::skip]
pub const RESPONSIBLE_ORGANIZATION: Tag = Tag(0x0010, 0x2299); // (0010,2299)
/// PatientComments (0010,4000) LT 1 DICOM
#[rustfmt::skip]
pub const PATIENT_COMMENTS: Tag = Tag(0x0010, 0x4000); // (0010,4000)
/// ExaminedBodyThickness (0010,9431) FL 1 DICOM
#[rustfmt::skip]
pub const EXAMINED_BODY_THICKNESS: Tag = Tag(0x0010, 0x9431); // (0010,9431)
/// ClinicalTrialSponsorName (0012,0010) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SPONSOR_NAME: Tag = Tag(0x0012, 0x0010); // (0012,0010)
/// ClinicalTrialProtocolID (0012,0020) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_PROTOCOL_ID: Tag = Tag(0x0012, 0x0020); // (0012,0020)
/// ClinicalTrialProtocolName (0012,0021) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_PROTOCOL_NAME: Tag = Tag(0x0012, 0x0021); // (0012,0021)
/// ClinicalTrialSiteID (0012,0030) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SITE_ID: Tag = Tag(0x0012, 0x0030); // (0012,0030)
/// ClinicalTrialSiteName (0012,0031) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SITE_NAME: Tag = Tag(0x0012, 0x0031); // (0012,0031)
/// ClinicalTrialSubjectID (0012,0040) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SUBJECT_ID: Tag = Tag(0x0012, 0x0040); // (0012,0040)
/// ClinicalTrialSubjectReadingID (0012,0042) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SUBJECT_READING_ID: Tag = Tag(0x0012, 0x0042); // (0012,0042)
/// ClinicalTrialTimePointID (0012,0050) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_TIME_POINT_ID: Tag = Tag(0x0012, 0x0050); // (0012,0050)
/// ClinicalTrialTimePointDescription (0012,0051) ST 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_TIME_POINT_DESCRIPTION: Tag = Tag(0x0012, 0x0051); // (0012,0051)
/// LongitudinalTemporalOffsetFromEvent (0012,0052) FD 1 DICOM
#[rustfmt::skip]
pub const LONGITUDINAL_TEMPORAL_OFFSET_FROM_EVENT: Tag = Tag(0x0012, 0x0052); // (0012,0052)
/// LongitudinalTemporalEventType (0012,0053) CS 1 DICOM
#[rustfmt::skip]
pub const LONGITUDINAL_TEMPORAL_EVENT_TYPE: Tag = Tag(0x0012, 0x0053); // (0012,0053)
/// ClinicalTrialCoordinatingCenterName (0012,0060) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_COORDINATING_CENTER_NAME: Tag = Tag(0x0012, 0x0060); // (0012,0060)
/// PatientIdentityRemoved (0012,0062) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_IDENTITY_REMOVED: Tag = Tag(0x0012, 0x0062); // (0012,0062)
/// DeidentificationMethod (0012,0063) LO 1-n DICOM
#[rustfmt::skip]
pub const DEIDENTIFICATION_METHOD: Tag = Tag(0x0012, 0x0063); // (0012,0063)
/// DeidentificationMethodCodeSequence (0012,0064) SQ 1 DICOM
#[rustfmt::skip]
pub const DEIDENTIFICATION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0012, 0x0064); // (0012,0064)
/// ClinicalTrialSeriesID (0012,0071) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SERIES_ID: Tag = Tag(0x0012, 0x0071); // (0012,0071)
/// ClinicalTrialSeriesDescription (0012,0072) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_SERIES_DESCRIPTION: Tag = Tag(0x0012, 0x0072); // (0012,0072)
/// ClinicalTrialProtocolEthicsCommitteeName (0012,0081) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME: Tag = Tag(0x0012, 0x0081); // (0012,0081)
/// ClinicalTrialProtocolEthicsCommitteeApprovalNumber (0012,0082) LO 1 DICOM
#[rustfmt::skip]
pub const CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER: Tag = Tag(0x0012, 0x0082); // (0012,0082)
/// ConsentForClinicalTrialUseSequence (0012,0083) SQ 1 DICOM
#[rustfmt::skip]
pub const CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE: Tag = Tag(0x0012, 0x0083); // (0012,0083)
/// DistributionType (0012,0084) CS 1 DICOM
#[rustfmt::skip]
pub const DISTRIBUTION_TYPE: Tag = Tag(0x0012, 0x0084); // (0012,0084)
/// ConsentForDistributionFlag (0012,0085) CS 1 DICOM
#[rustfmt::skip]
pub const CONSENT_FOR_DISTRIBUTION_FLAG: Tag = Tag(0x0012, 0x0085); // (0012,0085)
/// EthicsCommitteeApprovalEffectivenessStartDate (0012,0086) DA 1 DICOM
#[rustfmt::skip]
pub const ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_START_DATE: Tag = Tag(0x0012, 0x0086); // (0012,0086)
/// EthicsCommitteeApprovalEffectivenessEndDate (0012,0087) DA 1 DICOM
#[rustfmt::skip]
pub const ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_END_DATE: Tag = Tag(0x0012, 0x0087); // (0012,0087)
/// ComponentManufacturingProcedure (0014,0025) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COMPONENT_MANUFACTURING_PROCEDURE: Tag = Tag(0x0014, 0x0025); // (0014,0025)
/// ComponentManufacturer (0014,0028) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COMPONENT_MANUFACTURER: Tag = Tag(0x0014, 0x0028); // (0014,0028)
/// MaterialThickness (0014,0030) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const MATERIAL_THICKNESS: Tag = Tag(0x0014, 0x0030); // (0014,0030)
/// MaterialPipeDiameter (0014,0032) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const MATERIAL_PIPE_DIAMETER: Tag = Tag(0x0014, 0x0032); // (0014,0032)
/// MaterialIsolationDiameter (0014,0034) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const MATERIAL_ISOLATION_DIAMETER: Tag = Tag(0x0014, 0x0034); // (0014,0034)
/// MaterialGrade (0014,0042) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MATERIAL_GRADE: Tag = Tag(0x0014, 0x0042); // (0014,0042)
/// MaterialPropertiesDescription (0014,0044) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MATERIAL_PROPERTIES_DESCRIPTION: Tag = Tag(0x0014, 0x0044); // (0014,0044)
/// MaterialNotes (0014,0046) LT 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MATERIAL_NOTES: Tag = Tag(0x0014, 0x0046); // (0014,0046)
/// ComponentShape (0014,0050) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COMPONENT_SHAPE: Tag = Tag(0x0014, 0x0050); // (0014,0050)
/// CurvatureType (0014,0052) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CURVATURE_TYPE: Tag = Tag(0x0014, 0x0052); // (0014,0052)
/// OuterDiameter (0014,0054) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const OUTER_DIAMETER: Tag = Tag(0x0014, 0x0054); // (0014,0054)
/// InnerDiameter (0014,0056) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INNER_DIAMETER: Tag = Tag(0x0014, 0x0056); // (0014,0056)
/// ComponentWelderIDs (0014,0100) LO 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const COMPONENT_WELDER_I_DS: Tag = Tag(0x0014, 0x0100); // (0014,0100)
/// SecondaryApprovalStatus (0014,0101) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SECONDARY_APPROVAL_STATUS: Tag = Tag(0x0014, 0x0101); // (0014,0101)
/// SecondaryReviewDate (0014,0102) DA 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SECONDARY_REVIEW_DATE: Tag = Tag(0x0014, 0x0102); // (0014,0102)
/// SecondaryReviewTime (0014,0103) TM 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SECONDARY_REVIEW_TIME: Tag = Tag(0x0014, 0x0103); // (0014,0103)
/// SecondaryReviewerName (0014,0104) PN 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SECONDARY_REVIEWER_NAME: Tag = Tag(0x0014, 0x0104); // (0014,0104)
/// RepairID (0014,0105) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const REPAIR_ID: Tag = Tag(0x0014, 0x0105); // (0014,0105)
/// MultipleComponentApprovalSequence (0014,0106) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MULTIPLE_COMPONENT_APPROVAL_SEQUENCE: Tag = Tag(0x0014, 0x0106); // (0014,0106)
/// OtherApprovalStatus (0014,0107) CS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const OTHER_APPROVAL_STATUS: Tag = Tag(0x0014, 0x0107); // (0014,0107)
/// OtherSecondaryApprovalStatus (0014,0108) CS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const OTHER_SECONDARY_APPROVAL_STATUS: Tag = Tag(0x0014, 0x0108); // (0014,0108)
/// ActualEnvironmentalConditions (0014,1010) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ACTUAL_ENVIRONMENTAL_CONDITIONS: Tag = Tag(0x0014, 0x1010); // (0014,1010)
/// ExpiryDate (0014,1020) DA 1 DICOM/DICONDE
#[rustfmt::skip]
pub const EXPIRY_DATE: Tag = Tag(0x0014, 0x1020); // (0014,1020)
/// EnvironmentalConditions (0014,1040) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ENVIRONMENTAL_CONDITIONS: Tag = Tag(0x0014, 0x1040); // (0014,1040)
/// EvaluatorSequence (0014,2002) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const EVALUATOR_SEQUENCE: Tag = Tag(0x0014, 0x2002); // (0014,2002)
/// EvaluatorNumber (0014,2004) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const EVALUATOR_NUMBER: Tag = Tag(0x0014, 0x2004); // (0014,2004)
/// EvaluatorName (0014,2006) PN 1 DICOM/DICONDE
#[rustfmt::skip]
pub const EVALUATOR_NAME: Tag = Tag(0x0014, 0x2006); // (0014,2006)
/// EvaluationAttempt (0014,2008) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const EVALUATION_ATTEMPT: Tag = Tag(0x0014, 0x2008); // (0014,2008)
/// IndicationSequence (0014,2012) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_SEQUENCE: Tag = Tag(0x0014, 0x2012); // (0014,2012)
/// IndicationNumber (0014,2014) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_NUMBER: Tag = Tag(0x0014, 0x2014); // (0014,2014)
/// IndicationLabel (0014,2016) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_LABEL: Tag = Tag(0x0014, 0x2016); // (0014,2016)
/// IndicationDescription (0014,2018) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_DESCRIPTION: Tag = Tag(0x0014, 0x2018); // (0014,2018)
/// IndicationType (0014,201A) CS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_TYPE: Tag = Tag(0x0014, 0x201A); // (0014,201A)
/// IndicationDisposition (0014,201C) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_DISPOSITION: Tag = Tag(0x0014, 0x201C); // (0014,201C)
/// IndicationROISequence (0014,201E) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_ROI_SEQUENCE: Tag = Tag(0x0014, 0x201E); // (0014,201E)
/// IndicationPhysicalPropertySequence (0014,2030) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INDICATION_PHYSICAL_PROPERTY_SEQUENCE: Tag = Tag(0x0014, 0x2030); // (0014,2030)
/// PropertyLabel (0014,2032) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROPERTY_LABEL: Tag = Tag(0x0014, 0x2032); // (0014,2032)
/// CoordinateSystemNumberOfAxes (0014,2202) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_NUMBER_OF_AXES: Tag = Tag(0x0014, 0x2202); // (0014,2202)
/// CoordinateSystemAxesSequence (0014,2204) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXES_SEQUENCE: Tag = Tag(0x0014, 0x2204); // (0014,2204)
/// CoordinateSystemAxisDescription (0014,2206) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXIS_DESCRIPTION: Tag = Tag(0x0014, 0x2206); // (0014,2206)
/// CoordinateSystemDataSetMapping (0014,2208) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_DATA_SET_MAPPING: Tag = Tag(0x0014, 0x2208); // (0014,2208)
/// CoordinateSystemAxisNumber (0014,220A) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXIS_NUMBER: Tag = Tag(0x0014, 0x220A); // (0014,220A)
/// CoordinateSystemAxisType (0014,220C) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXIS_TYPE: Tag = Tag(0x0014, 0x220C); // (0014,220C)
/// CoordinateSystemAxisUnits (0014,220E) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXIS_UNITS: Tag = Tag(0x0014, 0x220E); // (0014,220E)
/// CoordinateSystemAxisValues (0014,2210) OB 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXIS_VALUES: Tag = Tag(0x0014, 0x2210); // (0014,2210)
/// CoordinateSystemTransformSequence (0014,2220) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_TRANSFORM_SEQUENCE: Tag = Tag(0x0014, 0x2220); // (0014,2220)
/// TransformDescription (0014,2222) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSFORM_DESCRIPTION: Tag = Tag(0x0014, 0x2222); // (0014,2222)
/// TransformNumberOfAxes (0014,2224) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSFORM_NUMBER_OF_AXES: Tag = Tag(0x0014, 0x2224); // (0014,2224)
/// TransformOrderOfAxes (0014,2226) IS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSFORM_ORDER_OF_AXES: Tag = Tag(0x0014, 0x2226); // (0014,2226)
/// TransformedAxisUnits (0014,2228) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSFORMED_AXIS_UNITS: Tag = Tag(0x0014, 0x2228); // (0014,2228)
/// CoordinateSystemTransformRotationAndScaleMatrix (0014,222A) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_TRANSFORM_ROTATION_AND_SCALE_MATRIX: Tag = Tag(0x0014, 0x222A); // (0014,222A)
/// CoordinateSystemTransformTranslationMatrix (0014,222C) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_TRANSFORM_TRANSLATION_MATRIX: Tag = Tag(0x0014, 0x222C); // (0014,222C)
/// InternalDetectorFrameTime (0014,3011) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INTERNAL_DETECTOR_FRAME_TIME: Tag = Tag(0x0014, 0x3011); // (0014,3011)
/// NumberOfFramesIntegrated (0014,3012) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const NUMBER_OF_FRAMES_INTEGRATED: Tag = Tag(0x0014, 0x3012); // (0014,3012)
/// DetectorTemperatureSequence (0014,3020) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DETECTOR_TEMPERATURE_SEQUENCE: Tag = Tag(0x0014, 0x3020); // (0014,3020)
/// SensorName (0014,3022) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SENSOR_NAME: Tag = Tag(0x0014, 0x3022); // (0014,3022)
/// HorizontalOffsetOfSensor (0014,3024) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const HORIZONTAL_OFFSET_OF_SENSOR: Tag = Tag(0x0014, 0x3024); // (0014,3024)
/// VerticalOffsetOfSensor (0014,3026) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const VERTICAL_OFFSET_OF_SENSOR: Tag = Tag(0x0014, 0x3026); // (0014,3026)
/// SensorTemperature (0014,3028) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SENSOR_TEMPERATURE: Tag = Tag(0x0014, 0x3028); // (0014,3028)
/// DarkCurrentSequence (0014,3040) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DARK_CURRENT_SEQUENCE: Tag = Tag(0x0014, 0x3040); // (0014,3040)
/// DarkCurrentCounts (0014,3050) OB 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DARK_CURRENT_COUNTS: Tag = Tag(0x0014, 0x3050); // (0014,3050)
/// GainCorrectionReferenceSequence (0014,3060) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const GAIN_CORRECTION_REFERENCE_SEQUENCE: Tag = Tag(0x0014, 0x3060); // (0014,3060)
/// AirCounts (0014,3070) OB 1 DICOM/DICONDE
#[rustfmt::skip]
pub const AIR_COUNTS: Tag = Tag(0x0014, 0x3070); // (0014,3070)
/// KVUsedInGainCalibration (0014,3071) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const KV_USED_IN_GAIN_CALIBRATION: Tag = Tag(0x0014, 0x3071); // (0014,3071)
/// MAUsedInGainCalibration (0014,3072) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MA_USED_IN_GAIN_CALIBRATION: Tag = Tag(0x0014, 0x3072); // (0014,3072)
/// NumberOfFramesUsedForIntegration (0014,3073) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const NUMBER_OF_FRAMES_USED_FOR_INTEGRATION: Tag = Tag(0x0014, 0x3073); // (0014,3073)
/// FilterMaterialUsedInGainCalibration (0014,3074) LO 1 DICOM/DICONDE
#[rustfmt::skip]
pub const FILTER_MATERIAL_USED_IN_GAIN_CALIBRATION: Tag = Tag(0x0014, 0x3074); // (0014,3074)
/// FilterThicknessUsedInGainCalibration (0014,3075) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const FILTER_THICKNESS_USED_IN_GAIN_CALIBRATION: Tag = Tag(0x0014, 0x3075); // (0014,3075)
/// DateOfGainCalibration (0014,3076) DA 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DATE_OF_GAIN_CALIBRATION: Tag = Tag(0x0014, 0x3076); // (0014,3076)
/// TimeOfGainCalibration (0014,3077) TM 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TIME_OF_GAIN_CALIBRATION: Tag = Tag(0x0014, 0x3077); // (0014,3077)
/// BadPixelImage (0014,3080) OB 1 DICOM/DICONDE
#[rustfmt::skip]
pub const BAD_PIXEL_IMAGE: Tag = Tag(0x0014, 0x3080); // (0014,3080)
/// CalibrationNotes (0014,3099) LT 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CALIBRATION_NOTES: Tag = Tag(0x0014, 0x3099); // (0014,3099)
/// PulserEquipmentSequence (0014,4002) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PULSER_EQUIPMENT_SEQUENCE: Tag = Tag(0x0014, 0x4002); // (0014,4002)
/// PulserType (0014,4004) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PULSER_TYPE: Tag = Tag(0x0014, 0x4004); // (0014,4004)
/// PulserNotes (0014,4006) LT 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PULSER_NOTES: Tag = Tag(0x0014, 0x4006); // (0014,4006)
/// ReceiverEquipmentSequence (0014,4008) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECEIVER_EQUIPMENT_SEQUENCE: Tag = Tag(0x0014, 0x4008); // (0014,4008)
/// AmplifierType (0014,400A) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const AMPLIFIER_TYPE: Tag = Tag(0x0014, 0x400A); // (0014,400A)
/// ReceiverNotes (0014,400C) LT 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECEIVER_NOTES: Tag = Tag(0x0014, 0x400C); // (0014,400C)
/// PreAmplifierEquipmentSequence (0014,400E) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PRE_AMPLIFIER_EQUIPMENT_SEQUENCE: Tag = Tag(0x0014, 0x400E); // (0014,400E)
/// PreAmplifierNotes (0014,400F) LT 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PRE_AMPLIFIER_NOTES: Tag = Tag(0x0014, 0x400F); // (0014,400F)
/// TransmitTransducerSequence (0014,4010) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSMIT_TRANSDUCER_SEQUENCE: Tag = Tag(0x0014, 0x4010); // (0014,4010)
/// ReceiveTransducerSequence (0014,4011) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECEIVE_TRANSDUCER_SEQUENCE: Tag = Tag(0x0014, 0x4011); // (0014,4011)
/// NumberOfElements (0014,4012) US 1 DICOM/DICONDE
#[rustfmt::skip]
pub const NUMBER_OF_ELEMENTS: Tag = Tag(0x0014, 0x4012); // (0014,4012)
/// ElementShape (0014,4013) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ELEMENT_SHAPE: Tag = Tag(0x0014, 0x4013); // (0014,4013)
/// ElementDimensionA (0014,4014) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ELEMENT_DIMENSION_A: Tag = Tag(0x0014, 0x4014); // (0014,4014)
/// ElementDimensionB (0014,4015) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ELEMENT_DIMENSION_B: Tag = Tag(0x0014, 0x4015); // (0014,4015)
/// ElementPitchA (0014,4016) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ELEMENT_PITCH_A: Tag = Tag(0x0014, 0x4016); // (0014,4016)
/// MeasuredBeamDimensionA (0014,4017) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MEASURED_BEAM_DIMENSION_A: Tag = Tag(0x0014, 0x4017); // (0014,4017)
/// MeasuredBeamDimensionB (0014,4018) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MEASURED_BEAM_DIMENSION_B: Tag = Tag(0x0014, 0x4018); // (0014,4018)
/// LocationOfMeasuredBeamDiameter (0014,4019) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const LOCATION_OF_MEASURED_BEAM_DIAMETER: Tag = Tag(0x0014, 0x4019); // (0014,4019)
/// NominalFrequency (0014,401A) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const NOMINAL_FREQUENCY: Tag = Tag(0x0014, 0x401A); // (0014,401A)
/// MeasuredCenterFrequency (0014,401B) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MEASURED_CENTER_FREQUENCY: Tag = Tag(0x0014, 0x401B); // (0014,401B)
/// MeasuredBandwidth (0014,401C) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MEASURED_BANDWIDTH: Tag = Tag(0x0014, 0x401C); // (0014,401C)
/// ElementPitchB (0014,401D) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ELEMENT_PITCH_B: Tag = Tag(0x0014, 0x401D); // (0014,401D)
/// PulserSettingsSequence (0014,4020) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PULSER_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4020); // (0014,4020)
/// PulseWidth (0014,4022) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PULSE_WIDTH: Tag = Tag(0x0014, 0x4022); // (0014,4022)
/// ExcitationFrequency (0014,4024) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const EXCITATION_FREQUENCY: Tag = Tag(0x0014, 0x4024); // (0014,4024)
/// ModulationType (0014,4026) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MODULATION_TYPE: Tag = Tag(0x0014, 0x4026); // (0014,4026)
/// Damping (0014,4028) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DAMPING: Tag = Tag(0x0014, 0x4028); // (0014,4028)
/// ReceiverSettingsSequence (0014,4030) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECEIVER_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4030); // (0014,4030)
/// AcquiredSoundpathLength (0014,4031) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ACQUIRED_SOUNDPATH_LENGTH: Tag = Tag(0x0014, 0x4031); // (0014,4031)
/// AcquisitionCompressionType (0014,4032) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ACQUISITION_COMPRESSION_TYPE: Tag = Tag(0x0014, 0x4032); // (0014,4032)
/// AcquisitionSampleSize (0014,4033) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ACQUISITION_SAMPLE_SIZE: Tag = Tag(0x0014, 0x4033); // (0014,4033)
/// RectifierSmoothing (0014,4034) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECTIFIER_SMOOTHING: Tag = Tag(0x0014, 0x4034); // (0014,4034)
/// DACSequence (0014,4035) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DAC_SEQUENCE: Tag = Tag(0x0014, 0x4035); // (0014,4035)
/// DACType (0014,4036) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DAC_TYPE: Tag = Tag(0x0014, 0x4036); // (0014,4036)
/// DACGainPoints (0014,4038) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const DAC_GAIN_POINTS: Tag = Tag(0x0014, 0x4038); // (0014,4038)
/// DACTimePoints (0014,403A) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const DAC_TIME_POINTS: Tag = Tag(0x0014, 0x403A); // (0014,403A)
/// DACAmplitude (0014,403C) DS 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const DAC_AMPLITUDE: Tag = Tag(0x0014, 0x403C); // (0014,403C)
/// PreAmplifierSettingsSequence (0014,4040) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PRE_AMPLIFIER_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4040); // (0014,4040)
/// TransmitTransducerSettingsSequence (0014,4050) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSMIT_TRANSDUCER_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4050); // (0014,4050)
/// ReceiveTransducerSettingsSequence (0014,4051) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECEIVE_TRANSDUCER_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4051); // (0014,4051)
/// IncidentAngle (0014,4052) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const INCIDENT_ANGLE: Tag = Tag(0x0014, 0x4052); // (0014,4052)
/// CouplingTechnique (0014,4054) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COUPLING_TECHNIQUE: Tag = Tag(0x0014, 0x4054); // (0014,4054)
/// CouplingMedium (0014,4056) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COUPLING_MEDIUM: Tag = Tag(0x0014, 0x4056); // (0014,4056)
/// CouplingVelocity (0014,4057) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const COUPLING_VELOCITY: Tag = Tag(0x0014, 0x4057); // (0014,4057)
/// ProbeCenterLocationX (0014,4058) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_CENTER_LOCATION_X: Tag = Tag(0x0014, 0x4058); // (0014,4058)
/// ProbeCenterLocationZ (0014,4059) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_CENTER_LOCATION_Z: Tag = Tag(0x0014, 0x4059); // (0014,4059)
/// SoundPathLength (0014,405A) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SOUND_PATH_LENGTH: Tag = Tag(0x0014, 0x405A); // (0014,405A)
/// DelayLawIdentifier (0014,405C) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DELAY_LAW_IDENTIFIER: Tag = Tag(0x0014, 0x405C); // (0014,405C)
/// GateSettingsSequence (0014,4060) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const GATE_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4060); // (0014,4060)
/// GateThreshold (0014,4062) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const GATE_THRESHOLD: Tag = Tag(0x0014, 0x4062); // (0014,4062)
/// VelocityOfSound (0014,4064) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const VELOCITY_OF_SOUND: Tag = Tag(0x0014, 0x4064); // (0014,4064)
/// CalibrationSettingsSequence (0014,4070) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CALIBRATION_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4070); // (0014,4070)
/// CalibrationProcedure (0014,4072) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CALIBRATION_PROCEDURE: Tag = Tag(0x0014, 0x4072); // (0014,4072)
/// ProcedureVersion (0014,4074) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROCEDURE_VERSION: Tag = Tag(0x0014, 0x4074); // (0014,4074)
/// ProcedureCreationDate (0014,4076) DA 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROCEDURE_CREATION_DATE: Tag = Tag(0x0014, 0x4076); // (0014,4076)
/// ProcedureExpirationDate (0014,4078) DA 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROCEDURE_EXPIRATION_DATE: Tag = Tag(0x0014, 0x4078); // (0014,4078)
/// ProcedureLastModifiedDate (0014,407A) DA 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROCEDURE_LAST_MODIFIED_DATE: Tag = Tag(0x0014, 0x407A); // (0014,407A)
/// CalibrationTime (0014,407C) TM 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const CALIBRATION_TIME: Tag = Tag(0x0014, 0x407C); // (0014,407C)
/// CalibrationDate (0014,407E) DA 1-n DICOM/DICONDE
#[rustfmt::skip]
pub const CALIBRATION_DATE: Tag = Tag(0x0014, 0x407E); // (0014,407E)
/// ProbeDriveEquipmentSequence (0014,4080) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_DRIVE_EQUIPMENT_SEQUENCE: Tag = Tag(0x0014, 0x4080); // (0014,4080)
/// DriveType (0014,4081) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DRIVE_TYPE: Tag = Tag(0x0014, 0x4081); // (0014,4081)
/// ProbeDriveNotes (0014,4082) LT 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_DRIVE_NOTES: Tag = Tag(0x0014, 0x4082); // (0014,4082)
/// DriveProbeSequence (0014,4083) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const DRIVE_PROBE_SEQUENCE: Tag = Tag(0x0014, 0x4083); // (0014,4083)
/// ProbeInductance (0014,4084) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_INDUCTANCE: Tag = Tag(0x0014, 0x4084); // (0014,4084)
/// ProbeResistance (0014,4085) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_RESISTANCE: Tag = Tag(0x0014, 0x4085); // (0014,4085)
/// ReceiveProbeSequence (0014,4086) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RECEIVE_PROBE_SEQUENCE: Tag = Tag(0x0014, 0x4086); // (0014,4086)
/// ProbeDriveSettingsSequence (0014,4087) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_DRIVE_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4087); // (0014,4087)
/// BridgeResistors (0014,4088) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const BRIDGE_RESISTORS: Tag = Tag(0x0014, 0x4088); // (0014,4088)
/// ProbeOrientationAngle (0014,4089) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const PROBE_ORIENTATION_ANGLE: Tag = Tag(0x0014, 0x4089); // (0014,4089)
/// UserSelectedGainY (0014,408B) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const USER_SELECTED_GAIN_Y: Tag = Tag(0x0014, 0x408B); // (0014,408B)
/// UserSelectedPhase (0014,408C) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const USER_SELECTED_PHASE: Tag = Tag(0x0014, 0x408C); // (0014,408C)
/// UserSelectedOffsetX (0014,408D) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const USER_SELECTED_OFFSET_X: Tag = Tag(0x0014, 0x408D); // (0014,408D)
/// UserSelectedOffsetY (0014,408E) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const USER_SELECTED_OFFSET_Y: Tag = Tag(0x0014, 0x408E); // (0014,408E)
/// ChannelSettingsSequence (0014,4091) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CHANNEL_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x4091); // (0014,4091)
/// ChannelThreshold (0014,4092) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CHANNEL_THRESHOLD: Tag = Tag(0x0014, 0x4092); // (0014,4092)
/// ScannerSettingsSequence (0014,409A) SQ 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SCANNER_SETTINGS_SEQUENCE: Tag = Tag(0x0014, 0x409A); // (0014,409A)
/// ScanProcedure (0014,409B) ST 1 DICOM/DICONDE
#[rustfmt::skip]
pub const SCAN_PROCEDURE: Tag = Tag(0x0014, 0x409B); // (0014,409B)
/// TranslationRateX (0014,409C) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSLATION_RATE_X: Tag = Tag(0x0014, 0x409C); // (0014,409C)
/// TranslationRateY (0014,409D) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TRANSLATION_RATE_Y: Tag = Tag(0x0014, 0x409D); // (0014,409D)
/// ChannelOverlap (0014,409F) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CHANNEL_OVERLAP: Tag = Tag(0x0014, 0x409F); // (0014,409F)
/// ImageQualityIndicatorType (0014,40A0) LO 1 DICOM/DICONDE
#[rustfmt::skip]
pub const IMAGE_QUALITY_INDICATOR_TYPE: Tag = Tag(0x0014, 0x40A0); // (0014,40A0)
/// ImageQualityIndicatorMaterial (0014,40A1) LO 1 DICOM/DICONDE
#[rustfmt::skip]
pub const IMAGE_QUALITY_INDICATOR_MATERIAL: Tag = Tag(0x0014, 0x40A1); // (0014,40A1)
/// ImageQualityIndicatorSize (0014,40A2) LO 1 DICOM/DICONDE
#[rustfmt::skip]
pub const IMAGE_QUALITY_INDICATOR_SIZE: Tag = Tag(0x0014, 0x40A2); // (0014,40A2)
/// LINACEnergy (0014,5002) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const LINAC_ENERGY: Tag = Tag(0x0014, 0x5002); // (0014,5002)
/// LINACOutput (0014,5004) IS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const LINAC_OUTPUT: Tag = Tag(0x0014, 0x5004); // (0014,5004)
/// ActiveAperture (0014,5100) US 1 DICOM/DICONDE
#[rustfmt::skip]
pub const ACTIVE_APERTURE: Tag = Tag(0x0014, 0x5100); // (0014,5100)
/// TotalAperture (0014,5101) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const TOTAL_APERTURE: Tag = Tag(0x0014, 0x5101); // (0014,5101)
/// ApertureElevation (0014,5102) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const APERTURE_ELEVATION: Tag = Tag(0x0014, 0x5102); // (0014,5102)
/// MainLobeAngle (0014,5103) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MAIN_LOBE_ANGLE: Tag = Tag(0x0014, 0x5103); // (0014,5103)
/// MainRoofAngle (0014,5104) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const MAIN_ROOF_ANGLE: Tag = Tag(0x0014, 0x5104); // (0014,5104)
/// ConnectorType (0014,5105) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const CONNECTOR_TYPE: Tag = Tag(0x0014, 0x5105); // (0014,5105)
/// WedgeModelNumber (0014,5106) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_MODEL_NUMBER: Tag = Tag(0x0014, 0x5106); // (0014,5106)
/// WedgeAngleFloat (0014,5107) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_ANGLE_FLOAT: Tag = Tag(0x0014, 0x5107); // (0014,5107)
/// WedgeRoofAngle (0014,5108) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_ROOF_ANGLE: Tag = Tag(0x0014, 0x5108); // (0014,5108)
/// WedgeElement1Position (0014,5109) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_ELEMENT1_POSITION: Tag = Tag(0x0014, 0x5109); // (0014,5109)
/// WedgeMaterialVelocity (0014,510A) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_MATERIAL_VELOCITY: Tag = Tag(0x0014, 0x510A); // (0014,510A)
/// WedgeMaterial (0014,510B) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_MATERIAL: Tag = Tag(0x0014, 0x510B); // (0014,510B)
/// WedgeOffsetZ (0014,510C) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_OFFSET_Z: Tag = Tag(0x0014, 0x510C); // (0014,510C)
/// WedgeOriginOffsetX (0014,510D) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_ORIGIN_OFFSET_X: Tag = Tag(0x0014, 0x510D); // (0014,510D)
/// WedgeTimeDelay (0014,510E) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_TIME_DELAY: Tag = Tag(0x0014, 0x510E); // (0014,510E)
/// WedgeName (0014,510F) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_NAME: Tag = Tag(0x0014, 0x510F); // (0014,510F)
/// WedgeManufacturerName (0014,5110) SH 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_MANUFACTURER_NAME: Tag = Tag(0x0014, 0x5110); // (0014,5110)
/// WedgeDescription (0014,5111) LO 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_DESCRIPTION: Tag = Tag(0x0014, 0x5111); // (0014,5111)
/// NominalBeamAngle (0014,5112) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const NOMINAL_BEAM_ANGLE: Tag = Tag(0x0014, 0x5112); // (0014,5112)
/// WedgeOffsetX (0014,5113) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_OFFSET_X: Tag = Tag(0x0014, 0x5113); // (0014,5113)
/// WedgeOffsetY (0014,5114) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_OFFSET_Y: Tag = Tag(0x0014, 0x5114); // (0014,5114)
/// WedgeTotalLength (0014,5115) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_TOTAL_LENGTH: Tag = Tag(0x0014, 0x5115); // (0014,5115)
/// WedgeInContactLength (0014,5116) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_IN_CONTACT_LENGTH: Tag = Tag(0x0014, 0x5116); // (0014,5116)
/// WedgeFrontGap (0014,5117) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_FRONT_GAP: Tag = Tag(0x0014, 0x5117); // (0014,5117)
/// WedgeTotalHeight (0014,5118) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_TOTAL_HEIGHT: Tag = Tag(0x0014, 0x5118); // (0014,5118)
/// WedgeFrontHeight (0014,5119) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_FRONT_HEIGHT: Tag = Tag(0x0014, 0x5119); // (0014,5119)
/// WedgeRearHeight (0014,511A) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_REAR_HEIGHT: Tag = Tag(0x0014, 0x511A); // (0014,511A)
/// WedgeTotalWidth (0014,511B) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_TOTAL_WIDTH: Tag = Tag(0x0014, 0x511B); // (0014,511B)
/// WedgeInContactWidth (0014,511C) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_IN_CONTACT_WIDTH: Tag = Tag(0x0014, 0x511C); // (0014,511C)
/// WedgeChamferHeight (0014,511D) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_CHAMFER_HEIGHT: Tag = Tag(0x0014, 0x511D); // (0014,511D)
/// WedgeCurve (0014,511E) CS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const WEDGE_CURVE: Tag = Tag(0x0014, 0x511E); // (0014,511E)
/// RadiusAlongWedge (0014,511F) DS 1 DICOM/DICONDE
#[rustfmt::skip]
pub const RADIUS_ALONG_WEDGE: Tag = Tag(0x0014, 0x511F); // (0014,511F)
/// ContrastBolusAgent (0018,0010) LO 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_AGENT: Tag = Tag(0x0018, 0x0010); // (0018,0010)
/// ContrastBolusAgentSequence (0018,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_AGENT_SEQUENCE: Tag = Tag(0x0018, 0x0012); // (0018,0012)
/// ContrastBolusT1Relaxivity (0018,0013) FL 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_T1_RELAXIVITY: Tag = Tag(0x0018, 0x0013); // (0018,0013)
/// ContrastBolusAdministrationRouteSequence (0018,0014) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE: Tag = Tag(0x0018, 0x0014); // (0018,0014)
/// BodyPartExamined (0018,0015) CS 1 DICOM
#[rustfmt::skip]
pub const BODY_PART_EXAMINED: Tag = Tag(0x0018, 0x0015); // (0018,0015)
/// ScanningSequence (0018,0020) CS 1-n DICOM
#[rustfmt::skip]
pub const SCANNING_SEQUENCE: Tag = Tag(0x0018, 0x0020); // (0018,0020)
/// SequenceVariant (0018,0021) CS 1-n DICOM
#[rustfmt::skip]
pub const SEQUENCE_VARIANT: Tag = Tag(0x0018, 0x0021); // (0018,0021)
/// ScanOptions (0018,0022) CS 1-n DICOM
#[rustfmt::skip]
pub const SCAN_OPTIONS: Tag = Tag(0x0018, 0x0022); // (0018,0022)
/// MRAcquisitionType (0018,0023) CS 1 DICOM
#[rustfmt::skip]
pub const MR_ACQUISITION_TYPE: Tag = Tag(0x0018, 0x0023); // (0018,0023)
/// SequenceName (0018,0024) SH 1 DICOM
#[rustfmt::skip]
pub const SEQUENCE_NAME: Tag = Tag(0x0018, 0x0024); // (0018,0024)
/// AngioFlag (0018,0025) CS 1 DICOM
#[rustfmt::skip]
pub const ANGIO_FLAG: Tag = Tag(0x0018, 0x0025); // (0018,0025)
/// InterventionDrugInformationSequence (0018,0026) SQ 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DRUG_INFORMATION_SEQUENCE: Tag = Tag(0x0018, 0x0026); // (0018,0026)
/// InterventionDrugStopTime (0018,0027) TM 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DRUG_STOP_TIME: Tag = Tag(0x0018, 0x0027); // (0018,0027)
/// InterventionDrugDose (0018,0028) DS 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DRUG_DOSE: Tag = Tag(0x0018, 0x0028); // (0018,0028)
/// InterventionDrugCodeSequence (0018,0029) SQ 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DRUG_CODE_SEQUENCE: Tag = Tag(0x0018, 0x0029); // (0018,0029)
/// AdditionalDrugSequence (0018,002A) SQ 1 DICOM
#[rustfmt::skip]
pub const ADDITIONAL_DRUG_SEQUENCE: Tag = Tag(0x0018, 0x002A); // (0018,002A)
/// Radiopharmaceutical (0018,0031) LO 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL: Tag = Tag(0x0018, 0x0031); // (0018,0031)
/// InterventionDrugName (0018,0034) LO 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DRUG_NAME: Tag = Tag(0x0018, 0x0034); // (0018,0034)
/// InterventionDrugStartTime (0018,0035) TM 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DRUG_START_TIME: Tag = Tag(0x0018, 0x0035); // (0018,0035)
/// InterventionSequence (0018,0036) SQ 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_SEQUENCE: Tag = Tag(0x0018, 0x0036); // (0018,0036)
/// InterventionStatus (0018,0038) CS 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_STATUS: Tag = Tag(0x0018, 0x0038); // (0018,0038)
/// InterventionDescription (0018,003A) ST 1 DICOM
#[rustfmt::skip]
pub const INTERVENTION_DESCRIPTION: Tag = Tag(0x0018, 0x003A); // (0018,003A)
/// CineRate (0018,0040) IS 1 DICOM
#[rustfmt::skip]
pub const CINE_RATE: Tag = Tag(0x0018, 0x0040); // (0018,0040)
/// InitialCineRunState (0018,0042) CS 1 DICOM
#[rustfmt::skip]
pub const INITIAL_CINE_RUN_STATE: Tag = Tag(0x0018, 0x0042); // (0018,0042)
/// SliceThickness (0018,0050) DS 1 DICOM
#[rustfmt::skip]
pub const SLICE_THICKNESS: Tag = Tag(0x0018, 0x0050); // (0018,0050)
/// KVP (0018,0060) DS 1 DICOM
#[rustfmt::skip]
pub const KVP: Tag = Tag(0x0018, 0x0060); // (0018,0060)
/// CountsAccumulated (0018,0070) IS 1 DICOM
#[rustfmt::skip]
pub const COUNTS_ACCUMULATED: Tag = Tag(0x0018, 0x0070); // (0018,0070)
/// AcquisitionTerminationCondition (0018,0071) CS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_TERMINATION_CONDITION: Tag = Tag(0x0018, 0x0071); // (0018,0071)
/// EffectiveDuration (0018,0072) DS 1 DICOM
#[rustfmt::skip]
pub const EFFECTIVE_DURATION: Tag = Tag(0x0018, 0x0072); // (0018,0072)
/// AcquisitionStartCondition (0018,0073) CS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_START_CONDITION: Tag = Tag(0x0018, 0x0073); // (0018,0073)
/// AcquisitionStartConditionData (0018,0074) IS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_START_CONDITION_DATA: Tag = Tag(0x0018, 0x0074); // (0018,0074)
/// AcquisitionTerminationConditionData (0018,0075) IS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_TERMINATION_CONDITION_DATA: Tag = Tag(0x0018, 0x0075); // (0018,0075)
/// RepetitionTime (0018,0080) DS 1 DICOM
#[rustfmt::skip]
pub const REPETITION_TIME: Tag = Tag(0x0018, 0x0080); // (0018,0080)
/// EchoTime (0018,0081) DS 1 DICOM
#[rustfmt::skip]
pub const ECHO_TIME: Tag = Tag(0x0018, 0x0081); // (0018,0081)
/// InversionTime (0018,0082) DS 1 DICOM
#[rustfmt::skip]
pub const INVERSION_TIME: Tag = Tag(0x0018, 0x0082); // (0018,0082)
/// NumberOfAverages (0018,0083) DS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_AVERAGES: Tag = Tag(0x0018, 0x0083); // (0018,0083)
/// ImagingFrequency (0018,0084) DS 1 DICOM
#[rustfmt::skip]
pub const IMAGING_FREQUENCY: Tag = Tag(0x0018, 0x0084); // (0018,0084)
/// ImagedNucleus (0018,0085) SH 1 DICOM
#[rustfmt::skip]
pub const IMAGED_NUCLEUS: Tag = Tag(0x0018, 0x0085); // (0018,0085)
/// EchoNumbers (0018,0086) IS 1-n DICOM
#[rustfmt::skip]
pub const ECHO_NUMBERS: Tag = Tag(0x0018, 0x0086); // (0018,0086)
/// MagneticFieldStrength (0018,0087) DS 1 DICOM
#[rustfmt::skip]
pub const MAGNETIC_FIELD_STRENGTH: Tag = Tag(0x0018, 0x0087); // (0018,0087)
/// SpacingBetweenSlices (0018,0088) DS 1 DICOM
#[rustfmt::skip]
pub const SPACING_BETWEEN_SLICES: Tag = Tag(0x0018, 0x0088); // (0018,0088)
/// NumberOfPhaseEncodingSteps (0018,0089) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PHASE_ENCODING_STEPS: Tag = Tag(0x0018, 0x0089); // (0018,0089)
/// DataCollectionDiameter (0018,0090) DS 1 DICOM
#[rustfmt::skip]
pub const DATA_COLLECTION_DIAMETER: Tag = Tag(0x0018, 0x0090); // (0018,0090)
/// EchoTrainLength (0018,0091) IS 1 DICOM
#[rustfmt::skip]
pub const ECHO_TRAIN_LENGTH: Tag = Tag(0x0018, 0x0091); // (0018,0091)
/// PercentSampling (0018,0093) DS 1 DICOM
#[rustfmt::skip]
pub const PERCENT_SAMPLING: Tag = Tag(0x0018, 0x0093); // (0018,0093)
/// PercentPhaseFieldOfView (0018,0094) DS 1 DICOM
#[rustfmt::skip]
pub const PERCENT_PHASE_FIELD_OF_VIEW: Tag = Tag(0x0018, 0x0094); // (0018,0094)
/// PixelBandwidth (0018,0095) DS 1 DICOM
#[rustfmt::skip]
pub const PIXEL_BANDWIDTH: Tag = Tag(0x0018, 0x0095); // (0018,0095)
/// DeviceSerialNumber (0018,1000) LO 1 DICOM
#[rustfmt::skip]
pub const DEVICE_SERIAL_NUMBER: Tag = Tag(0x0018, 0x1000); // (0018,1000)
/// DeviceUID (0018,1002) UI 1 DICOM
#[rustfmt::skip]
pub const DEVICE_UID: Tag = Tag(0x0018, 0x1002); // (0018,1002)
/// DeviceID (0018,1003) LO 1 DICOM
#[rustfmt::skip]
pub const DEVICE_ID: Tag = Tag(0x0018, 0x1003); // (0018,1003)
/// PlateID (0018,1004) LO 1 DICOM
#[rustfmt::skip]
pub const PLATE_ID: Tag = Tag(0x0018, 0x1004); // (0018,1004)
/// GeneratorID (0018,1005) LO 1 DICOM
#[rustfmt::skip]
pub const GENERATOR_ID: Tag = Tag(0x0018, 0x1005); // (0018,1005)
/// GridID (0018,1006) LO 1 DICOM
#[rustfmt::skip]
pub const GRID_ID: Tag = Tag(0x0018, 0x1006); // (0018,1006)
/// CassetteID (0018,1007) LO 1 DICOM
#[rustfmt::skip]
pub const CASSETTE_ID: Tag = Tag(0x0018, 0x1007); // (0018,1007)
/// GantryID (0018,1008) LO 1 DICOM
#[rustfmt::skip]
pub const GANTRY_ID: Tag = Tag(0x0018, 0x1008); // (0018,1008)
/// UniqueDeviceIdentifier (0018,1009) UT 1 DICOM
#[rustfmt::skip]
pub const UNIQUE_DEVICE_IDENTIFIER: Tag = Tag(0x0018, 0x1009); // (0018,1009)
/// UDISequence (0018,100A) SQ 1 DICOM
#[rustfmt::skip]
pub const UDI_SEQUENCE: Tag = Tag(0x0018, 0x100A); // (0018,100A)
/// SecondaryCaptureDeviceID (0018,1010) LO 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_CAPTURE_DEVICE_ID: Tag = Tag(0x0018, 0x1010); // (0018,1010)
/// DateOfSecondaryCapture (0018,1012) DA 1 DICOM
#[rustfmt::skip]
pub const DATE_OF_SECONDARY_CAPTURE: Tag = Tag(0x0018, 0x1012); // (0018,1012)
/// TimeOfSecondaryCapture (0018,1014) TM 1 DICOM
#[rustfmt::skip]
pub const TIME_OF_SECONDARY_CAPTURE: Tag = Tag(0x0018, 0x1014); // (0018,1014)
/// SecondaryCaptureDeviceManufacturer (0018,1016) LO 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_CAPTURE_DEVICE_MANUFACTURER: Tag = Tag(0x0018, 0x1016); // (0018,1016)
/// SecondaryCaptureDeviceManufacturerModelName (0018,1018) LO 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME: Tag = Tag(0x0018, 0x1018); // (0018,1018)
/// SecondaryCaptureDeviceSoftwareVersions (0018,1019) LO 1-n DICOM
#[rustfmt::skip]
pub const SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS: Tag = Tag(0x0018, 0x1019); // (0018,1019)
/// SoftwareVersions (0018,1020) LO 1-n DICOM
#[rustfmt::skip]
pub const SOFTWARE_VERSIONS: Tag = Tag(0x0018, 0x1020); // (0018,1020)
/// VideoImageFormatAcquired (0018,1022) SH 1 DICOM
#[rustfmt::skip]
pub const VIDEO_IMAGE_FORMAT_ACQUIRED: Tag = Tag(0x0018, 0x1022); // (0018,1022)
/// DigitalImageFormatAcquired (0018,1023) LO 1 DICOM
#[rustfmt::skip]
pub const DIGITAL_IMAGE_FORMAT_ACQUIRED: Tag = Tag(0x0018, 0x1023); // (0018,1023)
/// ProtocolName (0018,1030) LO 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_NAME: Tag = Tag(0x0018, 0x1030); // (0018,1030)
/// ContrastBolusRoute (0018,1040) LO 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_ROUTE: Tag = Tag(0x0018, 0x1040); // (0018,1040)
/// ContrastBolusVolume (0018,1041) DS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_VOLUME: Tag = Tag(0x0018, 0x1041); // (0018,1041)
/// ContrastBolusStartTime (0018,1042) TM 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_START_TIME: Tag = Tag(0x0018, 0x1042); // (0018,1042)
/// ContrastBolusStopTime (0018,1043) TM 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_STOP_TIME: Tag = Tag(0x0018, 0x1043); // (0018,1043)
/// ContrastBolusTotalDose (0018,1044) DS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_TOTAL_DOSE: Tag = Tag(0x0018, 0x1044); // (0018,1044)
/// SyringeCounts (0018,1045) IS 1 DICOM
#[rustfmt::skip]
pub const SYRINGE_COUNTS: Tag = Tag(0x0018, 0x1045); // (0018,1045)
/// ContrastFlowRate (0018,1046) DS 1-n DICOM
#[rustfmt::skip]
pub const CONTRAST_FLOW_RATE: Tag = Tag(0x0018, 0x1046); // (0018,1046)
/// ContrastFlowDuration (0018,1047) DS 1-n DICOM
#[rustfmt::skip]
pub const CONTRAST_FLOW_DURATION: Tag = Tag(0x0018, 0x1047); // (0018,1047)
/// ContrastBolusIngredient (0018,1048) CS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_INGREDIENT: Tag = Tag(0x0018, 0x1048); // (0018,1048)
/// ContrastBolusIngredientConcentration (0018,1049) DS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_INGREDIENT_CONCENTRATION: Tag = Tag(0x0018, 0x1049); // (0018,1049)
/// SpatialResolution (0018,1050) DS 1 DICOM
#[rustfmt::skip]
pub const SPATIAL_RESOLUTION: Tag = Tag(0x0018, 0x1050); // (0018,1050)
/// TriggerTime (0018,1060) DS 1 DICOM
#[rustfmt::skip]
pub const TRIGGER_TIME: Tag = Tag(0x0018, 0x1060); // (0018,1060)
/// TriggerSourceOrType (0018,1061) LO 1 DICOM
#[rustfmt::skip]
pub const TRIGGER_SOURCE_OR_TYPE: Tag = Tag(0x0018, 0x1061); // (0018,1061)
/// NominalInterval (0018,1062) IS 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_INTERVAL: Tag = Tag(0x0018, 0x1062); // (0018,1062)
/// FrameTime (0018,1063) DS 1 DICOM
#[rustfmt::skip]
pub const FRAME_TIME: Tag = Tag(0x0018, 0x1063); // (0018,1063)
/// CardiacFramingType (0018,1064) LO 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_FRAMING_TYPE: Tag = Tag(0x0018, 0x1064); // (0018,1064)
/// FrameTimeVector (0018,1065) DS 1-n DICOM
#[rustfmt::skip]
pub const FRAME_TIME_VECTOR: Tag = Tag(0x0018, 0x1065); // (0018,1065)
/// FrameDelay (0018,1066) DS 1 DICOM
#[rustfmt::skip]
pub const FRAME_DELAY: Tag = Tag(0x0018, 0x1066); // (0018,1066)
/// ImageTriggerDelay (0018,1067) DS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_TRIGGER_DELAY: Tag = Tag(0x0018, 0x1067); // (0018,1067)
/// MultiplexGroupTimeOffset (0018,1068) DS 1 DICOM
#[rustfmt::skip]
pub const MULTIPLEX_GROUP_TIME_OFFSET: Tag = Tag(0x0018, 0x1068); // (0018,1068)
/// TriggerTimeOffset (0018,1069) DS 1 DICOM
#[rustfmt::skip]
pub const TRIGGER_TIME_OFFSET: Tag = Tag(0x0018, 0x1069); // (0018,1069)
/// SynchronizationTrigger (0018,106A) CS 1 DICOM
#[rustfmt::skip]
pub const SYNCHRONIZATION_TRIGGER: Tag = Tag(0x0018, 0x106A); // (0018,106A)
/// SynchronizationChannel (0018,106C) US 2 DICOM
#[rustfmt::skip]
pub const SYNCHRONIZATION_CHANNEL: Tag = Tag(0x0018, 0x106C); // (0018,106C)
/// TriggerSamplePosition (0018,106E) UL 1 DICOM
#[rustfmt::skip]
pub const TRIGGER_SAMPLE_POSITION: Tag = Tag(0x0018, 0x106E); // (0018,106E)
/// RadiopharmaceuticalRoute (0018,1070) LO 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_ROUTE: Tag = Tag(0x0018, 0x1070); // (0018,1070)
/// RadiopharmaceuticalVolume (0018,1071) DS 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_VOLUME: Tag = Tag(0x0018, 0x1071); // (0018,1071)
/// RadiopharmaceuticalStartTime (0018,1072) TM 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_START_TIME: Tag = Tag(0x0018, 0x1072); // (0018,1072)
/// RadiopharmaceuticalStopTime (0018,1073) TM 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_STOP_TIME: Tag = Tag(0x0018, 0x1073); // (0018,1073)
/// RadionuclideTotalDose (0018,1074) DS 1 DICOM
#[rustfmt::skip]
pub const RADIONUCLIDE_TOTAL_DOSE: Tag = Tag(0x0018, 0x1074); // (0018,1074)
/// RadionuclideHalfLife (0018,1075) DS 1 DICOM
#[rustfmt::skip]
pub const RADIONUCLIDE_HALF_LIFE: Tag = Tag(0x0018, 0x1075); // (0018,1075)
/// RadionuclidePositronFraction (0018,1076) DS 1 DICOM
#[rustfmt::skip]
pub const RADIONUCLIDE_POSITRON_FRACTION: Tag = Tag(0x0018, 0x1076); // (0018,1076)
/// RadiopharmaceuticalSpecificActivity (0018,1077) DS 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY: Tag = Tag(0x0018, 0x1077); // (0018,1077)
/// RadiopharmaceuticalStartDateTime (0018,1078) DT 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_START_DATE_TIME: Tag = Tag(0x0018, 0x1078); // (0018,1078)
/// RadiopharmaceuticalStopDateTime (0018,1079) DT 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_STOP_DATE_TIME: Tag = Tag(0x0018, 0x1079); // (0018,1079)
/// BeatRejectionFlag (0018,1080) CS 1 DICOM
#[rustfmt::skip]
pub const BEAT_REJECTION_FLAG: Tag = Tag(0x0018, 0x1080); // (0018,1080)
/// LowRRValue (0018,1081) IS 1 DICOM
#[rustfmt::skip]
pub const LOW_RR_VALUE: Tag = Tag(0x0018, 0x1081); // (0018,1081)
/// HighRRValue (0018,1082) IS 1 DICOM
#[rustfmt::skip]
pub const HIGH_RR_VALUE: Tag = Tag(0x0018, 0x1082); // (0018,1082)
/// IntervalsAcquired (0018,1083) IS 1 DICOM
#[rustfmt::skip]
pub const INTERVALS_ACQUIRED: Tag = Tag(0x0018, 0x1083); // (0018,1083)
/// IntervalsRejected (0018,1084) IS 1 DICOM
#[rustfmt::skip]
pub const INTERVALS_REJECTED: Tag = Tag(0x0018, 0x1084); // (0018,1084)
/// PVCRejection (0018,1085) LO 1 DICOM
#[rustfmt::skip]
pub const PVC_REJECTION: Tag = Tag(0x0018, 0x1085); // (0018,1085)
/// SkipBeats (0018,1086) IS 1 DICOM
#[rustfmt::skip]
pub const SKIP_BEATS: Tag = Tag(0x0018, 0x1086); // (0018,1086)
/// HeartRate (0018,1088) IS 1 DICOM
#[rustfmt::skip]
pub const HEART_RATE: Tag = Tag(0x0018, 0x1088); // (0018,1088)
/// CardiacNumberOfImages (0018,1090) IS 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_NUMBER_OF_IMAGES: Tag = Tag(0x0018, 0x1090); // (0018,1090)
/// TriggerWindow (0018,1094) IS 1 DICOM
#[rustfmt::skip]
pub const TRIGGER_WINDOW: Tag = Tag(0x0018, 0x1094); // (0018,1094)
/// ReconstructionDiameter (0018,1100) DS 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_DIAMETER: Tag = Tag(0x0018, 0x1100); // (0018,1100)
/// DistanceSourceToDetector (0018,1110) DS 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_SOURCE_TO_DETECTOR: Tag = Tag(0x0018, 0x1110); // (0018,1110)
/// DistanceSourceToPatient (0018,1111) DS 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_SOURCE_TO_PATIENT: Tag = Tag(0x0018, 0x1111); // (0018,1111)
/// EstimatedRadiographicMagnificationFactor (0018,1114) DS 1 DICOM
#[rustfmt::skip]
pub const ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR: Tag = Tag(0x0018, 0x1114); // (0018,1114)
/// GantryDetectorTilt (0018,1120) DS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_DETECTOR_TILT: Tag = Tag(0x0018, 0x1120); // (0018,1120)
/// GantryDetectorSlew (0018,1121) DS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_DETECTOR_SLEW: Tag = Tag(0x0018, 0x1121); // (0018,1121)
/// TableHeight (0018,1130) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_HEIGHT: Tag = Tag(0x0018, 0x1130); // (0018,1130)
/// TableTraverse (0018,1131) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TRAVERSE: Tag = Tag(0x0018, 0x1131); // (0018,1131)
/// TableMotion (0018,1134) CS 1 DICOM
#[rustfmt::skip]
pub const TABLE_MOTION: Tag = Tag(0x0018, 0x1134); // (0018,1134)
/// TableVerticalIncrement (0018,1135) DS 1-n DICOM
#[rustfmt::skip]
pub const TABLE_VERTICAL_INCREMENT: Tag = Tag(0x0018, 0x1135); // (0018,1135)
/// TableLateralIncrement (0018,1136) DS 1-n DICOM
#[rustfmt::skip]
pub const TABLE_LATERAL_INCREMENT: Tag = Tag(0x0018, 0x1136); // (0018,1136)
/// TableLongitudinalIncrement (0018,1137) DS 1-n DICOM
#[rustfmt::skip]
pub const TABLE_LONGITUDINAL_INCREMENT: Tag = Tag(0x0018, 0x1137); // (0018,1137)
/// TableAngle (0018,1138) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_ANGLE: Tag = Tag(0x0018, 0x1138); // (0018,1138)
/// TableType (0018,113A) CS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TYPE: Tag = Tag(0x0018, 0x113A); // (0018,113A)
/// RotationDirection (0018,1140) CS 1 DICOM
#[rustfmt::skip]
pub const ROTATION_DIRECTION: Tag = Tag(0x0018, 0x1140); // (0018,1140)
/// RadialPosition (0018,1142) DS 1-n DICOM
#[rustfmt::skip]
pub const RADIAL_POSITION: Tag = Tag(0x0018, 0x1142); // (0018,1142)
/// ScanArc (0018,1143) DS 1 DICOM
#[rustfmt::skip]
pub const SCAN_ARC: Tag = Tag(0x0018, 0x1143); // (0018,1143)
/// AngularStep (0018,1144) DS 1 DICOM
#[rustfmt::skip]
pub const ANGULAR_STEP: Tag = Tag(0x0018, 0x1144); // (0018,1144)
/// CenterOfRotationOffset (0018,1145) DS 1 DICOM
#[rustfmt::skip]
pub const CENTER_OF_ROTATION_OFFSET: Tag = Tag(0x0018, 0x1145); // (0018,1145)
/// FieldOfViewShape (0018,1147) CS 1 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_SHAPE: Tag = Tag(0x0018, 0x1147); // (0018,1147)
/// FieldOfViewDimensions (0018,1149) IS 1-2 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_DIMENSIONS: Tag = Tag(0x0018, 0x1149); // (0018,1149)
/// ExposureTime (0018,1150) IS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_TIME: Tag = Tag(0x0018, 0x1150); // (0018,1150)
/// XRayTubeCurrent (0018,1151) IS 1 DICOM
#[rustfmt::skip]
pub const X_RAY_TUBE_CURRENT: Tag = Tag(0x0018, 0x1151); // (0018,1151)
/// Exposure (0018,1152) IS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE: Tag = Tag(0x0018, 0x1152); // (0018,1152)
/// ExposureInuAs (0018,1153) IS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_INU_AS: Tag = Tag(0x0018, 0x1153); // (0018,1153)
/// AveragePulseWidth (0018,1154) DS 1 DICOM
#[rustfmt::skip]
pub const AVERAGE_PULSE_WIDTH: Tag = Tag(0x0018, 0x1154); // (0018,1154)
/// RadiationSetting (0018,1155) CS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_SETTING: Tag = Tag(0x0018, 0x1155); // (0018,1155)
/// RectificationType (0018,1156) CS 1 DICOM
#[rustfmt::skip]
pub const RECTIFICATION_TYPE: Tag = Tag(0x0018, 0x1156); // (0018,1156)
/// RadiationMode (0018,115A) CS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_MODE: Tag = Tag(0x0018, 0x115A); // (0018,115A)
/// ImageAndFluoroscopyAreaDoseProduct (0018,115E) DS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT: Tag = Tag(0x0018, 0x115E); // (0018,115E)
/// FilterType (0018,1160) SH 1 DICOM
#[rustfmt::skip]
pub const FILTER_TYPE: Tag = Tag(0x0018, 0x1160); // (0018,1160)
/// TypeOfFilters (0018,1161) LO 1-n DICOM
#[rustfmt::skip]
pub const TYPE_OF_FILTERS: Tag = Tag(0x0018, 0x1161); // (0018,1161)
/// IntensifierSize (0018,1162) DS 1 DICOM
#[rustfmt::skip]
pub const INTENSIFIER_SIZE: Tag = Tag(0x0018, 0x1162); // (0018,1162)
/// ImagerPixelSpacing (0018,1164) DS 2 DICOM
#[rustfmt::skip]
pub const IMAGER_PIXEL_SPACING: Tag = Tag(0x0018, 0x1164); // (0018,1164)
/// Grid (0018,1166) CS 1-n DICOM
#[rustfmt::skip]
pub const GRID: Tag = Tag(0x0018, 0x1166); // (0018,1166)
/// GeneratorPower (0018,1170) IS 1 DICOM
#[rustfmt::skip]
pub const GENERATOR_POWER: Tag = Tag(0x0018, 0x1170); // (0018,1170)
/// CollimatorGridName (0018,1180) SH 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_GRID_NAME: Tag = Tag(0x0018, 0x1180); // (0018,1180)
/// CollimatorType (0018,1181) CS 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_TYPE: Tag = Tag(0x0018, 0x1181); // (0018,1181)
/// FocalDistance (0018,1182) IS 1-2 DICOM
#[rustfmt::skip]
pub const FOCAL_DISTANCE: Tag = Tag(0x0018, 0x1182); // (0018,1182)
/// XFocusCenter (0018,1183) DS 1-2 DICOM
#[rustfmt::skip]
pub const X_FOCUS_CENTER: Tag = Tag(0x0018, 0x1183); // (0018,1183)
/// YFocusCenter (0018,1184) DS 1-2 DICOM
#[rustfmt::skip]
pub const Y_FOCUS_CENTER: Tag = Tag(0x0018, 0x1184); // (0018,1184)
/// FocalSpots (0018,1190) DS 1-n DICOM
#[rustfmt::skip]
pub const FOCAL_SPOTS: Tag = Tag(0x0018, 0x1190); // (0018,1190)
/// AnodeTargetMaterial (0018,1191) CS 1 DICOM
#[rustfmt::skip]
pub const ANODE_TARGET_MATERIAL: Tag = Tag(0x0018, 0x1191); // (0018,1191)
/// BodyPartThickness (0018,11A0) DS 1 DICOM
#[rustfmt::skip]
pub const BODY_PART_THICKNESS: Tag = Tag(0x0018, 0x11A0); // (0018,11A0)
/// CompressionForce (0018,11A2) DS 1 DICOM
#[rustfmt::skip]
pub const COMPRESSION_FORCE: Tag = Tag(0x0018, 0x11A2); // (0018,11A2)
/// CompressionPressure (0018,11A3) DS 1 DICOM
#[rustfmt::skip]
pub const COMPRESSION_PRESSURE: Tag = Tag(0x0018, 0x11A3); // (0018,11A3)
/// PaddleDescription (0018,11A4) LO 1 DICOM
#[rustfmt::skip]
pub const PADDLE_DESCRIPTION: Tag = Tag(0x0018, 0x11A4); // (0018,11A4)
/// CompressionContactArea (0018,11A5) DS 1 DICOM
#[rustfmt::skip]
pub const COMPRESSION_CONTACT_AREA: Tag = Tag(0x0018, 0x11A5); // (0018,11A5)
/// DateOfLastCalibration (0018,1200) DA 1-n DICOM
#[rustfmt::skip]
pub const DATE_OF_LAST_CALIBRATION: Tag = Tag(0x0018, 0x1200); // (0018,1200)
/// TimeOfLastCalibration (0018,1201) TM 1-n DICOM
#[rustfmt::skip]
pub const TIME_OF_LAST_CALIBRATION: Tag = Tag(0x0018, 0x1201); // (0018,1201)
/// DateTimeOfLastCalibration (0018,1202) DT 1 DICOM
#[rustfmt::skip]
pub const DATE_TIME_OF_LAST_CALIBRATION: Tag = Tag(0x0018, 0x1202); // (0018,1202)
/// ConvolutionKernel (0018,1210) SH 1-n DICOM
#[rustfmt::skip]
pub const CONVOLUTION_KERNEL: Tag = Tag(0x0018, 0x1210); // (0018,1210)
/// ActualFrameDuration (0018,1242) IS 1 DICOM
#[rustfmt::skip]
pub const ACTUAL_FRAME_DURATION: Tag = Tag(0x0018, 0x1242); // (0018,1242)
/// CountRate (0018,1243) IS 1 DICOM
#[rustfmt::skip]
pub const COUNT_RATE: Tag = Tag(0x0018, 0x1243); // (0018,1243)
/// PreferredPlaybackSequencing (0018,1244) US 1 DICOM
#[rustfmt::skip]
pub const PREFERRED_PLAYBACK_SEQUENCING: Tag = Tag(0x0018, 0x1244); // (0018,1244)
/// ReceiveCoilName (0018,1250) SH 1 DICOM
#[rustfmt::skip]
pub const RECEIVE_COIL_NAME: Tag = Tag(0x0018, 0x1250); // (0018,1250)
/// TransmitCoilName (0018,1251) SH 1 DICOM
#[rustfmt::skip]
pub const TRANSMIT_COIL_NAME: Tag = Tag(0x0018, 0x1251); // (0018,1251)
/// PlateType (0018,1260) SH 1 DICOM
#[rustfmt::skip]
pub const PLATE_TYPE: Tag = Tag(0x0018, 0x1260); // (0018,1260)
/// PhosphorType (0018,1261) LO 1 DICOM
#[rustfmt::skip]
pub const PHOSPHOR_TYPE: Tag = Tag(0x0018, 0x1261); // (0018,1261)
/// WaterEquivalentDiameter (0018,1271) FD 1 DICOM
#[rustfmt::skip]
pub const WATER_EQUIVALENT_DIAMETER: Tag = Tag(0x0018, 0x1271); // (0018,1271)
/// WaterEquivalentDiameterCalculationMethodCodeSequence (0018,1272) SQ 1 DICOM
#[rustfmt::skip]
pub const WATER_EQUIVALENT_DIAMETER_CALCULATION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0018, 0x1272); // (0018,1272)
/// ScanVelocity (0018,1300) DS 1 DICOM
#[rustfmt::skip]
pub const SCAN_VELOCITY: Tag = Tag(0x0018, 0x1300); // (0018,1300)
/// WholeBodyTechnique (0018,1301) CS 1-n DICOM
#[rustfmt::skip]
pub const WHOLE_BODY_TECHNIQUE: Tag = Tag(0x0018, 0x1301); // (0018,1301)
/// ScanLength (0018,1302) IS 1 DICOM
#[rustfmt::skip]
pub const SCAN_LENGTH: Tag = Tag(0x0018, 0x1302); // (0018,1302)
/// AcquisitionMatrix (0018,1310) US 4 DICOM
#[rustfmt::skip]
pub const ACQUISITION_MATRIX: Tag = Tag(0x0018, 0x1310); // (0018,1310)
/// InPlanePhaseEncodingDirection (0018,1312) CS 1 DICOM
#[rustfmt::skip]
pub const IN_PLANE_PHASE_ENCODING_DIRECTION: Tag = Tag(0x0018, 0x1312); // (0018,1312)
/// FlipAngle (0018,1314) DS 1 DICOM
#[rustfmt::skip]
pub const FLIP_ANGLE: Tag = Tag(0x0018, 0x1314); // (0018,1314)
/// VariableFlipAngleFlag (0018,1315) CS 1 DICOM
#[rustfmt::skip]
pub const VARIABLE_FLIP_ANGLE_FLAG: Tag = Tag(0x0018, 0x1315); // (0018,1315)
/// SAR (0018,1316) DS 1 DICOM
#[rustfmt::skip]
pub const SAR: Tag = Tag(0x0018, 0x1316); // (0018,1316)
/// dBdt (0018,1318) DS 1 DICOM
#[rustfmt::skip]
pub const D_BDT: Tag = Tag(0x0018, 0x1318); // (0018,1318)
/// B1rms (0018,1320) FL 1 DICOM
#[rustfmt::skip]
pub const B1RMS: Tag = Tag(0x0018, 0x1320); // (0018,1320)
/// AcquisitionDeviceProcessingDescription (0018,1400) LO 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_DEVICE_PROCESSING_DESCRIPTION: Tag = Tag(0x0018, 0x1400); // (0018,1400)
/// AcquisitionDeviceProcessingCode (0018,1401) LO 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_DEVICE_PROCESSING_CODE: Tag = Tag(0x0018, 0x1401); // (0018,1401)
/// CassetteOrientation (0018,1402) CS 1 DICOM
#[rustfmt::skip]
pub const CASSETTE_ORIENTATION: Tag = Tag(0x0018, 0x1402); // (0018,1402)
/// CassetteSize (0018,1403) CS 1 DICOM
#[rustfmt::skip]
pub const CASSETTE_SIZE: Tag = Tag(0x0018, 0x1403); // (0018,1403)
/// ExposuresOnPlate (0018,1404) US 1 DICOM
#[rustfmt::skip]
pub const EXPOSURES_ON_PLATE: Tag = Tag(0x0018, 0x1404); // (0018,1404)
/// RelativeXRayExposure (0018,1405) IS 1 DICOM
#[rustfmt::skip]
pub const RELATIVE_X_RAY_EXPOSURE: Tag = Tag(0x0018, 0x1405); // (0018,1405)
/// ExposureIndex (0018,1411) DS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_INDEX: Tag = Tag(0x0018, 0x1411); // (0018,1411)
/// TargetExposureIndex (0018,1412) DS 1 DICOM
#[rustfmt::skip]
pub const TARGET_EXPOSURE_INDEX: Tag = Tag(0x0018, 0x1412); // (0018,1412)
/// DeviationIndex (0018,1413) DS 1 DICOM
#[rustfmt::skip]
pub const DEVIATION_INDEX: Tag = Tag(0x0018, 0x1413); // (0018,1413)
/// ColumnAngulation (0018,1450) DS 1 DICOM
#[rustfmt::skip]
pub const COLUMN_ANGULATION: Tag = Tag(0x0018, 0x1450); // (0018,1450)
/// TomoLayerHeight (0018,1460) DS 1 DICOM
#[rustfmt::skip]
pub const TOMO_LAYER_HEIGHT: Tag = Tag(0x0018, 0x1460); // (0018,1460)
/// TomoAngle (0018,1470) DS 1 DICOM
#[rustfmt::skip]
pub const TOMO_ANGLE: Tag = Tag(0x0018, 0x1470); // (0018,1470)
/// TomoTime (0018,1480) DS 1 DICOM
#[rustfmt::skip]
pub const TOMO_TIME: Tag = Tag(0x0018, 0x1480); // (0018,1480)
/// TomoType (0018,1490) CS 1 DICOM
#[rustfmt::skip]
pub const TOMO_TYPE: Tag = Tag(0x0018, 0x1490); // (0018,1490)
/// TomoClass (0018,1491) CS 1 DICOM
#[rustfmt::skip]
pub const TOMO_CLASS: Tag = Tag(0x0018, 0x1491); // (0018,1491)
/// NumberOfTomosynthesisSourceImages (0018,1495) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES: Tag = Tag(0x0018, 0x1495); // (0018,1495)
/// PositionerMotion (0018,1500) CS 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_MOTION: Tag = Tag(0x0018, 0x1500); // (0018,1500)
/// PositionerType (0018,1508) CS 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_TYPE: Tag = Tag(0x0018, 0x1508); // (0018,1508)
/// PositionerPrimaryAngle (0018,1510) DS 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_PRIMARY_ANGLE: Tag = Tag(0x0018, 0x1510); // (0018,1510)
/// PositionerSecondaryAngle (0018,1511) DS 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_SECONDARY_ANGLE: Tag = Tag(0x0018, 0x1511); // (0018,1511)
/// PositionerPrimaryAngleIncrement (0018,1520) DS 1-n DICOM
#[rustfmt::skip]
pub const POSITIONER_PRIMARY_ANGLE_INCREMENT: Tag = Tag(0x0018, 0x1520); // (0018,1520)
/// PositionerSecondaryAngleIncrement (0018,1521) DS 1-n DICOM
#[rustfmt::skip]
pub const POSITIONER_SECONDARY_ANGLE_INCREMENT: Tag = Tag(0x0018, 0x1521); // (0018,1521)
/// DetectorPrimaryAngle (0018,1530) DS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_PRIMARY_ANGLE: Tag = Tag(0x0018, 0x1530); // (0018,1530)
/// DetectorSecondaryAngle (0018,1531) DS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_SECONDARY_ANGLE: Tag = Tag(0x0018, 0x1531); // (0018,1531)
/// ShutterShape (0018,1600) CS 1-3 DICOM
#[rustfmt::skip]
pub const SHUTTER_SHAPE: Tag = Tag(0x0018, 0x1600); // (0018,1600)
/// ShutterLeftVerticalEdge (0018,1602) IS 1 DICOM
#[rustfmt::skip]
pub const SHUTTER_LEFT_VERTICAL_EDGE: Tag = Tag(0x0018, 0x1602); // (0018,1602)
/// ShutterRightVerticalEdge (0018,1604) IS 1 DICOM
#[rustfmt::skip]
pub const SHUTTER_RIGHT_VERTICAL_EDGE: Tag = Tag(0x0018, 0x1604); // (0018,1604)
/// ShutterUpperHorizontalEdge (0018,1606) IS 1 DICOM
#[rustfmt::skip]
pub const SHUTTER_UPPER_HORIZONTAL_EDGE: Tag = Tag(0x0018, 0x1606); // (0018,1606)
/// ShutterLowerHorizontalEdge (0018,1608) IS 1 DICOM
#[rustfmt::skip]
pub const SHUTTER_LOWER_HORIZONTAL_EDGE: Tag = Tag(0x0018, 0x1608); // (0018,1608)
/// CenterOfCircularShutter (0018,1610) IS 2 DICOM
#[rustfmt::skip]
pub const CENTER_OF_CIRCULAR_SHUTTER: Tag = Tag(0x0018, 0x1610); // (0018,1610)
/// RadiusOfCircularShutter (0018,1612) IS 1 DICOM
#[rustfmt::skip]
pub const RADIUS_OF_CIRCULAR_SHUTTER: Tag = Tag(0x0018, 0x1612); // (0018,1612)
/// VerticesOfThePolygonalShutter (0018,1620) IS 2-2n DICOM
#[rustfmt::skip]
pub const VERTICES_OF_THE_POLYGONAL_SHUTTER: Tag = Tag(0x0018, 0x1620); // (0018,1620)
/// ShutterPresentationValue (0018,1622) US 1 DICOM
#[rustfmt::skip]
pub const SHUTTER_PRESENTATION_VALUE: Tag = Tag(0x0018, 0x1622); // (0018,1622)
/// ShutterOverlayGroup (0018,1623) US 1 DICOM
#[rustfmt::skip]
pub const SHUTTER_OVERLAY_GROUP: Tag = Tag(0x0018, 0x1623); // (0018,1623)
/// ShutterPresentationColorCIELabValue (0018,1624) US 3 DICOM
#[rustfmt::skip]
pub const SHUTTER_PRESENTATION_COLOR_CIE_LAB_VALUE: Tag = Tag(0x0018, 0x1624); // (0018,1624)
/// CollimatorShape (0018,1700) CS 1-3 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_SHAPE: Tag = Tag(0x0018, 0x1700); // (0018,1700)
/// CollimatorLeftVerticalEdge (0018,1702) IS 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_LEFT_VERTICAL_EDGE: Tag = Tag(0x0018, 0x1702); // (0018,1702)
/// CollimatorRightVerticalEdge (0018,1704) IS 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_RIGHT_VERTICAL_EDGE: Tag = Tag(0x0018, 0x1704); // (0018,1704)
/// CollimatorUpperHorizontalEdge (0018,1706) IS 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_UPPER_HORIZONTAL_EDGE: Tag = Tag(0x0018, 0x1706); // (0018,1706)
/// CollimatorLowerHorizontalEdge (0018,1708) IS 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_LOWER_HORIZONTAL_EDGE: Tag = Tag(0x0018, 0x1708); // (0018,1708)
/// CenterOfCircularCollimator (0018,1710) IS 2 DICOM
#[rustfmt::skip]
pub const CENTER_OF_CIRCULAR_COLLIMATOR: Tag = Tag(0x0018, 0x1710); // (0018,1710)
/// RadiusOfCircularCollimator (0018,1712) IS 1 DICOM
#[rustfmt::skip]
pub const RADIUS_OF_CIRCULAR_COLLIMATOR: Tag = Tag(0x0018, 0x1712); // (0018,1712)
/// VerticesOfThePolygonalCollimator (0018,1720) IS 2-2n DICOM
#[rustfmt::skip]
pub const VERTICES_OF_THE_POLYGONAL_COLLIMATOR: Tag = Tag(0x0018, 0x1720); // (0018,1720)
/// AcquisitionTimeSynchronized (0018,1800) CS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_TIME_SYNCHRONIZED: Tag = Tag(0x0018, 0x1800); // (0018,1800)
/// TimeSource (0018,1801) SH 1 DICOM
#[rustfmt::skip]
pub const TIME_SOURCE: Tag = Tag(0x0018, 0x1801); // (0018,1801)
/// TimeDistributionProtocol (0018,1802) CS 1 DICOM
#[rustfmt::skip]
pub const TIME_DISTRIBUTION_PROTOCOL: Tag = Tag(0x0018, 0x1802); // (0018,1802)
/// NTPSourceAddress (0018,1803) LO 1 DICOM
#[rustfmt::skip]
pub const NTP_SOURCE_ADDRESS: Tag = Tag(0x0018, 0x1803); // (0018,1803)
/// PageNumberVector (0018,2001) IS 1-n DICOM
#[rustfmt::skip]
pub const PAGE_NUMBER_VECTOR: Tag = Tag(0x0018, 0x2001); // (0018,2001)
/// FrameLabelVector (0018,2002) SH 1-n DICOM
#[rustfmt::skip]
pub const FRAME_LABEL_VECTOR: Tag = Tag(0x0018, 0x2002); // (0018,2002)
/// FramePrimaryAngleVector (0018,2003) DS 1-n DICOM
#[rustfmt::skip]
pub const FRAME_PRIMARY_ANGLE_VECTOR: Tag = Tag(0x0018, 0x2003); // (0018,2003)
/// FrameSecondaryAngleVector (0018,2004) DS 1-n DICOM
#[rustfmt::skip]
pub const FRAME_SECONDARY_ANGLE_VECTOR: Tag = Tag(0x0018, 0x2004); // (0018,2004)
/// SliceLocationVector (0018,2005) DS 1-n DICOM
#[rustfmt::skip]
pub const SLICE_LOCATION_VECTOR: Tag = Tag(0x0018, 0x2005); // (0018,2005)
/// DisplayWindowLabelVector (0018,2006) SH 1-n DICOM
#[rustfmt::skip]
pub const DISPLAY_WINDOW_LABEL_VECTOR: Tag = Tag(0x0018, 0x2006); // (0018,2006)
/// NominalScannedPixelSpacing (0018,2010) DS 2 DICOM
#[rustfmt::skip]
pub const NOMINAL_SCANNED_PIXEL_SPACING: Tag = Tag(0x0018, 0x2010); // (0018,2010)
/// DigitizingDeviceTransportDirection (0018,2020) CS 1 DICOM
#[rustfmt::skip]
pub const DIGITIZING_DEVICE_TRANSPORT_DIRECTION: Tag = Tag(0x0018, 0x2020); // (0018,2020)
/// RotationOfScannedFilm (0018,2030) DS 1 DICOM
#[rustfmt::skip]
pub const ROTATION_OF_SCANNED_FILM: Tag = Tag(0x0018, 0x2030); // (0018,2030)
/// BiopsyTargetSequence (0018,2041) SQ 1 DICOM
#[rustfmt::skip]
pub const BIOPSY_TARGET_SEQUENCE: Tag = Tag(0x0018, 0x2041); // (0018,2041)
/// TargetUID (0018,2042) UI 1 DICOM
#[rustfmt::skip]
pub const TARGET_UID: Tag = Tag(0x0018, 0x2042); // (0018,2042)
/// LocalizingCursorPosition (0018,2043) FL 2 DICOM
#[rustfmt::skip]
pub const LOCALIZING_CURSOR_POSITION: Tag = Tag(0x0018, 0x2043); // (0018,2043)
/// CalculatedTargetPosition (0018,2044) FL 3 DICOM
#[rustfmt::skip]
pub const CALCULATED_TARGET_POSITION: Tag = Tag(0x0018, 0x2044); // (0018,2044)
/// TargetLabel (0018,2045) SH 1 DICOM
#[rustfmt::skip]
pub const TARGET_LABEL: Tag = Tag(0x0018, 0x2045); // (0018,2045)
/// DisplayedZValue (0018,2046) FL 1 DICOM
#[rustfmt::skip]
pub const DISPLAYED_Z_VALUE: Tag = Tag(0x0018, 0x2046); // (0018,2046)
/// IVUSAcquisition (0018,3100) CS 1 DICOM
#[rustfmt::skip]
pub const IVUS_ACQUISITION: Tag = Tag(0x0018, 0x3100); // (0018,3100)
/// IVUSPullbackRate (0018,3101) DS 1 DICOM
#[rustfmt::skip]
pub const IVUS_PULLBACK_RATE: Tag = Tag(0x0018, 0x3101); // (0018,3101)
/// IVUSGatedRate (0018,3102) DS 1 DICOM
#[rustfmt::skip]
pub const IVUS_GATED_RATE: Tag = Tag(0x0018, 0x3102); // (0018,3102)
/// IVUSPullbackStartFrameNumber (0018,3103) IS 1 DICOM
#[rustfmt::skip]
pub const IVUS_PULLBACK_START_FRAME_NUMBER: Tag = Tag(0x0018, 0x3103); // (0018,3103)
/// IVUSPullbackStopFrameNumber (0018,3104) IS 1 DICOM
#[rustfmt::skip]
pub const IVUS_PULLBACK_STOP_FRAME_NUMBER: Tag = Tag(0x0018, 0x3104); // (0018,3104)
/// LesionNumber (0018,3105) IS 1-n DICOM
#[rustfmt::skip]
pub const LESION_NUMBER: Tag = Tag(0x0018, 0x3105); // (0018,3105)
/// OutputPower (0018,5000) SH 1-n DICOM
#[rustfmt::skip]
pub const OUTPUT_POWER: Tag = Tag(0x0018, 0x5000); // (0018,5000)
/// TransducerData (0018,5010) LO 1-n DICOM
#[rustfmt::skip]
pub const TRANSDUCER_DATA: Tag = Tag(0x0018, 0x5010); // (0018,5010)
/// FocusDepth (0018,5012) DS 1 DICOM
#[rustfmt::skip]
pub const FOCUS_DEPTH: Tag = Tag(0x0018, 0x5012); // (0018,5012)
/// ProcessingFunction (0018,5020) LO 1 DICOM
#[rustfmt::skip]
pub const PROCESSING_FUNCTION: Tag = Tag(0x0018, 0x5020); // (0018,5020)
/// MechanicalIndex (0018,5022) DS 1 DICOM
#[rustfmt::skip]
pub const MECHANICAL_INDEX: Tag = Tag(0x0018, 0x5022); // (0018,5022)
/// BoneThermalIndex (0018,5024) DS 1 DICOM
#[rustfmt::skip]
pub const BONE_THERMAL_INDEX: Tag = Tag(0x0018, 0x5024); // (0018,5024)
/// CranialThermalIndex (0018,5026) DS 1 DICOM
#[rustfmt::skip]
pub const CRANIAL_THERMAL_INDEX: Tag = Tag(0x0018, 0x5026); // (0018,5026)
/// SoftTissueThermalIndex (0018,5027) DS 1 DICOM
#[rustfmt::skip]
pub const SOFT_TISSUE_THERMAL_INDEX: Tag = Tag(0x0018, 0x5027); // (0018,5027)
/// SoftTissueFocusThermalIndex (0018,5028) DS 1 DICOM
#[rustfmt::skip]
pub const SOFT_TISSUE_FOCUS_THERMAL_INDEX: Tag = Tag(0x0018, 0x5028); // (0018,5028)
/// SoftTissueSurfaceThermalIndex (0018,5029) DS 1 DICOM
#[rustfmt::skip]
pub const SOFT_TISSUE_SURFACE_THERMAL_INDEX: Tag = Tag(0x0018, 0x5029); // (0018,5029)
/// DepthOfScanField (0018,5050) IS 1 DICOM
#[rustfmt::skip]
pub const DEPTH_OF_SCAN_FIELD: Tag = Tag(0x0018, 0x5050); // (0018,5050)
/// PatientPosition (0018,5100) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_POSITION: Tag = Tag(0x0018, 0x5100); // (0018,5100)
/// ViewPosition (0018,5101) CS 1 DICOM
#[rustfmt::skip]
pub const VIEW_POSITION: Tag = Tag(0x0018, 0x5101); // (0018,5101)
/// ProjectionEponymousNameCodeSequence (0018,5104) SQ 1 DICOM
#[rustfmt::skip]
pub const PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE: Tag = Tag(0x0018, 0x5104); // (0018,5104)
/// Sensitivity (0018,6000) DS 1 DICOM
#[rustfmt::skip]
pub const SENSITIVITY: Tag = Tag(0x0018, 0x6000); // (0018,6000)
/// SequenceOfUltrasoundRegions (0018,6011) SQ 1 DICOM
#[rustfmt::skip]
pub const SEQUENCE_OF_ULTRASOUND_REGIONS: Tag = Tag(0x0018, 0x6011); // (0018,6011)
/// RegionSpatialFormat (0018,6012) US 1 DICOM
#[rustfmt::skip]
pub const REGION_SPATIAL_FORMAT: Tag = Tag(0x0018, 0x6012); // (0018,6012)
/// RegionDataType (0018,6014) US 1 DICOM
#[rustfmt::skip]
pub const REGION_DATA_TYPE: Tag = Tag(0x0018, 0x6014); // (0018,6014)
/// RegionFlags (0018,6016) UL 1 DICOM
#[rustfmt::skip]
pub const REGION_FLAGS: Tag = Tag(0x0018, 0x6016); // (0018,6016)
/// RegionLocationMinX0 (0018,6018) UL 1 DICOM
#[rustfmt::skip]
pub const REGION_LOCATION_MIN_X0: Tag = Tag(0x0018, 0x6018); // (0018,6018)
/// RegionLocationMinY0 (0018,601A) UL 1 DICOM
#[rustfmt::skip]
pub const REGION_LOCATION_MIN_Y0: Tag = Tag(0x0018, 0x601A); // (0018,601A)
/// RegionLocationMaxX1 (0018,601C) UL 1 DICOM
#[rustfmt::skip]
pub const REGION_LOCATION_MAX_X1: Tag = Tag(0x0018, 0x601C); // (0018,601C)
/// RegionLocationMaxY1 (0018,601E) UL 1 DICOM
#[rustfmt::skip]
pub const REGION_LOCATION_MAX_Y1: Tag = Tag(0x0018, 0x601E); // (0018,601E)
/// ReferencePixelX0 (0018,6020) SL 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_PIXEL_X0: Tag = Tag(0x0018, 0x6020); // (0018,6020)
/// ReferencePixelY0 (0018,6022) SL 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_PIXEL_Y0: Tag = Tag(0x0018, 0x6022); // (0018,6022)
/// PhysicalUnitsXDirection (0018,6024) US 1 DICOM
#[rustfmt::skip]
pub const PHYSICAL_UNITS_X_DIRECTION: Tag = Tag(0x0018, 0x6024); // (0018,6024)
/// PhysicalUnitsYDirection (0018,6026) US 1 DICOM
#[rustfmt::skip]
pub const PHYSICAL_UNITS_Y_DIRECTION: Tag = Tag(0x0018, 0x6026); // (0018,6026)
/// ReferencePixelPhysicalValueX (0018,6028) FD 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_PIXEL_PHYSICAL_VALUE_X: Tag = Tag(0x0018, 0x6028); // (0018,6028)
/// ReferencePixelPhysicalValueY (0018,602A) FD 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_PIXEL_PHYSICAL_VALUE_Y: Tag = Tag(0x0018, 0x602A); // (0018,602A)
/// PhysicalDeltaX (0018,602C) FD 1 DICOM
#[rustfmt::skip]
pub const PHYSICAL_DELTA_X: Tag = Tag(0x0018, 0x602C); // (0018,602C)
/// PhysicalDeltaY (0018,602E) FD 1 DICOM
#[rustfmt::skip]
pub const PHYSICAL_DELTA_Y: Tag = Tag(0x0018, 0x602E); // (0018,602E)
/// TransducerFrequency (0018,6030) UL 1 DICOM
#[rustfmt::skip]
pub const TRANSDUCER_FREQUENCY: Tag = Tag(0x0018, 0x6030); // (0018,6030)
/// TransducerType (0018,6031) CS 1 DICOM
#[rustfmt::skip]
pub const TRANSDUCER_TYPE: Tag = Tag(0x0018, 0x6031); // (0018,6031)
/// PulseRepetitionFrequency (0018,6032) UL 1 DICOM
#[rustfmt::skip]
pub const PULSE_REPETITION_FREQUENCY: Tag = Tag(0x0018, 0x6032); // (0018,6032)
/// DopplerCorrectionAngle (0018,6034) FD 1 DICOM
#[rustfmt::skip]
pub const DOPPLER_CORRECTION_ANGLE: Tag = Tag(0x0018, 0x6034); // (0018,6034)
/// SteeringAngle (0018,6036) FD 1 DICOM
#[rustfmt::skip]
pub const STEERING_ANGLE: Tag = Tag(0x0018, 0x6036); // (0018,6036)
/// DopplerSampleVolumeXPosition (0018,6039) SL 1 DICOM
#[rustfmt::skip]
pub const DOPPLER_SAMPLE_VOLUME_X_POSITION: Tag = Tag(0x0018, 0x6039); // (0018,6039)
/// DopplerSampleVolumeYPosition (0018,603B) SL 1 DICOM
#[rustfmt::skip]
pub const DOPPLER_SAMPLE_VOLUME_Y_POSITION: Tag = Tag(0x0018, 0x603B); // (0018,603B)
/// TMLinePositionX0 (0018,603D) SL 1 DICOM
#[rustfmt::skip]
pub const TM_LINE_POSITION_X0: Tag = Tag(0x0018, 0x603D); // (0018,603D)
/// TMLinePositionY0 (0018,603F) SL 1 DICOM
#[rustfmt::skip]
pub const TM_LINE_POSITION_Y0: Tag = Tag(0x0018, 0x603F); // (0018,603F)
/// TMLinePositionX1 (0018,6041) SL 1 DICOM
#[rustfmt::skip]
pub const TM_LINE_POSITION_X1: Tag = Tag(0x0018, 0x6041); // (0018,6041)
/// TMLinePositionY1 (0018,6043) SL 1 DICOM
#[rustfmt::skip]
pub const TM_LINE_POSITION_Y1: Tag = Tag(0x0018, 0x6043); // (0018,6043)
/// PixelComponentOrganization (0018,6044) US 1 DICOM
#[rustfmt::skip]
pub const PIXEL_COMPONENT_ORGANIZATION: Tag = Tag(0x0018, 0x6044); // (0018,6044)
/// PixelComponentMask (0018,6046) UL 1 DICOM
#[rustfmt::skip]
pub const PIXEL_COMPONENT_MASK: Tag = Tag(0x0018, 0x6046); // (0018,6046)
/// PixelComponentRangeStart (0018,6048) UL 1 DICOM
#[rustfmt::skip]
pub const PIXEL_COMPONENT_RANGE_START: Tag = Tag(0x0018, 0x6048); // (0018,6048)
/// PixelComponentRangeStop (0018,604A) UL 1 DICOM
#[rustfmt::skip]
pub const PIXEL_COMPONENT_RANGE_STOP: Tag = Tag(0x0018, 0x604A); // (0018,604A)
/// PixelComponentPhysicalUnits (0018,604C) US 1 DICOM
#[rustfmt::skip]
pub const PIXEL_COMPONENT_PHYSICAL_UNITS: Tag = Tag(0x0018, 0x604C); // (0018,604C)
/// PixelComponentDataType (0018,604E) US 1 DICOM
#[rustfmt::skip]
pub const PIXEL_COMPONENT_DATA_TYPE: Tag = Tag(0x0018, 0x604E); // (0018,604E)
/// NumberOfTableBreakPoints (0018,6050) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TABLE_BREAK_POINTS: Tag = Tag(0x0018, 0x6050); // (0018,6050)
/// TableOfXBreakPoints (0018,6052) UL 1-n DICOM
#[rustfmt::skip]
pub const TABLE_OF_X_BREAK_POINTS: Tag = Tag(0x0018, 0x6052); // (0018,6052)
/// TableOfYBreakPoints (0018,6054) FD 1-n DICOM
#[rustfmt::skip]
pub const TABLE_OF_Y_BREAK_POINTS: Tag = Tag(0x0018, 0x6054); // (0018,6054)
/// NumberOfTableEntries (0018,6056) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TABLE_ENTRIES: Tag = Tag(0x0018, 0x6056); // (0018,6056)
/// TableOfPixelValues (0018,6058) UL 1-n DICOM
#[rustfmt::skip]
pub const TABLE_OF_PIXEL_VALUES: Tag = Tag(0x0018, 0x6058); // (0018,6058)
/// TableOfParameterValues (0018,605A) FL 1-n DICOM
#[rustfmt::skip]
pub const TABLE_OF_PARAMETER_VALUES: Tag = Tag(0x0018, 0x605A); // (0018,605A)
/// RWaveTimeVector (0018,6060) FL 1-n DICOM
#[rustfmt::skip]
pub const R_WAVE_TIME_VECTOR: Tag = Tag(0x0018, 0x6060); // (0018,6060)
/// DetectorConditionsNominalFlag (0018,7000) CS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_CONDITIONS_NOMINAL_FLAG: Tag = Tag(0x0018, 0x7000); // (0018,7000)
/// DetectorTemperature (0018,7001) DS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_TEMPERATURE: Tag = Tag(0x0018, 0x7001); // (0018,7001)
/// DetectorType (0018,7004) CS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_TYPE: Tag = Tag(0x0018, 0x7004); // (0018,7004)
/// DetectorConfiguration (0018,7005) CS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_CONFIGURATION: Tag = Tag(0x0018, 0x7005); // (0018,7005)
/// DetectorDescription (0018,7006) LT 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_DESCRIPTION: Tag = Tag(0x0018, 0x7006); // (0018,7006)
/// DetectorMode (0018,7008) LT 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_MODE: Tag = Tag(0x0018, 0x7008); // (0018,7008)
/// DetectorID (0018,700A) SH 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_ID: Tag = Tag(0x0018, 0x700A); // (0018,700A)
/// DateOfLastDetectorCalibration (0018,700C) DA 1 DICOM
#[rustfmt::skip]
pub const DATE_OF_LAST_DETECTOR_CALIBRATION: Tag = Tag(0x0018, 0x700C); // (0018,700C)
/// TimeOfLastDetectorCalibration (0018,700E) TM 1 DICOM
#[rustfmt::skip]
pub const TIME_OF_LAST_DETECTOR_CALIBRATION: Tag = Tag(0x0018, 0x700E); // (0018,700E)
/// ExposuresOnDetectorSinceLastCalibration (0018,7010) IS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION: Tag = Tag(0x0018, 0x7010); // (0018,7010)
/// ExposuresOnDetectorSinceManufactured (0018,7011) IS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED: Tag = Tag(0x0018, 0x7011); // (0018,7011)
/// DetectorTimeSinceLastExposure (0018,7012) DS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_TIME_SINCE_LAST_EXPOSURE: Tag = Tag(0x0018, 0x7012); // (0018,7012)
/// DetectorActiveTime (0018,7014) DS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVE_TIME: Tag = Tag(0x0018, 0x7014); // (0018,7014)
/// DetectorActivationOffsetFromExposure (0018,7016) DS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE: Tag = Tag(0x0018, 0x7016); // (0018,7016)
/// DetectorBinning (0018,701A) DS 2 DICOM
#[rustfmt::skip]
pub const DETECTOR_BINNING: Tag = Tag(0x0018, 0x701A); // (0018,701A)
/// DetectorElementPhysicalSize (0018,7020) DS 2 DICOM
#[rustfmt::skip]
pub const DETECTOR_ELEMENT_PHYSICAL_SIZE: Tag = Tag(0x0018, 0x7020); // (0018,7020)
/// DetectorElementSpacing (0018,7022) DS 2 DICOM
#[rustfmt::skip]
pub const DETECTOR_ELEMENT_SPACING: Tag = Tag(0x0018, 0x7022); // (0018,7022)
/// DetectorActiveShape (0018,7024) CS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVE_SHAPE: Tag = Tag(0x0018, 0x7024); // (0018,7024)
/// DetectorActiveDimensions (0018,7026) DS 1-2 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVE_DIMENSIONS: Tag = Tag(0x0018, 0x7026); // (0018,7026)
/// DetectorActiveOrigin (0018,7028) DS 2 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVE_ORIGIN: Tag = Tag(0x0018, 0x7028); // (0018,7028)
/// DetectorManufacturerName (0018,702A) LO 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_MANUFACTURER_NAME: Tag = Tag(0x0018, 0x702A); // (0018,702A)
/// DetectorManufacturerModelName (0018,702B) LO 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_MANUFACTURER_MODEL_NAME: Tag = Tag(0x0018, 0x702B); // (0018,702B)
/// FieldOfViewOrigin (0018,7030) DS 2 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_ORIGIN: Tag = Tag(0x0018, 0x7030); // (0018,7030)
/// FieldOfViewRotation (0018,7032) DS 1 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_ROTATION: Tag = Tag(0x0018, 0x7032); // (0018,7032)
/// FieldOfViewHorizontalFlip (0018,7034) CS 1 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_HORIZONTAL_FLIP: Tag = Tag(0x0018, 0x7034); // (0018,7034)
/// PixelDataAreaOriginRelativeToFOV (0018,7036) FL 2 DICOM
#[rustfmt::skip]
pub const PIXEL_DATA_AREA_ORIGIN_RELATIVE_TO_FOV: Tag = Tag(0x0018, 0x7036); // (0018,7036)
/// PixelDataAreaRotationAngleRelativeToFOV (0018,7038) FL 1 DICOM
#[rustfmt::skip]
pub const PIXEL_DATA_AREA_ROTATION_ANGLE_RELATIVE_TO_FOV: Tag = Tag(0x0018, 0x7038); // (0018,7038)
/// GridAbsorbingMaterial (0018,7040) LT 1 DICOM
#[rustfmt::skip]
pub const GRID_ABSORBING_MATERIAL: Tag = Tag(0x0018, 0x7040); // (0018,7040)
/// GridSpacingMaterial (0018,7041) LT 1 DICOM
#[rustfmt::skip]
pub const GRID_SPACING_MATERIAL: Tag = Tag(0x0018, 0x7041); // (0018,7041)
/// GridThickness (0018,7042) DS 1 DICOM
#[rustfmt::skip]
pub const GRID_THICKNESS: Tag = Tag(0x0018, 0x7042); // (0018,7042)
/// GridPitch (0018,7044) DS 1 DICOM
#[rustfmt::skip]
pub const GRID_PITCH: Tag = Tag(0x0018, 0x7044); // (0018,7044)
/// GridAspectRatio (0018,7046) IS 2 DICOM
#[rustfmt::skip]
pub const GRID_ASPECT_RATIO: Tag = Tag(0x0018, 0x7046); // (0018,7046)
/// GridPeriod (0018,7048) DS 1 DICOM
#[rustfmt::skip]
pub const GRID_PERIOD: Tag = Tag(0x0018, 0x7048); // (0018,7048)
/// GridFocalDistance (0018,704C) DS 1 DICOM
#[rustfmt::skip]
pub const GRID_FOCAL_DISTANCE: Tag = Tag(0x0018, 0x704C); // (0018,704C)
/// FilterMaterial (0018,7050) CS 1-n DICOM
#[rustfmt::skip]
pub const FILTER_MATERIAL: Tag = Tag(0x0018, 0x7050); // (0018,7050)
/// FilterThicknessMinimum (0018,7052) DS 1-n DICOM
#[rustfmt::skip]
pub const FILTER_THICKNESS_MINIMUM: Tag = Tag(0x0018, 0x7052); // (0018,7052)
/// FilterThicknessMaximum (0018,7054) DS 1-n DICOM
#[rustfmt::skip]
pub const FILTER_THICKNESS_MAXIMUM: Tag = Tag(0x0018, 0x7054); // (0018,7054)
/// FilterBeamPathLengthMinimum (0018,7056) FL 1-n DICOM
#[rustfmt::skip]
pub const FILTER_BEAM_PATH_LENGTH_MINIMUM: Tag = Tag(0x0018, 0x7056); // (0018,7056)
/// FilterBeamPathLengthMaximum (0018,7058) FL 1-n DICOM
#[rustfmt::skip]
pub const FILTER_BEAM_PATH_LENGTH_MAXIMUM: Tag = Tag(0x0018, 0x7058); // (0018,7058)
/// ExposureControlMode (0018,7060) CS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_MODE: Tag = Tag(0x0018, 0x7060); // (0018,7060)
/// ExposureControlModeDescription (0018,7062) LT 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_MODE_DESCRIPTION: Tag = Tag(0x0018, 0x7062); // (0018,7062)
/// ExposureStatus (0018,7064) CS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_STATUS: Tag = Tag(0x0018, 0x7064); // (0018,7064)
/// PhototimerSetting (0018,7065) DS 1 DICOM
#[rustfmt::skip]
pub const PHOTOTIMER_SETTING: Tag = Tag(0x0018, 0x7065); // (0018,7065)
/// ExposureTimeInuS (0018,8150) DS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_TIME_INU_S: Tag = Tag(0x0018, 0x8150); // (0018,8150)
/// XRayTubeCurrentInuA (0018,8151) DS 1 DICOM
#[rustfmt::skip]
pub const X_RAY_TUBE_CURRENT_INU_A: Tag = Tag(0x0018, 0x8151); // (0018,8151)
/// ContentQualification (0018,9004) CS 1 DICOM
#[rustfmt::skip]
pub const CONTENT_QUALIFICATION: Tag = Tag(0x0018, 0x9004); // (0018,9004)
/// PulseSequenceName (0018,9005) SH 1 DICOM
#[rustfmt::skip]
pub const PULSE_SEQUENCE_NAME: Tag = Tag(0x0018, 0x9005); // (0018,9005)
/// MRImagingModifierSequence (0018,9006) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_IMAGING_MODIFIER_SEQUENCE: Tag = Tag(0x0018, 0x9006); // (0018,9006)
/// EchoPulseSequence (0018,9008) CS 1 DICOM
#[rustfmt::skip]
pub const ECHO_PULSE_SEQUENCE: Tag = Tag(0x0018, 0x9008); // (0018,9008)
/// InversionRecovery (0018,9009) CS 1 DICOM
#[rustfmt::skip]
pub const INVERSION_RECOVERY: Tag = Tag(0x0018, 0x9009); // (0018,9009)
/// FlowCompensation (0018,9010) CS 1 DICOM
#[rustfmt::skip]
pub const FLOW_COMPENSATION: Tag = Tag(0x0018, 0x9010); // (0018,9010)
/// MultipleSpinEcho (0018,9011) CS 1 DICOM
#[rustfmt::skip]
pub const MULTIPLE_SPIN_ECHO: Tag = Tag(0x0018, 0x9011); // (0018,9011)
/// MultiPlanarExcitation (0018,9012) CS 1 DICOM
#[rustfmt::skip]
pub const MULTI_PLANAR_EXCITATION: Tag = Tag(0x0018, 0x9012); // (0018,9012)
/// PhaseContrast (0018,9014) CS 1 DICOM
#[rustfmt::skip]
pub const PHASE_CONTRAST: Tag = Tag(0x0018, 0x9014); // (0018,9014)
/// TimeOfFlightContrast (0018,9015) CS 1 DICOM
#[rustfmt::skip]
pub const TIME_OF_FLIGHT_CONTRAST: Tag = Tag(0x0018, 0x9015); // (0018,9015)
/// Spoiling (0018,9016) CS 1 DICOM
#[rustfmt::skip]
pub const SPOILING: Tag = Tag(0x0018, 0x9016); // (0018,9016)
/// SteadyStatePulseSequence (0018,9017) CS 1 DICOM
#[rustfmt::skip]
pub const STEADY_STATE_PULSE_SEQUENCE: Tag = Tag(0x0018, 0x9017); // (0018,9017)
/// EchoPlanarPulseSequence (0018,9018) CS 1 DICOM
#[rustfmt::skip]
pub const ECHO_PLANAR_PULSE_SEQUENCE: Tag = Tag(0x0018, 0x9018); // (0018,9018)
/// TagAngleFirstAxis (0018,9019) FD 1 DICOM
#[rustfmt::skip]
pub const TAG_ANGLE_FIRST_AXIS: Tag = Tag(0x0018, 0x9019); // (0018,9019)
/// MagnetizationTransfer (0018,9020) CS 1 DICOM
#[rustfmt::skip]
pub const MAGNETIZATION_TRANSFER: Tag = Tag(0x0018, 0x9020); // (0018,9020)
/// T2Preparation (0018,9021) CS 1 DICOM
#[rustfmt::skip]
pub const T2_PREPARATION: Tag = Tag(0x0018, 0x9021); // (0018,9021)
/// BloodSignalNulling (0018,9022) CS 1 DICOM
#[rustfmt::skip]
pub const BLOOD_SIGNAL_NULLING: Tag = Tag(0x0018, 0x9022); // (0018,9022)
/// SaturationRecovery (0018,9024) CS 1 DICOM
#[rustfmt::skip]
pub const SATURATION_RECOVERY: Tag = Tag(0x0018, 0x9024); // (0018,9024)
/// SpectrallySelectedSuppression (0018,9025) CS 1 DICOM
#[rustfmt::skip]
pub const SPECTRALLY_SELECTED_SUPPRESSION: Tag = Tag(0x0018, 0x9025); // (0018,9025)
/// SpectrallySelectedExcitation (0018,9026) CS 1 DICOM
#[rustfmt::skip]
pub const SPECTRALLY_SELECTED_EXCITATION: Tag = Tag(0x0018, 0x9026); // (0018,9026)
/// SpatialPresaturation (0018,9027) CS 1 DICOM
#[rustfmt::skip]
pub const SPATIAL_PRESATURATION: Tag = Tag(0x0018, 0x9027); // (0018,9027)
/// Tagging (0018,9028) CS 1 DICOM
#[rustfmt::skip]
pub const TAGGING: Tag = Tag(0x0018, 0x9028); // (0018,9028)
/// OversamplingPhase (0018,9029) CS 1 DICOM
#[rustfmt::skip]
pub const OVERSAMPLING_PHASE: Tag = Tag(0x0018, 0x9029); // (0018,9029)
/// TagSpacingFirstDimension (0018,9030) FD 1 DICOM
#[rustfmt::skip]
pub const TAG_SPACING_FIRST_DIMENSION: Tag = Tag(0x0018, 0x9030); // (0018,9030)
/// GeometryOfKSpaceTraversal (0018,9032) CS 1 DICOM
#[rustfmt::skip]
pub const GEOMETRY_OF_K_SPACE_TRAVERSAL: Tag = Tag(0x0018, 0x9032); // (0018,9032)
/// SegmentedKSpaceTraversal (0018,9033) CS 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_K_SPACE_TRAVERSAL: Tag = Tag(0x0018, 0x9033); // (0018,9033)
/// RectilinearPhaseEncodeReordering (0018,9034) CS 1 DICOM
#[rustfmt::skip]
pub const RECTILINEAR_PHASE_ENCODE_REORDERING: Tag = Tag(0x0018, 0x9034); // (0018,9034)
/// TagThickness (0018,9035) FD 1 DICOM
#[rustfmt::skip]
pub const TAG_THICKNESS: Tag = Tag(0x0018, 0x9035); // (0018,9035)
/// PartialFourierDirection (0018,9036) CS 1 DICOM
#[rustfmt::skip]
pub const PARTIAL_FOURIER_DIRECTION: Tag = Tag(0x0018, 0x9036); // (0018,9036)
/// CardiacSynchronizationTechnique (0018,9037) CS 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_SYNCHRONIZATION_TECHNIQUE: Tag = Tag(0x0018, 0x9037); // (0018,9037)
/// ReceiveCoilManufacturerName (0018,9041) LO 1 DICOM
#[rustfmt::skip]
pub const RECEIVE_COIL_MANUFACTURER_NAME: Tag = Tag(0x0018, 0x9041); // (0018,9041)
/// MRReceiveCoilSequence (0018,9042) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_RECEIVE_COIL_SEQUENCE: Tag = Tag(0x0018, 0x9042); // (0018,9042)
/// ReceiveCoilType (0018,9043) CS 1 DICOM
#[rustfmt::skip]
pub const RECEIVE_COIL_TYPE: Tag = Tag(0x0018, 0x9043); // (0018,9043)
/// QuadratureReceiveCoil (0018,9044) CS 1 DICOM
#[rustfmt::skip]
pub const QUADRATURE_RECEIVE_COIL: Tag = Tag(0x0018, 0x9044); // (0018,9044)
/// MultiCoilDefinitionSequence (0018,9045) SQ 1 DICOM
#[rustfmt::skip]
pub const MULTI_COIL_DEFINITION_SEQUENCE: Tag = Tag(0x0018, 0x9045); // (0018,9045)
/// MultiCoilConfiguration (0018,9046) LO 1 DICOM
#[rustfmt::skip]
pub const MULTI_COIL_CONFIGURATION: Tag = Tag(0x0018, 0x9046); // (0018,9046)
/// MultiCoilElementName (0018,9047) SH 1 DICOM
#[rustfmt::skip]
pub const MULTI_COIL_ELEMENT_NAME: Tag = Tag(0x0018, 0x9047); // (0018,9047)
/// MultiCoilElementUsed (0018,9048) CS 1 DICOM
#[rustfmt::skip]
pub const MULTI_COIL_ELEMENT_USED: Tag = Tag(0x0018, 0x9048); // (0018,9048)
/// MRTransmitCoilSequence (0018,9049) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_TRANSMIT_COIL_SEQUENCE: Tag = Tag(0x0018, 0x9049); // (0018,9049)
/// TransmitCoilManufacturerName (0018,9050) LO 1 DICOM
#[rustfmt::skip]
pub const TRANSMIT_COIL_MANUFACTURER_NAME: Tag = Tag(0x0018, 0x9050); // (0018,9050)
/// TransmitCoilType (0018,9051) CS 1 DICOM
#[rustfmt::skip]
pub const TRANSMIT_COIL_TYPE: Tag = Tag(0x0018, 0x9051); // (0018,9051)
/// SpectralWidth (0018,9052) FD 1-2 DICOM
#[rustfmt::skip]
pub const SPECTRAL_WIDTH: Tag = Tag(0x0018, 0x9052); // (0018,9052)
/// ChemicalShiftReference (0018,9053) FD 1-2 DICOM
#[rustfmt::skip]
pub const CHEMICAL_SHIFT_REFERENCE: Tag = Tag(0x0018, 0x9053); // (0018,9053)
/// VolumeLocalizationTechnique (0018,9054) CS 1 DICOM
#[rustfmt::skip]
pub const VOLUME_LOCALIZATION_TECHNIQUE: Tag = Tag(0x0018, 0x9054); // (0018,9054)
/// MRAcquisitionFrequencyEncodingSteps (0018,9058) US 1 DICOM
#[rustfmt::skip]
pub const MR_ACQUISITION_FREQUENCY_ENCODING_STEPS: Tag = Tag(0x0018, 0x9058); // (0018,9058)
/// Decoupling (0018,9059) CS 1 DICOM
#[rustfmt::skip]
pub const DECOUPLING: Tag = Tag(0x0018, 0x9059); // (0018,9059)
/// DecoupledNucleus (0018,9060) CS 1-2 DICOM
#[rustfmt::skip]
pub const DECOUPLED_NUCLEUS: Tag = Tag(0x0018, 0x9060); // (0018,9060)
/// DecouplingFrequency (0018,9061) FD 1-2 DICOM
#[rustfmt::skip]
pub const DECOUPLING_FREQUENCY: Tag = Tag(0x0018, 0x9061); // (0018,9061)
/// DecouplingMethod (0018,9062) CS 1 DICOM
#[rustfmt::skip]
pub const DECOUPLING_METHOD: Tag = Tag(0x0018, 0x9062); // (0018,9062)
/// DecouplingChemicalShiftReference (0018,9063) FD 1-2 DICOM
#[rustfmt::skip]
pub const DECOUPLING_CHEMICAL_SHIFT_REFERENCE: Tag = Tag(0x0018, 0x9063); // (0018,9063)
/// KSpaceFiltering (0018,9064) CS 1 DICOM
#[rustfmt::skip]
pub const K_SPACE_FILTERING: Tag = Tag(0x0018, 0x9064); // (0018,9064)
/// TimeDomainFiltering (0018,9065) CS 1-2 DICOM
#[rustfmt::skip]
pub const TIME_DOMAIN_FILTERING: Tag = Tag(0x0018, 0x9065); // (0018,9065)
/// NumberOfZeroFills (0018,9066) US 1-2 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_ZERO_FILLS: Tag = Tag(0x0018, 0x9066); // (0018,9066)
/// BaselineCorrection (0018,9067) CS 1 DICOM
#[rustfmt::skip]
pub const BASELINE_CORRECTION: Tag = Tag(0x0018, 0x9067); // (0018,9067)
/// ParallelReductionFactorInPlane (0018,9069) FD 1 DICOM
#[rustfmt::skip]
pub const PARALLEL_REDUCTION_FACTOR_IN_PLANE: Tag = Tag(0x0018, 0x9069); // (0018,9069)
/// CardiacRRIntervalSpecified (0018,9070) FD 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_RR_INTERVAL_SPECIFIED: Tag = Tag(0x0018, 0x9070); // (0018,9070)
/// AcquisitionDuration (0018,9073) FD 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_DURATION: Tag = Tag(0x0018, 0x9073); // (0018,9073)
/// FrameAcquisitionDateTime (0018,9074) DT 1 DICOM
#[rustfmt::skip]
pub const FRAME_ACQUISITION_DATE_TIME: Tag = Tag(0x0018, 0x9074); // (0018,9074)
/// DiffusionDirectionality (0018,9075) CS 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_DIRECTIONALITY: Tag = Tag(0x0018, 0x9075); // (0018,9075)
/// DiffusionGradientDirectionSequence (0018,9076) SQ 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_GRADIENT_DIRECTION_SEQUENCE: Tag = Tag(0x0018, 0x9076); // (0018,9076)
/// ParallelAcquisition (0018,9077) CS 1 DICOM
#[rustfmt::skip]
pub const PARALLEL_ACQUISITION: Tag = Tag(0x0018, 0x9077); // (0018,9077)
/// ParallelAcquisitionTechnique (0018,9078) CS 1 DICOM
#[rustfmt::skip]
pub const PARALLEL_ACQUISITION_TECHNIQUE: Tag = Tag(0x0018, 0x9078); // (0018,9078)
/// InversionTimes (0018,9079) FD 1-n DICOM
#[rustfmt::skip]
pub const INVERSION_TIMES: Tag = Tag(0x0018, 0x9079); // (0018,9079)
/// MetaboliteMapDescription (0018,9080) ST 1 DICOM
#[rustfmt::skip]
pub const METABOLITE_MAP_DESCRIPTION: Tag = Tag(0x0018, 0x9080); // (0018,9080)
/// PartialFourier (0018,9081) CS 1 DICOM
#[rustfmt::skip]
pub const PARTIAL_FOURIER: Tag = Tag(0x0018, 0x9081); // (0018,9081)
/// EffectiveEchoTime (0018,9082) FD 1 DICOM
#[rustfmt::skip]
pub const EFFECTIVE_ECHO_TIME: Tag = Tag(0x0018, 0x9082); // (0018,9082)
/// MetaboliteMapCodeSequence (0018,9083) SQ 1 DICOM
#[rustfmt::skip]
pub const METABOLITE_MAP_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9083); // (0018,9083)
/// ChemicalShiftSequence (0018,9084) SQ 1 DICOM
#[rustfmt::skip]
pub const CHEMICAL_SHIFT_SEQUENCE: Tag = Tag(0x0018, 0x9084); // (0018,9084)
/// CardiacSignalSource (0018,9085) CS 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_SIGNAL_SOURCE: Tag = Tag(0x0018, 0x9085); // (0018,9085)
/// DiffusionBValue (0018,9087) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE: Tag = Tag(0x0018, 0x9087); // (0018,9087)
/// DiffusionGradientOrientation (0018,9089) FD 3 DICOM
#[rustfmt::skip]
pub const DIFFUSION_GRADIENT_ORIENTATION: Tag = Tag(0x0018, 0x9089); // (0018,9089)
/// VelocityEncodingDirection (0018,9090) FD 3 DICOM
#[rustfmt::skip]
pub const VELOCITY_ENCODING_DIRECTION: Tag = Tag(0x0018, 0x9090); // (0018,9090)
/// VelocityEncodingMinimumValue (0018,9091) FD 1 DICOM
#[rustfmt::skip]
pub const VELOCITY_ENCODING_MINIMUM_VALUE: Tag = Tag(0x0018, 0x9091); // (0018,9091)
/// VelocityEncodingAcquisitionSequence (0018,9092) SQ 1 DICOM
#[rustfmt::skip]
pub const VELOCITY_ENCODING_ACQUISITION_SEQUENCE: Tag = Tag(0x0018, 0x9092); // (0018,9092)
/// NumberOfKSpaceTrajectories (0018,9093) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_K_SPACE_TRAJECTORIES: Tag = Tag(0x0018, 0x9093); // (0018,9093)
/// CoverageOfKSpace (0018,9094) CS 1 DICOM
#[rustfmt::skip]
pub const COVERAGE_OF_K_SPACE: Tag = Tag(0x0018, 0x9094); // (0018,9094)
/// SpectroscopyAcquisitionPhaseRows (0018,9095) UL 1 DICOM
#[rustfmt::skip]
pub const SPECTROSCOPY_ACQUISITION_PHASE_ROWS: Tag = Tag(0x0018, 0x9095); // (0018,9095)
/// TransmitterFrequency (0018,9098) FD 1-2 DICOM
#[rustfmt::skip]
pub const TRANSMITTER_FREQUENCY: Tag = Tag(0x0018, 0x9098); // (0018,9098)
/// ResonantNucleus (0018,9100) CS 1-2 DICOM
#[rustfmt::skip]
pub const RESONANT_NUCLEUS: Tag = Tag(0x0018, 0x9100); // (0018,9100)
/// FrequencyCorrection (0018,9101) CS 1 DICOM
#[rustfmt::skip]
pub const FREQUENCY_CORRECTION: Tag = Tag(0x0018, 0x9101); // (0018,9101)
/// MRSpectroscopyFOVGeometrySequence (0018,9103) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_SPECTROSCOPY_FOV_GEOMETRY_SEQUENCE: Tag = Tag(0x0018, 0x9103); // (0018,9103)
/// SlabThickness (0018,9104) FD 1 DICOM
#[rustfmt::skip]
pub const SLAB_THICKNESS: Tag = Tag(0x0018, 0x9104); // (0018,9104)
/// SlabOrientation (0018,9105) FD 3 DICOM
#[rustfmt::skip]
pub const SLAB_ORIENTATION: Tag = Tag(0x0018, 0x9105); // (0018,9105)
/// MidSlabPosition (0018,9106) FD 3 DICOM
#[rustfmt::skip]
pub const MID_SLAB_POSITION: Tag = Tag(0x0018, 0x9106); // (0018,9106)
/// MRSpatialSaturationSequence (0018,9107) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_SPATIAL_SATURATION_SEQUENCE: Tag = Tag(0x0018, 0x9107); // (0018,9107)
/// MRTimingAndRelatedParametersSequence (0018,9112) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_TIMING_AND_RELATED_PARAMETERS_SEQUENCE: Tag = Tag(0x0018, 0x9112); // (0018,9112)
/// MREchoSequence (0018,9114) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_ECHO_SEQUENCE: Tag = Tag(0x0018, 0x9114); // (0018,9114)
/// MRModifierSequence (0018,9115) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_MODIFIER_SEQUENCE: Tag = Tag(0x0018, 0x9115); // (0018,9115)
/// MRDiffusionSequence (0018,9117) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_DIFFUSION_SEQUENCE: Tag = Tag(0x0018, 0x9117); // (0018,9117)
/// CardiacSynchronizationSequence (0018,9118) SQ 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_SYNCHRONIZATION_SEQUENCE: Tag = Tag(0x0018, 0x9118); // (0018,9118)
/// MRAveragesSequence (0018,9119) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_AVERAGES_SEQUENCE: Tag = Tag(0x0018, 0x9119); // (0018,9119)
/// MRFOVGeometrySequence (0018,9125) SQ 1 DICOM
#[rustfmt::skip]
pub const MRFOV_GEOMETRY_SEQUENCE: Tag = Tag(0x0018, 0x9125); // (0018,9125)
/// VolumeLocalizationSequence (0018,9126) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUME_LOCALIZATION_SEQUENCE: Tag = Tag(0x0018, 0x9126); // (0018,9126)
/// SpectroscopyAcquisitionDataColumns (0018,9127) UL 1 DICOM
#[rustfmt::skip]
pub const SPECTROSCOPY_ACQUISITION_DATA_COLUMNS: Tag = Tag(0x0018, 0x9127); // (0018,9127)
/// DiffusionAnisotropyType (0018,9147) CS 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_ANISOTROPY_TYPE: Tag = Tag(0x0018, 0x9147); // (0018,9147)
/// FrameReferenceDateTime (0018,9151) DT 1 DICOM
#[rustfmt::skip]
pub const FRAME_REFERENCE_DATE_TIME: Tag = Tag(0x0018, 0x9151); // (0018,9151)
/// MRMetaboliteMapSequence (0018,9152) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_METABOLITE_MAP_SEQUENCE: Tag = Tag(0x0018, 0x9152); // (0018,9152)
/// ParallelReductionFactorOutOfPlane (0018,9155) FD 1 DICOM
#[rustfmt::skip]
pub const PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE: Tag = Tag(0x0018, 0x9155); // (0018,9155)
/// SpectroscopyAcquisitionOutOfPlanePhaseSteps (0018,9159) UL 1 DICOM
#[rustfmt::skip]
pub const SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS: Tag = Tag(0x0018, 0x9159); // (0018,9159)
/// ParallelReductionFactorSecondInPlane (0018,9168) FD 1 DICOM
#[rustfmt::skip]
pub const PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE: Tag = Tag(0x0018, 0x9168); // (0018,9168)
/// CardiacBeatRejectionTechnique (0018,9169) CS 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_BEAT_REJECTION_TECHNIQUE: Tag = Tag(0x0018, 0x9169); // (0018,9169)
/// RespiratoryMotionCompensationTechnique (0018,9170) CS 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE: Tag = Tag(0x0018, 0x9170); // (0018,9170)
/// RespiratorySignalSource (0018,9171) CS 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_SIGNAL_SOURCE: Tag = Tag(0x0018, 0x9171); // (0018,9171)
/// BulkMotionCompensationTechnique (0018,9172) CS 1 DICOM
#[rustfmt::skip]
pub const BULK_MOTION_COMPENSATION_TECHNIQUE: Tag = Tag(0x0018, 0x9172); // (0018,9172)
/// BulkMotionSignalSource (0018,9173) CS 1 DICOM
#[rustfmt::skip]
pub const BULK_MOTION_SIGNAL_SOURCE: Tag = Tag(0x0018, 0x9173); // (0018,9173)
/// ApplicableSafetyStandardAgency (0018,9174) CS 1 DICOM
#[rustfmt::skip]
pub const APPLICABLE_SAFETY_STANDARD_AGENCY: Tag = Tag(0x0018, 0x9174); // (0018,9174)
/// ApplicableSafetyStandardDescription (0018,9175) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICABLE_SAFETY_STANDARD_DESCRIPTION: Tag = Tag(0x0018, 0x9175); // (0018,9175)
/// OperatingModeSequence (0018,9176) SQ 1 DICOM
#[rustfmt::skip]
pub const OPERATING_MODE_SEQUENCE: Tag = Tag(0x0018, 0x9176); // (0018,9176)
/// OperatingModeType (0018,9177) CS 1 DICOM
#[rustfmt::skip]
pub const OPERATING_MODE_TYPE: Tag = Tag(0x0018, 0x9177); // (0018,9177)
/// OperatingMode (0018,9178) CS 1 DICOM
#[rustfmt::skip]
pub const OPERATING_MODE: Tag = Tag(0x0018, 0x9178); // (0018,9178)
/// SpecificAbsorptionRateDefinition (0018,9179) CS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIC_ABSORPTION_RATE_DEFINITION: Tag = Tag(0x0018, 0x9179); // (0018,9179)
/// GradientOutputType (0018,9180) CS 1 DICOM
#[rustfmt::skip]
pub const GRADIENT_OUTPUT_TYPE: Tag = Tag(0x0018, 0x9180); // (0018,9180)
/// SpecificAbsorptionRateValue (0018,9181) FD 1 DICOM
#[rustfmt::skip]
pub const SPECIFIC_ABSORPTION_RATE_VALUE: Tag = Tag(0x0018, 0x9181); // (0018,9181)
/// GradientOutput (0018,9182) FD 1 DICOM
#[rustfmt::skip]
pub const GRADIENT_OUTPUT: Tag = Tag(0x0018, 0x9182); // (0018,9182)
/// FlowCompensationDirection (0018,9183) CS 1 DICOM
#[rustfmt::skip]
pub const FLOW_COMPENSATION_DIRECTION: Tag = Tag(0x0018, 0x9183); // (0018,9183)
/// TaggingDelay (0018,9184) FD 1 DICOM
#[rustfmt::skip]
pub const TAGGING_DELAY: Tag = Tag(0x0018, 0x9184); // (0018,9184)
/// RespiratoryMotionCompensationTechniqueDescription (0018,9185) ST 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION: Tag = Tag(0x0018, 0x9185); // (0018,9185)
/// RespiratorySignalSourceID (0018,9186) SH 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_SIGNAL_SOURCE_ID: Tag = Tag(0x0018, 0x9186); // (0018,9186)
/// MRVelocityEncodingSequence (0018,9197) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_VELOCITY_ENCODING_SEQUENCE: Tag = Tag(0x0018, 0x9197); // (0018,9197)
/// FirstOrderPhaseCorrection (0018,9198) CS 1 DICOM
#[rustfmt::skip]
pub const FIRST_ORDER_PHASE_CORRECTION: Tag = Tag(0x0018, 0x9198); // (0018,9198)
/// WaterReferencedPhaseCorrection (0018,9199) CS 1 DICOM
#[rustfmt::skip]
pub const WATER_REFERENCED_PHASE_CORRECTION: Tag = Tag(0x0018, 0x9199); // (0018,9199)
/// MRSpectroscopyAcquisitionType (0018,9200) CS 1 DICOM
#[rustfmt::skip]
pub const MR_SPECTROSCOPY_ACQUISITION_TYPE: Tag = Tag(0x0018, 0x9200); // (0018,9200)
/// RespiratoryCyclePosition (0018,9214) CS 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_CYCLE_POSITION: Tag = Tag(0x0018, 0x9214); // (0018,9214)
/// VelocityEncodingMaximumValue (0018,9217) FD 1 DICOM
#[rustfmt::skip]
pub const VELOCITY_ENCODING_MAXIMUM_VALUE: Tag = Tag(0x0018, 0x9217); // (0018,9217)
/// TagSpacingSecondDimension (0018,9218) FD 1 DICOM
#[rustfmt::skip]
pub const TAG_SPACING_SECOND_DIMENSION: Tag = Tag(0x0018, 0x9218); // (0018,9218)
/// TagAngleSecondAxis (0018,9219) SS 1 DICOM
#[rustfmt::skip]
pub const TAG_ANGLE_SECOND_AXIS: Tag = Tag(0x0018, 0x9219); // (0018,9219)
/// FrameAcquisitionDuration (0018,9220) FD 1 DICOM
#[rustfmt::skip]
pub const FRAME_ACQUISITION_DURATION: Tag = Tag(0x0018, 0x9220); // (0018,9220)
/// MRImageFrameTypeSequence (0018,9226) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_IMAGE_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9226); // (0018,9226)
/// MRSpectroscopyFrameTypeSequence (0018,9227) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_SPECTROSCOPY_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9227); // (0018,9227)
/// MRAcquisitionPhaseEncodingStepsInPlane (0018,9231) US 1 DICOM
#[rustfmt::skip]
pub const MR_ACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE: Tag = Tag(0x0018, 0x9231); // (0018,9231)
/// MRAcquisitionPhaseEncodingStepsOutOfPlane (0018,9232) US 1 DICOM
#[rustfmt::skip]
pub const MR_ACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE: Tag = Tag(0x0018, 0x9232); // (0018,9232)
/// SpectroscopyAcquisitionPhaseColumns (0018,9234) UL 1 DICOM
#[rustfmt::skip]
pub const SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS: Tag = Tag(0x0018, 0x9234); // (0018,9234)
/// CardiacCyclePosition (0018,9236) CS 1 DICOM
#[rustfmt::skip]
pub const CARDIAC_CYCLE_POSITION: Tag = Tag(0x0018, 0x9236); // (0018,9236)
/// SpecificAbsorptionRateSequence (0018,9239) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIFIC_ABSORPTION_RATE_SEQUENCE: Tag = Tag(0x0018, 0x9239); // (0018,9239)
/// RFEchoTrainLength (0018,9240) US 1 DICOM
#[rustfmt::skip]
pub const RF_ECHO_TRAIN_LENGTH: Tag = Tag(0x0018, 0x9240); // (0018,9240)
/// GradientEchoTrainLength (0018,9241) US 1 DICOM
#[rustfmt::skip]
pub const GRADIENT_ECHO_TRAIN_LENGTH: Tag = Tag(0x0018, 0x9241); // (0018,9241)
/// ArterialSpinLabelingContrast (0018,9250) CS 1 DICOM
#[rustfmt::skip]
pub const ARTERIAL_SPIN_LABELING_CONTRAST: Tag = Tag(0x0018, 0x9250); // (0018,9250)
/// MRArterialSpinLabelingSequence (0018,9251) SQ 1 DICOM
#[rustfmt::skip]
pub const MR_ARTERIAL_SPIN_LABELING_SEQUENCE: Tag = Tag(0x0018, 0x9251); // (0018,9251)
/// ASLTechniqueDescription (0018,9252) LO 1 DICOM
#[rustfmt::skip]
pub const ASL_TECHNIQUE_DESCRIPTION: Tag = Tag(0x0018, 0x9252); // (0018,9252)
/// ASLSlabNumber (0018,9253) US 1 DICOM
#[rustfmt::skip]
pub const ASL_SLAB_NUMBER: Tag = Tag(0x0018, 0x9253); // (0018,9253)
/// ASLSlabThickness (0018,9254) FD 1 DICOM
#[rustfmt::skip]
pub const ASL_SLAB_THICKNESS: Tag = Tag(0x0018, 0x9254); // (0018,9254)
/// ASLSlabOrientation (0018,9255) FD 3 DICOM
#[rustfmt::skip]
pub const ASL_SLAB_ORIENTATION: Tag = Tag(0x0018, 0x9255); // (0018,9255)
/// ASLMidSlabPosition (0018,9256) FD 3 DICOM
#[rustfmt::skip]
pub const ASL_MID_SLAB_POSITION: Tag = Tag(0x0018, 0x9256); // (0018,9256)
/// ASLContext (0018,9257) CS 1 DICOM
#[rustfmt::skip]
pub const ASL_CONTEXT: Tag = Tag(0x0018, 0x9257); // (0018,9257)
/// ASLPulseTrainDuration (0018,9258) UL 1 DICOM
#[rustfmt::skip]
pub const ASL_PULSE_TRAIN_DURATION: Tag = Tag(0x0018, 0x9258); // (0018,9258)
/// ASLCrusherFlag (0018,9259) CS 1 DICOM
#[rustfmt::skip]
pub const ASL_CRUSHER_FLAG: Tag = Tag(0x0018, 0x9259); // (0018,9259)
/// ASLCrusherFlowLimit (0018,925A) FD 1 DICOM
#[rustfmt::skip]
pub const ASL_CRUSHER_FLOW_LIMIT: Tag = Tag(0x0018, 0x925A); // (0018,925A)
/// ASLCrusherDescription (0018,925B) LO 1 DICOM
#[rustfmt::skip]
pub const ASL_CRUSHER_DESCRIPTION: Tag = Tag(0x0018, 0x925B); // (0018,925B)
/// ASLBolusCutoffFlag (0018,925C) CS 1 DICOM
#[rustfmt::skip]
pub const ASL_BOLUS_CUTOFF_FLAG: Tag = Tag(0x0018, 0x925C); // (0018,925C)
/// ASLBolusCutoffTimingSequence (0018,925D) SQ 1 DICOM
#[rustfmt::skip]
pub const ASL_BOLUS_CUTOFF_TIMING_SEQUENCE: Tag = Tag(0x0018, 0x925D); // (0018,925D)
/// ASLBolusCutoffTechnique (0018,925E) LO 1 DICOM
#[rustfmt::skip]
pub const ASL_BOLUS_CUTOFF_TECHNIQUE: Tag = Tag(0x0018, 0x925E); // (0018,925E)
/// ASLBolusCutoffDelayTime (0018,925F) UL 1 DICOM
#[rustfmt::skip]
pub const ASL_BOLUS_CUTOFF_DELAY_TIME: Tag = Tag(0x0018, 0x925F); // (0018,925F)
/// ASLSlabSequence (0018,9260) SQ 1 DICOM
#[rustfmt::skip]
pub const ASL_SLAB_SEQUENCE: Tag = Tag(0x0018, 0x9260); // (0018,9260)
/// ChemicalShiftMinimumIntegrationLimitInppm (0018,9295) FD 1 DICOM
#[rustfmt::skip]
pub const CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM: Tag = Tag(0x0018, 0x9295); // (0018,9295)
/// ChemicalShiftMaximumIntegrationLimitInppm (0018,9296) FD 1 DICOM
#[rustfmt::skip]
pub const CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM: Tag = Tag(0x0018, 0x9296); // (0018,9296)
/// WaterReferenceAcquisition (0018,9297) CS 1 DICOM
#[rustfmt::skip]
pub const WATER_REFERENCE_ACQUISITION: Tag = Tag(0x0018, 0x9297); // (0018,9297)
/// EchoPeakPosition (0018,9298) IS 1 DICOM
#[rustfmt::skip]
pub const ECHO_PEAK_POSITION: Tag = Tag(0x0018, 0x9298); // (0018,9298)
/// CTAcquisitionTypeSequence (0018,9301) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_ACQUISITION_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9301); // (0018,9301)
/// AcquisitionType (0018,9302) CS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_TYPE: Tag = Tag(0x0018, 0x9302); // (0018,9302)
/// TubeAngle (0018,9303) FD 1 DICOM
#[rustfmt::skip]
pub const TUBE_ANGLE: Tag = Tag(0x0018, 0x9303); // (0018,9303)
/// CTAcquisitionDetailsSequence (0018,9304) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_ACQUISITION_DETAILS_SEQUENCE: Tag = Tag(0x0018, 0x9304); // (0018,9304)
/// RevolutionTime (0018,9305) FD 1 DICOM
#[rustfmt::skip]
pub const REVOLUTION_TIME: Tag = Tag(0x0018, 0x9305); // (0018,9305)
/// SingleCollimationWidth (0018,9306) FD 1 DICOM
#[rustfmt::skip]
pub const SINGLE_COLLIMATION_WIDTH: Tag = Tag(0x0018, 0x9306); // (0018,9306)
/// TotalCollimationWidth (0018,9307) FD 1 DICOM
#[rustfmt::skip]
pub const TOTAL_COLLIMATION_WIDTH: Tag = Tag(0x0018, 0x9307); // (0018,9307)
/// CTTableDynamicsSequence (0018,9308) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_TABLE_DYNAMICS_SEQUENCE: Tag = Tag(0x0018, 0x9308); // (0018,9308)
/// TableSpeed (0018,9309) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_SPEED: Tag = Tag(0x0018, 0x9309); // (0018,9309)
/// TableFeedPerRotation (0018,9310) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_FEED_PER_ROTATION: Tag = Tag(0x0018, 0x9310); // (0018,9310)
/// SpiralPitchFactor (0018,9311) FD 1 DICOM
#[rustfmt::skip]
pub const SPIRAL_PITCH_FACTOR: Tag = Tag(0x0018, 0x9311); // (0018,9311)
/// CTGeometrySequence (0018,9312) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_GEOMETRY_SEQUENCE: Tag = Tag(0x0018, 0x9312); // (0018,9312)
/// DataCollectionCenterPatient (0018,9313) FD 3 DICOM
#[rustfmt::skip]
pub const DATA_COLLECTION_CENTER_PATIENT: Tag = Tag(0x0018, 0x9313); // (0018,9313)
/// CTReconstructionSequence (0018,9314) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_RECONSTRUCTION_SEQUENCE: Tag = Tag(0x0018, 0x9314); // (0018,9314)
/// ReconstructionAlgorithm (0018,9315) CS 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_ALGORITHM: Tag = Tag(0x0018, 0x9315); // (0018,9315)
/// ConvolutionKernelGroup (0018,9316) CS 1 DICOM
#[rustfmt::skip]
pub const CONVOLUTION_KERNEL_GROUP: Tag = Tag(0x0018, 0x9316); // (0018,9316)
/// ReconstructionFieldOfView (0018,9317) FD 2 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_FIELD_OF_VIEW: Tag = Tag(0x0018, 0x9317); // (0018,9317)
/// ReconstructionTargetCenterPatient (0018,9318) FD 3 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_TARGET_CENTER_PATIENT: Tag = Tag(0x0018, 0x9318); // (0018,9318)
/// ReconstructionAngle (0018,9319) FD 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_ANGLE: Tag = Tag(0x0018, 0x9319); // (0018,9319)
/// ImageFilter (0018,9320) SH 1 DICOM
#[rustfmt::skip]
pub const IMAGE_FILTER: Tag = Tag(0x0018, 0x9320); // (0018,9320)
/// CTExposureSequence (0018,9321) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_EXPOSURE_SEQUENCE: Tag = Tag(0x0018, 0x9321); // (0018,9321)
/// ReconstructionPixelSpacing (0018,9322) FD 2 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_PIXEL_SPACING: Tag = Tag(0x0018, 0x9322); // (0018,9322)
/// ExposureModulationType (0018,9323) CS 1-n DICOM
#[rustfmt::skip]
pub const EXPOSURE_MODULATION_TYPE: Tag = Tag(0x0018, 0x9323); // (0018,9323)
/// EstimatedDoseSaving (0018,9324) FD 1 DICOM
#[rustfmt::skip]
pub const ESTIMATED_DOSE_SAVING: Tag = Tag(0x0018, 0x9324); // (0018,9324)
/// CTXRayDetailsSequence (0018,9325) SQ 1 DICOM
#[rustfmt::skip]
pub const CTX_RAY_DETAILS_SEQUENCE: Tag = Tag(0x0018, 0x9325); // (0018,9325)
/// CTPositionSequence (0018,9326) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_POSITION_SEQUENCE: Tag = Tag(0x0018, 0x9326); // (0018,9326)
/// TablePosition (0018,9327) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_POSITION: Tag = Tag(0x0018, 0x9327); // (0018,9327)
/// ExposureTimeInms (0018,9328) FD 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_TIME_INMS: Tag = Tag(0x0018, 0x9328); // (0018,9328)
/// CTImageFrameTypeSequence (0018,9329) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_IMAGE_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9329); // (0018,9329)
/// XRayTubeCurrentInmA (0018,9330) FD 1 DICOM
#[rustfmt::skip]
pub const X_RAY_TUBE_CURRENT_INM_A: Tag = Tag(0x0018, 0x9330); // (0018,9330)
/// ExposureInmAs (0018,9332) FD 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_INM_AS: Tag = Tag(0x0018, 0x9332); // (0018,9332)
/// ConstantVolumeFlag (0018,9333) CS 1 DICOM
#[rustfmt::skip]
pub const CONSTANT_VOLUME_FLAG: Tag = Tag(0x0018, 0x9333); // (0018,9333)
/// FluoroscopyFlag (0018,9334) CS 1 DICOM
#[rustfmt::skip]
pub const FLUOROSCOPY_FLAG: Tag = Tag(0x0018, 0x9334); // (0018,9334)
/// DistanceSourceToDataCollectionCenter (0018,9335) FD 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER: Tag = Tag(0x0018, 0x9335); // (0018,9335)
/// ContrastBolusAgentNumber (0018,9337) US 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_AGENT_NUMBER: Tag = Tag(0x0018, 0x9337); // (0018,9337)
/// ContrastBolusIngredientCodeSequence (0018,9338) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9338); // (0018,9338)
/// ContrastAdministrationProfileSequence (0018,9340) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE: Tag = Tag(0x0018, 0x9340); // (0018,9340)
/// ContrastBolusUsageSequence (0018,9341) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_USAGE_SEQUENCE: Tag = Tag(0x0018, 0x9341); // (0018,9341)
/// ContrastBolusAgentAdministered (0018,9342) CS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_AGENT_ADMINISTERED: Tag = Tag(0x0018, 0x9342); // (0018,9342)
/// ContrastBolusAgentDetected (0018,9343) CS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_AGENT_DETECTED: Tag = Tag(0x0018, 0x9343); // (0018,9343)
/// ContrastBolusAgentPhase (0018,9344) CS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_AGENT_PHASE: Tag = Tag(0x0018, 0x9344); // (0018,9344)
/// CTDIvol (0018,9345) FD 1 DICOM
#[rustfmt::skip]
pub const CTD_IVOL: Tag = Tag(0x0018, 0x9345); // (0018,9345)
/// CTDIPhantomTypeCodeSequence (0018,9346) SQ 1 DICOM
#[rustfmt::skip]
pub const CTDI_PHANTOM_TYPE_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9346); // (0018,9346)
/// CalciumScoringMassFactorPatient (0018,9351) FL 1 DICOM
#[rustfmt::skip]
pub const CALCIUM_SCORING_MASS_FACTOR_PATIENT: Tag = Tag(0x0018, 0x9351); // (0018,9351)
/// CalciumScoringMassFactorDevice (0018,9352) FL 3 DICOM
#[rustfmt::skip]
pub const CALCIUM_SCORING_MASS_FACTOR_DEVICE: Tag = Tag(0x0018, 0x9352); // (0018,9352)
/// EnergyWeightingFactor (0018,9353) FL 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WEIGHTING_FACTOR: Tag = Tag(0x0018, 0x9353); // (0018,9353)
/// CTAdditionalXRaySourceSequence (0018,9360) SQ 1 DICOM
#[rustfmt::skip]
pub const CT_ADDITIONAL_X_RAY_SOURCE_SEQUENCE: Tag = Tag(0x0018, 0x9360); // (0018,9360)
/// ProjectionPixelCalibrationSequence (0018,9401) SQ 1 DICOM
#[rustfmt::skip]
pub const PROJECTION_PIXEL_CALIBRATION_SEQUENCE: Tag = Tag(0x0018, 0x9401); // (0018,9401)
/// DistanceSourceToIsocenter (0018,9402) FL 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_SOURCE_TO_ISOCENTER: Tag = Tag(0x0018, 0x9402); // (0018,9402)
/// DistanceObjectToTableTop (0018,9403) FL 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_OBJECT_TO_TABLE_TOP: Tag = Tag(0x0018, 0x9403); // (0018,9403)
/// ObjectPixelSpacingInCenterOfBeam (0018,9404) FL 2 DICOM
#[rustfmt::skip]
pub const OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM: Tag = Tag(0x0018, 0x9404); // (0018,9404)
/// PositionerPositionSequence (0018,9405) SQ 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_POSITION_SEQUENCE: Tag = Tag(0x0018, 0x9405); // (0018,9405)
/// TablePositionSequence (0018,9406) SQ 1 DICOM
#[rustfmt::skip]
pub const TABLE_POSITION_SEQUENCE: Tag = Tag(0x0018, 0x9406); // (0018,9406)
/// CollimatorShapeSequence (0018,9407) SQ 1 DICOM
#[rustfmt::skip]
pub const COLLIMATOR_SHAPE_SEQUENCE: Tag = Tag(0x0018, 0x9407); // (0018,9407)
/// PlanesInAcquisition (0018,9410) CS 1 DICOM
#[rustfmt::skip]
pub const PLANES_IN_ACQUISITION: Tag = Tag(0x0018, 0x9410); // (0018,9410)
/// XAXRFFrameCharacteristicsSequence (0018,9412) SQ 1 DICOM
#[rustfmt::skip]
pub const XAXRF_FRAME_CHARACTERISTICS_SEQUENCE: Tag = Tag(0x0018, 0x9412); // (0018,9412)
/// FrameAcquisitionSequence (0018,9417) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_ACQUISITION_SEQUENCE: Tag = Tag(0x0018, 0x9417); // (0018,9417)
/// XRayReceptorType (0018,9420) CS 1 DICOM
#[rustfmt::skip]
pub const X_RAY_RECEPTOR_TYPE: Tag = Tag(0x0018, 0x9420); // (0018,9420)
/// AcquisitionProtocolName (0018,9423) LO 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_PROTOCOL_NAME: Tag = Tag(0x0018, 0x9423); // (0018,9423)
/// AcquisitionProtocolDescription (0018,9424) LT 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_PROTOCOL_DESCRIPTION: Tag = Tag(0x0018, 0x9424); // (0018,9424)
/// ContrastBolusIngredientOpaque (0018,9425) CS 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_INGREDIENT_OPAQUE: Tag = Tag(0x0018, 0x9425); // (0018,9425)
/// DistanceReceptorPlaneToDetectorHousing (0018,9426) FL 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING: Tag = Tag(0x0018, 0x9426); // (0018,9426)
/// IntensifierActiveShape (0018,9427) CS 1 DICOM
#[rustfmt::skip]
pub const INTENSIFIER_ACTIVE_SHAPE: Tag = Tag(0x0018, 0x9427); // (0018,9427)
/// IntensifierActiveDimensions (0018,9428) FL 1-2 DICOM
#[rustfmt::skip]
pub const INTENSIFIER_ACTIVE_DIMENSIONS: Tag = Tag(0x0018, 0x9428); // (0018,9428)
/// PhysicalDetectorSize (0018,9429) FL 2 DICOM
#[rustfmt::skip]
pub const PHYSICAL_DETECTOR_SIZE: Tag = Tag(0x0018, 0x9429); // (0018,9429)
/// PositionOfIsocenterProjection (0018,9430) FL 2 DICOM
#[rustfmt::skip]
pub const POSITION_OF_ISOCENTER_PROJECTION: Tag = Tag(0x0018, 0x9430); // (0018,9430)
/// FieldOfViewSequence (0018,9432) SQ 1 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_SEQUENCE: Tag = Tag(0x0018, 0x9432); // (0018,9432)
/// FieldOfViewDescription (0018,9433) LO 1 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_DESCRIPTION: Tag = Tag(0x0018, 0x9433); // (0018,9433)
/// ExposureControlSensingRegionsSequence (0018,9434) SQ 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE: Tag = Tag(0x0018, 0x9434); // (0018,9434)
/// ExposureControlSensingRegionShape (0018,9435) CS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_SENSING_REGION_SHAPE: Tag = Tag(0x0018, 0x9435); // (0018,9435)
/// ExposureControlSensingRegionLeftVerticalEdge (0018,9436) SS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE: Tag = Tag(0x0018, 0x9436); // (0018,9436)
/// ExposureControlSensingRegionRightVerticalEdge (0018,9437) SS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE: Tag = Tag(0x0018, 0x9437); // (0018,9437)
/// ExposureControlSensingRegionUpperHorizontalEdge (0018,9438) SS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE: Tag = Tag(0x0018, 0x9438); // (0018,9438)
/// ExposureControlSensingRegionLowerHorizontalEdge (0018,9439) SS 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE: Tag = Tag(0x0018, 0x9439); // (0018,9439)
/// CenterOfCircularExposureControlSensingRegion (0018,9440) SS 2 DICOM
#[rustfmt::skip]
pub const CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION: Tag = Tag(0x0018, 0x9440); // (0018,9440)
/// RadiusOfCircularExposureControlSensingRegion (0018,9441) US 1 DICOM
#[rustfmt::skip]
pub const RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION: Tag = Tag(0x0018, 0x9441); // (0018,9441)
/// VerticesOfThePolygonalExposureControlSensingRegion (0018,9442) SS 2-n DICOM
#[rustfmt::skip]
pub const VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION: Tag = Tag(0x0018, 0x9442); // (0018,9442)
/// ColumnAngulationPatient (0018,9447) FL 1 DICOM
#[rustfmt::skip]
pub const COLUMN_ANGULATION_PATIENT: Tag = Tag(0x0018, 0x9447); // (0018,9447)
/// BeamAngle (0018,9449) FL 1 DICOM
#[rustfmt::skip]
pub const BEAM_ANGLE: Tag = Tag(0x0018, 0x9449); // (0018,9449)
/// FrameDetectorParametersSequence (0018,9451) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_DETECTOR_PARAMETERS_SEQUENCE: Tag = Tag(0x0018, 0x9451); // (0018,9451)
/// CalculatedAnatomyThickness (0018,9452) FL 1 DICOM
#[rustfmt::skip]
pub const CALCULATED_ANATOMY_THICKNESS: Tag = Tag(0x0018, 0x9452); // (0018,9452)
/// CalibrationSequence (0018,9455) SQ 1 DICOM
#[rustfmt::skip]
pub const CALIBRATION_SEQUENCE: Tag = Tag(0x0018, 0x9455); // (0018,9455)
/// ObjectThicknessSequence (0018,9456) SQ 1 DICOM
#[rustfmt::skip]
pub const OBJECT_THICKNESS_SEQUENCE: Tag = Tag(0x0018, 0x9456); // (0018,9456)
/// PlaneIdentification (0018,9457) CS 1 DICOM
#[rustfmt::skip]
pub const PLANE_IDENTIFICATION: Tag = Tag(0x0018, 0x9457); // (0018,9457)
/// FieldOfViewDimensionsInFloat (0018,9461) FL 1-2 DICOM
#[rustfmt::skip]
pub const FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT: Tag = Tag(0x0018, 0x9461); // (0018,9461)
/// IsocenterReferenceSystemSequence (0018,9462) SQ 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_REFERENCE_SYSTEM_SEQUENCE: Tag = Tag(0x0018, 0x9462); // (0018,9462)
/// PositionerIsocenterPrimaryAngle (0018,9463) FL 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_ISOCENTER_PRIMARY_ANGLE: Tag = Tag(0x0018, 0x9463); // (0018,9463)
/// PositionerIsocenterSecondaryAngle (0018,9464) FL 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_ISOCENTER_SECONDARY_ANGLE: Tag = Tag(0x0018, 0x9464); // (0018,9464)
/// PositionerIsocenterDetectorRotationAngle (0018,9465) FL 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE: Tag = Tag(0x0018, 0x9465); // (0018,9465)
/// TableXPositionToIsocenter (0018,9466) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_X_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9466); // (0018,9466)
/// TableYPositionToIsocenter (0018,9467) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_Y_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9467); // (0018,9467)
/// TableZPositionToIsocenter (0018,9468) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_Z_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9468); // (0018,9468)
/// TableHorizontalRotationAngle (0018,9469) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_HORIZONTAL_ROTATION_ANGLE: Tag = Tag(0x0018, 0x9469); // (0018,9469)
/// TableHeadTiltAngle (0018,9470) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_HEAD_TILT_ANGLE: Tag = Tag(0x0018, 0x9470); // (0018,9470)
/// TableCradleTiltAngle (0018,9471) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_CRADLE_TILT_ANGLE: Tag = Tag(0x0018, 0x9471); // (0018,9471)
/// FrameDisplayShutterSequence (0018,9472) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_DISPLAY_SHUTTER_SEQUENCE: Tag = Tag(0x0018, 0x9472); // (0018,9472)
/// AcquiredImageAreaDoseProduct (0018,9473) FL 1 DICOM
#[rustfmt::skip]
pub const ACQUIRED_IMAGE_AREA_DOSE_PRODUCT: Tag = Tag(0x0018, 0x9473); // (0018,9473)
/// CArmPositionerTabletopRelationship (0018,9474) CS 1 DICOM
#[rustfmt::skip]
pub const C_ARM_POSITIONER_TABLETOP_RELATIONSHIP: Tag = Tag(0x0018, 0x9474); // (0018,9474)
/// XRayGeometrySequence (0018,9476) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY_GEOMETRY_SEQUENCE: Tag = Tag(0x0018, 0x9476); // (0018,9476)
/// IrradiationEventIdentificationSequence (0018,9477) SQ 1 DICOM
#[rustfmt::skip]
pub const IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x9477); // (0018,9477)
/// XRay3DFrameTypeSequence (0018,9504) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY3_D_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9504); // (0018,9504)
/// ContributingSourcesSequence (0018,9506) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRIBUTING_SOURCES_SEQUENCE: Tag = Tag(0x0018, 0x9506); // (0018,9506)
/// XRay3DAcquisitionSequence (0018,9507) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY3_D_ACQUISITION_SEQUENCE: Tag = Tag(0x0018, 0x9507); // (0018,9507)
/// PrimaryPositionerScanArc (0018,9508) FL 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_POSITIONER_SCAN_ARC: Tag = Tag(0x0018, 0x9508); // (0018,9508)
/// SecondaryPositionerScanArc (0018,9509) FL 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_POSITIONER_SCAN_ARC: Tag = Tag(0x0018, 0x9509); // (0018,9509)
/// PrimaryPositionerScanStartAngle (0018,9510) FL 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_POSITIONER_SCAN_START_ANGLE: Tag = Tag(0x0018, 0x9510); // (0018,9510)
/// SecondaryPositionerScanStartAngle (0018,9511) FL 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_POSITIONER_SCAN_START_ANGLE: Tag = Tag(0x0018, 0x9511); // (0018,9511)
/// PrimaryPositionerIncrement (0018,9514) FL 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_POSITIONER_INCREMENT: Tag = Tag(0x0018, 0x9514); // (0018,9514)
/// SecondaryPositionerIncrement (0018,9515) FL 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_POSITIONER_INCREMENT: Tag = Tag(0x0018, 0x9515); // (0018,9515)
/// StartAcquisitionDateTime (0018,9516) DT 1 DICOM
#[rustfmt::skip]
pub const START_ACQUISITION_DATE_TIME: Tag = Tag(0x0018, 0x9516); // (0018,9516)
/// EndAcquisitionDateTime (0018,9517) DT 1 DICOM
#[rustfmt::skip]
pub const END_ACQUISITION_DATE_TIME: Tag = Tag(0x0018, 0x9517); // (0018,9517)
/// PrimaryPositionerIncrementSign (0018,9518) SS 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_POSITIONER_INCREMENT_SIGN: Tag = Tag(0x0018, 0x9518); // (0018,9518)
/// SecondaryPositionerIncrementSign (0018,9519) SS 1 DICOM
#[rustfmt::skip]
pub const SECONDARY_POSITIONER_INCREMENT_SIGN: Tag = Tag(0x0018, 0x9519); // (0018,9519)
/// ApplicationName (0018,9524) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_NAME: Tag = Tag(0x0018, 0x9524); // (0018,9524)
/// ApplicationVersion (0018,9525) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_VERSION: Tag = Tag(0x0018, 0x9525); // (0018,9525)
/// ApplicationManufacturer (0018,9526) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_MANUFACTURER: Tag = Tag(0x0018, 0x9526); // (0018,9526)
/// AlgorithmType (0018,9527) CS 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_TYPE: Tag = Tag(0x0018, 0x9527); // (0018,9527)
/// AlgorithmDescription (0018,9528) LO 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_DESCRIPTION: Tag = Tag(0x0018, 0x9528); // (0018,9528)
/// XRay3DReconstructionSequence (0018,9530) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY3_D_RECONSTRUCTION_SEQUENCE: Tag = Tag(0x0018, 0x9530); // (0018,9530)
/// ReconstructionDescription (0018,9531) LO 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_DESCRIPTION: Tag = Tag(0x0018, 0x9531); // (0018,9531)
/// PerProjectionAcquisitionSequence (0018,9538) SQ 1 DICOM
#[rustfmt::skip]
pub const PER_PROJECTION_ACQUISITION_SEQUENCE: Tag = Tag(0x0018, 0x9538); // (0018,9538)
/// DetectorPositionSequence (0018,9541) SQ 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_POSITION_SEQUENCE: Tag = Tag(0x0018, 0x9541); // (0018,9541)
/// XRayAcquisitionDoseSequence (0018,9542) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY_ACQUISITION_DOSE_SEQUENCE: Tag = Tag(0x0018, 0x9542); // (0018,9542)
/// XRaySourceIsocenterPrimaryAngle (0018,9543) FD 1 DICOM
#[rustfmt::skip]
pub const X_RAY_SOURCE_ISOCENTER_PRIMARY_ANGLE: Tag = Tag(0x0018, 0x9543); // (0018,9543)
/// XRaySourceIsocenterSecondaryAngle (0018,9544) FD 1 DICOM
#[rustfmt::skip]
pub const X_RAY_SOURCE_ISOCENTER_SECONDARY_ANGLE: Tag = Tag(0x0018, 0x9544); // (0018,9544)
/// BreastSupportIsocenterPrimaryAngle (0018,9545) FD 1 DICOM
#[rustfmt::skip]
pub const BREAST_SUPPORT_ISOCENTER_PRIMARY_ANGLE: Tag = Tag(0x0018, 0x9545); // (0018,9545)
/// BreastSupportIsocenterSecondaryAngle (0018,9546) FD 1 DICOM
#[rustfmt::skip]
pub const BREAST_SUPPORT_ISOCENTER_SECONDARY_ANGLE: Tag = Tag(0x0018, 0x9546); // (0018,9546)
/// BreastSupportXPositionToIsocenter (0018,9547) FD 1 DICOM
#[rustfmt::skip]
pub const BREAST_SUPPORT_X_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9547); // (0018,9547)
/// BreastSupportYPositionToIsocenter (0018,9548) FD 1 DICOM
#[rustfmt::skip]
pub const BREAST_SUPPORT_Y_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9548); // (0018,9548)
/// BreastSupportZPositionToIsocenter (0018,9549) FD 1 DICOM
#[rustfmt::skip]
pub const BREAST_SUPPORT_Z_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9549); // (0018,9549)
/// DetectorIsocenterPrimaryAngle (0018,9550) FD 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_ISOCENTER_PRIMARY_ANGLE: Tag = Tag(0x0018, 0x9550); // (0018,9550)
/// DetectorIsocenterSecondaryAngle (0018,9551) FD 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_ISOCENTER_SECONDARY_ANGLE: Tag = Tag(0x0018, 0x9551); // (0018,9551)
/// DetectorXPositionToIsocenter (0018,9552) FD 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_X_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9552); // (0018,9552)
/// DetectorYPositionToIsocenter (0018,9553) FD 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_Y_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9553); // (0018,9553)
/// DetectorZPositionToIsocenter (0018,9554) FD 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_Z_POSITION_TO_ISOCENTER: Tag = Tag(0x0018, 0x9554); // (0018,9554)
/// XRayGridSequence (0018,9555) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY_GRID_SEQUENCE: Tag = Tag(0x0018, 0x9555); // (0018,9555)
/// XRayFilterSequence (0018,9556) SQ 1 DICOM
#[rustfmt::skip]
pub const X_RAY_FILTER_SEQUENCE: Tag = Tag(0x0018, 0x9556); // (0018,9556)
/// DetectorActiveAreaTLHCPosition (0018,9557) FD 3 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVE_AREA_TLHC_POSITION: Tag = Tag(0x0018, 0x9557); // (0018,9557)
/// DetectorActiveAreaOrientation (0018,9558) FD 6 DICOM
#[rustfmt::skip]
pub const DETECTOR_ACTIVE_AREA_ORIENTATION: Tag = Tag(0x0018, 0x9558); // (0018,9558)
/// PositionerPrimaryAngleDirection (0018,9559) CS 1 DICOM
#[rustfmt::skip]
pub const POSITIONER_PRIMARY_ANGLE_DIRECTION: Tag = Tag(0x0018, 0x9559); // (0018,9559)
/// DiffusionBMatrixSequence (0018,9601) SQ 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_MATRIX_SEQUENCE: Tag = Tag(0x0018, 0x9601); // (0018,9601)
/// DiffusionBValueXX (0018,9602) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE_XX: Tag = Tag(0x0018, 0x9602); // (0018,9602)
/// DiffusionBValueXY (0018,9603) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE_XY: Tag = Tag(0x0018, 0x9603); // (0018,9603)
/// DiffusionBValueXZ (0018,9604) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE_XZ: Tag = Tag(0x0018, 0x9604); // (0018,9604)
/// DiffusionBValueYY (0018,9605) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE_YY: Tag = Tag(0x0018, 0x9605); // (0018,9605)
/// DiffusionBValueYZ (0018,9606) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE_YZ: Tag = Tag(0x0018, 0x9606); // (0018,9606)
/// DiffusionBValueZZ (0018,9607) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_B_VALUE_ZZ: Tag = Tag(0x0018, 0x9607); // (0018,9607)
/// FunctionalMRSequence (0018,9621) SQ 1 DICOM
#[rustfmt::skip]
pub const FUNCTIONAL_MR_SEQUENCE: Tag = Tag(0x0018, 0x9621); // (0018,9621)
/// FunctionalSettlingPhaseFramesPresent (0018,9622) CS 1 DICOM
#[rustfmt::skip]
pub const FUNCTIONAL_SETTLING_PHASE_FRAMES_PRESENT: Tag = Tag(0x0018, 0x9622); // (0018,9622)
/// FunctionalSyncPulse (0018,9623) DT 1 DICOM
#[rustfmt::skip]
pub const FUNCTIONAL_SYNC_PULSE: Tag = Tag(0x0018, 0x9623); // (0018,9623)
/// SettlingPhaseFrame (0018,9624) CS 1 DICOM
#[rustfmt::skip]
pub const SETTLING_PHASE_FRAME: Tag = Tag(0x0018, 0x9624); // (0018,9624)
/// DecayCorrectionDateTime (0018,9701) DT 1 DICOM
#[rustfmt::skip]
pub const DECAY_CORRECTION_DATE_TIME: Tag = Tag(0x0018, 0x9701); // (0018,9701)
/// StartDensityThreshold (0018,9715) FD 1 DICOM
#[rustfmt::skip]
pub const START_DENSITY_THRESHOLD: Tag = Tag(0x0018, 0x9715); // (0018,9715)
/// StartRelativeDensityDifferenceThreshold (0018,9716) FD 1 DICOM
#[rustfmt::skip]
pub const START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD: Tag = Tag(0x0018, 0x9716); // (0018,9716)
/// StartCardiacTriggerCountThreshold (0018,9717) FD 1 DICOM
#[rustfmt::skip]
pub const START_CARDIAC_TRIGGER_COUNT_THRESHOLD: Tag = Tag(0x0018, 0x9717); // (0018,9717)
/// StartRespiratoryTriggerCountThreshold (0018,9718) FD 1 DICOM
#[rustfmt::skip]
pub const START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD: Tag = Tag(0x0018, 0x9718); // (0018,9718)
/// TerminationCountsThreshold (0018,9719) FD 1 DICOM
#[rustfmt::skip]
pub const TERMINATION_COUNTS_THRESHOLD: Tag = Tag(0x0018, 0x9719); // (0018,9719)
/// TerminationDensityThreshold (0018,9720) FD 1 DICOM
#[rustfmt::skip]
pub const TERMINATION_DENSITY_THRESHOLD: Tag = Tag(0x0018, 0x9720); // (0018,9720)
/// TerminationRelativeDensityThreshold (0018,9721) FD 1 DICOM
#[rustfmt::skip]
pub const TERMINATION_RELATIVE_DENSITY_THRESHOLD: Tag = Tag(0x0018, 0x9721); // (0018,9721)
/// TerminationTimeThreshold (0018,9722) FD 1 DICOM
#[rustfmt::skip]
pub const TERMINATION_TIME_THRESHOLD: Tag = Tag(0x0018, 0x9722); // (0018,9722)
/// TerminationCardiacTriggerCountThreshold (0018,9723) FD 1 DICOM
#[rustfmt::skip]
pub const TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD: Tag = Tag(0x0018, 0x9723); // (0018,9723)
/// TerminationRespiratoryTriggerCountThreshold (0018,9724) FD 1 DICOM
#[rustfmt::skip]
pub const TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD: Tag = Tag(0x0018, 0x9724); // (0018,9724)
/// DetectorGeometry (0018,9725) CS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_GEOMETRY: Tag = Tag(0x0018, 0x9725); // (0018,9725)
/// TransverseDetectorSeparation (0018,9726) FD 1 DICOM
#[rustfmt::skip]
pub const TRANSVERSE_DETECTOR_SEPARATION: Tag = Tag(0x0018, 0x9726); // (0018,9726)
/// AxialDetectorDimension (0018,9727) FD 1 DICOM
#[rustfmt::skip]
pub const AXIAL_DETECTOR_DIMENSION: Tag = Tag(0x0018, 0x9727); // (0018,9727)
/// RadiopharmaceuticalAgentNumber (0018,9729) US 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_AGENT_NUMBER: Tag = Tag(0x0018, 0x9729); // (0018,9729)
/// PETFrameAcquisitionSequence (0018,9732) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_FRAME_ACQUISITION_SEQUENCE: Tag = Tag(0x0018, 0x9732); // (0018,9732)
/// PETDetectorMotionDetailsSequence (0018,9733) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_DETECTOR_MOTION_DETAILS_SEQUENCE: Tag = Tag(0x0018, 0x9733); // (0018,9733)
/// PETTableDynamicsSequence (0018,9734) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_TABLE_DYNAMICS_SEQUENCE: Tag = Tag(0x0018, 0x9734); // (0018,9734)
/// PETPositionSequence (0018,9735) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_POSITION_SEQUENCE: Tag = Tag(0x0018, 0x9735); // (0018,9735)
/// PETFrameCorrectionFactorsSequence (0018,9736) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_FRAME_CORRECTION_FACTORS_SEQUENCE: Tag = Tag(0x0018, 0x9736); // (0018,9736)
/// RadiopharmaceuticalUsageSequence (0018,9737) SQ 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_USAGE_SEQUENCE: Tag = Tag(0x0018, 0x9737); // (0018,9737)
/// AttenuationCorrectionSource (0018,9738) CS 1 DICOM
#[rustfmt::skip]
pub const ATTENUATION_CORRECTION_SOURCE: Tag = Tag(0x0018, 0x9738); // (0018,9738)
/// NumberOfIterations (0018,9739) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_ITERATIONS: Tag = Tag(0x0018, 0x9739); // (0018,9739)
/// NumberOfSubsets (0018,9740) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SUBSETS: Tag = Tag(0x0018, 0x9740); // (0018,9740)
/// PETReconstructionSequence (0018,9749) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_RECONSTRUCTION_SEQUENCE: Tag = Tag(0x0018, 0x9749); // (0018,9749)
/// PETFrameTypeSequence (0018,9751) SQ 1 DICOM
#[rustfmt::skip]
pub const PET_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9751); // (0018,9751)
/// TimeOfFlightInformationUsed (0018,9755) CS 1 DICOM
#[rustfmt::skip]
pub const TIME_OF_FLIGHT_INFORMATION_USED: Tag = Tag(0x0018, 0x9755); // (0018,9755)
/// ReconstructionType (0018,9756) CS 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_TYPE: Tag = Tag(0x0018, 0x9756); // (0018,9756)
/// DecayCorrected (0018,9758) CS 1 DICOM
#[rustfmt::skip]
pub const DECAY_CORRECTED: Tag = Tag(0x0018, 0x9758); // (0018,9758)
/// AttenuationCorrected (0018,9759) CS 1 DICOM
#[rustfmt::skip]
pub const ATTENUATION_CORRECTED: Tag = Tag(0x0018, 0x9759); // (0018,9759)
/// ScatterCorrected (0018,9760) CS 1 DICOM
#[rustfmt::skip]
pub const SCATTER_CORRECTED: Tag = Tag(0x0018, 0x9760); // (0018,9760)
/// DeadTimeCorrected (0018,9761) CS 1 DICOM
#[rustfmt::skip]
pub const DEAD_TIME_CORRECTED: Tag = Tag(0x0018, 0x9761); // (0018,9761)
/// GantryMotionCorrected (0018,9762) CS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_MOTION_CORRECTED: Tag = Tag(0x0018, 0x9762); // (0018,9762)
/// PatientMotionCorrected (0018,9763) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_MOTION_CORRECTED: Tag = Tag(0x0018, 0x9763); // (0018,9763)
/// CountLossNormalizationCorrected (0018,9764) CS 1 DICOM
#[rustfmt::skip]
pub const COUNT_LOSS_NORMALIZATION_CORRECTED: Tag = Tag(0x0018, 0x9764); // (0018,9764)
/// RandomsCorrected (0018,9765) CS 1 DICOM
#[rustfmt::skip]
pub const RANDOMS_CORRECTED: Tag = Tag(0x0018, 0x9765); // (0018,9765)
/// NonUniformRadialSamplingCorrected (0018,9766) CS 1 DICOM
#[rustfmt::skip]
pub const NON_UNIFORM_RADIAL_SAMPLING_CORRECTED: Tag = Tag(0x0018, 0x9766); // (0018,9766)
/// SensitivityCalibrated (0018,9767) CS 1 DICOM
#[rustfmt::skip]
pub const SENSITIVITY_CALIBRATED: Tag = Tag(0x0018, 0x9767); // (0018,9767)
/// DetectorNormalizationCorrection (0018,9768) CS 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_NORMALIZATION_CORRECTION: Tag = Tag(0x0018, 0x9768); // (0018,9768)
/// IterativeReconstructionMethod (0018,9769) CS 1 DICOM
#[rustfmt::skip]
pub const ITERATIVE_RECONSTRUCTION_METHOD: Tag = Tag(0x0018, 0x9769); // (0018,9769)
/// AttenuationCorrectionTemporalRelationship (0018,9770) CS 1 DICOM
#[rustfmt::skip]
pub const ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP: Tag = Tag(0x0018, 0x9770); // (0018,9770)
/// PatientPhysiologicalStateSequence (0018,9771) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE: Tag = Tag(0x0018, 0x9771); // (0018,9771)
/// PatientPhysiologicalStateCodeSequence (0018,9772) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9772); // (0018,9772)
/// DepthsOfFocus (0018,9801) FD 1-n DICOM
#[rustfmt::skip]
pub const DEPTHS_OF_FOCUS: Tag = Tag(0x0018, 0x9801); // (0018,9801)
/// ExcludedIntervalsSequence (0018,9803) SQ 1 DICOM
#[rustfmt::skip]
pub const EXCLUDED_INTERVALS_SEQUENCE: Tag = Tag(0x0018, 0x9803); // (0018,9803)
/// ExclusionStartDateTime (0018,9804) DT 1 DICOM
#[rustfmt::skip]
pub const EXCLUSION_START_DATE_TIME: Tag = Tag(0x0018, 0x9804); // (0018,9804)
/// ExclusionDuration (0018,9805) FD 1 DICOM
#[rustfmt::skip]
pub const EXCLUSION_DURATION: Tag = Tag(0x0018, 0x9805); // (0018,9805)
/// USImageDescriptionSequence (0018,9806) SQ 1 DICOM
#[rustfmt::skip]
pub const US_IMAGE_DESCRIPTION_SEQUENCE: Tag = Tag(0x0018, 0x9806); // (0018,9806)
/// ImageDataTypeSequence (0018,9807) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_DATA_TYPE_SEQUENCE: Tag = Tag(0x0018, 0x9807); // (0018,9807)
/// DataType (0018,9808) CS 1 DICOM
#[rustfmt::skip]
pub const DATA_TYPE: Tag = Tag(0x0018, 0x9808); // (0018,9808)
/// TransducerScanPatternCodeSequence (0018,9809) SQ 1 DICOM
#[rustfmt::skip]
pub const TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9809); // (0018,9809)
/// AliasedDataType (0018,980B) CS 1 DICOM
#[rustfmt::skip]
pub const ALIASED_DATA_TYPE: Tag = Tag(0x0018, 0x980B); // (0018,980B)
/// PositionMeasuringDeviceUsed (0018,980C) CS 1 DICOM
#[rustfmt::skip]
pub const POSITION_MEASURING_DEVICE_USED: Tag = Tag(0x0018, 0x980C); // (0018,980C)
/// TransducerGeometryCodeSequence (0018,980D) SQ 1 DICOM
#[rustfmt::skip]
pub const TRANSDUCER_GEOMETRY_CODE_SEQUENCE: Tag = Tag(0x0018, 0x980D); // (0018,980D)
/// TransducerBeamSteeringCodeSequence (0018,980E) SQ 1 DICOM
#[rustfmt::skip]
pub const TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE: Tag = Tag(0x0018, 0x980E); // (0018,980E)
/// TransducerApplicationCodeSequence (0018,980F) SQ 1 DICOM
#[rustfmt::skip]
pub const TRANSDUCER_APPLICATION_CODE_SEQUENCE: Tag = Tag(0x0018, 0x980F); // (0018,980F)
/// ZeroVelocityPixelValue (0018,9810) US 1 DICOM
#[rustfmt::skip]
pub const ZERO_VELOCITY_PIXEL_VALUE: Tag = Tag(0x0018, 0x9810); // (0018,9810)
/// ReferenceLocationLabel (0018,9900) LO 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_LOCATION_LABEL: Tag = Tag(0x0018, 0x9900); // (0018,9900)
/// ReferenceLocationDescription (0018,9901) UT 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_LOCATION_DESCRIPTION: Tag = Tag(0x0018, 0x9901); // (0018,9901)
/// ReferenceBasisCodeSequence (0018,9902) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_BASIS_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9902); // (0018,9902)
/// ReferenceGeometryCodeSequence (0018,9903) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_GEOMETRY_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9903); // (0018,9903)
/// OffsetDistance (0018,9904) DS 1 DICOM
#[rustfmt::skip]
pub const OFFSET_DISTANCE: Tag = Tag(0x0018, 0x9904); // (0018,9904)
/// OffsetDirection (0018,9905) CS 1 DICOM
#[rustfmt::skip]
pub const OFFSET_DIRECTION: Tag = Tag(0x0018, 0x9905); // (0018,9905)
/// PotentialScheduledProtocolCodeSequence (0018,9906) SQ 1 DICOM
#[rustfmt::skip]
pub const POTENTIAL_SCHEDULED_PROTOCOL_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9906); // (0018,9906)
/// PotentialRequestedProcedureCodeSequence (0018,9907) SQ 1 DICOM
#[rustfmt::skip]
pub const POTENTIAL_REQUESTED_PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9907); // (0018,9907)
/// PotentialReasonsForProcedure (0018,9908) UC 1-n DICOM
#[rustfmt::skip]
pub const POTENTIAL_REASONS_FOR_PROCEDURE: Tag = Tag(0x0018, 0x9908); // (0018,9908)
/// PotentialReasonsForProcedureCodeSequence (0018,9909) SQ 1 DICOM
#[rustfmt::skip]
pub const POTENTIAL_REASONS_FOR_PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0018, 0x9909); // (0018,9909)
/// PotentialDiagnosticTasks (0018,990A) UC 1-n DICOM
#[rustfmt::skip]
pub const POTENTIAL_DIAGNOSTIC_TASKS: Tag = Tag(0x0018, 0x990A); // (0018,990A)
/// ContraindicationsCodeSequence (0018,990B) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRAINDICATIONS_CODE_SEQUENCE: Tag = Tag(0x0018, 0x990B); // (0018,990B)
/// ReferencedDefinedProtocolSequence (0018,990C) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_DEFINED_PROTOCOL_SEQUENCE: Tag = Tag(0x0018, 0x990C); // (0018,990C)
/// ReferencedPerformedProtocolSequence (0018,990D) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PERFORMED_PROTOCOL_SEQUENCE: Tag = Tag(0x0018, 0x990D); // (0018,990D)
/// PredecessorProtocolSequence (0018,990E) SQ 1 DICOM
#[rustfmt::skip]
pub const PREDECESSOR_PROTOCOL_SEQUENCE: Tag = Tag(0x0018, 0x990E); // (0018,990E)
/// ProtocolPlanningInformation (0018,990F) UT 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_PLANNING_INFORMATION: Tag = Tag(0x0018, 0x990F); // (0018,990F)
/// ProtocolDesignRationale (0018,9910) UT 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_DESIGN_RATIONALE: Tag = Tag(0x0018, 0x9910); // (0018,9910)
/// PatientSpecificationSequence (0018,9911) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SPECIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x9911); // (0018,9911)
/// ModelSpecificationSequence (0018,9912) SQ 1 DICOM
#[rustfmt::skip]
pub const MODEL_SPECIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x9912); // (0018,9912)
/// ParametersSpecificationSequence (0018,9913) SQ 1 DICOM
#[rustfmt::skip]
pub const PARAMETERS_SPECIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x9913); // (0018,9913)
/// InstructionSequence (0018,9914) SQ 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_SEQUENCE: Tag = Tag(0x0018, 0x9914); // (0018,9914)
/// InstructionIndex (0018,9915) US 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_INDEX: Tag = Tag(0x0018, 0x9915); // (0018,9915)
/// InstructionText (0018,9916) LO 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_TEXT: Tag = Tag(0x0018, 0x9916); // (0018,9916)
/// InstructionDescription (0018,9917) UT 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_DESCRIPTION: Tag = Tag(0x0018, 0x9917); // (0018,9917)
/// InstructionPerformedFlag (0018,9918) CS 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_PERFORMED_FLAG: Tag = Tag(0x0018, 0x9918); // (0018,9918)
/// InstructionPerformedDateTime (0018,9919) DT 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_PERFORMED_DATE_TIME: Tag = Tag(0x0018, 0x9919); // (0018,9919)
/// InstructionPerformanceComment (0018,991A) UT 1 DICOM
#[rustfmt::skip]
pub const INSTRUCTION_PERFORMANCE_COMMENT: Tag = Tag(0x0018, 0x991A); // (0018,991A)
/// PatientPositioningInstructionSequence (0018,991B) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_POSITIONING_INSTRUCTION_SEQUENCE: Tag = Tag(0x0018, 0x991B); // (0018,991B)
/// PositioningMethodCodeSequence (0018,991C) SQ 1 DICOM
#[rustfmt::skip]
pub const POSITIONING_METHOD_CODE_SEQUENCE: Tag = Tag(0x0018, 0x991C); // (0018,991C)
/// PositioningLandmarkSequence (0018,991D) SQ 1 DICOM
#[rustfmt::skip]
pub const POSITIONING_LANDMARK_SEQUENCE: Tag = Tag(0x0018, 0x991D); // (0018,991D)
/// TargetFrameOfReferenceUID (0018,991E) UI 1 DICOM
#[rustfmt::skip]
pub const TARGET_FRAME_OF_REFERENCE_UID: Tag = Tag(0x0018, 0x991E); // (0018,991E)
/// AcquisitionProtocolElementSpecificationSequence (0018,991F) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x991F); // (0018,991F)
/// AcquisitionProtocolElementSequence (0018,9920) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_PROTOCOL_ELEMENT_SEQUENCE: Tag = Tag(0x0018, 0x9920); // (0018,9920)
/// ProtocolElementNumber (0018,9921) US 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_ELEMENT_NUMBER: Tag = Tag(0x0018, 0x9921); // (0018,9921)
/// ProtocolElementName (0018,9922) LO 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_ELEMENT_NAME: Tag = Tag(0x0018, 0x9922); // (0018,9922)
/// ProtocolElementCharacteristicsSummary (0018,9923) UT 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_ELEMENT_CHARACTERISTICS_SUMMARY: Tag = Tag(0x0018, 0x9923); // (0018,9923)
/// ProtocolElementPurpose (0018,9924) UT 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_ELEMENT_PURPOSE: Tag = Tag(0x0018, 0x9924); // (0018,9924)
/// AcquisitionMotion (0018,9930) CS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_MOTION: Tag = Tag(0x0018, 0x9930); // (0018,9930)
/// AcquisitionStartLocationSequence (0018,9931) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_START_LOCATION_SEQUENCE: Tag = Tag(0x0018, 0x9931); // (0018,9931)
/// AcquisitionEndLocationSequence (0018,9932) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_END_LOCATION_SEQUENCE: Tag = Tag(0x0018, 0x9932); // (0018,9932)
/// ReconstructionProtocolElementSpecificationSequence (0018,9933) SQ 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x9933); // (0018,9933)
/// ReconstructionProtocolElementSequence (0018,9934) SQ 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_PROTOCOL_ELEMENT_SEQUENCE: Tag = Tag(0x0018, 0x9934); // (0018,9934)
/// StorageProtocolElementSpecificationSequence (0018,9935) SQ 1 DICOM
#[rustfmt::skip]
pub const STORAGE_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE: Tag = Tag(0x0018, 0x9935); // (0018,9935)
/// StorageProtocolElementSequence (0018,9936) SQ 1 DICOM
#[rustfmt::skip]
pub const STORAGE_PROTOCOL_ELEMENT_SEQUENCE: Tag = Tag(0x0018, 0x9936); // (0018,9936)
/// RequestedSeriesDescription (0018,9937) LO 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_SERIES_DESCRIPTION: Tag = Tag(0x0018, 0x9937); // (0018,9937)
/// SourceAcquisitionProtocolElementNumber (0018,9938) US 1-n DICOM
#[rustfmt::skip]
pub const SOURCE_ACQUISITION_PROTOCOL_ELEMENT_NUMBER: Tag = Tag(0x0018, 0x9938); // (0018,9938)
/// SourceAcquisitionBeamNumber (0018,9939) US 1-n DICOM
#[rustfmt::skip]
pub const SOURCE_ACQUISITION_BEAM_NUMBER: Tag = Tag(0x0018, 0x9939); // (0018,9939)
/// SourceReconstructionProtocolElementNumber (0018,993A) US 1-n DICOM
#[rustfmt::skip]
pub const SOURCE_RECONSTRUCTION_PROTOCOL_ELEMENT_NUMBER: Tag = Tag(0x0018, 0x993A); // (0018,993A)
/// ReconstructionStartLocationSequence (0018,993B) SQ 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_START_LOCATION_SEQUENCE: Tag = Tag(0x0018, 0x993B); // (0018,993B)
/// ReconstructionEndLocationSequence (0018,993C) SQ 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_END_LOCATION_SEQUENCE: Tag = Tag(0x0018, 0x993C); // (0018,993C)
/// ReconstructionAlgorithmSequence (0018,993D) SQ 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_ALGORITHM_SEQUENCE: Tag = Tag(0x0018, 0x993D); // (0018,993D)
/// ReconstructionTargetCenterLocationSequence (0018,993E) SQ 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_TARGET_CENTER_LOCATION_SEQUENCE: Tag = Tag(0x0018, 0x993E); // (0018,993E)
/// ImageFilterDescription (0018,9941) UT 1 DICOM
#[rustfmt::skip]
pub const IMAGE_FILTER_DESCRIPTION: Tag = Tag(0x0018, 0x9941); // (0018,9941)
/// CTDIvolNotificationTrigger (0018,9942) FD 1 DICOM
#[rustfmt::skip]
pub const CTD_IVOL_NOTIFICATION_TRIGGER: Tag = Tag(0x0018, 0x9942); // (0018,9942)
/// DLPNotificationTrigger (0018,9943) FD 1 DICOM
#[rustfmt::skip]
pub const DLP_NOTIFICATION_TRIGGER: Tag = Tag(0x0018, 0x9943); // (0018,9943)
/// AutoKVPSelectionType (0018,9944) CS 1 DICOM
#[rustfmt::skip]
pub const AUTO_KVP_SELECTION_TYPE: Tag = Tag(0x0018, 0x9944); // (0018,9944)
/// AutoKVPUpperBound (0018,9945) FD 1 DICOM
#[rustfmt::skip]
pub const AUTO_KVP_UPPER_BOUND: Tag = Tag(0x0018, 0x9945); // (0018,9945)
/// AutoKVPLowerBound (0018,9946) FD 1 DICOM
#[rustfmt::skip]
pub const AUTO_KVP_LOWER_BOUND: Tag = Tag(0x0018, 0x9946); // (0018,9946)
/// ProtocolDefinedPatientPosition (0018,9947) CS 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_DEFINED_PATIENT_POSITION: Tag = Tag(0x0018, 0x9947); // (0018,9947)
/// ContributingEquipmentSequence (0018,A001) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRIBUTING_EQUIPMENT_SEQUENCE: Tag = Tag(0x0018, 0xA001); // (0018,A001)
/// ContributionDateTime (0018,A002) DT 1 DICOM
#[rustfmt::skip]
pub const CONTRIBUTION_DATE_TIME: Tag = Tag(0x0018, 0xA002); // (0018,A002)
/// ContributionDescription (0018,A003) ST 1 DICOM
#[rustfmt::skip]
pub const CONTRIBUTION_DESCRIPTION: Tag = Tag(0x0018, 0xA003); // (0018,A003)
/// StudyInstanceUID (0020,000D) UI 1 DICOM
#[rustfmt::skip]
pub const STUDY_INSTANCE_UID: Tag = Tag(0x0020, 0x000D); // (0020,000D)
/// SeriesInstanceUID (0020,000E) UI 1 DICOM
#[rustfmt::skip]
pub const SERIES_INSTANCE_UID: Tag = Tag(0x0020, 0x000E); // (0020,000E)
/// StudyID (0020,0010) SH 1 DICOM
#[rustfmt::skip]
pub const STUDY_ID: Tag = Tag(0x0020, 0x0010); // (0020,0010)
/// SeriesNumber (0020,0011) IS 1 DICOM
#[rustfmt::skip]
pub const SERIES_NUMBER: Tag = Tag(0x0020, 0x0011); // (0020,0011)
/// AcquisitionNumber (0020,0012) IS 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_NUMBER: Tag = Tag(0x0020, 0x0012); // (0020,0012)
/// InstanceNumber (0020,0013) IS 1 DICOM
#[rustfmt::skip]
pub const INSTANCE_NUMBER: Tag = Tag(0x0020, 0x0013); // (0020,0013)
/// ItemNumber (0020,0019) IS 1 DICOM
#[rustfmt::skip]
pub const ITEM_NUMBER: Tag = Tag(0x0020, 0x0019); // (0020,0019)
/// PatientOrientation (0020,0020) CS 2 DICOM
#[rustfmt::skip]
pub const PATIENT_ORIENTATION: Tag = Tag(0x0020, 0x0020); // (0020,0020)
/// ImagePositionPatient (0020,0032) DS 3 DICOM
#[rustfmt::skip]
pub const IMAGE_POSITION_PATIENT: Tag = Tag(0x0020, 0x0032); // (0020,0032)
/// ImageOrientationPatient (0020,0037) DS 6 DICOM
#[rustfmt::skip]
pub const IMAGE_ORIENTATION_PATIENT: Tag = Tag(0x0020, 0x0037); // (0020,0037)
/// FrameOfReferenceUID (0020,0052) UI 1 DICOM
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_UID: Tag = Tag(0x0020, 0x0052); // (0020,0052)
/// Laterality (0020,0060) CS 1 DICOM
#[rustfmt::skip]
pub const LATERALITY: Tag = Tag(0x0020, 0x0060); // (0020,0060)
/// ImageLaterality (0020,0062) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_LATERALITY: Tag = Tag(0x0020, 0x0062); // (0020,0062)
/// TemporalPositionIdentifier (0020,0100) IS 1 DICOM
#[rustfmt::skip]
pub const TEMPORAL_POSITION_IDENTIFIER: Tag = Tag(0x0020, 0x0100); // (0020,0100)
/// NumberOfTemporalPositions (0020,0105) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TEMPORAL_POSITIONS: Tag = Tag(0x0020, 0x0105); // (0020,0105)
/// TemporalResolution (0020,0110) DS 1 DICOM
#[rustfmt::skip]
pub const TEMPORAL_RESOLUTION: Tag = Tag(0x0020, 0x0110); // (0020,0110)
/// SynchronizationFrameOfReferenceUID (0020,0200) UI 1 DICOM
#[rustfmt::skip]
pub const SYNCHRONIZATION_FRAME_OF_REFERENCE_UID: Tag = Tag(0x0020, 0x0200); // (0020,0200)
/// SOPInstanceUIDOfConcatenationSource (0020,0242) UI 1 DICOM
#[rustfmt::skip]
pub const SOP_INSTANCE_UID_OF_CONCATENATION_SOURCE: Tag = Tag(0x0020, 0x0242); // (0020,0242)
/// ImagesInAcquisition (0020,1002) IS 1 DICOM
#[rustfmt::skip]
pub const IMAGES_IN_ACQUISITION: Tag = Tag(0x0020, 0x1002); // (0020,1002)
/// TargetPositionReferenceIndicator (0020,103F) LO 1 DICOM
#[rustfmt::skip]
pub const TARGET_POSITION_REFERENCE_INDICATOR: Tag = Tag(0x0020, 0x103F); // (0020,103F)
/// PositionReferenceIndicator (0020,1040) LO 1 DICOM
#[rustfmt::skip]
pub const POSITION_REFERENCE_INDICATOR: Tag = Tag(0x0020, 0x1040); // (0020,1040)
/// SliceLocation (0020,1041) DS 1 DICOM
#[rustfmt::skip]
pub const SLICE_LOCATION: Tag = Tag(0x0020, 0x1041); // (0020,1041)
/// NumberOfPatientRelatedStudies (0020,1200) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PATIENT_RELATED_STUDIES: Tag = Tag(0x0020, 0x1200); // (0020,1200)
/// NumberOfPatientRelatedSeries (0020,1202) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PATIENT_RELATED_SERIES: Tag = Tag(0x0020, 0x1202); // (0020,1202)
/// NumberOfPatientRelatedInstances (0020,1204) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PATIENT_RELATED_INSTANCES: Tag = Tag(0x0020, 0x1204); // (0020,1204)
/// NumberOfStudyRelatedSeries (0020,1206) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_STUDY_RELATED_SERIES: Tag = Tag(0x0020, 0x1206); // (0020,1206)
/// NumberOfStudyRelatedInstances (0020,1208) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_STUDY_RELATED_INSTANCES: Tag = Tag(0x0020, 0x1208); // (0020,1208)
/// NumberOfSeriesRelatedInstances (0020,1209) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SERIES_RELATED_INSTANCES: Tag = Tag(0x0020, 0x1209); // (0020,1209)
/// ImageComments (0020,4000) LT 1 DICOM
#[rustfmt::skip]
pub const IMAGE_COMMENTS: Tag = Tag(0x0020, 0x4000); // (0020,4000)
/// StackID (0020,9056) SH 1 DICOM
#[rustfmt::skip]
pub const STACK_ID: Tag = Tag(0x0020, 0x9056); // (0020,9056)
/// InStackPositionNumber (0020,9057) UL 1 DICOM
#[rustfmt::skip]
pub const IN_STACK_POSITION_NUMBER: Tag = Tag(0x0020, 0x9057); // (0020,9057)
/// FrameAnatomySequence (0020,9071) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_ANATOMY_SEQUENCE: Tag = Tag(0x0020, 0x9071); // (0020,9071)
/// FrameLaterality (0020,9072) CS 1 DICOM
#[rustfmt::skip]
pub const FRAME_LATERALITY: Tag = Tag(0x0020, 0x9072); // (0020,9072)
/// FrameContentSequence (0020,9111) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_CONTENT_SEQUENCE: Tag = Tag(0x0020, 0x9111); // (0020,9111)
/// PlanePositionSequence (0020,9113) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANE_POSITION_SEQUENCE: Tag = Tag(0x0020, 0x9113); // (0020,9113)
/// PlaneOrientationSequence (0020,9116) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANE_ORIENTATION_SEQUENCE: Tag = Tag(0x0020, 0x9116); // (0020,9116)
/// TemporalPositionIndex (0020,9128) UL 1 DICOM
#[rustfmt::skip]
pub const TEMPORAL_POSITION_INDEX: Tag = Tag(0x0020, 0x9128); // (0020,9128)
/// NominalCardiacTriggerDelayTime (0020,9153) FD 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_CARDIAC_TRIGGER_DELAY_TIME: Tag = Tag(0x0020, 0x9153); // (0020,9153)
/// NominalCardiacTriggerTimePriorToRPeak (0020,9154) FL 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK: Tag = Tag(0x0020, 0x9154); // (0020,9154)
/// ActualCardiacTriggerTimePriorToRPeak (0020,9155) FL 1 DICOM
#[rustfmt::skip]
pub const ACTUAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK: Tag = Tag(0x0020, 0x9155); // (0020,9155)
/// FrameAcquisitionNumber (0020,9156) US 1 DICOM
#[rustfmt::skip]
pub const FRAME_ACQUISITION_NUMBER: Tag = Tag(0x0020, 0x9156); // (0020,9156)
/// DimensionIndexValues (0020,9157) UL 1-n DICOM
#[rustfmt::skip]
pub const DIMENSION_INDEX_VALUES: Tag = Tag(0x0020, 0x9157); // (0020,9157)
/// FrameComments (0020,9158) LT 1 DICOM
#[rustfmt::skip]
pub const FRAME_COMMENTS: Tag = Tag(0x0020, 0x9158); // (0020,9158)
/// ConcatenationUID (0020,9161) UI 1 DICOM
#[rustfmt::skip]
pub const CONCATENATION_UID: Tag = Tag(0x0020, 0x9161); // (0020,9161)
/// InConcatenationNumber (0020,9162) US 1 DICOM
#[rustfmt::skip]
pub const IN_CONCATENATION_NUMBER: Tag = Tag(0x0020, 0x9162); // (0020,9162)
/// InConcatenationTotalNumber (0020,9163) US 1 DICOM
#[rustfmt::skip]
pub const IN_CONCATENATION_TOTAL_NUMBER: Tag = Tag(0x0020, 0x9163); // (0020,9163)
/// DimensionOrganizationUID (0020,9164) UI 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_ORGANIZATION_UID: Tag = Tag(0x0020, 0x9164); // (0020,9164)
/// DimensionIndexPointer (0020,9165) AT 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_INDEX_POINTER: Tag = Tag(0x0020, 0x9165); // (0020,9165)
/// FunctionalGroupPointer (0020,9167) AT 1 DICOM
#[rustfmt::skip]
pub const FUNCTIONAL_GROUP_POINTER: Tag = Tag(0x0020, 0x9167); // (0020,9167)
/// UnassignedSharedConvertedAttributesSequence (0020,9170) SQ 1 DICOM
#[rustfmt::skip]
pub const UNASSIGNED_SHARED_CONVERTED_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0020, 0x9170); // (0020,9170)
/// UnassignedPerFrameConvertedAttributesSequence (0020,9171) SQ 1 DICOM
#[rustfmt::skip]
pub const UNASSIGNED_PER_FRAME_CONVERTED_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0020, 0x9171); // (0020,9171)
/// ConversionSourceAttributesSequence (0020,9172) SQ 1 DICOM
#[rustfmt::skip]
pub const CONVERSION_SOURCE_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0020, 0x9172); // (0020,9172)
/// DimensionIndexPrivateCreator (0020,9213) LO 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_INDEX_PRIVATE_CREATOR: Tag = Tag(0x0020, 0x9213); // (0020,9213)
/// DimensionOrganizationSequence (0020,9221) SQ 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_ORGANIZATION_SEQUENCE: Tag = Tag(0x0020, 0x9221); // (0020,9221)
/// DimensionIndexSequence (0020,9222) SQ 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_INDEX_SEQUENCE: Tag = Tag(0x0020, 0x9222); // (0020,9222)
/// ConcatenationFrameOffsetNumber (0020,9228) UL 1 DICOM
#[rustfmt::skip]
pub const CONCATENATION_FRAME_OFFSET_NUMBER: Tag = Tag(0x0020, 0x9228); // (0020,9228)
/// FunctionalGroupPrivateCreator (0020,9238) LO 1 DICOM
#[rustfmt::skip]
pub const FUNCTIONAL_GROUP_PRIVATE_CREATOR: Tag = Tag(0x0020, 0x9238); // (0020,9238)
/// NominalPercentageOfCardiacPhase (0020,9241) FL 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE: Tag = Tag(0x0020, 0x9241); // (0020,9241)
/// NominalPercentageOfRespiratoryPhase (0020,9245) FL 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE: Tag = Tag(0x0020, 0x9245); // (0020,9245)
/// StartingRespiratoryAmplitude (0020,9246) FL 1 DICOM
#[rustfmt::skip]
pub const STARTING_RESPIRATORY_AMPLITUDE: Tag = Tag(0x0020, 0x9246); // (0020,9246)
/// StartingRespiratoryPhase (0020,9247) CS 1 DICOM
#[rustfmt::skip]
pub const STARTING_RESPIRATORY_PHASE: Tag = Tag(0x0020, 0x9247); // (0020,9247)
/// EndingRespiratoryAmplitude (0020,9248) FL 1 DICOM
#[rustfmt::skip]
pub const ENDING_RESPIRATORY_AMPLITUDE: Tag = Tag(0x0020, 0x9248); // (0020,9248)
/// EndingRespiratoryPhase (0020,9249) CS 1 DICOM
#[rustfmt::skip]
pub const ENDING_RESPIRATORY_PHASE: Tag = Tag(0x0020, 0x9249); // (0020,9249)
/// RespiratoryTriggerType (0020,9250) CS 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_TRIGGER_TYPE: Tag = Tag(0x0020, 0x9250); // (0020,9250)
/// RRIntervalTimeNominal (0020,9251) FD 1 DICOM
#[rustfmt::skip]
pub const RR_INTERVAL_TIME_NOMINAL: Tag = Tag(0x0020, 0x9251); // (0020,9251)
/// ActualCardiacTriggerDelayTime (0020,9252) FD 1 DICOM
#[rustfmt::skip]
pub const ACTUAL_CARDIAC_TRIGGER_DELAY_TIME: Tag = Tag(0x0020, 0x9252); // (0020,9252)
/// RespiratorySynchronizationSequence (0020,9253) SQ 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_SYNCHRONIZATION_SEQUENCE: Tag = Tag(0x0020, 0x9253); // (0020,9253)
/// RespiratoryIntervalTime (0020,9254) FD 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_INTERVAL_TIME: Tag = Tag(0x0020, 0x9254); // (0020,9254)
/// NominalRespiratoryTriggerDelayTime (0020,9255) FD 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME: Tag = Tag(0x0020, 0x9255); // (0020,9255)
/// RespiratoryTriggerDelayThreshold (0020,9256) FD 1 DICOM
#[rustfmt::skip]
pub const RESPIRATORY_TRIGGER_DELAY_THRESHOLD: Tag = Tag(0x0020, 0x9256); // (0020,9256)
/// ActualRespiratoryTriggerDelayTime (0020,9257) FD 1 DICOM
#[rustfmt::skip]
pub const ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME: Tag = Tag(0x0020, 0x9257); // (0020,9257)
/// ImagePositionVolume (0020,9301) FD 3 DICOM
#[rustfmt::skip]
pub const IMAGE_POSITION_VOLUME: Tag = Tag(0x0020, 0x9301); // (0020,9301)
/// ImageOrientationVolume (0020,9302) FD 6 DICOM
#[rustfmt::skip]
pub const IMAGE_ORIENTATION_VOLUME: Tag = Tag(0x0020, 0x9302); // (0020,9302)
/// UltrasoundAcquisitionGeometry (0020,9307) CS 1 DICOM
#[rustfmt::skip]
pub const ULTRASOUND_ACQUISITION_GEOMETRY: Tag = Tag(0x0020, 0x9307); // (0020,9307)
/// ApexPosition (0020,9308) FD 3 DICOM
#[rustfmt::skip]
pub const APEX_POSITION: Tag = Tag(0x0020, 0x9308); // (0020,9308)
/// VolumeToTransducerMappingMatrix (0020,9309) FD 16 DICOM
#[rustfmt::skip]
pub const VOLUME_TO_TRANSDUCER_MAPPING_MATRIX: Tag = Tag(0x0020, 0x9309); // (0020,9309)
/// VolumeToTableMappingMatrix (0020,930A) FD 16 DICOM
#[rustfmt::skip]
pub const VOLUME_TO_TABLE_MAPPING_MATRIX: Tag = Tag(0x0020, 0x930A); // (0020,930A)
/// VolumeToTransducerRelationship (0020,930B) CS 1 DICOM
#[rustfmt::skip]
pub const VOLUME_TO_TRANSDUCER_RELATIONSHIP: Tag = Tag(0x0020, 0x930B); // (0020,930B)
/// PatientFrameOfReferenceSource (0020,930C) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_FRAME_OF_REFERENCE_SOURCE: Tag = Tag(0x0020, 0x930C); // (0020,930C)
/// TemporalPositionTimeOffset (0020,930D) FD 1 DICOM
#[rustfmt::skip]
pub const TEMPORAL_POSITION_TIME_OFFSET: Tag = Tag(0x0020, 0x930D); // (0020,930D)
/// PlanePositionVolumeSequence (0020,930E) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANE_POSITION_VOLUME_SEQUENCE: Tag = Tag(0x0020, 0x930E); // (0020,930E)
/// PlaneOrientationVolumeSequence (0020,930F) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANE_ORIENTATION_VOLUME_SEQUENCE: Tag = Tag(0x0020, 0x930F); // (0020,930F)
/// TemporalPositionSequence (0020,9310) SQ 1 DICOM
#[rustfmt::skip]
pub const TEMPORAL_POSITION_SEQUENCE: Tag = Tag(0x0020, 0x9310); // (0020,9310)
/// DimensionOrganizationType (0020,9311) CS 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_ORGANIZATION_TYPE: Tag = Tag(0x0020, 0x9311); // (0020,9311)
/// VolumeFrameOfReferenceUID (0020,9312) UI 1 DICOM
#[rustfmt::skip]
pub const VOLUME_FRAME_OF_REFERENCE_UID: Tag = Tag(0x0020, 0x9312); // (0020,9312)
/// TableFrameOfReferenceUID (0020,9313) UI 1 DICOM
#[rustfmt::skip]
pub const TABLE_FRAME_OF_REFERENCE_UID: Tag = Tag(0x0020, 0x9313); // (0020,9313)
/// DimensionDescriptionLabel (0020,9421) LO 1 DICOM
#[rustfmt::skip]
pub const DIMENSION_DESCRIPTION_LABEL: Tag = Tag(0x0020, 0x9421); // (0020,9421)
/// PatientOrientationInFrameSequence (0020,9450) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ORIENTATION_IN_FRAME_SEQUENCE: Tag = Tag(0x0020, 0x9450); // (0020,9450)
/// FrameLabel (0020,9453) LO 1 DICOM
#[rustfmt::skip]
pub const FRAME_LABEL: Tag = Tag(0x0020, 0x9453); // (0020,9453)
/// AcquisitionIndex (0020,9518) US 1-n DICOM
#[rustfmt::skip]
pub const ACQUISITION_INDEX: Tag = Tag(0x0020, 0x9518); // (0020,9518)
/// ContributingSOPInstancesReferenceSequence (0020,9529) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTRIBUTING_SOP_INSTANCES_REFERENCE_SEQUENCE: Tag = Tag(0x0020, 0x9529); // (0020,9529)
/// ReconstructionIndex (0020,9536) US 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_INDEX: Tag = Tag(0x0020, 0x9536); // (0020,9536)
/// LightPathFilterPassThroughWavelength (0022,0001) US 1 DICOM
#[rustfmt::skip]
pub const LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH: Tag = Tag(0x0022, 0x0001); // (0022,0001)
/// LightPathFilterPassBand (0022,0002) US 2 DICOM
#[rustfmt::skip]
pub const LIGHT_PATH_FILTER_PASS_BAND: Tag = Tag(0x0022, 0x0002); // (0022,0002)
/// ImagePathFilterPassThroughWavelength (0022,0003) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH: Tag = Tag(0x0022, 0x0003); // (0022,0003)
/// ImagePathFilterPassBand (0022,0004) US 2 DICOM
#[rustfmt::skip]
pub const IMAGE_PATH_FILTER_PASS_BAND: Tag = Tag(0x0022, 0x0004); // (0022,0004)
/// PatientEyeMovementCommanded (0022,0005) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_EYE_MOVEMENT_COMMANDED: Tag = Tag(0x0022, 0x0005); // (0022,0005)
/// PatientEyeMovementCommandCodeSequence (0022,0006) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE: Tag = Tag(0x0022, 0x0006); // (0022,0006)
/// SphericalLensPower (0022,0007) FL 1 DICOM
#[rustfmt::skip]
pub const SPHERICAL_LENS_POWER: Tag = Tag(0x0022, 0x0007); // (0022,0007)
/// CylinderLensPower (0022,0008) FL 1 DICOM
#[rustfmt::skip]
pub const CYLINDER_LENS_POWER: Tag = Tag(0x0022, 0x0008); // (0022,0008)
/// CylinderAxis (0022,0009) FL 1 DICOM
#[rustfmt::skip]
pub const CYLINDER_AXIS: Tag = Tag(0x0022, 0x0009); // (0022,0009)
/// EmmetropicMagnification (0022,000A) FL 1 DICOM
#[rustfmt::skip]
pub const EMMETROPIC_MAGNIFICATION: Tag = Tag(0x0022, 0x000A); // (0022,000A)
/// IntraOcularPressure (0022,000B) FL 1 DICOM
#[rustfmt::skip]
pub const INTRA_OCULAR_PRESSURE: Tag = Tag(0x0022, 0x000B); // (0022,000B)
/// HorizontalFieldOfView (0022,000C) FL 1 DICOM
#[rustfmt::skip]
pub const HORIZONTAL_FIELD_OF_VIEW: Tag = Tag(0x0022, 0x000C); // (0022,000C)
/// PupilDilated (0022,000D) CS 1 DICOM
#[rustfmt::skip]
pub const PUPIL_DILATED: Tag = Tag(0x0022, 0x000D); // (0022,000D)
/// DegreeOfDilation (0022,000E) FL 1 DICOM
#[rustfmt::skip]
pub const DEGREE_OF_DILATION: Tag = Tag(0x0022, 0x000E); // (0022,000E)
/// StereoBaselineAngle (0022,0010) FL 1 DICOM
#[rustfmt::skip]
pub const STEREO_BASELINE_ANGLE: Tag = Tag(0x0022, 0x0010); // (0022,0010)
/// StereoBaselineDisplacement (0022,0011) FL 1 DICOM
#[rustfmt::skip]
pub const STEREO_BASELINE_DISPLACEMENT: Tag = Tag(0x0022, 0x0011); // (0022,0011)
/// StereoHorizontalPixelOffset (0022,0012) FL 1 DICOM
#[rustfmt::skip]
pub const STEREO_HORIZONTAL_PIXEL_OFFSET: Tag = Tag(0x0022, 0x0012); // (0022,0012)
/// StereoVerticalPixelOffset (0022,0013) FL 1 DICOM
#[rustfmt::skip]
pub const STEREO_VERTICAL_PIXEL_OFFSET: Tag = Tag(0x0022, 0x0013); // (0022,0013)
/// StereoRotation (0022,0014) FL 1 DICOM
#[rustfmt::skip]
pub const STEREO_ROTATION: Tag = Tag(0x0022, 0x0014); // (0022,0014)
/// AcquisitionDeviceTypeCodeSequence (0022,0015) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x0015); // (0022,0015)
/// IlluminationTypeCodeSequence (0022,0016) SQ 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATION_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x0016); // (0022,0016)
/// LightPathFilterTypeStackCodeSequence (0022,0017) SQ 1 DICOM
#[rustfmt::skip]
pub const LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE: Tag = Tag(0x0022, 0x0017); // (0022,0017)
/// ImagePathFilterTypeStackCodeSequence (0022,0018) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE: Tag = Tag(0x0022, 0x0018); // (0022,0018)
/// LensesCodeSequence (0022,0019) SQ 1 DICOM
#[rustfmt::skip]
pub const LENSES_CODE_SEQUENCE: Tag = Tag(0x0022, 0x0019); // (0022,0019)
/// ChannelDescriptionCodeSequence (0022,001A) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DESCRIPTION_CODE_SEQUENCE: Tag = Tag(0x0022, 0x001A); // (0022,001A)
/// RefractiveStateSequence (0022,001B) SQ 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_STATE_SEQUENCE: Tag = Tag(0x0022, 0x001B); // (0022,001B)
/// MydriaticAgentCodeSequence (0022,001C) SQ 1 DICOM
#[rustfmt::skip]
pub const MYDRIATIC_AGENT_CODE_SEQUENCE: Tag = Tag(0x0022, 0x001C); // (0022,001C)
/// RelativeImagePositionCodeSequence (0022,001D) SQ 1 DICOM
#[rustfmt::skip]
pub const RELATIVE_IMAGE_POSITION_CODE_SEQUENCE: Tag = Tag(0x0022, 0x001D); // (0022,001D)
/// CameraAngleOfView (0022,001E) FL 1 DICOM
#[rustfmt::skip]
pub const CAMERA_ANGLE_OF_VIEW: Tag = Tag(0x0022, 0x001E); // (0022,001E)
/// StereoPairsSequence (0022,0020) SQ 1 DICOM
#[rustfmt::skip]
pub const STEREO_PAIRS_SEQUENCE: Tag = Tag(0x0022, 0x0020); // (0022,0020)
/// LeftImageSequence (0022,0021) SQ 1 DICOM
#[rustfmt::skip]
pub const LEFT_IMAGE_SEQUENCE: Tag = Tag(0x0022, 0x0021); // (0022,0021)
/// RightImageSequence (0022,0022) SQ 1 DICOM
#[rustfmt::skip]
pub const RIGHT_IMAGE_SEQUENCE: Tag = Tag(0x0022, 0x0022); // (0022,0022)
/// StereoPairsPresent (0022,0028) CS 1 DICOM
#[rustfmt::skip]
pub const STEREO_PAIRS_PRESENT: Tag = Tag(0x0022, 0x0028); // (0022,0028)
/// AxialLengthOfTheEye (0022,0030) FL 1 DICOM
#[rustfmt::skip]
pub const AXIAL_LENGTH_OF_THE_EYE: Tag = Tag(0x0022, 0x0030); // (0022,0030)
/// OphthalmicFrameLocationSequence (0022,0031) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_FRAME_LOCATION_SEQUENCE: Tag = Tag(0x0022, 0x0031); // (0022,0031)
/// ReferenceCoordinates (0022,0032) FL 2-2n DICOM
#[rustfmt::skip]
pub const REFERENCE_COORDINATES: Tag = Tag(0x0022, 0x0032); // (0022,0032)
/// DepthSpatialResolution (0022,0035) FL 1 DICOM
#[rustfmt::skip]
pub const DEPTH_SPATIAL_RESOLUTION: Tag = Tag(0x0022, 0x0035); // (0022,0035)
/// MaximumDepthDistortion (0022,0036) FL 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_DEPTH_DISTORTION: Tag = Tag(0x0022, 0x0036); // (0022,0036)
/// AlongScanSpatialResolution (0022,0037) FL 1 DICOM
#[rustfmt::skip]
pub const ALONG_SCAN_SPATIAL_RESOLUTION: Tag = Tag(0x0022, 0x0037); // (0022,0037)
/// MaximumAlongScanDistortion (0022,0038) FL 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_ALONG_SCAN_DISTORTION: Tag = Tag(0x0022, 0x0038); // (0022,0038)
/// OphthalmicImageOrientation (0022,0039) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_IMAGE_ORIENTATION: Tag = Tag(0x0022, 0x0039); // (0022,0039)
/// DepthOfTransverseImage (0022,0041) FL 1 DICOM
#[rustfmt::skip]
pub const DEPTH_OF_TRANSVERSE_IMAGE: Tag = Tag(0x0022, 0x0041); // (0022,0041)
/// MydriaticAgentConcentrationUnitsSequence (0022,0042) SQ 1 DICOM
#[rustfmt::skip]
pub const MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE: Tag = Tag(0x0022, 0x0042); // (0022,0042)
/// AcrossScanSpatialResolution (0022,0048) FL 1 DICOM
#[rustfmt::skip]
pub const ACROSS_SCAN_SPATIAL_RESOLUTION: Tag = Tag(0x0022, 0x0048); // (0022,0048)
/// MaximumAcrossScanDistortion (0022,0049) FL 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_ACROSS_SCAN_DISTORTION: Tag = Tag(0x0022, 0x0049); // (0022,0049)
/// MydriaticAgentConcentration (0022,004E) DS 1 DICOM
#[rustfmt::skip]
pub const MYDRIATIC_AGENT_CONCENTRATION: Tag = Tag(0x0022, 0x004E); // (0022,004E)
/// IlluminationWaveLength (0022,0055) FL 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATION_WAVE_LENGTH: Tag = Tag(0x0022, 0x0055); // (0022,0055)
/// IlluminationPower (0022,0056) FL 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATION_POWER: Tag = Tag(0x0022, 0x0056); // (0022,0056)
/// IlluminationBandwidth (0022,0057) FL 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATION_BANDWIDTH: Tag = Tag(0x0022, 0x0057); // (0022,0057)
/// MydriaticAgentSequence (0022,0058) SQ 1 DICOM
#[rustfmt::skip]
pub const MYDRIATIC_AGENT_SEQUENCE: Tag = Tag(0x0022, 0x0058); // (0022,0058)
/// OphthalmicAxialMeasurementsRightEyeSequence (0022,1007) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_MEASUREMENTS_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0022, 0x1007); // (0022,1007)
/// OphthalmicAxialMeasurementsLeftEyeSequence (0022,1008) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_MEASUREMENTS_LEFT_EYE_SEQUENCE: Tag = Tag(0x0022, 0x1008); // (0022,1008)
/// OphthalmicAxialMeasurementsDeviceType (0022,1009) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_MEASUREMENTS_DEVICE_TYPE: Tag = Tag(0x0022, 0x1009); // (0022,1009)
/// OphthalmicAxialLengthMeasurementsType (0022,1010) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TYPE: Tag = Tag(0x0022, 0x1010); // (0022,1010)
/// OphthalmicAxialLengthSequence (0022,1012) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1012); // (0022,1012)
/// OphthalmicAxialLength (0022,1019) FL 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH: Tag = Tag(0x0022, 0x1019); // (0022,1019)
/// LensStatusCodeSequence (0022,1024) SQ 1 DICOM
#[rustfmt::skip]
pub const LENS_STATUS_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1024); // (0022,1024)
/// VitreousStatusCodeSequence (0022,1025) SQ 1 DICOM
#[rustfmt::skip]
pub const VITREOUS_STATUS_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1025); // (0022,1025)
/// IOLFormulaCodeSequence (0022,1028) SQ 1 DICOM
#[rustfmt::skip]
pub const IOL_FORMULA_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1028); // (0022,1028)
/// IOLFormulaDetail (0022,1029) LO 1 DICOM
#[rustfmt::skip]
pub const IOL_FORMULA_DETAIL: Tag = Tag(0x0022, 0x1029); // (0022,1029)
/// KeratometerIndex (0022,1033) FL 1 DICOM
#[rustfmt::skip]
pub const KERATOMETER_INDEX: Tag = Tag(0x0022, 0x1033); // (0022,1033)
/// SourceOfOphthalmicAxialLengthCodeSequence (0022,1035) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_OF_OPHTHALMIC_AXIAL_LENGTH_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1035); // (0022,1035)
/// TargetRefraction (0022,1037) FL 1 DICOM
#[rustfmt::skip]
pub const TARGET_REFRACTION: Tag = Tag(0x0022, 0x1037); // (0022,1037)
/// RefractiveProcedureOccurred (0022,1039) CS 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_PROCEDURE_OCCURRED: Tag = Tag(0x0022, 0x1039); // (0022,1039)
/// RefractiveSurgeryTypeCodeSequence (0022,1040) SQ 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_SURGERY_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1040); // (0022,1040)
/// OphthalmicUltrasoundMethodCodeSequence (0022,1044) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_ULTRASOUND_METHOD_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1044); // (0022,1044)
/// OphthalmicAxialLengthMeasurementsSequence (0022,1050) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE: Tag = Tag(0x0022, 0x1050); // (0022,1050)
/// IOLPower (0022,1053) FL 1 DICOM
#[rustfmt::skip]
pub const IOL_POWER: Tag = Tag(0x0022, 0x1053); // (0022,1053)
/// PredictedRefractiveError (0022,1054) FL 1 DICOM
#[rustfmt::skip]
pub const PREDICTED_REFRACTIVE_ERROR: Tag = Tag(0x0022, 0x1054); // (0022,1054)
/// OphthalmicAxialLengthVelocity (0022,1059) FL 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_VELOCITY: Tag = Tag(0x0022, 0x1059); // (0022,1059)
/// LensStatusDescription (0022,1065) LO 1 DICOM
#[rustfmt::skip]
pub const LENS_STATUS_DESCRIPTION: Tag = Tag(0x0022, 0x1065); // (0022,1065)
/// VitreousStatusDescription (0022,1066) LO 1 DICOM
#[rustfmt::skip]
pub const VITREOUS_STATUS_DESCRIPTION: Tag = Tag(0x0022, 0x1066); // (0022,1066)
/// IOLPowerSequence (0022,1090) SQ 1 DICOM
#[rustfmt::skip]
pub const IOL_POWER_SEQUENCE: Tag = Tag(0x0022, 0x1090); // (0022,1090)
/// LensConstantSequence (0022,1092) SQ 1 DICOM
#[rustfmt::skip]
pub const LENS_CONSTANT_SEQUENCE: Tag = Tag(0x0022, 0x1092); // (0022,1092)
/// IOLManufacturer (0022,1093) LO 1 DICOM
#[rustfmt::skip]
pub const IOL_MANUFACTURER: Tag = Tag(0x0022, 0x1093); // (0022,1093)
/// ImplantName (0022,1095) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_NAME: Tag = Tag(0x0022, 0x1095); // (0022,1095)
/// KeratometryMeasurementTypeCodeSequence (0022,1096) SQ 1 DICOM
#[rustfmt::skip]
pub const KERATOMETRY_MEASUREMENT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1096); // (0022,1096)
/// ImplantPartNumber (0022,1097) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_PART_NUMBER: Tag = Tag(0x0022, 0x1097); // (0022,1097)
/// ReferencedOphthalmicAxialMeasurementsSequence (0022,1100) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_OPHTHALMIC_AXIAL_MEASUREMENTS_SEQUENCE: Tag = Tag(0x0022, 0x1100); // (0022,1100)
/// OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence (0022,1101) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENT_NAME_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1101); // (0022,1101)
/// RefractiveErrorBeforeRefractiveSurgeryCodeSequence (0022,1103) SQ 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_ERROR_BEFORE_REFRACTIVE_SURGERY_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1103); // (0022,1103)
/// IOLPowerForExactEmmetropia (0022,1121) FL 1 DICOM
#[rustfmt::skip]
pub const IOL_POWER_FOR_EXACT_EMMETROPIA: Tag = Tag(0x0022, 0x1121); // (0022,1121)
/// IOLPowerForExactTargetRefraction (0022,1122) FL 1 DICOM
#[rustfmt::skip]
pub const IOL_POWER_FOR_EXACT_TARGET_REFRACTION: Tag = Tag(0x0022, 0x1122); // (0022,1122)
/// AnteriorChamberDepthDefinitionCodeSequence (0022,1125) SQ 1 DICOM
#[rustfmt::skip]
pub const ANTERIOR_CHAMBER_DEPTH_DEFINITION_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1125); // (0022,1125)
/// LensThicknessSequence (0022,1127) SQ 1 DICOM
#[rustfmt::skip]
pub const LENS_THICKNESS_SEQUENCE: Tag = Tag(0x0022, 0x1127); // (0022,1127)
/// AnteriorChamberDepthSequence (0022,1128) SQ 1 DICOM
#[rustfmt::skip]
pub const ANTERIOR_CHAMBER_DEPTH_SEQUENCE: Tag = Tag(0x0022, 0x1128); // (0022,1128)
/// LensThickness (0022,1130) FL 1 DICOM
#[rustfmt::skip]
pub const LENS_THICKNESS: Tag = Tag(0x0022, 0x1130); // (0022,1130)
/// AnteriorChamberDepth (0022,1131) FL 1 DICOM
#[rustfmt::skip]
pub const ANTERIOR_CHAMBER_DEPTH: Tag = Tag(0x0022, 0x1131); // (0022,1131)
/// SourceOfLensThicknessDataCodeSequence (0022,1132) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_OF_LENS_THICKNESS_DATA_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1132); // (0022,1132)
/// SourceOfAnteriorChamberDepthDataCodeSequence (0022,1133) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_OF_ANTERIOR_CHAMBER_DEPTH_DATA_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1133); // (0022,1133)
/// SourceOfRefractiveMeasurementsSequence (0022,1134) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_OF_REFRACTIVE_MEASUREMENTS_SEQUENCE: Tag = Tag(0x0022, 0x1134); // (0022,1134)
/// SourceOfRefractiveMeasurementsCodeSequence (0022,1135) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_OF_REFRACTIVE_MEASUREMENTS_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1135); // (0022,1135)
/// OphthalmicAxialLengthMeasurementModified (0022,1140) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_MODIFIED: Tag = Tag(0x0022, 0x1140); // (0022,1140)
/// OphthalmicAxialLengthDataSourceCodeSequence (0022,1150) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1150); // (0022,1150)
/// SignalToNoiseRatio (0022,1155) FL 1 DICOM
#[rustfmt::skip]
pub const SIGNAL_TO_NOISE_RATIO: Tag = Tag(0x0022, 0x1155); // (0022,1155)
/// OphthalmicAxialLengthDataSourceDescription (0022,1159) LO 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_DESCRIPTION: Tag = Tag(0x0022, 0x1159); // (0022,1159)
/// OphthalmicAxialLengthMeasurementsTotalLengthSequence (0022,1210) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TOTAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1210); // (0022,1210)
/// OphthalmicAxialLengthMeasurementsSegmentalLengthSequence (0022,1211) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENTAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1211); // (0022,1211)
/// OphthalmicAxialLengthMeasurementsLengthSummationSequence (0022,1212) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_LENGTH_SUMMATION_SEQUENCE: Tag = Tag(0x0022, 0x1212); // (0022,1212)
/// UltrasoundOphthalmicAxialLengthMeasurementsSequence (0022,1220) SQ 1 DICOM
#[rustfmt::skip]
pub const ULTRASOUND_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE: Tag = Tag(0x0022, 0x1220); // (0022,1220)
/// OpticalOphthalmicAxialLengthMeasurementsSequence (0022,1225) SQ 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE: Tag = Tag(0x0022, 0x1225); // (0022,1225)
/// UltrasoundSelectedOphthalmicAxialLengthSequence (0022,1230) SQ 1 DICOM
#[rustfmt::skip]
pub const ULTRASOUND_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1230); // (0022,1230)
/// OphthalmicAxialLengthSelectionMethodCodeSequence (0022,1250) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_SELECTION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1250); // (0022,1250)
/// OpticalSelectedOphthalmicAxialLengthSequence (0022,1255) SQ 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1255); // (0022,1255)
/// SelectedSegmentalOphthalmicAxialLengthSequence (0022,1257) SQ 1 DICOM
#[rustfmt::skip]
pub const SELECTED_SEGMENTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1257); // (0022,1257)
/// SelectedTotalOphthalmicAxialLengthSequence (0022,1260) SQ 1 DICOM
#[rustfmt::skip]
pub const SELECTED_TOTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Tag = Tag(0x0022, 0x1260); // (0022,1260)
/// OphthalmicAxialLengthQualityMetricSequence (0022,1262) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_SEQUENCE: Tag = Tag(0x0022, 0x1262); // (0022,1262)
/// IntraocularLensCalculationsRightEyeSequence (0022,1300) SQ 1 DICOM
#[rustfmt::skip]
pub const INTRAOCULAR_LENS_CALCULATIONS_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0022, 0x1300); // (0022,1300)
/// IntraocularLensCalculationsLeftEyeSequence (0022,1310) SQ 1 DICOM
#[rustfmt::skip]
pub const INTRAOCULAR_LENS_CALCULATIONS_LEFT_EYE_SEQUENCE: Tag = Tag(0x0022, 0x1310); // (0022,1310)
/// ReferencedOphthalmicAxialLengthMeasurementQCImageSequence (0022,1330) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_QC_IMAGE_SEQUENCE: Tag = Tag(0x0022, 0x1330); // (0022,1330)
/// OphthalmicMappingDeviceType (0022,1415) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_MAPPING_DEVICE_TYPE: Tag = Tag(0x0022, 0x1415); // (0022,1415)
/// AcquisitionMethodCodeSequence (0022,1420) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1420); // (0022,1420)
/// AcquisitionMethodAlgorithmSequence (0022,1423) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_METHOD_ALGORITHM_SEQUENCE: Tag = Tag(0x0022, 0x1423); // (0022,1423)
/// OphthalmicThicknessMapTypeCodeSequence (0022,1436) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_THICKNESS_MAP_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1436); // (0022,1436)
/// OphthalmicThicknessMappingNormalsSequence (0022,1443) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_THICKNESS_MAPPING_NORMALS_SEQUENCE: Tag = Tag(0x0022, 0x1443); // (0022,1443)
/// RetinalThicknessDefinitionCodeSequence (0022,1445) SQ 1 DICOM
#[rustfmt::skip]
pub const RETINAL_THICKNESS_DEFINITION_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1445); // (0022,1445)
/// PixelValueMappingToCodedConceptSequence (0022,1450) SQ 1 DICOM
#[rustfmt::skip]
pub const PIXEL_VALUE_MAPPING_TO_CODED_CONCEPT_SEQUENCE: Tag = Tag(0x0022, 0x1450); // (0022,1450)
/// MappedPixelValue (0022,1452) US 1 DICOM
#[rustfmt::skip]
pub const MAPPED_PIXEL_VALUE: Tag = Tag(0x0022, 0x1452); // (0022,1452)
/// PixelValueMappingExplanation (0022,1454) LO 1 DICOM
#[rustfmt::skip]
pub const PIXEL_VALUE_MAPPING_EXPLANATION: Tag = Tag(0x0022, 0x1454); // (0022,1454)
/// OphthalmicThicknessMapQualityThresholdSequence (0022,1458) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_THICKNESS_MAP_QUALITY_THRESHOLD_SEQUENCE: Tag = Tag(0x0022, 0x1458); // (0022,1458)
/// OphthalmicThicknessMapThresholdQualityRating (0022,1460) FL 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_THICKNESS_MAP_THRESHOLD_QUALITY_RATING: Tag = Tag(0x0022, 0x1460); // (0022,1460)
/// AnatomicStructureReferencePoint (0022,1463) FL 2 DICOM
#[rustfmt::skip]
pub const ANATOMIC_STRUCTURE_REFERENCE_POINT: Tag = Tag(0x0022, 0x1463); // (0022,1463)
/// RegistrationToLocalizerSequence (0022,1465) SQ 1 DICOM
#[rustfmt::skip]
pub const REGISTRATION_TO_LOCALIZER_SEQUENCE: Tag = Tag(0x0022, 0x1465); // (0022,1465)
/// RegisteredLocalizerUnits (0022,1466) CS 1 DICOM
#[rustfmt::skip]
pub const REGISTERED_LOCALIZER_UNITS: Tag = Tag(0x0022, 0x1466); // (0022,1466)
/// RegisteredLocalizerTopLeftHandCorner (0022,1467) FL 2 DICOM
#[rustfmt::skip]
pub const REGISTERED_LOCALIZER_TOP_LEFT_HAND_CORNER: Tag = Tag(0x0022, 0x1467); // (0022,1467)
/// RegisteredLocalizerBottomRightHandCorner (0022,1468) FL 2 DICOM
#[rustfmt::skip]
pub const REGISTERED_LOCALIZER_BOTTOM_RIGHT_HAND_CORNER: Tag = Tag(0x0022, 0x1468); // (0022,1468)
/// OphthalmicThicknessMapQualityRatingSequence (0022,1470) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_THICKNESS_MAP_QUALITY_RATING_SEQUENCE: Tag = Tag(0x0022, 0x1470); // (0022,1470)
/// RelevantOPTAttributesSequence (0022,1472) SQ 1 DICOM
#[rustfmt::skip]
pub const RELEVANT_OPT_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0022, 0x1472); // (0022,1472)
/// TransformationMethodCodeSequence (0022,1512) SQ 1 DICOM
#[rustfmt::skip]
pub const TRANSFORMATION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1512); // (0022,1512)
/// TransformationAlgorithmSequence (0022,1513) SQ 1 DICOM
#[rustfmt::skip]
pub const TRANSFORMATION_ALGORITHM_SEQUENCE: Tag = Tag(0x0022, 0x1513); // (0022,1513)
/// OphthalmicAxialLengthMethod (0022,1515) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_METHOD: Tag = Tag(0x0022, 0x1515); // (0022,1515)
/// OphthalmicFOV (0022,1517) FL 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_FOV: Tag = Tag(0x0022, 0x1517); // (0022,1517)
/// TwoDimensionalToThreeDimensionalMapSequence (0022,1518) SQ 1 DICOM
#[rustfmt::skip]
pub const TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_SEQUENCE: Tag = Tag(0x0022, 0x1518); // (0022,1518)
/// WideFieldOphthalmicPhotographyQualityRatingSequence (0022,1525) SQ 1 DICOM
#[rustfmt::skip]
pub const WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_RATING_SEQUENCE: Tag = Tag(0x0022, 0x1525); // (0022,1525)
/// WideFieldOphthalmicPhotographyQualityThresholdSequence (0022,1526) SQ 1 DICOM
#[rustfmt::skip]
pub const WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_THRESHOLD_SEQUENCE: Tag = Tag(0x0022, 0x1526); // (0022,1526)
/// WideFieldOphthalmicPhotographyThresholdQualityRating (0022,1527) FL 1 DICOM
#[rustfmt::skip]
pub const WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_THRESHOLD_QUALITY_RATING: Tag = Tag(0x0022, 0x1527); // (0022,1527)
/// XCoordinatesCenterPixelViewAngle (0022,1528) FL 1 DICOM
#[rustfmt::skip]
pub const X_COORDINATES_CENTER_PIXEL_VIEW_ANGLE: Tag = Tag(0x0022, 0x1528); // (0022,1528)
/// YCoordinatesCenterPixelViewAngle (0022,1529) FL 1 DICOM
#[rustfmt::skip]
pub const Y_COORDINATES_CENTER_PIXEL_VIEW_ANGLE: Tag = Tag(0x0022, 0x1529); // (0022,1529)
/// NumberOfMapPoints (0022,1530) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_MAP_POINTS: Tag = Tag(0x0022, 0x1530); // (0022,1530)
/// TwoDimensionalToThreeDimensionalMapData (0022,1531) OF 1 DICOM
#[rustfmt::skip]
pub const TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_DATA: Tag = Tag(0x0022, 0x1531); // (0022,1531)
/// DerivationAlgorithmSequence (0022,1612) SQ 1 DICOM
#[rustfmt::skip]
pub const DERIVATION_ALGORITHM_SEQUENCE: Tag = Tag(0x0022, 0x1612); // (0022,1612)
/// OphthalmicImageTypeCodeSequence (0022,1615) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_IMAGE_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1615); // (0022,1615)
/// OphthalmicImageTypeDescription (0022,1616) LO 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_IMAGE_TYPE_DESCRIPTION: Tag = Tag(0x0022, 0x1616); // (0022,1616)
/// ScanPatternTypeCodeSequence (0022,1618) SQ 1 DICOM
#[rustfmt::skip]
pub const SCAN_PATTERN_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1618); // (0022,1618)
/// ReferencedSurfaceMeshIdentificationSequence (0022,1620) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SURFACE_MESH_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0022, 0x1620); // (0022,1620)
/// OphthalmicVolumetricPropertiesFlag (0022,1622) CS 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_VOLUMETRIC_PROPERTIES_FLAG: Tag = Tag(0x0022, 0x1622); // (0022,1622)
/// OphthalmicAnatomicReferencePointXCoordinate (0022,1624) FL 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_ANATOMIC_REFERENCE_POINT_X_COORDINATE: Tag = Tag(0x0022, 0x1624); // (0022,1624)
/// OphthalmicAnatomicReferencePointYCoordinate (0022,1626) FL 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_ANATOMIC_REFERENCE_POINT_Y_COORDINATE: Tag = Tag(0x0022, 0x1626); // (0022,1626)
/// OphthalmicEnFaceImageQualityRatingSequence (0022,1628) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_EN_FACE_IMAGE_QUALITY_RATING_SEQUENCE: Tag = Tag(0x0022, 0x1628); // (0022,1628)
/// QualityThreshold (0022,1630) DS 1 DICOM
#[rustfmt::skip]
pub const QUALITY_THRESHOLD: Tag = Tag(0x0022, 0x1630); // (0022,1630)
/// OCTBscanAnalysisAcquisitionParametersSequence (0022,1640) SQ 1 DICOM
#[rustfmt::skip]
pub const OCT_BSCAN_ANALYSIS_ACQUISITION_PARAMETERS_SEQUENCE: Tag = Tag(0x0022, 0x1640); // (0022,1640)
/// NumberofBscansPerFrame (0022,1642) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBEROF_BSCANS_PER_FRAME: Tag = Tag(0x0022, 0x1642); // (0022,1642)
/// BscanSlabThickness (0022,1643) FL 1 DICOM
#[rustfmt::skip]
pub const BSCAN_SLAB_THICKNESS: Tag = Tag(0x0022, 0x1643); // (0022,1643)
/// DistanceBetweenBscanSlabs (0022,1644) FL 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_BETWEEN_BSCAN_SLABS: Tag = Tag(0x0022, 0x1644); // (0022,1644)
/// BscanCycleTime (0022,1645) FL 1 DICOM
#[rustfmt::skip]
pub const BSCAN_CYCLE_TIME: Tag = Tag(0x0022, 0x1645); // (0022,1645)
/// BscanCycleTimeVector (0022,1646) FL 1-n DICOM
#[rustfmt::skip]
pub const BSCAN_CYCLE_TIME_VECTOR: Tag = Tag(0x0022, 0x1646); // (0022,1646)
/// AscanRate (0022,1649) FL 1 DICOM
#[rustfmt::skip]
pub const ASCAN_RATE: Tag = Tag(0x0022, 0x1649); // (0022,1649)
/// BscanRate (0022,1650) FL 1 DICOM
#[rustfmt::skip]
pub const BSCAN_RATE: Tag = Tag(0x0022, 0x1650); // (0022,1650)
/// SurfaceMeshZPixelOffset (0022,1658) UL 1 DICOM
#[rustfmt::skip]
pub const SURFACE_MESH_Z_PIXEL_OFFSET: Tag = Tag(0x0022, 0x1658); // (0022,1658)
/// VisualFieldHorizontalExtent (0024,0010) FL 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_HORIZONTAL_EXTENT: Tag = Tag(0x0024, 0x0010); // (0024,0010)
/// VisualFieldVerticalExtent (0024,0011) FL 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_VERTICAL_EXTENT: Tag = Tag(0x0024, 0x0011); // (0024,0011)
/// VisualFieldShape (0024,0012) CS 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_SHAPE: Tag = Tag(0x0024, 0x0012); // (0024,0012)
/// ScreeningTestModeCodeSequence (0024,0016) SQ 1 DICOM
#[rustfmt::skip]
pub const SCREENING_TEST_MODE_CODE_SEQUENCE: Tag = Tag(0x0024, 0x0016); // (0024,0016)
/// MaximumStimulusLuminance (0024,0018) FL 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_STIMULUS_LUMINANCE: Tag = Tag(0x0024, 0x0018); // (0024,0018)
/// BackgroundLuminance (0024,0020) FL 1 DICOM
#[rustfmt::skip]
pub const BACKGROUND_LUMINANCE: Tag = Tag(0x0024, 0x0020); // (0024,0020)
/// StimulusColorCodeSequence (0024,0021) SQ 1 DICOM
#[rustfmt::skip]
pub const STIMULUS_COLOR_CODE_SEQUENCE: Tag = Tag(0x0024, 0x0021); // (0024,0021)
/// BackgroundIlluminationColorCodeSequence (0024,0024) SQ 1 DICOM
#[rustfmt::skip]
pub const BACKGROUND_ILLUMINATION_COLOR_CODE_SEQUENCE: Tag = Tag(0x0024, 0x0024); // (0024,0024)
/// StimulusArea (0024,0025) FL 1 DICOM
#[rustfmt::skip]
pub const STIMULUS_AREA: Tag = Tag(0x0024, 0x0025); // (0024,0025)
/// StimulusPresentationTime (0024,0028) FL 1 DICOM
#[rustfmt::skip]
pub const STIMULUS_PRESENTATION_TIME: Tag = Tag(0x0024, 0x0028); // (0024,0028)
/// FixationSequence (0024,0032) SQ 1 DICOM
#[rustfmt::skip]
pub const FIXATION_SEQUENCE: Tag = Tag(0x0024, 0x0032); // (0024,0032)
/// FixationMonitoringCodeSequence (0024,0033) SQ 1 DICOM
#[rustfmt::skip]
pub const FIXATION_MONITORING_CODE_SEQUENCE: Tag = Tag(0x0024, 0x0033); // (0024,0033)
/// VisualFieldCatchTrialSequence (0024,0034) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_CATCH_TRIAL_SEQUENCE: Tag = Tag(0x0024, 0x0034); // (0024,0034)
/// FixationCheckedQuantity (0024,0035) US 1 DICOM
#[rustfmt::skip]
pub const FIXATION_CHECKED_QUANTITY: Tag = Tag(0x0024, 0x0035); // (0024,0035)
/// PatientNotProperlyFixatedQuantity (0024,0036) US 1 DICOM
#[rustfmt::skip]
pub const PATIENT_NOT_PROPERLY_FIXATED_QUANTITY: Tag = Tag(0x0024, 0x0036); // (0024,0036)
/// PresentedVisualStimuliDataFlag (0024,0037) CS 1 DICOM
#[rustfmt::skip]
pub const PRESENTED_VISUAL_STIMULI_DATA_FLAG: Tag = Tag(0x0024, 0x0037); // (0024,0037)
/// NumberOfVisualStimuli (0024,0038) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_VISUAL_STIMULI: Tag = Tag(0x0024, 0x0038); // (0024,0038)
/// ExcessiveFixationLossesDataFlag (0024,0039) CS 1 DICOM
#[rustfmt::skip]
pub const EXCESSIVE_FIXATION_LOSSES_DATA_FLAG: Tag = Tag(0x0024, 0x0039); // (0024,0039)
/// ExcessiveFixationLosses (0024,0040) CS 1 DICOM
#[rustfmt::skip]
pub const EXCESSIVE_FIXATION_LOSSES: Tag = Tag(0x0024, 0x0040); // (0024,0040)
/// StimuliRetestingQuantity (0024,0042) US 1 DICOM
#[rustfmt::skip]
pub const STIMULI_RETESTING_QUANTITY: Tag = Tag(0x0024, 0x0042); // (0024,0042)
/// CommentsOnPatientPerformanceOfVisualField (0024,0044) LT 1 DICOM
#[rustfmt::skip]
pub const COMMENTS_ON_PATIENT_PERFORMANCE_OF_VISUAL_FIELD: Tag = Tag(0x0024, 0x0044); // (0024,0044)
/// FalseNegativesEstimateFlag (0024,0045) CS 1 DICOM
#[rustfmt::skip]
pub const FALSE_NEGATIVES_ESTIMATE_FLAG: Tag = Tag(0x0024, 0x0045); // (0024,0045)
/// FalseNegativesEstimate (0024,0046) FL 1 DICOM
#[rustfmt::skip]
pub const FALSE_NEGATIVES_ESTIMATE: Tag = Tag(0x0024, 0x0046); // (0024,0046)
/// NegativeCatchTrialsQuantity (0024,0048) US 1 DICOM
#[rustfmt::skip]
pub const NEGATIVE_CATCH_TRIALS_QUANTITY: Tag = Tag(0x0024, 0x0048); // (0024,0048)
/// FalseNegativesQuantity (0024,0050) US 1 DICOM
#[rustfmt::skip]
pub const FALSE_NEGATIVES_QUANTITY: Tag = Tag(0x0024, 0x0050); // (0024,0050)
/// ExcessiveFalseNegativesDataFlag (0024,0051) CS 1 DICOM
#[rustfmt::skip]
pub const EXCESSIVE_FALSE_NEGATIVES_DATA_FLAG: Tag = Tag(0x0024, 0x0051); // (0024,0051)
/// ExcessiveFalseNegatives (0024,0052) CS 1 DICOM
#[rustfmt::skip]
pub const EXCESSIVE_FALSE_NEGATIVES: Tag = Tag(0x0024, 0x0052); // (0024,0052)
/// FalsePositivesEstimateFlag (0024,0053) CS 1 DICOM
#[rustfmt::skip]
pub const FALSE_POSITIVES_ESTIMATE_FLAG: Tag = Tag(0x0024, 0x0053); // (0024,0053)
/// FalsePositivesEstimate (0024,0054) FL 1 DICOM
#[rustfmt::skip]
pub const FALSE_POSITIVES_ESTIMATE: Tag = Tag(0x0024, 0x0054); // (0024,0054)
/// CatchTrialsDataFlag (0024,0055) CS 1 DICOM
#[rustfmt::skip]
pub const CATCH_TRIALS_DATA_FLAG: Tag = Tag(0x0024, 0x0055); // (0024,0055)
/// PositiveCatchTrialsQuantity (0024,0056) US 1 DICOM
#[rustfmt::skip]
pub const POSITIVE_CATCH_TRIALS_QUANTITY: Tag = Tag(0x0024, 0x0056); // (0024,0056)
/// TestPointNormalsDataFlag (0024,0057) CS 1 DICOM
#[rustfmt::skip]
pub const TEST_POINT_NORMALS_DATA_FLAG: Tag = Tag(0x0024, 0x0057); // (0024,0057)
/// TestPointNormalsSequence (0024,0058) SQ 1 DICOM
#[rustfmt::skip]
pub const TEST_POINT_NORMALS_SEQUENCE: Tag = Tag(0x0024, 0x0058); // (0024,0058)
/// GlobalDeviationProbabilityNormalsFlag (0024,0059) CS 1 DICOM
#[rustfmt::skip]
pub const GLOBAL_DEVIATION_PROBABILITY_NORMALS_FLAG: Tag = Tag(0x0024, 0x0059); // (0024,0059)
/// FalsePositivesQuantity (0024,0060) US 1 DICOM
#[rustfmt::skip]
pub const FALSE_POSITIVES_QUANTITY: Tag = Tag(0x0024, 0x0060); // (0024,0060)
/// ExcessiveFalsePositivesDataFlag (0024,0061) CS 1 DICOM
#[rustfmt::skip]
pub const EXCESSIVE_FALSE_POSITIVES_DATA_FLAG: Tag = Tag(0x0024, 0x0061); // (0024,0061)
/// ExcessiveFalsePositives (0024,0062) CS 1 DICOM
#[rustfmt::skip]
pub const EXCESSIVE_FALSE_POSITIVES: Tag = Tag(0x0024, 0x0062); // (0024,0062)
/// VisualFieldTestNormalsFlag (0024,0063) CS 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_NORMALS_FLAG: Tag = Tag(0x0024, 0x0063); // (0024,0063)
/// ResultsNormalsSequence (0024,0064) SQ 1 DICOM
#[rustfmt::skip]
pub const RESULTS_NORMALS_SEQUENCE: Tag = Tag(0x0024, 0x0064); // (0024,0064)
/// AgeCorrectedSensitivityDeviationAlgorithmSequence (0024,0065) SQ 1 DICOM
#[rustfmt::skip]
pub const AGE_CORRECTED_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE: Tag = Tag(0x0024, 0x0065); // (0024,0065)
/// GlobalDeviationFromNormal (0024,0066) FL 1 DICOM
#[rustfmt::skip]
pub const GLOBAL_DEVIATION_FROM_NORMAL: Tag = Tag(0x0024, 0x0066); // (0024,0066)
/// GeneralizedDefectSensitivityDeviationAlgorithmSequence (0024,0067) SQ 1 DICOM
#[rustfmt::skip]
pub const GENERALIZED_DEFECT_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE: Tag = Tag(0x0024, 0x0067); // (0024,0067)
/// LocalizedDeviationFromNormal (0024,0068) FL 1 DICOM
#[rustfmt::skip]
pub const LOCALIZED_DEVIATION_FROM_NORMAL: Tag = Tag(0x0024, 0x0068); // (0024,0068)
/// PatientReliabilityIndicator (0024,0069) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_RELIABILITY_INDICATOR: Tag = Tag(0x0024, 0x0069); // (0024,0069)
/// VisualFieldMeanSensitivity (0024,0070) FL 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_MEAN_SENSITIVITY: Tag = Tag(0x0024, 0x0070); // (0024,0070)
/// GlobalDeviationProbability (0024,0071) FL 1 DICOM
#[rustfmt::skip]
pub const GLOBAL_DEVIATION_PROBABILITY: Tag = Tag(0x0024, 0x0071); // (0024,0071)
/// LocalDeviationProbabilityNormalsFlag (0024,0072) CS 1 DICOM
#[rustfmt::skip]
pub const LOCAL_DEVIATION_PROBABILITY_NORMALS_FLAG: Tag = Tag(0x0024, 0x0072); // (0024,0072)
/// LocalizedDeviationProbability (0024,0073) FL 1 DICOM
#[rustfmt::skip]
pub const LOCALIZED_DEVIATION_PROBABILITY: Tag = Tag(0x0024, 0x0073); // (0024,0073)
/// ShortTermFluctuationCalculated (0024,0074) CS 1 DICOM
#[rustfmt::skip]
pub const SHORT_TERM_FLUCTUATION_CALCULATED: Tag = Tag(0x0024, 0x0074); // (0024,0074)
/// ShortTermFluctuation (0024,0075) FL 1 DICOM
#[rustfmt::skip]
pub const SHORT_TERM_FLUCTUATION: Tag = Tag(0x0024, 0x0075); // (0024,0075)
/// ShortTermFluctuationProbabilityCalculated (0024,0076) CS 1 DICOM
#[rustfmt::skip]
pub const SHORT_TERM_FLUCTUATION_PROBABILITY_CALCULATED: Tag = Tag(0x0024, 0x0076); // (0024,0076)
/// ShortTermFluctuationProbability (0024,0077) FL 1 DICOM
#[rustfmt::skip]
pub const SHORT_TERM_FLUCTUATION_PROBABILITY: Tag = Tag(0x0024, 0x0077); // (0024,0077)
/// CorrectedLocalizedDeviationFromNormalCalculated (0024,0078) CS 1 DICOM
#[rustfmt::skip]
pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_CALCULATED: Tag = Tag(0x0024, 0x0078); // (0024,0078)
/// CorrectedLocalizedDeviationFromNormal (0024,0079) FL 1 DICOM
#[rustfmt::skip]
pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL: Tag = Tag(0x0024, 0x0079); // (0024,0079)
/// CorrectedLocalizedDeviationFromNormalProbabilityCalculated (0024,0080) CS 1 DICOM
#[rustfmt::skip]
pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY_CALCULATED: Tag = Tag(0x0024, 0x0080); // (0024,0080)
/// CorrectedLocalizedDeviationFromNormalProbability (0024,0081) FL 1 DICOM
#[rustfmt::skip]
pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY: Tag = Tag(0x0024, 0x0081); // (0024,0081)
/// GlobalDeviationProbabilitySequence (0024,0083) SQ 1 DICOM
#[rustfmt::skip]
pub const GLOBAL_DEVIATION_PROBABILITY_SEQUENCE: Tag = Tag(0x0024, 0x0083); // (0024,0083)
/// LocalizedDeviationProbabilitySequence (0024,0085) SQ 1 DICOM
#[rustfmt::skip]
pub const LOCALIZED_DEVIATION_PROBABILITY_SEQUENCE: Tag = Tag(0x0024, 0x0085); // (0024,0085)
/// FovealSensitivityMeasured (0024,0086) CS 1 DICOM
#[rustfmt::skip]
pub const FOVEAL_SENSITIVITY_MEASURED: Tag = Tag(0x0024, 0x0086); // (0024,0086)
/// FovealSensitivity (0024,0087) FL 1 DICOM
#[rustfmt::skip]
pub const FOVEAL_SENSITIVITY: Tag = Tag(0x0024, 0x0087); // (0024,0087)
/// VisualFieldTestDuration (0024,0088) FL 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_DURATION: Tag = Tag(0x0024, 0x0088); // (0024,0088)
/// VisualFieldTestPointSequence (0024,0089) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_POINT_SEQUENCE: Tag = Tag(0x0024, 0x0089); // (0024,0089)
/// VisualFieldTestPointXCoordinate (0024,0090) FL 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_POINT_X_COORDINATE: Tag = Tag(0x0024, 0x0090); // (0024,0090)
/// VisualFieldTestPointYCoordinate (0024,0091) FL 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_POINT_Y_COORDINATE: Tag = Tag(0x0024, 0x0091); // (0024,0091)
/// AgeCorrectedSensitivityDeviationValue (0024,0092) FL 1 DICOM
#[rustfmt::skip]
pub const AGE_CORRECTED_SENSITIVITY_DEVIATION_VALUE: Tag = Tag(0x0024, 0x0092); // (0024,0092)
/// StimulusResults (0024,0093) CS 1 DICOM
#[rustfmt::skip]
pub const STIMULUS_RESULTS: Tag = Tag(0x0024, 0x0093); // (0024,0093)
/// SensitivityValue (0024,0094) FL 1 DICOM
#[rustfmt::skip]
pub const SENSITIVITY_VALUE: Tag = Tag(0x0024, 0x0094); // (0024,0094)
/// RetestStimulusSeen (0024,0095) CS 1 DICOM
#[rustfmt::skip]
pub const RETEST_STIMULUS_SEEN: Tag = Tag(0x0024, 0x0095); // (0024,0095)
/// RetestSensitivityValue (0024,0096) FL 1 DICOM
#[rustfmt::skip]
pub const RETEST_SENSITIVITY_VALUE: Tag = Tag(0x0024, 0x0096); // (0024,0096)
/// VisualFieldTestPointNormalsSequence (0024,0097) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_POINT_NORMALS_SEQUENCE: Tag = Tag(0x0024, 0x0097); // (0024,0097)
/// QuantifiedDefect (0024,0098) FL 1 DICOM
#[rustfmt::skip]
pub const QUANTIFIED_DEFECT: Tag = Tag(0x0024, 0x0098); // (0024,0098)
/// AgeCorrectedSensitivityDeviationProbabilityValue (0024,0100) FL 1 DICOM
#[rustfmt::skip]
pub const AGE_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE: Tag = Tag(0x0024, 0x0100); // (0024,0100)
/// GeneralizedDefectCorrectedSensitivityDeviationFlag (0024,0102) CS 1 DICOM
#[rustfmt::skip]
pub const GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_FLAG: Tag = Tag(0x0024, 0x0102); // (0024,0102)
/// GeneralizedDefectCorrectedSensitivityDeviationValue (0024,0103) FL 1 DICOM
#[rustfmt::skip]
pub const GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_VALUE: Tag = Tag(0x0024, 0x0103); // (0024,0103)
/// GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue (0024,0104) FL 1 DICOM
#[rustfmt::skip]
pub const GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE: Tag = Tag(0x0024, 0x0104); // (0024,0104)
/// MinimumSensitivityValue (0024,0105) FL 1 DICOM
#[rustfmt::skip]
pub const MINIMUM_SENSITIVITY_VALUE: Tag = Tag(0x0024, 0x0105); // (0024,0105)
/// BlindSpotLocalized (0024,0106) CS 1 DICOM
#[rustfmt::skip]
pub const BLIND_SPOT_LOCALIZED: Tag = Tag(0x0024, 0x0106); // (0024,0106)
/// BlindSpotXCoordinate (0024,0107) FL 1 DICOM
#[rustfmt::skip]
pub const BLIND_SPOT_X_COORDINATE: Tag = Tag(0x0024, 0x0107); // (0024,0107)
/// BlindSpotYCoordinate (0024,0108) FL 1 DICOM
#[rustfmt::skip]
pub const BLIND_SPOT_Y_COORDINATE: Tag = Tag(0x0024, 0x0108); // (0024,0108)
/// VisualAcuityMeasurementSequence (0024,0110) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_ACUITY_MEASUREMENT_SEQUENCE: Tag = Tag(0x0024, 0x0110); // (0024,0110)
/// RefractiveParametersUsedOnPatientSequence (0024,0112) SQ 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_PARAMETERS_USED_ON_PATIENT_SEQUENCE: Tag = Tag(0x0024, 0x0112); // (0024,0112)
/// MeasurementLaterality (0024,0113) CS 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENT_LATERALITY: Tag = Tag(0x0024, 0x0113); // (0024,0113)
/// OphthalmicPatientClinicalInformationLeftEyeSequence (0024,0114) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_LEFT_EYE_SEQUENCE: Tag = Tag(0x0024, 0x0114); // (0024,0114)
/// OphthalmicPatientClinicalInformationRightEyeSequence (0024,0115) SQ 1 DICOM
#[rustfmt::skip]
pub const OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0024, 0x0115); // (0024,0115)
/// FovealPointNormativeDataFlag (0024,0117) CS 1 DICOM
#[rustfmt::skip]
pub const FOVEAL_POINT_NORMATIVE_DATA_FLAG: Tag = Tag(0x0024, 0x0117); // (0024,0117)
/// FovealPointProbabilityValue (0024,0118) FL 1 DICOM
#[rustfmt::skip]
pub const FOVEAL_POINT_PROBABILITY_VALUE: Tag = Tag(0x0024, 0x0118); // (0024,0118)
/// ScreeningBaselineMeasured (0024,0120) CS 1 DICOM
#[rustfmt::skip]
pub const SCREENING_BASELINE_MEASURED: Tag = Tag(0x0024, 0x0120); // (0024,0120)
/// ScreeningBaselineMeasuredSequence (0024,0122) SQ 1 DICOM
#[rustfmt::skip]
pub const SCREENING_BASELINE_MEASURED_SEQUENCE: Tag = Tag(0x0024, 0x0122); // (0024,0122)
/// ScreeningBaselineType (0024,0124) CS 1 DICOM
#[rustfmt::skip]
pub const SCREENING_BASELINE_TYPE: Tag = Tag(0x0024, 0x0124); // (0024,0124)
/// ScreeningBaselineValue (0024,0126) FL 1 DICOM
#[rustfmt::skip]
pub const SCREENING_BASELINE_VALUE: Tag = Tag(0x0024, 0x0126); // (0024,0126)
/// AlgorithmSource (0024,0202) LO 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_SOURCE: Tag = Tag(0x0024, 0x0202); // (0024,0202)
/// DataSetName (0024,0306) LO 1 DICOM
#[rustfmt::skip]
pub const DATA_SET_NAME: Tag = Tag(0x0024, 0x0306); // (0024,0306)
/// DataSetVersion (0024,0307) LO 1 DICOM
#[rustfmt::skip]
pub const DATA_SET_VERSION: Tag = Tag(0x0024, 0x0307); // (0024,0307)
/// DataSetSource (0024,0308) LO 1 DICOM
#[rustfmt::skip]
pub const DATA_SET_SOURCE: Tag = Tag(0x0024, 0x0308); // (0024,0308)
/// DataSetDescription (0024,0309) LO 1 DICOM
#[rustfmt::skip]
pub const DATA_SET_DESCRIPTION: Tag = Tag(0x0024, 0x0309); // (0024,0309)
/// VisualFieldTestReliabilityGlobalIndexSequence (0024,0317) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_TEST_RELIABILITY_GLOBAL_INDEX_SEQUENCE: Tag = Tag(0x0024, 0x0317); // (0024,0317)
/// VisualFieldGlobalResultsIndexSequence (0024,0320) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_FIELD_GLOBAL_RESULTS_INDEX_SEQUENCE: Tag = Tag(0x0024, 0x0320); // (0024,0320)
/// DataObservationSequence (0024,0325) SQ 1 DICOM
#[rustfmt::skip]
pub const DATA_OBSERVATION_SEQUENCE: Tag = Tag(0x0024, 0x0325); // (0024,0325)
/// IndexNormalsFlag (0024,0338) CS 1 DICOM
#[rustfmt::skip]
pub const INDEX_NORMALS_FLAG: Tag = Tag(0x0024, 0x0338); // (0024,0338)
/// IndexProbability (0024,0341) FL 1 DICOM
#[rustfmt::skip]
pub const INDEX_PROBABILITY: Tag = Tag(0x0024, 0x0341); // (0024,0341)
/// IndexProbabilitySequence (0024,0344) SQ 1 DICOM
#[rustfmt::skip]
pub const INDEX_PROBABILITY_SEQUENCE: Tag = Tag(0x0024, 0x0344); // (0024,0344)
/// SamplesPerPixel (0028,0002) US 1 DICOM
#[rustfmt::skip]
pub const SAMPLES_PER_PIXEL: Tag = Tag(0x0028, 0x0002); // (0028,0002)
/// SamplesPerPixelUsed (0028,0003) US 1 DICOM
#[rustfmt::skip]
pub const SAMPLES_PER_PIXEL_USED: Tag = Tag(0x0028, 0x0003); // (0028,0003)
/// PhotometricInterpretation (0028,0004) CS 1 DICOM
#[rustfmt::skip]
pub const PHOTOMETRIC_INTERPRETATION: Tag = Tag(0x0028, 0x0004); // (0028,0004)
/// PlanarConfiguration (0028,0006) US 1 DICOM
#[rustfmt::skip]
pub const PLANAR_CONFIGURATION: Tag = Tag(0x0028, 0x0006); // (0028,0006)
/// NumberOfFrames (0028,0008) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRAMES: Tag = Tag(0x0028, 0x0008); // (0028,0008)
/// FrameIncrementPointer (0028,0009) AT 1-n DICOM
#[rustfmt::skip]
pub const FRAME_INCREMENT_POINTER: Tag = Tag(0x0028, 0x0009); // (0028,0009)
/// FrameDimensionPointer (0028,000A) AT 1-n DICOM
#[rustfmt::skip]
pub const FRAME_DIMENSION_POINTER: Tag = Tag(0x0028, 0x000A); // (0028,000A)
/// Rows (0028,0010) US 1 DICOM
#[rustfmt::skip]
pub const ROWS: Tag = Tag(0x0028, 0x0010); // (0028,0010)
/// Columns (0028,0011) US 1 DICOM
#[rustfmt::skip]
pub const COLUMNS: Tag = Tag(0x0028, 0x0011); // (0028,0011)
/// UltrasoundColorDataPresent (0028,0014) US 1 DICOM
#[rustfmt::skip]
pub const ULTRASOUND_COLOR_DATA_PRESENT: Tag = Tag(0x0028, 0x0014); // (0028,0014)
/// PixelSpacing (0028,0030) DS 2 DICOM
#[rustfmt::skip]
pub const PIXEL_SPACING: Tag = Tag(0x0028, 0x0030); // (0028,0030)
/// ZoomFactor (0028,0031) DS 2 DICOM
#[rustfmt::skip]
pub const ZOOM_FACTOR: Tag = Tag(0x0028, 0x0031); // (0028,0031)
/// ZoomCenter (0028,0032) DS 2 DICOM
#[rustfmt::skip]
pub const ZOOM_CENTER: Tag = Tag(0x0028, 0x0032); // (0028,0032)
/// PixelAspectRatio (0028,0034) IS 2 DICOM
#[rustfmt::skip]
pub const PIXEL_ASPECT_RATIO: Tag = Tag(0x0028, 0x0034); // (0028,0034)
/// CorrectedImage (0028,0051) CS 1-n DICOM
#[rustfmt::skip]
pub const CORRECTED_IMAGE: Tag = Tag(0x0028, 0x0051); // (0028,0051)
/// BitsAllocated (0028,0100) US 1 DICOM
#[rustfmt::skip]
pub const BITS_ALLOCATED: Tag = Tag(0x0028, 0x0100); // (0028,0100)
/// BitsStored (0028,0101) US 1 DICOM
#[rustfmt::skip]
pub const BITS_STORED: Tag = Tag(0x0028, 0x0101); // (0028,0101)
/// HighBit (0028,0102) US 1 DICOM
#[rustfmt::skip]
pub const HIGH_BIT: Tag = Tag(0x0028, 0x0102); // (0028,0102)
/// PixelRepresentation (0028,0103) US 1 DICOM
#[rustfmt::skip]
pub const PIXEL_REPRESENTATION: Tag = Tag(0x0028, 0x0103); // (0028,0103)
/// SmallestImagePixelValue (0028,0106) US 1 DICOM
#[rustfmt::skip]
pub const SMALLEST_IMAGE_PIXEL_VALUE: Tag = Tag(0x0028, 0x0106); // (0028,0106)
/// LargestImagePixelValue (0028,0107) US 1 DICOM
#[rustfmt::skip]
pub const LARGEST_IMAGE_PIXEL_VALUE: Tag = Tag(0x0028, 0x0107); // (0028,0107)
/// SmallestPixelValueInSeries (0028,0108) US 1 DICOM
#[rustfmt::skip]
pub const SMALLEST_PIXEL_VALUE_IN_SERIES: Tag = Tag(0x0028, 0x0108); // (0028,0108)
/// LargestPixelValueInSeries (0028,0109) US 1 DICOM
#[rustfmt::skip]
pub const LARGEST_PIXEL_VALUE_IN_SERIES: Tag = Tag(0x0028, 0x0109); // (0028,0109)
/// PixelPaddingValue (0028,0120) US 1 DICOM
#[rustfmt::skip]
pub const PIXEL_PADDING_VALUE: Tag = Tag(0x0028, 0x0120); // (0028,0120)
/// PixelPaddingRangeLimit (0028,0121) US 1 DICOM
#[rustfmt::skip]
pub const PIXEL_PADDING_RANGE_LIMIT: Tag = Tag(0x0028, 0x0121); // (0028,0121)
/// FloatPixelPaddingValue (0028,0122) FL 1 DICOM
#[rustfmt::skip]
pub const FLOAT_PIXEL_PADDING_VALUE: Tag = Tag(0x0028, 0x0122); // (0028,0122)
/// DoubleFloatPixelPaddingValue (0028,0123) FD 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_FLOAT_PIXEL_PADDING_VALUE: Tag = Tag(0x0028, 0x0123); // (0028,0123)
/// FloatPixelPaddingRangeLimit (0028,0124) FL 1 DICOM
#[rustfmt::skip]
pub const FLOAT_PIXEL_PADDING_RANGE_LIMIT: Tag = Tag(0x0028, 0x0124); // (0028,0124)
/// DoubleFloatPixelPaddingRangeLimit (0028,0125) FD 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_FLOAT_PIXEL_PADDING_RANGE_LIMIT: Tag = Tag(0x0028, 0x0125); // (0028,0125)
/// QualityControlImage (0028,0300) CS 1 DICOM
#[rustfmt::skip]
pub const QUALITY_CONTROL_IMAGE: Tag = Tag(0x0028, 0x0300); // (0028,0300)
/// BurnedInAnnotation (0028,0301) CS 1 DICOM
#[rustfmt::skip]
pub const BURNED_IN_ANNOTATION: Tag = Tag(0x0028, 0x0301); // (0028,0301)
/// RecognizableVisualFeatures (0028,0302) CS 1 DICOM
#[rustfmt::skip]
pub const RECOGNIZABLE_VISUAL_FEATURES: Tag = Tag(0x0028, 0x0302); // (0028,0302)
/// LongitudinalTemporalInformationModified (0028,0303) CS 1 DICOM
#[rustfmt::skip]
pub const LONGITUDINAL_TEMPORAL_INFORMATION_MODIFIED: Tag = Tag(0x0028, 0x0303); // (0028,0303)
/// ReferencedColorPaletteInstanceUID (0028,0304) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_COLOR_PALETTE_INSTANCE_UID: Tag = Tag(0x0028, 0x0304); // (0028,0304)
/// PixelSpacingCalibrationType (0028,0A02) CS 1 DICOM
#[rustfmt::skip]
pub const PIXEL_SPACING_CALIBRATION_TYPE: Tag = Tag(0x0028, 0x0A02); // (0028,0A02)
/// PixelSpacingCalibrationDescription (0028,0A04) LO 1 DICOM
#[rustfmt::skip]
pub const PIXEL_SPACING_CALIBRATION_DESCRIPTION: Tag = Tag(0x0028, 0x0A04); // (0028,0A04)
/// PixelIntensityRelationship (0028,1040) CS 1 DICOM
#[rustfmt::skip]
pub const PIXEL_INTENSITY_RELATIONSHIP: Tag = Tag(0x0028, 0x1040); // (0028,1040)
/// PixelIntensityRelationshipSign (0028,1041) SS 1 DICOM
#[rustfmt::skip]
pub const PIXEL_INTENSITY_RELATIONSHIP_SIGN: Tag = Tag(0x0028, 0x1041); // (0028,1041)
/// WindowCenter (0028,1050) DS 1-n DICOM
#[rustfmt::skip]
pub const WINDOW_CENTER: Tag = Tag(0x0028, 0x1050); // (0028,1050)
/// WindowWidth (0028,1051) DS 1-n DICOM
#[rustfmt::skip]
pub const WINDOW_WIDTH: Tag = Tag(0x0028, 0x1051); // (0028,1051)
/// RescaleIntercept (0028,1052) DS 1 DICOM
#[rustfmt::skip]
pub const RESCALE_INTERCEPT: Tag = Tag(0x0028, 0x1052); // (0028,1052)
/// RescaleSlope (0028,1053) DS 1 DICOM
#[rustfmt::skip]
pub const RESCALE_SLOPE: Tag = Tag(0x0028, 0x1053); // (0028,1053)
/// RescaleType (0028,1054) LO 1 DICOM
#[rustfmt::skip]
pub const RESCALE_TYPE: Tag = Tag(0x0028, 0x1054); // (0028,1054)
/// WindowCenterWidthExplanation (0028,1055) LO 1-n DICOM
#[rustfmt::skip]
pub const WINDOW_CENTER_WIDTH_EXPLANATION: Tag = Tag(0x0028, 0x1055); // (0028,1055)
/// VOILUTFunction (0028,1056) CS 1 DICOM
#[rustfmt::skip]
pub const VOILUT_FUNCTION: Tag = Tag(0x0028, 0x1056); // (0028,1056)
/// RecommendedViewingMode (0028,1090) CS 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_VIEWING_MODE: Tag = Tag(0x0028, 0x1090); // (0028,1090)
/// RedPaletteColorLookupTableDescriptor (0028,1101) US 3 DICOM
#[rustfmt::skip]
pub const RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1101); // (0028,1101)
/// GreenPaletteColorLookupTableDescriptor (0028,1102) US 3 DICOM
#[rustfmt::skip]
pub const GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1102); // (0028,1102)
/// BluePaletteColorLookupTableDescriptor (0028,1103) US 3 DICOM
#[rustfmt::skip]
pub const BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1103); // (0028,1103)
/// AlphaPaletteColorLookupTableDescriptor (0028,1104) US 3 DICOM
#[rustfmt::skip]
pub const ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1104); // (0028,1104)
/// PaletteColorLookupTableUID (0028,1199) UI 1 DICOM
#[rustfmt::skip]
pub const PALETTE_COLOR_LOOKUP_TABLE_UID: Tag = Tag(0x0028, 0x1199); // (0028,1199)
/// RedPaletteColorLookupTableData (0028,1201) OW 1 DICOM
#[rustfmt::skip]
pub const RED_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1201); // (0028,1201)
/// GreenPaletteColorLookupTableData (0028,1202) OW 1 DICOM
#[rustfmt::skip]
pub const GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1202); // (0028,1202)
/// BluePaletteColorLookupTableData (0028,1203) OW 1 DICOM
#[rustfmt::skip]
pub const BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1203); // (0028,1203)
/// AlphaPaletteColorLookupTableData (0028,1204) OW 1 DICOM
#[rustfmt::skip]
pub const ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1204); // (0028,1204)
/// SegmentedRedPaletteColorLookupTableData (0028,1221) OW 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1221); // (0028,1221)
/// SegmentedGreenPaletteColorLookupTableData (0028,1222) OW 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1222); // (0028,1222)
/// SegmentedBluePaletteColorLookupTableData (0028,1223) OW 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1223); // (0028,1223)
/// SegmentedAlphaPaletteColorLookupTableData (0028,1224) OW 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1224); // (0028,1224)
/// StoredValueColorRangeSequence (0028,1230) SQ 1 DICOM
#[rustfmt::skip]
pub const STORED_VALUE_COLOR_RANGE_SEQUENCE: Tag = Tag(0x0028, 0x1230); // (0028,1230)
/// MinimumStoredValueMapped (0028,1231) FD 1 DICOM
#[rustfmt::skip]
pub const MINIMUM_STORED_VALUE_MAPPED: Tag = Tag(0x0028, 0x1231); // (0028,1231)
/// MaximumStoredValueMapped (0028,1232) FD 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_STORED_VALUE_MAPPED: Tag = Tag(0x0028, 0x1232); // (0028,1232)
/// BreastImplantPresent (0028,1300) CS 1 DICOM
#[rustfmt::skip]
pub const BREAST_IMPLANT_PRESENT: Tag = Tag(0x0028, 0x1300); // (0028,1300)
/// PartialView (0028,1350) CS 1 DICOM
#[rustfmt::skip]
pub const PARTIAL_VIEW: Tag = Tag(0x0028, 0x1350); // (0028,1350)
/// PartialViewDescription (0028,1351) ST 1 DICOM
#[rustfmt::skip]
pub const PARTIAL_VIEW_DESCRIPTION: Tag = Tag(0x0028, 0x1351); // (0028,1351)
/// PartialViewCodeSequence (0028,1352) SQ 1 DICOM
#[rustfmt::skip]
pub const PARTIAL_VIEW_CODE_SEQUENCE: Tag = Tag(0x0028, 0x1352); // (0028,1352)
/// SpatialLocationsPreserved (0028,135A) CS 1 DICOM
#[rustfmt::skip]
pub const SPATIAL_LOCATIONS_PRESERVED: Tag = Tag(0x0028, 0x135A); // (0028,135A)
/// DataFrameAssignmentSequence (0028,1401) SQ 1 DICOM
#[rustfmt::skip]
pub const DATA_FRAME_ASSIGNMENT_SEQUENCE: Tag = Tag(0x0028, 0x1401); // (0028,1401)
/// DataPathAssignment (0028,1402) CS 1 DICOM
#[rustfmt::skip]
pub const DATA_PATH_ASSIGNMENT: Tag = Tag(0x0028, 0x1402); // (0028,1402)
/// BitsMappedToColorLookupTable (0028,1403) US 1 DICOM
#[rustfmt::skip]
pub const BITS_MAPPED_TO_COLOR_LOOKUP_TABLE: Tag = Tag(0x0028, 0x1403); // (0028,1403)
/// BlendingLUT1Sequence (0028,1404) SQ 1 DICOM
#[rustfmt::skip]
pub const BLENDING_LUT1_SEQUENCE: Tag = Tag(0x0028, 0x1404); // (0028,1404)
/// BlendingLUT1TransferFunction (0028,1405) CS 1 DICOM
#[rustfmt::skip]
pub const BLENDING_LUT1_TRANSFER_FUNCTION: Tag = Tag(0x0028, 0x1405); // (0028,1405)
/// BlendingWeightConstant (0028,1406) FD 1 DICOM
#[rustfmt::skip]
pub const BLENDING_WEIGHT_CONSTANT: Tag = Tag(0x0028, 0x1406); // (0028,1406)
/// BlendingLookupTableDescriptor (0028,1407) US 3 DICOM
#[rustfmt::skip]
pub const BLENDING_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1407); // (0028,1407)
/// BlendingLookupTableData (0028,1408) OW 1 DICOM
#[rustfmt::skip]
pub const BLENDING_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1408); // (0028,1408)
/// EnhancedPaletteColorLookupTableSequence (0028,140B) SQ 1 DICOM
#[rustfmt::skip]
pub const ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE: Tag = Tag(0x0028, 0x140B); // (0028,140B)
/// BlendingLUT2Sequence (0028,140C) SQ 1 DICOM
#[rustfmt::skip]
pub const BLENDING_LUT2_SEQUENCE: Tag = Tag(0x0028, 0x140C); // (0028,140C)
/// BlendingLUT2TransferFunction (0028,140D) CS 1 DICOM
#[rustfmt::skip]
pub const BLENDING_LUT2_TRANSFER_FUNCTION: Tag = Tag(0x0028, 0x140D); // (0028,140D)
/// DataPathID (0028,140E) CS 1 DICOM
#[rustfmt::skip]
pub const DATA_PATH_ID: Tag = Tag(0x0028, 0x140E); // (0028,140E)
/// RGBLUTTransferFunction (0028,140F) CS 1 DICOM
#[rustfmt::skip]
pub const RGBLUT_TRANSFER_FUNCTION: Tag = Tag(0x0028, 0x140F); // (0028,140F)
/// AlphaLUTTransferFunction (0028,1410) CS 1 DICOM
#[rustfmt::skip]
pub const ALPHA_LUT_TRANSFER_FUNCTION: Tag = Tag(0x0028, 0x1410); // (0028,1410)
/// ICCProfile (0028,2000) OB 1 DICOM
#[rustfmt::skip]
pub const ICC_PROFILE: Tag = Tag(0x0028, 0x2000); // (0028,2000)
/// ColorSpace (0028,2002) CS 1 DICOM
#[rustfmt::skip]
pub const COLOR_SPACE: Tag = Tag(0x0028, 0x2002); // (0028,2002)
/// LossyImageCompression (0028,2110) CS 1 DICOM
#[rustfmt::skip]
pub const LOSSY_IMAGE_COMPRESSION: Tag = Tag(0x0028, 0x2110); // (0028,2110)
/// LossyImageCompressionRatio (0028,2112) DS 1-n DICOM
#[rustfmt::skip]
pub const LOSSY_IMAGE_COMPRESSION_RATIO: Tag = Tag(0x0028, 0x2112); // (0028,2112)
/// LossyImageCompressionMethod (0028,2114) CS 1-n DICOM
#[rustfmt::skip]
pub const LOSSY_IMAGE_COMPRESSION_METHOD: Tag = Tag(0x0028, 0x2114); // (0028,2114)
/// ModalityLUTSequence (0028,3000) SQ 1 DICOM
#[rustfmt::skip]
pub const MODALITY_LUT_SEQUENCE: Tag = Tag(0x0028, 0x3000); // (0028,3000)
/// LUTDescriptor (0028,3002) US 3 DICOM
#[rustfmt::skip]
pub const LUT_DESCRIPTOR: Tag = Tag(0x0028, 0x3002); // (0028,3002)
/// LUTExplanation (0028,3003) LO 1 DICOM
#[rustfmt::skip]
pub const LUT_EXPLANATION: Tag = Tag(0x0028, 0x3003); // (0028,3003)
/// ModalityLUTType (0028,3004) LO 1 DICOM
#[rustfmt::skip]
pub const MODALITY_LUT_TYPE: Tag = Tag(0x0028, 0x3004); // (0028,3004)
/// LUTData (0028,3006) OW 1-n DICOM
#[rustfmt::skip]
pub const LUT_DATA: Tag = Tag(0x0028, 0x3006); // (0028,3006)
/// VOILUTSequence (0028,3010) SQ 1 DICOM
#[rustfmt::skip]
pub const VOILUT_SEQUENCE: Tag = Tag(0x0028, 0x3010); // (0028,3010)
/// SoftcopyVOILUTSequence (0028,3110) SQ 1 DICOM
#[rustfmt::skip]
pub const SOFTCOPY_VOILUT_SEQUENCE: Tag = Tag(0x0028, 0x3110); // (0028,3110)
/// RepresentativeFrameNumber (0028,6010) US 1 DICOM
#[rustfmt::skip]
pub const REPRESENTATIVE_FRAME_NUMBER: Tag = Tag(0x0028, 0x6010); // (0028,6010)
/// FrameNumbersOfInterest (0028,6020) US 1-n DICOM
#[rustfmt::skip]
pub const FRAME_NUMBERS_OF_INTEREST: Tag = Tag(0x0028, 0x6020); // (0028,6020)
/// FrameOfInterestDescription (0028,6022) LO 1-n DICOM
#[rustfmt::skip]
pub const FRAME_OF_INTEREST_DESCRIPTION: Tag = Tag(0x0028, 0x6022); // (0028,6022)
/// FrameOfInterestType (0028,6023) CS 1-n DICOM
#[rustfmt::skip]
pub const FRAME_OF_INTEREST_TYPE: Tag = Tag(0x0028, 0x6023); // (0028,6023)
/// RWavePointer (0028,6040) US 1-n DICOM
#[rustfmt::skip]
pub const R_WAVE_POINTER: Tag = Tag(0x0028, 0x6040); // (0028,6040)
/// MaskSubtractionSequence (0028,6100) SQ 1 DICOM
#[rustfmt::skip]
pub const MASK_SUBTRACTION_SEQUENCE: Tag = Tag(0x0028, 0x6100); // (0028,6100)
/// MaskOperation (0028,6101) CS 1 DICOM
#[rustfmt::skip]
pub const MASK_OPERATION: Tag = Tag(0x0028, 0x6101); // (0028,6101)
/// ApplicableFrameRange (0028,6102) US 2-2n DICOM
#[rustfmt::skip]
pub const APPLICABLE_FRAME_RANGE: Tag = Tag(0x0028, 0x6102); // (0028,6102)
/// MaskFrameNumbers (0028,6110) US 1-n DICOM
#[rustfmt::skip]
pub const MASK_FRAME_NUMBERS: Tag = Tag(0x0028, 0x6110); // (0028,6110)
/// ContrastFrameAveraging (0028,6112) US 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_FRAME_AVERAGING: Tag = Tag(0x0028, 0x6112); // (0028,6112)
/// MaskSubPixelShift (0028,6114) FL 2 DICOM
#[rustfmt::skip]
pub const MASK_SUB_PIXEL_SHIFT: Tag = Tag(0x0028, 0x6114); // (0028,6114)
/// TIDOffset (0028,6120) SS 1 DICOM
#[rustfmt::skip]
pub const TID_OFFSET: Tag = Tag(0x0028, 0x6120); // (0028,6120)
/// MaskOperationExplanation (0028,6190) ST 1 DICOM
#[rustfmt::skip]
pub const MASK_OPERATION_EXPLANATION: Tag = Tag(0x0028, 0x6190); // (0028,6190)
/// EquipmentAdministratorSequence (0028,7000) SQ 1 DICOM
#[rustfmt::skip]
pub const EQUIPMENT_ADMINISTRATOR_SEQUENCE: Tag = Tag(0x0028, 0x7000); // (0028,7000)
/// NumberOfDisplaySubsystems (0028,7001) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_DISPLAY_SUBSYSTEMS: Tag = Tag(0x0028, 0x7001); // (0028,7001)
/// CurrentConfigurationID (0028,7002) US 1 DICOM
#[rustfmt::skip]
pub const CURRENT_CONFIGURATION_ID: Tag = Tag(0x0028, 0x7002); // (0028,7002)
/// DisplaySubsystemID (0028,7003) US 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SUBSYSTEM_ID: Tag = Tag(0x0028, 0x7003); // (0028,7003)
/// DisplaySubsystemName (0028,7004) SH 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SUBSYSTEM_NAME: Tag = Tag(0x0028, 0x7004); // (0028,7004)
/// DisplaySubsystemDescription (0028,7005) LO 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SUBSYSTEM_DESCRIPTION: Tag = Tag(0x0028, 0x7005); // (0028,7005)
/// SystemStatus (0028,7006) CS 1 DICOM
#[rustfmt::skip]
pub const SYSTEM_STATUS: Tag = Tag(0x0028, 0x7006); // (0028,7006)
/// SystemStatusComment (0028,7007) LO 1 DICOM
#[rustfmt::skip]
pub const SYSTEM_STATUS_COMMENT: Tag = Tag(0x0028, 0x7007); // (0028,7007)
/// TargetLuminanceCharacteristicsSequence (0028,7008) SQ 1 DICOM
#[rustfmt::skip]
pub const TARGET_LUMINANCE_CHARACTERISTICS_SEQUENCE: Tag = Tag(0x0028, 0x7008); // (0028,7008)
/// LuminanceCharacteristicsID (0028,7009) US 1 DICOM
#[rustfmt::skip]
pub const LUMINANCE_CHARACTERISTICS_ID: Tag = Tag(0x0028, 0x7009); // (0028,7009)
/// DisplaySubsystemConfigurationSequence (0028,700A) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SUBSYSTEM_CONFIGURATION_SEQUENCE: Tag = Tag(0x0028, 0x700A); // (0028,700A)
/// ConfigurationID (0028,700B) US 1 DICOM
#[rustfmt::skip]
pub const CONFIGURATION_ID: Tag = Tag(0x0028, 0x700B); // (0028,700B)
/// ConfigurationName (0028,700C) SH 1 DICOM
#[rustfmt::skip]
pub const CONFIGURATION_NAME: Tag = Tag(0x0028, 0x700C); // (0028,700C)
/// ConfigurationDescription (0028,700D) LO 1 DICOM
#[rustfmt::skip]
pub const CONFIGURATION_DESCRIPTION: Tag = Tag(0x0028, 0x700D); // (0028,700D)
/// ReferencedTargetLuminanceCharacteristicsID (0028,700E) US 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_TARGET_LUMINANCE_CHARACTERISTICS_ID: Tag = Tag(0x0028, 0x700E); // (0028,700E)
/// QAResultsSequence (0028,700F) SQ 1 DICOM
#[rustfmt::skip]
pub const QA_RESULTS_SEQUENCE: Tag = Tag(0x0028, 0x700F); // (0028,700F)
/// DisplaySubsystemQAResultsSequence (0028,7010) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SUBSYSTEM_QA_RESULTS_SEQUENCE: Tag = Tag(0x0028, 0x7010); // (0028,7010)
/// ConfigurationQAResultsSequence (0028,7011) SQ 1 DICOM
#[rustfmt::skip]
pub const CONFIGURATION_QA_RESULTS_SEQUENCE: Tag = Tag(0x0028, 0x7011); // (0028,7011)
/// MeasurementEquipmentSequence (0028,7012) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENT_EQUIPMENT_SEQUENCE: Tag = Tag(0x0028, 0x7012); // (0028,7012)
/// MeasurementFunctions (0028,7013) CS 1-n DICOM
#[rustfmt::skip]
pub const MEASUREMENT_FUNCTIONS: Tag = Tag(0x0028, 0x7013); // (0028,7013)
/// MeasurementEquipmentType (0028,7014) CS 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENT_EQUIPMENT_TYPE: Tag = Tag(0x0028, 0x7014); // (0028,7014)
/// VisualEvaluationResultSequence (0028,7015) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_EVALUATION_RESULT_SEQUENCE: Tag = Tag(0x0028, 0x7015); // (0028,7015)
/// DisplayCalibrationResultSequence (0028,7016) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_CALIBRATION_RESULT_SEQUENCE: Tag = Tag(0x0028, 0x7016); // (0028,7016)
/// DDLValue (0028,7017) US 1 DICOM
#[rustfmt::skip]
pub const DDL_VALUE: Tag = Tag(0x0028, 0x7017); // (0028,7017)
/// CIExyWhitePoint (0028,7018) FL 2 DICOM
#[rustfmt::skip]
pub const CI_EXY_WHITE_POINT: Tag = Tag(0x0028, 0x7018); // (0028,7018)
/// DisplayFunctionType (0028,7019) CS 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_FUNCTION_TYPE: Tag = Tag(0x0028, 0x7019); // (0028,7019)
/// GammaValue (0028,701A) FL 1 DICOM
#[rustfmt::skip]
pub const GAMMA_VALUE: Tag = Tag(0x0028, 0x701A); // (0028,701A)
/// NumberOfLuminancePoints (0028,701B) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_LUMINANCE_POINTS: Tag = Tag(0x0028, 0x701B); // (0028,701B)
/// LuminanceResponseSequence (0028,701C) SQ 1 DICOM
#[rustfmt::skip]
pub const LUMINANCE_RESPONSE_SEQUENCE: Tag = Tag(0x0028, 0x701C); // (0028,701C)
/// TargetMinimumLuminance (0028,701D) FL 1 DICOM
#[rustfmt::skip]
pub const TARGET_MINIMUM_LUMINANCE: Tag = Tag(0x0028, 0x701D); // (0028,701D)
/// TargetMaximumLuminance (0028,701E) FL 1 DICOM
#[rustfmt::skip]
pub const TARGET_MAXIMUM_LUMINANCE: Tag = Tag(0x0028, 0x701E); // (0028,701E)
/// LuminanceValue (0028,701F) FL 1 DICOM
#[rustfmt::skip]
pub const LUMINANCE_VALUE: Tag = Tag(0x0028, 0x701F); // (0028,701F)
/// LuminanceResponseDescription (0028,7020) LO 1 DICOM
#[rustfmt::skip]
pub const LUMINANCE_RESPONSE_DESCRIPTION: Tag = Tag(0x0028, 0x7020); // (0028,7020)
/// WhitePointFlag (0028,7021) CS 1 DICOM
#[rustfmt::skip]
pub const WHITE_POINT_FLAG: Tag = Tag(0x0028, 0x7021); // (0028,7021)
/// DisplayDeviceTypeCodeSequence (0028,7022) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_DEVICE_TYPE_CODE_SEQUENCE: Tag = Tag(0x0028, 0x7022); // (0028,7022)
/// DisplaySubsystemSequence (0028,7023) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SUBSYSTEM_SEQUENCE: Tag = Tag(0x0028, 0x7023); // (0028,7023)
/// LuminanceResultSequence (0028,7024) SQ 1 DICOM
#[rustfmt::skip]
pub const LUMINANCE_RESULT_SEQUENCE: Tag = Tag(0x0028, 0x7024); // (0028,7024)
/// AmbientLightValueSource (0028,7025) CS 1 DICOM
#[rustfmt::skip]
pub const AMBIENT_LIGHT_VALUE_SOURCE: Tag = Tag(0x0028, 0x7025); // (0028,7025)
/// MeasuredCharacteristics (0028,7026) CS 1-n DICOM
#[rustfmt::skip]
pub const MEASURED_CHARACTERISTICS: Tag = Tag(0x0028, 0x7026); // (0028,7026)
/// LuminanceUniformityResultSequence (0028,7027) SQ 1 DICOM
#[rustfmt::skip]
pub const LUMINANCE_UNIFORMITY_RESULT_SEQUENCE: Tag = Tag(0x0028, 0x7027); // (0028,7027)
/// VisualEvaluationTestSequence (0028,7028) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_EVALUATION_TEST_SEQUENCE: Tag = Tag(0x0028, 0x7028); // (0028,7028)
/// TestResult (0028,7029) CS 1 DICOM
#[rustfmt::skip]
pub const TEST_RESULT: Tag = Tag(0x0028, 0x7029); // (0028,7029)
/// TestResultComment (0028,702A) LO 1 DICOM
#[rustfmt::skip]
pub const TEST_RESULT_COMMENT: Tag = Tag(0x0028, 0x702A); // (0028,702A)
/// TestImageValidation (0028,702B) CS 1 DICOM
#[rustfmt::skip]
pub const TEST_IMAGE_VALIDATION: Tag = Tag(0x0028, 0x702B); // (0028,702B)
/// TestPatternCodeSequence (0028,702C) SQ 1 DICOM
#[rustfmt::skip]
pub const TEST_PATTERN_CODE_SEQUENCE: Tag = Tag(0x0028, 0x702C); // (0028,702C)
/// MeasurementPatternCodeSequence (0028,702D) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENT_PATTERN_CODE_SEQUENCE: Tag = Tag(0x0028, 0x702D); // (0028,702D)
/// VisualEvaluationMethodCodeSequence (0028,702E) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_EVALUATION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0028, 0x702E); // (0028,702E)
/// PixelDataProviderURL (0028,7FE0) UR 1 DICOM
#[rustfmt::skip]
pub const PIXEL_DATA_PROVIDER_URL: Tag = Tag(0x0028, 0x7FE0); // (0028,7FE0)
/// DataPointRows (0028,9001) UL 1 DICOM
#[rustfmt::skip]
pub const DATA_POINT_ROWS: Tag = Tag(0x0028, 0x9001); // (0028,9001)
/// DataPointColumns (0028,9002) UL 1 DICOM
#[rustfmt::skip]
pub const DATA_POINT_COLUMNS: Tag = Tag(0x0028, 0x9002); // (0028,9002)
/// SignalDomainColumns (0028,9003) CS 1 DICOM
#[rustfmt::skip]
pub const SIGNAL_DOMAIN_COLUMNS: Tag = Tag(0x0028, 0x9003); // (0028,9003)
/// DataRepresentation (0028,9108) CS 1 DICOM
#[rustfmt::skip]
pub const DATA_REPRESENTATION: Tag = Tag(0x0028, 0x9108); // (0028,9108)
/// PixelMeasuresSequence (0028,9110) SQ 1 DICOM
#[rustfmt::skip]
pub const PIXEL_MEASURES_SEQUENCE: Tag = Tag(0x0028, 0x9110); // (0028,9110)
/// FrameVOILUTSequence (0028,9132) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_VOILUT_SEQUENCE: Tag = Tag(0x0028, 0x9132); // (0028,9132)
/// PixelValueTransformationSequence (0028,9145) SQ 1 DICOM
#[rustfmt::skip]
pub const PIXEL_VALUE_TRANSFORMATION_SEQUENCE: Tag = Tag(0x0028, 0x9145); // (0028,9145)
/// SignalDomainRows (0028,9235) CS 1 DICOM
#[rustfmt::skip]
pub const SIGNAL_DOMAIN_ROWS: Tag = Tag(0x0028, 0x9235); // (0028,9235)
/// DisplayFilterPercentage (0028,9411) FL 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_FILTER_PERCENTAGE: Tag = Tag(0x0028, 0x9411); // (0028,9411)
/// FramePixelShiftSequence (0028,9415) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_PIXEL_SHIFT_SEQUENCE: Tag = Tag(0x0028, 0x9415); // (0028,9415)
/// SubtractionItemID (0028,9416) US 1 DICOM
#[rustfmt::skip]
pub const SUBTRACTION_ITEM_ID: Tag = Tag(0x0028, 0x9416); // (0028,9416)
/// PixelIntensityRelationshipLUTSequence (0028,9422) SQ 1 DICOM
#[rustfmt::skip]
pub const PIXEL_INTENSITY_RELATIONSHIP_LUT_SEQUENCE: Tag = Tag(0x0028, 0x9422); // (0028,9422)
/// FramePixelDataPropertiesSequence (0028,9443) SQ 1 DICOM
#[rustfmt::skip]
pub const FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE: Tag = Tag(0x0028, 0x9443); // (0028,9443)
/// GeometricalProperties (0028,9444) CS 1 DICOM
#[rustfmt::skip]
pub const GEOMETRICAL_PROPERTIES: Tag = Tag(0x0028, 0x9444); // (0028,9444)
/// GeometricMaximumDistortion (0028,9445) FL 1 DICOM
#[rustfmt::skip]
pub const GEOMETRIC_MAXIMUM_DISTORTION: Tag = Tag(0x0028, 0x9445); // (0028,9445)
/// ImageProcessingApplied (0028,9446) CS 1-n DICOM
#[rustfmt::skip]
pub const IMAGE_PROCESSING_APPLIED: Tag = Tag(0x0028, 0x9446); // (0028,9446)
/// MaskSelectionMode (0028,9454) CS 1 DICOM
#[rustfmt::skip]
pub const MASK_SELECTION_MODE: Tag = Tag(0x0028, 0x9454); // (0028,9454)
/// LUTFunction (0028,9474) CS 1 DICOM
#[rustfmt::skip]
pub const LUT_FUNCTION: Tag = Tag(0x0028, 0x9474); // (0028,9474)
/// MaskVisibilityPercentage (0028,9478) FL 1 DICOM
#[rustfmt::skip]
pub const MASK_VISIBILITY_PERCENTAGE: Tag = Tag(0x0028, 0x9478); // (0028,9478)
/// PixelShiftSequence (0028,9501) SQ 1 DICOM
#[rustfmt::skip]
pub const PIXEL_SHIFT_SEQUENCE: Tag = Tag(0x0028, 0x9501); // (0028,9501)
/// RegionPixelShiftSequence (0028,9502) SQ 1 DICOM
#[rustfmt::skip]
pub const REGION_PIXEL_SHIFT_SEQUENCE: Tag = Tag(0x0028, 0x9502); // (0028,9502)
/// VerticesOfTheRegion (0028,9503) SS 2-2n DICOM
#[rustfmt::skip]
pub const VERTICES_OF_THE_REGION: Tag = Tag(0x0028, 0x9503); // (0028,9503)
/// MultiFramePresentationSequence (0028,9505) SQ 1 DICOM
#[rustfmt::skip]
pub const MULTI_FRAME_PRESENTATION_SEQUENCE: Tag = Tag(0x0028, 0x9505); // (0028,9505)
/// PixelShiftFrameRange (0028,9506) US 2-2n DICOM
#[rustfmt::skip]
pub const PIXEL_SHIFT_FRAME_RANGE: Tag = Tag(0x0028, 0x9506); // (0028,9506)
/// LUTFrameRange (0028,9507) US 2-2n DICOM
#[rustfmt::skip]
pub const LUT_FRAME_RANGE: Tag = Tag(0x0028, 0x9507); // (0028,9507)
/// ImageToEquipmentMappingMatrix (0028,9520) DS 16 DICOM
#[rustfmt::skip]
pub const IMAGE_TO_EQUIPMENT_MAPPING_MATRIX: Tag = Tag(0x0028, 0x9520); // (0028,9520)
/// EquipmentCoordinateSystemIdentification (0028,9537) CS 1 DICOM
#[rustfmt::skip]
pub const EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION: Tag = Tag(0x0028, 0x9537); // (0028,9537)
/// RequestingPhysicianIdentificationSequence (0032,1031) SQ 1 DICOM
#[rustfmt::skip]
pub const REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0032, 0x1031); // (0032,1031)
/// RequestingPhysician (0032,1032) PN 1 DICOM
#[rustfmt::skip]
pub const REQUESTING_PHYSICIAN: Tag = Tag(0x0032, 0x1032); // (0032,1032)
/// RequestingService (0032,1033) LO 1 DICOM
#[rustfmt::skip]
pub const REQUESTING_SERVICE: Tag = Tag(0x0032, 0x1033); // (0032,1033)
/// RequestingServiceCodeSequence (0032,1034) SQ 1 DICOM
#[rustfmt::skip]
pub const REQUESTING_SERVICE_CODE_SEQUENCE: Tag = Tag(0x0032, 0x1034); // (0032,1034)
/// RequestedProcedureDescription (0032,1060) LO 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_DESCRIPTION: Tag = Tag(0x0032, 0x1060); // (0032,1060)
/// RequestedProcedureCodeSequence (0032,1064) SQ 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0032, 0x1064); // (0032,1064)
/// RequestedContrastAgent (0032,1070) LO 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_CONTRAST_AGENT: Tag = Tag(0x0032, 0x1070); // (0032,1070)
/// ReferencedPatientAliasSequence (0038,0004) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PATIENT_ALIAS_SEQUENCE: Tag = Tag(0x0038, 0x0004); // (0038,0004)
/// VisitStatusID (0038,0008) CS 1 DICOM
#[rustfmt::skip]
pub const VISIT_STATUS_ID: Tag = Tag(0x0038, 0x0008); // (0038,0008)
/// AdmissionID (0038,0010) LO 1 DICOM
#[rustfmt::skip]
pub const ADMISSION_ID: Tag = Tag(0x0038, 0x0010); // (0038,0010)
/// IssuerOfAdmissionIDSequence (0038,0014) SQ 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_ADMISSION_ID_SEQUENCE: Tag = Tag(0x0038, 0x0014); // (0038,0014)
/// RouteOfAdmissions (0038,0016) LO 1 DICOM
#[rustfmt::skip]
pub const ROUTE_OF_ADMISSIONS: Tag = Tag(0x0038, 0x0016); // (0038,0016)
/// AdmittingDate (0038,0020) DA 1 DICOM
#[rustfmt::skip]
pub const ADMITTING_DATE: Tag = Tag(0x0038, 0x0020); // (0038,0020)
/// AdmittingTime (0038,0021) TM 1 DICOM
#[rustfmt::skip]
pub const ADMITTING_TIME: Tag = Tag(0x0038, 0x0021); // (0038,0021)
/// SpecialNeeds (0038,0050) LO 1 DICOM
#[rustfmt::skip]
pub const SPECIAL_NEEDS: Tag = Tag(0x0038, 0x0050); // (0038,0050)
/// ServiceEpisodeID (0038,0060) LO 1 DICOM
#[rustfmt::skip]
pub const SERVICE_EPISODE_ID: Tag = Tag(0x0038, 0x0060); // (0038,0060)
/// ServiceEpisodeDescription (0038,0062) LO 1 DICOM
#[rustfmt::skip]
pub const SERVICE_EPISODE_DESCRIPTION: Tag = Tag(0x0038, 0x0062); // (0038,0062)
/// IssuerOfServiceEpisodeIDSequence (0038,0064) SQ 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_SERVICE_EPISODE_ID_SEQUENCE: Tag = Tag(0x0038, 0x0064); // (0038,0064)
/// PertinentDocumentsSequence (0038,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const PERTINENT_DOCUMENTS_SEQUENCE: Tag = Tag(0x0038, 0x0100); // (0038,0100)
/// PertinentResourcesSequence (0038,0101) SQ 1 DICOM
#[rustfmt::skip]
pub const PERTINENT_RESOURCES_SEQUENCE: Tag = Tag(0x0038, 0x0101); // (0038,0101)
/// ResourceDescription (0038,0102) LO 1 DICOM
#[rustfmt::skip]
pub const RESOURCE_DESCRIPTION: Tag = Tag(0x0038, 0x0102); // (0038,0102)
/// CurrentPatientLocation (0038,0300) LO 1 DICOM
#[rustfmt::skip]
pub const CURRENT_PATIENT_LOCATION: Tag = Tag(0x0038, 0x0300); // (0038,0300)
/// PatientInstitutionResidence (0038,0400) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_INSTITUTION_RESIDENCE: Tag = Tag(0x0038, 0x0400); // (0038,0400)
/// PatientState (0038,0500) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_STATE: Tag = Tag(0x0038, 0x0500); // (0038,0500)
/// PatientClinicalTrialParticipationSequence (0038,0502) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE: Tag = Tag(0x0038, 0x0502); // (0038,0502)
/// VisitComments (0038,4000) LT 1 DICOM
#[rustfmt::skip]
pub const VISIT_COMMENTS: Tag = Tag(0x0038, 0x4000); // (0038,4000)
/// WaveformOriginality (003A,0004) CS 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_ORIGINALITY: Tag = Tag(0x003A, 0x0004); // (003A,0004)
/// NumberOfWaveformChannels (003A,0005) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_WAVEFORM_CHANNELS: Tag = Tag(0x003A, 0x0005); // (003A,0005)
/// NumberOfWaveformSamples (003A,0010) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_WAVEFORM_SAMPLES: Tag = Tag(0x003A, 0x0010); // (003A,0010)
/// SamplingFrequency (003A,001A) DS 1 DICOM
#[rustfmt::skip]
pub const SAMPLING_FREQUENCY: Tag = Tag(0x003A, 0x001A); // (003A,001A)
/// MultiplexGroupLabel (003A,0020) SH 1 DICOM
#[rustfmt::skip]
pub const MULTIPLEX_GROUP_LABEL: Tag = Tag(0x003A, 0x0020); // (003A,0020)
/// ChannelDefinitionSequence (003A,0200) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DEFINITION_SEQUENCE: Tag = Tag(0x003A, 0x0200); // (003A,0200)
/// WaveformChannelNumber (003A,0202) IS 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_CHANNEL_NUMBER: Tag = Tag(0x003A, 0x0202); // (003A,0202)
/// ChannelLabel (003A,0203) SH 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_LABEL: Tag = Tag(0x003A, 0x0203); // (003A,0203)
/// ChannelStatus (003A,0205) CS 1-n DICOM
#[rustfmt::skip]
pub const CHANNEL_STATUS: Tag = Tag(0x003A, 0x0205); // (003A,0205)
/// ChannelSourceSequence (003A,0208) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SOURCE_SEQUENCE: Tag = Tag(0x003A, 0x0208); // (003A,0208)
/// ChannelSourceModifiersSequence (003A,0209) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SOURCE_MODIFIERS_SEQUENCE: Tag = Tag(0x003A, 0x0209); // (003A,0209)
/// SourceWaveformSequence (003A,020A) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_WAVEFORM_SEQUENCE: Tag = Tag(0x003A, 0x020A); // (003A,020A)
/// ChannelDerivationDescription (003A,020C) LO 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DERIVATION_DESCRIPTION: Tag = Tag(0x003A, 0x020C); // (003A,020C)
/// ChannelSensitivity (003A,0210) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SENSITIVITY: Tag = Tag(0x003A, 0x0210); // (003A,0210)
/// ChannelSensitivityUnitsSequence (003A,0211) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SENSITIVITY_UNITS_SEQUENCE: Tag = Tag(0x003A, 0x0211); // (003A,0211)
/// ChannelSensitivityCorrectionFactor (003A,0212) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SENSITIVITY_CORRECTION_FACTOR: Tag = Tag(0x003A, 0x0212); // (003A,0212)
/// ChannelBaseline (003A,0213) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_BASELINE: Tag = Tag(0x003A, 0x0213); // (003A,0213)
/// ChannelTimeSkew (003A,0214) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_TIME_SKEW: Tag = Tag(0x003A, 0x0214); // (003A,0214)
/// ChannelSampleSkew (003A,0215) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SAMPLE_SKEW: Tag = Tag(0x003A, 0x0215); // (003A,0215)
/// ChannelOffset (003A,0218) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_OFFSET: Tag = Tag(0x003A, 0x0218); // (003A,0218)
/// WaveformBitsStored (003A,021A) US 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_BITS_STORED: Tag = Tag(0x003A, 0x021A); // (003A,021A)
/// FilterLowFrequency (003A,0220) DS 1 DICOM
#[rustfmt::skip]
pub const FILTER_LOW_FREQUENCY: Tag = Tag(0x003A, 0x0220); // (003A,0220)
/// FilterHighFrequency (003A,0221) DS 1 DICOM
#[rustfmt::skip]
pub const FILTER_HIGH_FREQUENCY: Tag = Tag(0x003A, 0x0221); // (003A,0221)
/// NotchFilterFrequency (003A,0222) DS 1 DICOM
#[rustfmt::skip]
pub const NOTCH_FILTER_FREQUENCY: Tag = Tag(0x003A, 0x0222); // (003A,0222)
/// NotchFilterBandwidth (003A,0223) DS 1 DICOM
#[rustfmt::skip]
pub const NOTCH_FILTER_BANDWIDTH: Tag = Tag(0x003A, 0x0223); // (003A,0223)
/// WaveformDataDisplayScale (003A,0230) FL 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_DATA_DISPLAY_SCALE: Tag = Tag(0x003A, 0x0230); // (003A,0230)
/// WaveformDisplayBackgroundCIELabValue (003A,0231) US 3 DICOM
#[rustfmt::skip]
pub const WAVEFORM_DISPLAY_BACKGROUND_CIE_LAB_VALUE: Tag = Tag(0x003A, 0x0231); // (003A,0231)
/// WaveformPresentationGroupSequence (003A,0240) SQ 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_PRESENTATION_GROUP_SEQUENCE: Tag = Tag(0x003A, 0x0240); // (003A,0240)
/// PresentationGroupNumber (003A,0241) US 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_GROUP_NUMBER: Tag = Tag(0x003A, 0x0241); // (003A,0241)
/// ChannelDisplaySequence (003A,0242) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DISPLAY_SEQUENCE: Tag = Tag(0x003A, 0x0242); // (003A,0242)
/// ChannelRecommendedDisplayCIELabValue (003A,0244) US 3 DICOM
#[rustfmt::skip]
pub const CHANNEL_RECOMMENDED_DISPLAY_CIE_LAB_VALUE: Tag = Tag(0x003A, 0x0244); // (003A,0244)
/// ChannelPosition (003A,0245) FL 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_POSITION: Tag = Tag(0x003A, 0x0245); // (003A,0245)
/// DisplayShadingFlag (003A,0246) CS 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SHADING_FLAG: Tag = Tag(0x003A, 0x0246); // (003A,0246)
/// FractionalChannelDisplayScale (003A,0247) FL 1 DICOM
#[rustfmt::skip]
pub const FRACTIONAL_CHANNEL_DISPLAY_SCALE: Tag = Tag(0x003A, 0x0247); // (003A,0247)
/// AbsoluteChannelDisplayScale (003A,0248) FL 1 DICOM
#[rustfmt::skip]
pub const ABSOLUTE_CHANNEL_DISPLAY_SCALE: Tag = Tag(0x003A, 0x0248); // (003A,0248)
/// MultiplexedAudioChannelsDescriptionCodeSequence (003A,0300) SQ 1 DICOM
#[rustfmt::skip]
pub const MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE: Tag = Tag(0x003A, 0x0300); // (003A,0300)
/// ChannelIdentificationCode (003A,0301) IS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_IDENTIFICATION_CODE: Tag = Tag(0x003A, 0x0301); // (003A,0301)
/// ChannelMode (003A,0302) CS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_MODE: Tag = Tag(0x003A, 0x0302); // (003A,0302)
/// ScheduledStationAETitle (0040,0001) AE 1-n DICOM
#[rustfmt::skip]
pub const SCHEDULED_STATION_AE_TITLE: Tag = Tag(0x0040, 0x0001); // (0040,0001)
/// ScheduledProcedureStepStartDate (0040,0002) DA 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_START_DATE: Tag = Tag(0x0040, 0x0002); // (0040,0002)
/// ScheduledProcedureStepStartTime (0040,0003) TM 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_START_TIME: Tag = Tag(0x0040, 0x0003); // (0040,0003)
/// ScheduledProcedureStepEndDate (0040,0004) DA 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_END_DATE: Tag = Tag(0x0040, 0x0004); // (0040,0004)
/// ScheduledProcedureStepEndTime (0040,0005) TM 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_END_TIME: Tag = Tag(0x0040, 0x0005); // (0040,0005)
/// ScheduledPerformingPhysicianName (0040,0006) PN 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PERFORMING_PHYSICIAN_NAME: Tag = Tag(0x0040, 0x0006); // (0040,0006)
/// ScheduledProcedureStepDescription (0040,0007) LO 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_DESCRIPTION: Tag = Tag(0x0040, 0x0007); // (0040,0007)
/// ScheduledProtocolCodeSequence (0040,0008) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROTOCOL_CODE_SEQUENCE: Tag = Tag(0x0040, 0x0008); // (0040,0008)
/// ScheduledProcedureStepID (0040,0009) SH 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_ID: Tag = Tag(0x0040, 0x0009); // (0040,0009)
/// StageCodeSequence (0040,000A) SQ 1 DICOM
#[rustfmt::skip]
pub const STAGE_CODE_SEQUENCE: Tag = Tag(0x0040, 0x000A); // (0040,000A)
/// ScheduledPerformingPhysicianIdentificationSequence (0040,000B) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0040, 0x000B); // (0040,000B)
/// ScheduledStationName (0040,0010) SH 1-n DICOM
#[rustfmt::skip]
pub const SCHEDULED_STATION_NAME: Tag = Tag(0x0040, 0x0010); // (0040,0010)
/// ScheduledProcedureStepLocation (0040,0011) SH 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_LOCATION: Tag = Tag(0x0040, 0x0011); // (0040,0011)
/// PreMedication (0040,0012) LO 1 DICOM
#[rustfmt::skip]
pub const PRE_MEDICATION: Tag = Tag(0x0040, 0x0012); // (0040,0012)
/// ScheduledProcedureStepStatus (0040,0020) CS 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_STATUS: Tag = Tag(0x0040, 0x0020); // (0040,0020)
/// OrderPlacerIdentifierSequence (0040,0026) SQ 1 DICOM
#[rustfmt::skip]
pub const ORDER_PLACER_IDENTIFIER_SEQUENCE: Tag = Tag(0x0040, 0x0026); // (0040,0026)
/// OrderFillerIdentifierSequence (0040,0027) SQ 1 DICOM
#[rustfmt::skip]
pub const ORDER_FILLER_IDENTIFIER_SEQUENCE: Tag = Tag(0x0040, 0x0027); // (0040,0027)
/// LocalNamespaceEntityID (0040,0031) UT 1 DICOM
#[rustfmt::skip]
pub const LOCAL_NAMESPACE_ENTITY_ID: Tag = Tag(0x0040, 0x0031); // (0040,0031)
/// UniversalEntityID (0040,0032) UT 1 DICOM
#[rustfmt::skip]
pub const UNIVERSAL_ENTITY_ID: Tag = Tag(0x0040, 0x0032); // (0040,0032)
/// UniversalEntityIDType (0040,0033) CS 1 DICOM
#[rustfmt::skip]
pub const UNIVERSAL_ENTITY_ID_TYPE: Tag = Tag(0x0040, 0x0033); // (0040,0033)
/// IdentifierTypeCode (0040,0035) CS 1 DICOM
#[rustfmt::skip]
pub const IDENTIFIER_TYPE_CODE: Tag = Tag(0x0040, 0x0035); // (0040,0035)
/// AssigningFacilitySequence (0040,0036) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSIGNING_FACILITY_SEQUENCE: Tag = Tag(0x0040, 0x0036); // (0040,0036)
/// AssigningJurisdictionCodeSequence (0040,0039) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSIGNING_JURISDICTION_CODE_SEQUENCE: Tag = Tag(0x0040, 0x0039); // (0040,0039)
/// AssigningAgencyOrDepartmentCodeSequence (0040,003A) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE: Tag = Tag(0x0040, 0x003A); // (0040,003A)
/// ScheduledProcedureStepSequence (0040,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0040, 0x0100); // (0040,0100)
/// ReferencedNonImageCompositeSOPInstanceSequence (0040,0220) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_NON_IMAGE_COMPOSITE_SOP_INSTANCE_SEQUENCE: Tag = Tag(0x0040, 0x0220); // (0040,0220)
/// PerformedStationAETitle (0040,0241) AE 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_STATION_AE_TITLE: Tag = Tag(0x0040, 0x0241); // (0040,0241)
/// PerformedStationName (0040,0242) SH 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_STATION_NAME: Tag = Tag(0x0040, 0x0242); // (0040,0242)
/// PerformedLocation (0040,0243) SH 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_LOCATION: Tag = Tag(0x0040, 0x0243); // (0040,0243)
/// PerformedProcedureStepStartDate (0040,0244) DA 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_START_DATE: Tag = Tag(0x0040, 0x0244); // (0040,0244)
/// PerformedProcedureStepStartTime (0040,0245) TM 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_START_TIME: Tag = Tag(0x0040, 0x0245); // (0040,0245)
/// PerformedProcedureStepEndDate (0040,0250) DA 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_END_DATE: Tag = Tag(0x0040, 0x0250); // (0040,0250)
/// PerformedProcedureStepEndTime (0040,0251) TM 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_END_TIME: Tag = Tag(0x0040, 0x0251); // (0040,0251)
/// PerformedProcedureStepStatus (0040,0252) CS 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_STATUS: Tag = Tag(0x0040, 0x0252); // (0040,0252)
/// PerformedProcedureStepID (0040,0253) SH 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_ID: Tag = Tag(0x0040, 0x0253); // (0040,0253)
/// PerformedProcedureStepDescription (0040,0254) LO 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_DESCRIPTION: Tag = Tag(0x0040, 0x0254); // (0040,0254)
/// PerformedProcedureTypeDescription (0040,0255) LO 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_TYPE_DESCRIPTION: Tag = Tag(0x0040, 0x0255); // (0040,0255)
/// PerformedProtocolCodeSequence (0040,0260) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROTOCOL_CODE_SEQUENCE: Tag = Tag(0x0040, 0x0260); // (0040,0260)
/// PerformedProtocolType (0040,0261) CS 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROTOCOL_TYPE: Tag = Tag(0x0040, 0x0261); // (0040,0261)
/// ScheduledStepAttributesSequence (0040,0270) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_STEP_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0040, 0x0270); // (0040,0270)
/// RequestAttributesSequence (0040,0275) SQ 1 DICOM
#[rustfmt::skip]
pub const REQUEST_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0040, 0x0275); // (0040,0275)
/// CommentsOnThePerformedProcedureStep (0040,0280) ST 1 DICOM
#[rustfmt::skip]
pub const COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP: Tag = Tag(0x0040, 0x0280); // (0040,0280)
/// PerformedProcedureStepDiscontinuationReasonCodeSequence (0040,0281) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE: Tag = Tag(0x0040, 0x0281); // (0040,0281)
/// QuantitySequence (0040,0293) SQ 1 DICOM
#[rustfmt::skip]
pub const QUANTITY_SEQUENCE: Tag = Tag(0x0040, 0x0293); // (0040,0293)
/// Quantity (0040,0294) DS 1 DICOM
#[rustfmt::skip]
pub const QUANTITY: Tag = Tag(0x0040, 0x0294); // (0040,0294)
/// MeasuringUnitsSequence (0040,0295) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASURING_UNITS_SEQUENCE: Tag = Tag(0x0040, 0x0295); // (0040,0295)
/// BillingItemSequence (0040,0296) SQ 1 DICOM
#[rustfmt::skip]
pub const BILLING_ITEM_SEQUENCE: Tag = Tag(0x0040, 0x0296); // (0040,0296)
/// EntranceDose (0040,0302) US 1 DICOM
#[rustfmt::skip]
pub const ENTRANCE_DOSE: Tag = Tag(0x0040, 0x0302); // (0040,0302)
/// ExposedArea (0040,0303) US 1-2 DICOM
#[rustfmt::skip]
pub const EXPOSED_AREA: Tag = Tag(0x0040, 0x0303); // (0040,0303)
/// DistanceSourceToEntrance (0040,0306) DS 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_SOURCE_TO_ENTRANCE: Tag = Tag(0x0040, 0x0306); // (0040,0306)
/// CommentsOnRadiationDose (0040,0310) ST 1 DICOM
#[rustfmt::skip]
pub const COMMENTS_ON_RADIATION_DOSE: Tag = Tag(0x0040, 0x0310); // (0040,0310)
/// XRayOutput (0040,0312) DS 1 DICOM
#[rustfmt::skip]
pub const X_RAY_OUTPUT: Tag = Tag(0x0040, 0x0312); // (0040,0312)
/// HalfValueLayer (0040,0314) DS 1 DICOM
#[rustfmt::skip]
pub const HALF_VALUE_LAYER: Tag = Tag(0x0040, 0x0314); // (0040,0314)
/// OrganDose (0040,0316) DS 1 DICOM
#[rustfmt::skip]
pub const ORGAN_DOSE: Tag = Tag(0x0040, 0x0316); // (0040,0316)
/// OrganExposed (0040,0318) CS 1 DICOM
#[rustfmt::skip]
pub const ORGAN_EXPOSED: Tag = Tag(0x0040, 0x0318); // (0040,0318)
/// BillingProcedureStepSequence (0040,0320) SQ 1 DICOM
#[rustfmt::skip]
pub const BILLING_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0040, 0x0320); // (0040,0320)
/// FilmConsumptionSequence (0040,0321) SQ 1 DICOM
#[rustfmt::skip]
pub const FILM_CONSUMPTION_SEQUENCE: Tag = Tag(0x0040, 0x0321); // (0040,0321)
/// BillingSuppliesAndDevicesSequence (0040,0324) SQ 1 DICOM
#[rustfmt::skip]
pub const BILLING_SUPPLIES_AND_DEVICES_SEQUENCE: Tag = Tag(0x0040, 0x0324); // (0040,0324)
/// PerformedSeriesSequence (0040,0340) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_SERIES_SEQUENCE: Tag = Tag(0x0040, 0x0340); // (0040,0340)
/// CommentsOnTheScheduledProcedureStep (0040,0400) LT 1 DICOM
#[rustfmt::skip]
pub const COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP: Tag = Tag(0x0040, 0x0400); // (0040,0400)
/// ProtocolContextSequence (0040,0440) SQ 1 DICOM
#[rustfmt::skip]
pub const PROTOCOL_CONTEXT_SEQUENCE: Tag = Tag(0x0040, 0x0440); // (0040,0440)
/// ContentItemModifierSequence (0040,0441) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTENT_ITEM_MODIFIER_SEQUENCE: Tag = Tag(0x0040, 0x0441); // (0040,0441)
/// ScheduledSpecimenSequence (0040,0500) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_SPECIMEN_SEQUENCE: Tag = Tag(0x0040, 0x0500); // (0040,0500)
/// ContainerIdentifier (0040,0512) LO 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_IDENTIFIER: Tag = Tag(0x0040, 0x0512); // (0040,0512)
/// IssuerOfTheContainerIdentifierSequence (0040,0513) SQ 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE: Tag = Tag(0x0040, 0x0513); // (0040,0513)
/// AlternateContainerIdentifierSequence (0040,0515) SQ 1 DICOM
#[rustfmt::skip]
pub const ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE: Tag = Tag(0x0040, 0x0515); // (0040,0515)
/// ContainerTypeCodeSequence (0040,0518) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_TYPE_CODE_SEQUENCE: Tag = Tag(0x0040, 0x0518); // (0040,0518)
/// ContainerDescription (0040,051A) LO 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_DESCRIPTION: Tag = Tag(0x0040, 0x051A); // (0040,051A)
/// ContainerComponentSequence (0040,0520) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_SEQUENCE: Tag = Tag(0x0040, 0x0520); // (0040,0520)
/// SpecimenIdentifier (0040,0551) LO 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_IDENTIFIER: Tag = Tag(0x0040, 0x0551); // (0040,0551)
/// SpecimenUID (0040,0554) UI 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_UID: Tag = Tag(0x0040, 0x0554); // (0040,0554)
/// AcquisitionContextSequence (0040,0555) SQ 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_CONTEXT_SEQUENCE: Tag = Tag(0x0040, 0x0555); // (0040,0555)
/// AcquisitionContextDescription (0040,0556) ST 1 DICOM
#[rustfmt::skip]
pub const ACQUISITION_CONTEXT_DESCRIPTION: Tag = Tag(0x0040, 0x0556); // (0040,0556)
/// SpecimenDescriptionSequence (0040,0560) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_DESCRIPTION_SEQUENCE: Tag = Tag(0x0040, 0x0560); // (0040,0560)
/// IssuerOfTheSpecimenIdentifierSequence (0040,0562) SQ 1 DICOM
#[rustfmt::skip]
pub const ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE: Tag = Tag(0x0040, 0x0562); // (0040,0562)
/// SpecimenTypeCodeSequence (0040,059A) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_TYPE_CODE_SEQUENCE: Tag = Tag(0x0040, 0x059A); // (0040,059A)
/// SpecimenShortDescription (0040,0600) LO 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_SHORT_DESCRIPTION: Tag = Tag(0x0040, 0x0600); // (0040,0600)
/// SpecimenDetailedDescription (0040,0602) UT 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_DETAILED_DESCRIPTION: Tag = Tag(0x0040, 0x0602); // (0040,0602)
/// SpecimenPreparationSequence (0040,0610) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_PREPARATION_SEQUENCE: Tag = Tag(0x0040, 0x0610); // (0040,0610)
/// SpecimenPreparationStepContentItemSequence (0040,0612) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE: Tag = Tag(0x0040, 0x0612); // (0040,0612)
/// SpecimenLocalizationContentItemSequence (0040,0620) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE: Tag = Tag(0x0040, 0x0620); // (0040,0620)
/// ImageCenterPointCoordinatesSequence (0040,071A) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_CENTER_POINT_COORDINATES_SEQUENCE: Tag = Tag(0x0040, 0x071A); // (0040,071A)
/// XOffsetInSlideCoordinateSystem (0040,072A) DS 1 DICOM
#[rustfmt::skip]
pub const X_OFFSET_IN_SLIDE_COORDINATE_SYSTEM: Tag = Tag(0x0040, 0x072A); // (0040,072A)
/// YOffsetInSlideCoordinateSystem (0040,073A) DS 1 DICOM
#[rustfmt::skip]
pub const Y_OFFSET_IN_SLIDE_COORDINATE_SYSTEM: Tag = Tag(0x0040, 0x073A); // (0040,073A)
/// ZOffsetInSlideCoordinateSystem (0040,074A) DS 1 DICOM
#[rustfmt::skip]
pub const Z_OFFSET_IN_SLIDE_COORDINATE_SYSTEM: Tag = Tag(0x0040, 0x074A); // (0040,074A)
/// MeasurementUnitsCodeSequence (0040,08EA) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENT_UNITS_CODE_SEQUENCE: Tag = Tag(0x0040, 0x08EA); // (0040,08EA)
/// RequestedProcedureID (0040,1001) SH 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_ID: Tag = Tag(0x0040, 0x1001); // (0040,1001)
/// ReasonForTheRequestedProcedure (0040,1002) LO 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_THE_REQUESTED_PROCEDURE: Tag = Tag(0x0040, 0x1002); // (0040,1002)
/// RequestedProcedurePriority (0040,1003) SH 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_PRIORITY: Tag = Tag(0x0040, 0x1003); // (0040,1003)
/// PatientTransportArrangements (0040,1004) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_TRANSPORT_ARRANGEMENTS: Tag = Tag(0x0040, 0x1004); // (0040,1004)
/// RequestedProcedureLocation (0040,1005) LO 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_LOCATION: Tag = Tag(0x0040, 0x1005); // (0040,1005)
/// ConfidentialityCode (0040,1008) LO 1 DICOM
#[rustfmt::skip]
pub const CONFIDENTIALITY_CODE: Tag = Tag(0x0040, 0x1008); // (0040,1008)
/// ReportingPriority (0040,1009) SH 1 DICOM
#[rustfmt::skip]
pub const REPORTING_PRIORITY: Tag = Tag(0x0040, 0x1009); // (0040,1009)
/// ReasonForRequestedProcedureCodeSequence (0040,100A) SQ 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0040, 0x100A); // (0040,100A)
/// NamesOfIntendedRecipientsOfResults (0040,1010) PN 1-n DICOM
#[rustfmt::skip]
pub const NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS: Tag = Tag(0x0040, 0x1010); // (0040,1010)
/// IntendedRecipientsOfResultsIdentificationSequence (0040,1011) SQ 1 DICOM
#[rustfmt::skip]
pub const INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0040, 0x1011); // (0040,1011)
/// ReasonForPerformedProcedureCodeSequence (0040,1012) SQ 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0040, 0x1012); // (0040,1012)
/// PersonIdentificationCodeSequence (0040,1101) SQ 1 DICOM
#[rustfmt::skip]
pub const PERSON_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x0040, 0x1101); // (0040,1101)
/// PersonAddress (0040,1102) ST 1 DICOM
#[rustfmt::skip]
pub const PERSON_ADDRESS: Tag = Tag(0x0040, 0x1102); // (0040,1102)
/// PersonTelephoneNumbers (0040,1103) LO 1-n DICOM
#[rustfmt::skip]
pub const PERSON_TELEPHONE_NUMBERS: Tag = Tag(0x0040, 0x1103); // (0040,1103)
/// PersonTelecomInformation (0040,1104) LT 1 DICOM
#[rustfmt::skip]
pub const PERSON_TELECOM_INFORMATION: Tag = Tag(0x0040, 0x1104); // (0040,1104)
/// RequestedProcedureComments (0040,1400) LT 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_COMMENTS: Tag = Tag(0x0040, 0x1400); // (0040,1400)
/// IssueDateOfImagingServiceRequest (0040,2004) DA 1 DICOM
#[rustfmt::skip]
pub const ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST: Tag = Tag(0x0040, 0x2004); // (0040,2004)
/// IssueTimeOfImagingServiceRequest (0040,2005) TM 1 DICOM
#[rustfmt::skip]
pub const ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST: Tag = Tag(0x0040, 0x2005); // (0040,2005)
/// OrderEnteredBy (0040,2008) PN 1 DICOM
#[rustfmt::skip]
pub const ORDER_ENTERED_BY: Tag = Tag(0x0040, 0x2008); // (0040,2008)
/// OrderEntererLocation (0040,2009) SH 1 DICOM
#[rustfmt::skip]
pub const ORDER_ENTERER_LOCATION: Tag = Tag(0x0040, 0x2009); // (0040,2009)
/// OrderCallbackPhoneNumber (0040,2010) SH 1 DICOM
#[rustfmt::skip]
pub const ORDER_CALLBACK_PHONE_NUMBER: Tag = Tag(0x0040, 0x2010); // (0040,2010)
/// OrderCallbackTelecomInformation (0040,2011) LT 1 DICOM
#[rustfmt::skip]
pub const ORDER_CALLBACK_TELECOM_INFORMATION: Tag = Tag(0x0040, 0x2011); // (0040,2011)
/// PlacerOrderNumberImagingServiceRequest (0040,2016) LO 1 DICOM
#[rustfmt::skip]
pub const PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST: Tag = Tag(0x0040, 0x2016); // (0040,2016)
/// FillerOrderNumberImagingServiceRequest (0040,2017) LO 1 DICOM
#[rustfmt::skip]
pub const FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST: Tag = Tag(0x0040, 0x2017); // (0040,2017)
/// ImagingServiceRequestComments (0040,2400) LT 1 DICOM
#[rustfmt::skip]
pub const IMAGING_SERVICE_REQUEST_COMMENTS: Tag = Tag(0x0040, 0x2400); // (0040,2400)
/// ConfidentialityConstraintOnPatientDataDescription (0040,3001) LO 1 DICOM
#[rustfmt::skip]
pub const CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION: Tag = Tag(0x0040, 0x3001); // (0040,3001)
/// ScheduledProcedureStepStartDateTime (0040,4005) DT 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_START_DATE_TIME: Tag = Tag(0x0040, 0x4005); // (0040,4005)
/// PerformedProcessingApplicationsCodeSequence (0040,4007) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4007); // (0040,4007)
/// HumanPerformerCodeSequence (0040,4009) SQ 1 DICOM
#[rustfmt::skip]
pub const HUMAN_PERFORMER_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4009); // (0040,4009)
/// ScheduledProcedureStepModificationDateTime (0040,4010) DT 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME: Tag = Tag(0x0040, 0x4010); // (0040,4010)
/// ExpectedCompletionDateTime (0040,4011) DT 1 DICOM
#[rustfmt::skip]
pub const EXPECTED_COMPLETION_DATE_TIME: Tag = Tag(0x0040, 0x4011); // (0040,4011)
/// ScheduledWorkitemCodeSequence (0040,4018) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_WORKITEM_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4018); // (0040,4018)
/// PerformedWorkitemCodeSequence (0040,4019) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_WORKITEM_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4019); // (0040,4019)
/// InputInformationSequence (0040,4021) SQ 1 DICOM
#[rustfmt::skip]
pub const INPUT_INFORMATION_SEQUENCE: Tag = Tag(0x0040, 0x4021); // (0040,4021)
/// ScheduledStationNameCodeSequence (0040,4025) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_STATION_NAME_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4025); // (0040,4025)
/// ScheduledStationClassCodeSequence (0040,4026) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_STATION_CLASS_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4026); // (0040,4026)
/// ScheduledStationGeographicLocationCodeSequence (0040,4027) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4027); // (0040,4027)
/// PerformedStationNameCodeSequence (0040,4028) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_STATION_NAME_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4028); // (0040,4028)
/// PerformedStationClassCodeSequence (0040,4029) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_STATION_CLASS_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4029); // (0040,4029)
/// PerformedStationGeographicLocationCodeSequence (0040,4030) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4030); // (0040,4030)
/// OutputInformationSequence (0040,4033) SQ 1 DICOM
#[rustfmt::skip]
pub const OUTPUT_INFORMATION_SEQUENCE: Tag = Tag(0x0040, 0x4033); // (0040,4033)
/// ScheduledHumanPerformersSequence (0040,4034) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_HUMAN_PERFORMERS_SEQUENCE: Tag = Tag(0x0040, 0x4034); // (0040,4034)
/// ActualHumanPerformersSequence (0040,4035) SQ 1 DICOM
#[rustfmt::skip]
pub const ACTUAL_HUMAN_PERFORMERS_SEQUENCE: Tag = Tag(0x0040, 0x4035); // (0040,4035)
/// HumanPerformerOrganization (0040,4036) LO 1 DICOM
#[rustfmt::skip]
pub const HUMAN_PERFORMER_ORGANIZATION: Tag = Tag(0x0040, 0x4036); // (0040,4036)
/// HumanPerformerName (0040,4037) PN 1 DICOM
#[rustfmt::skip]
pub const HUMAN_PERFORMER_NAME: Tag = Tag(0x0040, 0x4037); // (0040,4037)
/// RawDataHandling (0040,4040) CS 1 DICOM
#[rustfmt::skip]
pub const RAW_DATA_HANDLING: Tag = Tag(0x0040, 0x4040); // (0040,4040)
/// InputReadinessState (0040,4041) CS 1 DICOM
#[rustfmt::skip]
pub const INPUT_READINESS_STATE: Tag = Tag(0x0040, 0x4041); // (0040,4041)
/// PerformedProcedureStepStartDateTime (0040,4050) DT 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_START_DATE_TIME: Tag = Tag(0x0040, 0x4050); // (0040,4050)
/// PerformedProcedureStepEndDateTime (0040,4051) DT 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_STEP_END_DATE_TIME: Tag = Tag(0x0040, 0x4051); // (0040,4051)
/// ProcedureStepCancellationDateTime (0040,4052) DT 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_CANCELLATION_DATE_TIME: Tag = Tag(0x0040, 0x4052); // (0040,4052)
/// OutputDestinationSequence (0040,4070) SQ 1 DICOM
#[rustfmt::skip]
pub const OUTPUT_DESTINATION_SEQUENCE: Tag = Tag(0x0040, 0x4070); // (0040,4070)
/// DICOMStorageSequence (0040,4071) SQ 1 DICOM
#[rustfmt::skip]
pub const DICOM_STORAGE_SEQUENCE: Tag = Tag(0x0040, 0x4071); // (0040,4071)
/// STOWRSStorageSequence (0040,4072) SQ 1 DICOM
#[rustfmt::skip]
pub const STOWRS_STORAGE_SEQUENCE: Tag = Tag(0x0040, 0x4072); // (0040,4072)
/// StorageURL (0040,4073) UR 1 DICOM
#[rustfmt::skip]
pub const STORAGE_URL: Tag = Tag(0x0040, 0x4073); // (0040,4073)
/// XDSStorageSequence (0040,4074) SQ 1 DICOM
#[rustfmt::skip]
pub const XDS_STORAGE_SEQUENCE: Tag = Tag(0x0040, 0x4074); // (0040,4074)
/// EntranceDoseInmGy (0040,8302) DS 1 DICOM
#[rustfmt::skip]
pub const ENTRANCE_DOSE_INM_GY: Tag = Tag(0x0040, 0x8302); // (0040,8302)
/// EntranceDoseDerivation (0040,8303) CS 1 DICOM
#[rustfmt::skip]
pub const ENTRANCE_DOSE_DERIVATION: Tag = Tag(0x0040, 0x8303); // (0040,8303)
/// ParametricMapFrameTypeSequence (0040,9092) SQ 1 DICOM
#[rustfmt::skip]
pub const PARAMETRIC_MAP_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0040, 0x9092); // (0040,9092)
/// ReferencedImageRealWorldValueMappingSequence (0040,9094) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE: Tag = Tag(0x0040, 0x9094); // (0040,9094)
/// RealWorldValueMappingSequence (0040,9096) SQ 1 DICOM
#[rustfmt::skip]
pub const REAL_WORLD_VALUE_MAPPING_SEQUENCE: Tag = Tag(0x0040, 0x9096); // (0040,9096)
/// PixelValueMappingCodeSequence (0040,9098) SQ 1 DICOM
#[rustfmt::skip]
pub const PIXEL_VALUE_MAPPING_CODE_SEQUENCE: Tag = Tag(0x0040, 0x9098); // (0040,9098)
/// LUTLabel (0040,9210) SH 1 DICOM
#[rustfmt::skip]
pub const LUT_LABEL: Tag = Tag(0x0040, 0x9210); // (0040,9210)
/// RealWorldValueLastValueMapped (0040,9211) US 1 DICOM
#[rustfmt::skip]
pub const REAL_WORLD_VALUE_LAST_VALUE_MAPPED: Tag = Tag(0x0040, 0x9211); // (0040,9211)
/// RealWorldValueLUTData (0040,9212) FD 1-n DICOM
#[rustfmt::skip]
pub const REAL_WORLD_VALUE_LUT_DATA: Tag = Tag(0x0040, 0x9212); // (0040,9212)
/// DoubleFloatRealWorldValueLastValueMapped (0040,9213) FD 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_FLOAT_REAL_WORLD_VALUE_LAST_VALUE_MAPPED: Tag = Tag(0x0040, 0x9213); // (0040,9213)
/// DoubleFloatRealWorldValueFirstValueMapped (0040,9214) FD 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_FLOAT_REAL_WORLD_VALUE_FIRST_VALUE_MAPPED: Tag = Tag(0x0040, 0x9214); // (0040,9214)
/// RealWorldValueFirstValueMapped (0040,9216) US 1 DICOM
#[rustfmt::skip]
pub const REAL_WORLD_VALUE_FIRST_VALUE_MAPPED: Tag = Tag(0x0040, 0x9216); // (0040,9216)
/// QuantityDefinitionSequence (0040,9220) SQ 1 DICOM
#[rustfmt::skip]
pub const QUANTITY_DEFINITION_SEQUENCE: Tag = Tag(0x0040, 0x9220); // (0040,9220)
/// RealWorldValueIntercept (0040,9224) FD 1 DICOM
#[rustfmt::skip]
pub const REAL_WORLD_VALUE_INTERCEPT: Tag = Tag(0x0040, 0x9224); // (0040,9224)
/// RealWorldValueSlope (0040,9225) FD 1 DICOM
#[rustfmt::skip]
pub const REAL_WORLD_VALUE_SLOPE: Tag = Tag(0x0040, 0x9225); // (0040,9225)
/// RelationshipType (0040,A010) CS 1 DICOM
#[rustfmt::skip]
pub const RELATIONSHIP_TYPE: Tag = Tag(0x0040, 0xA010); // (0040,A010)
/// VerifyingOrganization (0040,A027) LO 1 DICOM
#[rustfmt::skip]
pub const VERIFYING_ORGANIZATION: Tag = Tag(0x0040, 0xA027); // (0040,A027)
/// VerificationDateTime (0040,A030) DT 1 DICOM
#[rustfmt::skip]
pub const VERIFICATION_DATE_TIME: Tag = Tag(0x0040, 0xA030); // (0040,A030)
/// ObservationDateTime (0040,A032) DT 1 DICOM
#[rustfmt::skip]
pub const OBSERVATION_DATE_TIME: Tag = Tag(0x0040, 0xA032); // (0040,A032)
/// ValueType (0040,A040) CS 1 DICOM
#[rustfmt::skip]
pub const VALUE_TYPE: Tag = Tag(0x0040, 0xA040); // (0040,A040)
/// ConceptNameCodeSequence (0040,A043) SQ 1 DICOM
#[rustfmt::skip]
pub const CONCEPT_NAME_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA043); // (0040,A043)
/// ContinuityOfContent (0040,A050) CS 1 DICOM
#[rustfmt::skip]
pub const CONTINUITY_OF_CONTENT: Tag = Tag(0x0040, 0xA050); // (0040,A050)
/// VerifyingObserverSequence (0040,A073) SQ 1 DICOM
#[rustfmt::skip]
pub const VERIFYING_OBSERVER_SEQUENCE: Tag = Tag(0x0040, 0xA073); // (0040,A073)
/// VerifyingObserverName (0040,A075) PN 1 DICOM
#[rustfmt::skip]
pub const VERIFYING_OBSERVER_NAME: Tag = Tag(0x0040, 0xA075); // (0040,A075)
/// AuthorObserverSequence (0040,A078) SQ 1 DICOM
#[rustfmt::skip]
pub const AUTHOR_OBSERVER_SEQUENCE: Tag = Tag(0x0040, 0xA078); // (0040,A078)
/// ParticipantSequence (0040,A07A) SQ 1 DICOM
#[rustfmt::skip]
pub const PARTICIPANT_SEQUENCE: Tag = Tag(0x0040, 0xA07A); // (0040,A07A)
/// CustodialOrganizationSequence (0040,A07C) SQ 1 DICOM
#[rustfmt::skip]
pub const CUSTODIAL_ORGANIZATION_SEQUENCE: Tag = Tag(0x0040, 0xA07C); // (0040,A07C)
/// ParticipationType (0040,A080) CS 1 DICOM
#[rustfmt::skip]
pub const PARTICIPATION_TYPE: Tag = Tag(0x0040, 0xA080); // (0040,A080)
/// ParticipationDateTime (0040,A082) DT 1 DICOM
#[rustfmt::skip]
pub const PARTICIPATION_DATE_TIME: Tag = Tag(0x0040, 0xA082); // (0040,A082)
/// ObserverType (0040,A084) CS 1 DICOM
#[rustfmt::skip]
pub const OBSERVER_TYPE: Tag = Tag(0x0040, 0xA084); // (0040,A084)
/// VerifyingObserverIdentificationCodeSequence (0040,A088) SQ 1 DICOM
#[rustfmt::skip]
pub const VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA088); // (0040,A088)
/// ReferencedWaveformChannels (0040,A0B0) US 2-2n DICOM
#[rustfmt::skip]
pub const REFERENCED_WAVEFORM_CHANNELS: Tag = Tag(0x0040, 0xA0B0); // (0040,A0B0)
/// DateTime (0040,A120) DT 1 DICOM
#[rustfmt::skip]
pub const DATE_TIME: Tag = Tag(0x0040, 0xA120); // (0040,A120)
/// Date (0040,A121) DA 1 DICOM
#[rustfmt::skip]
pub const DATE: Tag = Tag(0x0040, 0xA121); // (0040,A121)
/// Time (0040,A122) TM 1 DICOM
#[rustfmt::skip]
pub const TIME: Tag = Tag(0x0040, 0xA122); // (0040,A122)
/// PersonName (0040,A123) PN 1 DICOM
#[rustfmt::skip]
pub const PERSON_NAME: Tag = Tag(0x0040, 0xA123); // (0040,A123)
/// UID (0040,A124) UI 1 DICOM
#[rustfmt::skip]
pub const UID: Tag = Tag(0x0040, 0xA124); // (0040,A124)
/// TemporalRangeType (0040,A130) CS 1 DICOM
#[rustfmt::skip]
pub const TEMPORAL_RANGE_TYPE: Tag = Tag(0x0040, 0xA130); // (0040,A130)
/// ReferencedSamplePositions (0040,A132) UL 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_SAMPLE_POSITIONS: Tag = Tag(0x0040, 0xA132); // (0040,A132)
/// ReferencedFrameNumbers (0040,A136) US 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_FRAME_NUMBERS: Tag = Tag(0x0040, 0xA136); // (0040,A136)
/// ReferencedTimeOffsets (0040,A138) DS 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_TIME_OFFSETS: Tag = Tag(0x0040, 0xA138); // (0040,A138)
/// ReferencedDateTime (0040,A13A) DT 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_DATE_TIME: Tag = Tag(0x0040, 0xA13A); // (0040,A13A)
/// TextValue (0040,A160) UT 1 DICOM
#[rustfmt::skip]
pub const TEXT_VALUE: Tag = Tag(0x0040, 0xA160); // (0040,A160)
/// FloatingPointValue (0040,A161) FD 1-n DICOM
#[rustfmt::skip]
pub const FLOATING_POINT_VALUE: Tag = Tag(0x0040, 0xA161); // (0040,A161)
/// RationalNumeratorValue (0040,A162) SL 1-n DICOM
#[rustfmt::skip]
pub const RATIONAL_NUMERATOR_VALUE: Tag = Tag(0x0040, 0xA162); // (0040,A162)
/// RationalDenominatorValue (0040,A163) UL 1-n DICOM
#[rustfmt::skip]
pub const RATIONAL_DENOMINATOR_VALUE: Tag = Tag(0x0040, 0xA163); // (0040,A163)
/// ConceptCodeSequence (0040,A168) SQ 1 DICOM
#[rustfmt::skip]
pub const CONCEPT_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA168); // (0040,A168)
/// PurposeOfReferenceCodeSequence (0040,A170) SQ 1 DICOM
#[rustfmt::skip]
pub const PURPOSE_OF_REFERENCE_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA170); // (0040,A170)
/// ObservationUID (0040,A171) UI 1 DICOM
#[rustfmt::skip]
pub const OBSERVATION_UID: Tag = Tag(0x0040, 0xA171); // (0040,A171)
/// AnnotationGroupNumber (0040,A180) US 1 DICOM
#[rustfmt::skip]
pub const ANNOTATION_GROUP_NUMBER: Tag = Tag(0x0040, 0xA180); // (0040,A180)
/// ModifierCodeSequence (0040,A195) SQ 1 DICOM
#[rustfmt::skip]
pub const MODIFIER_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA195); // (0040,A195)
/// MeasuredValueSequence (0040,A300) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASURED_VALUE_SEQUENCE: Tag = Tag(0x0040, 0xA300); // (0040,A300)
/// NumericValueQualifierCodeSequence (0040,A301) SQ 1 DICOM
#[rustfmt::skip]
pub const NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA301); // (0040,A301)
/// NumericValue (0040,A30A) DS 1-n DICOM
#[rustfmt::skip]
pub const NUMERIC_VALUE: Tag = Tag(0x0040, 0xA30A); // (0040,A30A)
/// PredecessorDocumentsSequence (0040,A360) SQ 1 DICOM
#[rustfmt::skip]
pub const PREDECESSOR_DOCUMENTS_SEQUENCE: Tag = Tag(0x0040, 0xA360); // (0040,A360)
/// ReferencedRequestSequence (0040,A370) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_REQUEST_SEQUENCE: Tag = Tag(0x0040, 0xA370); // (0040,A370)
/// PerformedProcedureCodeSequence (0040,A372) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCEDURE_CODE_SEQUENCE: Tag = Tag(0x0040, 0xA372); // (0040,A372)
/// CurrentRequestedProcedureEvidenceSequence (0040,A375) SQ 1 DICOM
#[rustfmt::skip]
pub const CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE: Tag = Tag(0x0040, 0xA375); // (0040,A375)
/// PertinentOtherEvidenceSequence (0040,A385) SQ 1 DICOM
#[rustfmt::skip]
pub const PERTINENT_OTHER_EVIDENCE_SEQUENCE: Tag = Tag(0x0040, 0xA385); // (0040,A385)
/// HL7StructuredDocumentReferenceSequence (0040,A390) SQ 1 DICOM
#[rustfmt::skip]
pub const HL7_STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE: Tag = Tag(0x0040, 0xA390); // (0040,A390)
/// CompletionFlag (0040,A491) CS 1 DICOM
#[rustfmt::skip]
pub const COMPLETION_FLAG: Tag = Tag(0x0040, 0xA491); // (0040,A491)
/// CompletionFlagDescription (0040,A492) LO 1 DICOM
#[rustfmt::skip]
pub const COMPLETION_FLAG_DESCRIPTION: Tag = Tag(0x0040, 0xA492); // (0040,A492)
/// VerificationFlag (0040,A493) CS 1 DICOM
#[rustfmt::skip]
pub const VERIFICATION_FLAG: Tag = Tag(0x0040, 0xA493); // (0040,A493)
/// ArchiveRequested (0040,A494) CS 1 DICOM
#[rustfmt::skip]
pub const ARCHIVE_REQUESTED: Tag = Tag(0x0040, 0xA494); // (0040,A494)
/// PreliminaryFlag (0040,A496) CS 1 DICOM
#[rustfmt::skip]
pub const PRELIMINARY_FLAG: Tag = Tag(0x0040, 0xA496); // (0040,A496)
/// ContentTemplateSequence (0040,A504) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTENT_TEMPLATE_SEQUENCE: Tag = Tag(0x0040, 0xA504); // (0040,A504)
/// IdenticalDocumentsSequence (0040,A525) SQ 1 DICOM
#[rustfmt::skip]
pub const IDENTICAL_DOCUMENTS_SEQUENCE: Tag = Tag(0x0040, 0xA525); // (0040,A525)
/// ContentSequence (0040,A730) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTENT_SEQUENCE: Tag = Tag(0x0040, 0xA730); // (0040,A730)
/// WaveformAnnotationSequence (0040,B020) SQ 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_ANNOTATION_SEQUENCE: Tag = Tag(0x0040, 0xB020); // (0040,B020)
/// TemplateIdentifier (0040,DB00) CS 1 DICOM
#[rustfmt::skip]
pub const TEMPLATE_IDENTIFIER: Tag = Tag(0x0040, 0xDB00); // (0040,DB00)
/// ReferencedContentItemIdentifier (0040,DB73) UL 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_CONTENT_ITEM_IDENTIFIER: Tag = Tag(0x0040, 0xDB73); // (0040,DB73)
/// HL7InstanceIdentifier (0040,E001) ST 1 DICOM
#[rustfmt::skip]
pub const HL7_INSTANCE_IDENTIFIER: Tag = Tag(0x0040, 0xE001); // (0040,E001)
/// HL7DocumentEffectiveTime (0040,E004) DT 1 DICOM
#[rustfmt::skip]
pub const HL7_DOCUMENT_EFFECTIVE_TIME: Tag = Tag(0x0040, 0xE004); // (0040,E004)
/// HL7DocumentTypeCodeSequence (0040,E006) SQ 1 DICOM
#[rustfmt::skip]
pub const HL7_DOCUMENT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0040, 0xE006); // (0040,E006)
/// DocumentClassCodeSequence (0040,E008) SQ 1 DICOM
#[rustfmt::skip]
pub const DOCUMENT_CLASS_CODE_SEQUENCE: Tag = Tag(0x0040, 0xE008); // (0040,E008)
/// RetrieveURI (0040,E010) UR 1 DICOM
#[rustfmt::skip]
pub const RETRIEVE_URI: Tag = Tag(0x0040, 0xE010); // (0040,E010)
/// RetrieveLocationUID (0040,E011) UI 1 DICOM
#[rustfmt::skip]
pub const RETRIEVE_LOCATION_UID: Tag = Tag(0x0040, 0xE011); // (0040,E011)
/// TypeOfInstances (0040,E020) CS 1 DICOM
#[rustfmt::skip]
pub const TYPE_OF_INSTANCES: Tag = Tag(0x0040, 0xE020); // (0040,E020)
/// DICOMRetrievalSequence (0040,E021) SQ 1 DICOM
#[rustfmt::skip]
pub const DICOM_RETRIEVAL_SEQUENCE: Tag = Tag(0x0040, 0xE021); // (0040,E021)
/// DICOMMediaRetrievalSequence (0040,E022) SQ 1 DICOM
#[rustfmt::skip]
pub const DICOM_MEDIA_RETRIEVAL_SEQUENCE: Tag = Tag(0x0040, 0xE022); // (0040,E022)
/// WADORetrievalSequence (0040,E023) SQ 1 DICOM
#[rustfmt::skip]
pub const WADO_RETRIEVAL_SEQUENCE: Tag = Tag(0x0040, 0xE023); // (0040,E023)
/// XDSRetrievalSequence (0040,E024) SQ 1 DICOM
#[rustfmt::skip]
pub const XDS_RETRIEVAL_SEQUENCE: Tag = Tag(0x0040, 0xE024); // (0040,E024)
/// WADORSRetrievalSequence (0040,E025) SQ 1 DICOM
#[rustfmt::skip]
pub const WADORS_RETRIEVAL_SEQUENCE: Tag = Tag(0x0040, 0xE025); // (0040,E025)
/// RepositoryUniqueID (0040,E030) UI 1 DICOM
#[rustfmt::skip]
pub const REPOSITORY_UNIQUE_ID: Tag = Tag(0x0040, 0xE030); // (0040,E030)
/// HomeCommunityID (0040,E031) UI 1 DICOM
#[rustfmt::skip]
pub const HOME_COMMUNITY_ID: Tag = Tag(0x0040, 0xE031); // (0040,E031)
/// DocumentTitle (0042,0010) ST 1 DICOM
#[rustfmt::skip]
pub const DOCUMENT_TITLE: Tag = Tag(0x0042, 0x0010); // (0042,0010)
/// EncapsulatedDocument (0042,0011) OB 1 DICOM
#[rustfmt::skip]
pub const ENCAPSULATED_DOCUMENT: Tag = Tag(0x0042, 0x0011); // (0042,0011)
/// MIMETypeOfEncapsulatedDocument (0042,0012) LO 1 DICOM
#[rustfmt::skip]
pub const MIME_TYPE_OF_ENCAPSULATED_DOCUMENT: Tag = Tag(0x0042, 0x0012); // (0042,0012)
/// SourceInstanceSequence (0042,0013) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_INSTANCE_SEQUENCE: Tag = Tag(0x0042, 0x0013); // (0042,0013)
/// ListOfMIMETypes (0042,0014) LO 1-n DICOM
#[rustfmt::skip]
pub const LIST_OF_MIME_TYPES: Tag = Tag(0x0042, 0x0014); // (0042,0014)
/// ProductPackageIdentifier (0044,0001) ST 1 DICOM
#[rustfmt::skip]
pub const PRODUCT_PACKAGE_IDENTIFIER: Tag = Tag(0x0044, 0x0001); // (0044,0001)
/// SubstanceAdministrationApproval (0044,0002) CS 1 DICOM
#[rustfmt::skip]
pub const SUBSTANCE_ADMINISTRATION_APPROVAL: Tag = Tag(0x0044, 0x0002); // (0044,0002)
/// ApprovalStatusFurtherDescription (0044,0003) LT 1 DICOM
#[rustfmt::skip]
pub const APPROVAL_STATUS_FURTHER_DESCRIPTION: Tag = Tag(0x0044, 0x0003); // (0044,0003)
/// ApprovalStatusDateTime (0044,0004) DT 1 DICOM
#[rustfmt::skip]
pub const APPROVAL_STATUS_DATE_TIME: Tag = Tag(0x0044, 0x0004); // (0044,0004)
/// ProductTypeCodeSequence (0044,0007) SQ 1 DICOM
#[rustfmt::skip]
pub const PRODUCT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0044, 0x0007); // (0044,0007)
/// ProductName (0044,0008) LO 1-n DICOM
#[rustfmt::skip]
pub const PRODUCT_NAME: Tag = Tag(0x0044, 0x0008); // (0044,0008)
/// ProductDescription (0044,0009) LT 1 DICOM
#[rustfmt::skip]
pub const PRODUCT_DESCRIPTION: Tag = Tag(0x0044, 0x0009); // (0044,0009)
/// ProductLotIdentifier (0044,000A) LO 1 DICOM
#[rustfmt::skip]
pub const PRODUCT_LOT_IDENTIFIER: Tag = Tag(0x0044, 0x000A); // (0044,000A)
/// ProductExpirationDateTime (0044,000B) DT 1 DICOM
#[rustfmt::skip]
pub const PRODUCT_EXPIRATION_DATE_TIME: Tag = Tag(0x0044, 0x000B); // (0044,000B)
/// SubstanceAdministrationDateTime (0044,0010) DT 1 DICOM
#[rustfmt::skip]
pub const SUBSTANCE_ADMINISTRATION_DATE_TIME: Tag = Tag(0x0044, 0x0010); // (0044,0010)
/// SubstanceAdministrationNotes (0044,0011) LO 1 DICOM
#[rustfmt::skip]
pub const SUBSTANCE_ADMINISTRATION_NOTES: Tag = Tag(0x0044, 0x0011); // (0044,0011)
/// SubstanceAdministrationDeviceID (0044,0012) LO 1 DICOM
#[rustfmt::skip]
pub const SUBSTANCE_ADMINISTRATION_DEVICE_ID: Tag = Tag(0x0044, 0x0012); // (0044,0012)
/// ProductParameterSequence (0044,0013) SQ 1 DICOM
#[rustfmt::skip]
pub const PRODUCT_PARAMETER_SEQUENCE: Tag = Tag(0x0044, 0x0013); // (0044,0013)
/// SubstanceAdministrationParameterSequence (0044,0019) SQ 1 DICOM
#[rustfmt::skip]
pub const SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE: Tag = Tag(0x0044, 0x0019); // (0044,0019)
/// ApprovalSequence (0044,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const APPROVAL_SEQUENCE: Tag = Tag(0x0044, 0x0100); // (0044,0100)
/// AssertionCodeSequence (0044,0101) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSERTION_CODE_SEQUENCE: Tag = Tag(0x0044, 0x0101); // (0044,0101)
/// AssertionUID (0044,0102) UI 1 DICOM
#[rustfmt::skip]
pub const ASSERTION_UID: Tag = Tag(0x0044, 0x0102); // (0044,0102)
/// AsserterIdentificationSequence (0044,0103) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSERTER_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0044, 0x0103); // (0044,0103)
/// AssertionDateTime (0044,0104) DT 1 DICOM
#[rustfmt::skip]
pub const ASSERTION_DATE_TIME: Tag = Tag(0x0044, 0x0104); // (0044,0104)
/// AssertionExpirationDateTime (0044,0105) DT 1 DICOM
#[rustfmt::skip]
pub const ASSERTION_EXPIRATION_DATE_TIME: Tag = Tag(0x0044, 0x0105); // (0044,0105)
/// AssertionComments (0044,0106) UT 1 DICOM
#[rustfmt::skip]
pub const ASSERTION_COMMENTS: Tag = Tag(0x0044, 0x0106); // (0044,0106)
/// RelatedAssertionSequence (0044,0107) SQ 1 DICOM
#[rustfmt::skip]
pub const RELATED_ASSERTION_SEQUENCE: Tag = Tag(0x0044, 0x0107); // (0044,0107)
/// ReferencedAssertionUID (0044,0108) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_ASSERTION_UID: Tag = Tag(0x0044, 0x0108); // (0044,0108)
/// ApprovalSubjectSequence (0044,0109) SQ 1 DICOM
#[rustfmt::skip]
pub const APPROVAL_SUBJECT_SEQUENCE: Tag = Tag(0x0044, 0x0109); // (0044,0109)
/// OrganizationalRoleCodeSequence (0044,010A) SQ 1 DICOM
#[rustfmt::skip]
pub const ORGANIZATIONAL_ROLE_CODE_SEQUENCE: Tag = Tag(0x0044, 0x010A); // (0044,010A)
/// LensDescription (0046,0012) LO 1 DICOM
#[rustfmt::skip]
pub const LENS_DESCRIPTION: Tag = Tag(0x0046, 0x0012); // (0046,0012)
/// RightLensSequence (0046,0014) SQ 1 DICOM
#[rustfmt::skip]
pub const RIGHT_LENS_SEQUENCE: Tag = Tag(0x0046, 0x0014); // (0046,0014)
/// LeftLensSequence (0046,0015) SQ 1 DICOM
#[rustfmt::skip]
pub const LEFT_LENS_SEQUENCE: Tag = Tag(0x0046, 0x0015); // (0046,0015)
/// UnspecifiedLateralityLensSequence (0046,0016) SQ 1 DICOM
#[rustfmt::skip]
pub const UNSPECIFIED_LATERALITY_LENS_SEQUENCE: Tag = Tag(0x0046, 0x0016); // (0046,0016)
/// CylinderSequence (0046,0018) SQ 1 DICOM
#[rustfmt::skip]
pub const CYLINDER_SEQUENCE: Tag = Tag(0x0046, 0x0018); // (0046,0018)
/// PrismSequence (0046,0028) SQ 1 DICOM
#[rustfmt::skip]
pub const PRISM_SEQUENCE: Tag = Tag(0x0046, 0x0028); // (0046,0028)
/// HorizontalPrismPower (0046,0030) FD 1 DICOM
#[rustfmt::skip]
pub const HORIZONTAL_PRISM_POWER: Tag = Tag(0x0046, 0x0030); // (0046,0030)
/// HorizontalPrismBase (0046,0032) CS 1 DICOM
#[rustfmt::skip]
pub const HORIZONTAL_PRISM_BASE: Tag = Tag(0x0046, 0x0032); // (0046,0032)
/// VerticalPrismPower (0046,0034) FD 1 DICOM
#[rustfmt::skip]
pub const VERTICAL_PRISM_POWER: Tag = Tag(0x0046, 0x0034); // (0046,0034)
/// VerticalPrismBase (0046,0036) CS 1 DICOM
#[rustfmt::skip]
pub const VERTICAL_PRISM_BASE: Tag = Tag(0x0046, 0x0036); // (0046,0036)
/// LensSegmentType (0046,0038) CS 1 DICOM
#[rustfmt::skip]
pub const LENS_SEGMENT_TYPE: Tag = Tag(0x0046, 0x0038); // (0046,0038)
/// OpticalTransmittance (0046,0040) FD 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_TRANSMITTANCE: Tag = Tag(0x0046, 0x0040); // (0046,0040)
/// ChannelWidth (0046,0042) FD 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_WIDTH: Tag = Tag(0x0046, 0x0042); // (0046,0042)
/// PupilSize (0046,0044) FD 1 DICOM
#[rustfmt::skip]
pub const PUPIL_SIZE: Tag = Tag(0x0046, 0x0044); // (0046,0044)
/// CornealSize (0046,0046) FD 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_SIZE: Tag = Tag(0x0046, 0x0046); // (0046,0046)
/// AutorefractionRightEyeSequence (0046,0050) SQ 1 DICOM
#[rustfmt::skip]
pub const AUTOREFRACTION_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0050); // (0046,0050)
/// AutorefractionLeftEyeSequence (0046,0052) SQ 1 DICOM
#[rustfmt::skip]
pub const AUTOREFRACTION_LEFT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0052); // (0046,0052)
/// DistancePupillaryDistance (0046,0060) FD 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_PUPILLARY_DISTANCE: Tag = Tag(0x0046, 0x0060); // (0046,0060)
/// NearPupillaryDistance (0046,0062) FD 1 DICOM
#[rustfmt::skip]
pub const NEAR_PUPILLARY_DISTANCE: Tag = Tag(0x0046, 0x0062); // (0046,0062)
/// IntermediatePupillaryDistance (0046,0063) FD 1 DICOM
#[rustfmt::skip]
pub const INTERMEDIATE_PUPILLARY_DISTANCE: Tag = Tag(0x0046, 0x0063); // (0046,0063)
/// OtherPupillaryDistance (0046,0064) FD 1 DICOM
#[rustfmt::skip]
pub const OTHER_PUPILLARY_DISTANCE: Tag = Tag(0x0046, 0x0064); // (0046,0064)
/// KeratometryRightEyeSequence (0046,0070) SQ 1 DICOM
#[rustfmt::skip]
pub const KERATOMETRY_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0070); // (0046,0070)
/// KeratometryLeftEyeSequence (0046,0071) SQ 1 DICOM
#[rustfmt::skip]
pub const KERATOMETRY_LEFT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0071); // (0046,0071)
/// SteepKeratometricAxisSequence (0046,0074) SQ 1 DICOM
#[rustfmt::skip]
pub const STEEP_KERATOMETRIC_AXIS_SEQUENCE: Tag = Tag(0x0046, 0x0074); // (0046,0074)
/// RadiusOfCurvature (0046,0075) FD 1 DICOM
#[rustfmt::skip]
pub const RADIUS_OF_CURVATURE: Tag = Tag(0x0046, 0x0075); // (0046,0075)
/// KeratometricPower (0046,0076) FD 1 DICOM
#[rustfmt::skip]
pub const KERATOMETRIC_POWER: Tag = Tag(0x0046, 0x0076); // (0046,0076)
/// KeratometricAxis (0046,0077) FD 1 DICOM
#[rustfmt::skip]
pub const KERATOMETRIC_AXIS: Tag = Tag(0x0046, 0x0077); // (0046,0077)
/// FlatKeratometricAxisSequence (0046,0080) SQ 1 DICOM
#[rustfmt::skip]
pub const FLAT_KERATOMETRIC_AXIS_SEQUENCE: Tag = Tag(0x0046, 0x0080); // (0046,0080)
/// BackgroundColor (0046,0092) CS 1 DICOM
#[rustfmt::skip]
pub const BACKGROUND_COLOR: Tag = Tag(0x0046, 0x0092); // (0046,0092)
/// Optotype (0046,0094) CS 1 DICOM
#[rustfmt::skip]
pub const OPTOTYPE: Tag = Tag(0x0046, 0x0094); // (0046,0094)
/// OptotypePresentation (0046,0095) CS 1 DICOM
#[rustfmt::skip]
pub const OPTOTYPE_PRESENTATION: Tag = Tag(0x0046, 0x0095); // (0046,0095)
/// SubjectiveRefractionRightEyeSequence (0046,0097) SQ 1 DICOM
#[rustfmt::skip]
pub const SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0097); // (0046,0097)
/// SubjectiveRefractionLeftEyeSequence (0046,0098) SQ 1 DICOM
#[rustfmt::skip]
pub const SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0098); // (0046,0098)
/// AddNearSequence (0046,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const ADD_NEAR_SEQUENCE: Tag = Tag(0x0046, 0x0100); // (0046,0100)
/// AddIntermediateSequence (0046,0101) SQ 1 DICOM
#[rustfmt::skip]
pub const ADD_INTERMEDIATE_SEQUENCE: Tag = Tag(0x0046, 0x0101); // (0046,0101)
/// AddOtherSequence (0046,0102) SQ 1 DICOM
#[rustfmt::skip]
pub const ADD_OTHER_SEQUENCE: Tag = Tag(0x0046, 0x0102); // (0046,0102)
/// AddPower (0046,0104) FD 1 DICOM
#[rustfmt::skip]
pub const ADD_POWER: Tag = Tag(0x0046, 0x0104); // (0046,0104)
/// ViewingDistance (0046,0106) FD 1 DICOM
#[rustfmt::skip]
pub const VIEWING_DISTANCE: Tag = Tag(0x0046, 0x0106); // (0046,0106)
/// VisualAcuityTypeCodeSequence (0046,0121) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_ACUITY_TYPE_CODE_SEQUENCE: Tag = Tag(0x0046, 0x0121); // (0046,0121)
/// VisualAcuityRightEyeSequence (0046,0122) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_ACUITY_RIGHT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0122); // (0046,0122)
/// VisualAcuityLeftEyeSequence (0046,0123) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_ACUITY_LEFT_EYE_SEQUENCE: Tag = Tag(0x0046, 0x0123); // (0046,0123)
/// VisualAcuityBothEyesOpenSequence (0046,0124) SQ 1 DICOM
#[rustfmt::skip]
pub const VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE: Tag = Tag(0x0046, 0x0124); // (0046,0124)
/// ViewingDistanceType (0046,0125) CS 1 DICOM
#[rustfmt::skip]
pub const VIEWING_DISTANCE_TYPE: Tag = Tag(0x0046, 0x0125); // (0046,0125)
/// VisualAcuityModifiers (0046,0135) SS 2 DICOM
#[rustfmt::skip]
pub const VISUAL_ACUITY_MODIFIERS: Tag = Tag(0x0046, 0x0135); // (0046,0135)
/// DecimalVisualAcuity (0046,0137) FD 1 DICOM
#[rustfmt::skip]
pub const DECIMAL_VISUAL_ACUITY: Tag = Tag(0x0046, 0x0137); // (0046,0137)
/// OptotypeDetailedDefinition (0046,0139) LO 1 DICOM
#[rustfmt::skip]
pub const OPTOTYPE_DETAILED_DEFINITION: Tag = Tag(0x0046, 0x0139); // (0046,0139)
/// ReferencedRefractiveMeasurementsSequence (0046,0145) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE: Tag = Tag(0x0046, 0x0145); // (0046,0145)
/// SpherePower (0046,0146) FD 1 DICOM
#[rustfmt::skip]
pub const SPHERE_POWER: Tag = Tag(0x0046, 0x0146); // (0046,0146)
/// CylinderPower (0046,0147) FD 1 DICOM
#[rustfmt::skip]
pub const CYLINDER_POWER: Tag = Tag(0x0046, 0x0147); // (0046,0147)
/// CornealTopographySurface (0046,0201) CS 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_TOPOGRAPHY_SURFACE: Tag = Tag(0x0046, 0x0201); // (0046,0201)
/// CornealVertexLocation (0046,0202) FL 2 DICOM
#[rustfmt::skip]
pub const CORNEAL_VERTEX_LOCATION: Tag = Tag(0x0046, 0x0202); // (0046,0202)
/// PupilCentroidXCoordinate (0046,0203) FL 1 DICOM
#[rustfmt::skip]
pub const PUPIL_CENTROID_X_COORDINATE: Tag = Tag(0x0046, 0x0203); // (0046,0203)
/// PupilCentroidYCoordinate (0046,0204) FL 1 DICOM
#[rustfmt::skip]
pub const PUPIL_CENTROID_Y_COORDINATE: Tag = Tag(0x0046, 0x0204); // (0046,0204)
/// EquivalentPupilRadius (0046,0205) FL 1 DICOM
#[rustfmt::skip]
pub const EQUIVALENT_PUPIL_RADIUS: Tag = Tag(0x0046, 0x0205); // (0046,0205)
/// CornealTopographyMapTypeCodeSequence (0046,0207) SQ 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_TOPOGRAPHY_MAP_TYPE_CODE_SEQUENCE: Tag = Tag(0x0046, 0x0207); // (0046,0207)
/// VerticesOfTheOutlineOfPupil (0046,0208) IS 2-2n DICOM
#[rustfmt::skip]
pub const VERTICES_OF_THE_OUTLINE_OF_PUPIL: Tag = Tag(0x0046, 0x0208); // (0046,0208)
/// CornealTopographyMappingNormalsSequence (0046,0210) SQ 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_TOPOGRAPHY_MAPPING_NORMALS_SEQUENCE: Tag = Tag(0x0046, 0x0210); // (0046,0210)
/// MaximumCornealCurvatureSequence (0046,0211) SQ 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_CORNEAL_CURVATURE_SEQUENCE: Tag = Tag(0x0046, 0x0211); // (0046,0211)
/// MaximumCornealCurvature (0046,0212) FL 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_CORNEAL_CURVATURE: Tag = Tag(0x0046, 0x0212); // (0046,0212)
/// MaximumCornealCurvatureLocation (0046,0213) FL 2 DICOM
#[rustfmt::skip]
pub const MAXIMUM_CORNEAL_CURVATURE_LOCATION: Tag = Tag(0x0046, 0x0213); // (0046,0213)
/// MinimumKeratometricSequence (0046,0215) SQ 1 DICOM
#[rustfmt::skip]
pub const MINIMUM_KERATOMETRIC_SEQUENCE: Tag = Tag(0x0046, 0x0215); // (0046,0215)
/// SimulatedKeratometricCylinderSequence (0046,0218) SQ 1 DICOM
#[rustfmt::skip]
pub const SIMULATED_KERATOMETRIC_CYLINDER_SEQUENCE: Tag = Tag(0x0046, 0x0218); // (0046,0218)
/// AverageCornealPower (0046,0220) FL 1 DICOM
#[rustfmt::skip]
pub const AVERAGE_CORNEAL_POWER: Tag = Tag(0x0046, 0x0220); // (0046,0220)
/// CornealISValue (0046,0224) FL 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_IS_VALUE: Tag = Tag(0x0046, 0x0224); // (0046,0224)
/// AnalyzedArea (0046,0227) FL 1 DICOM
#[rustfmt::skip]
pub const ANALYZED_AREA: Tag = Tag(0x0046, 0x0227); // (0046,0227)
/// SurfaceRegularityIndex (0046,0230) FL 1 DICOM
#[rustfmt::skip]
pub const SURFACE_REGULARITY_INDEX: Tag = Tag(0x0046, 0x0230); // (0046,0230)
/// SurfaceAsymmetryIndex (0046,0232) FL 1 DICOM
#[rustfmt::skip]
pub const SURFACE_ASYMMETRY_INDEX: Tag = Tag(0x0046, 0x0232); // (0046,0232)
/// CornealEccentricityIndex (0046,0234) FL 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_ECCENTRICITY_INDEX: Tag = Tag(0x0046, 0x0234); // (0046,0234)
/// KeratoconusPredictionIndex (0046,0236) FL 1 DICOM
#[rustfmt::skip]
pub const KERATOCONUS_PREDICTION_INDEX: Tag = Tag(0x0046, 0x0236); // (0046,0236)
/// DecimalPotentialVisualAcuity (0046,0238) FL 1 DICOM
#[rustfmt::skip]
pub const DECIMAL_POTENTIAL_VISUAL_ACUITY: Tag = Tag(0x0046, 0x0238); // (0046,0238)
/// CornealTopographyMapQualityEvaluation (0046,0242) CS 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_TOPOGRAPHY_MAP_QUALITY_EVALUATION: Tag = Tag(0x0046, 0x0242); // (0046,0242)
/// SourceImageCornealProcessedDataSequence (0046,0244) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_IMAGE_CORNEAL_PROCESSED_DATA_SEQUENCE: Tag = Tag(0x0046, 0x0244); // (0046,0244)
/// CornealPointLocation (0046,0247) FL 3 DICOM
#[rustfmt::skip]
pub const CORNEAL_POINT_LOCATION: Tag = Tag(0x0046, 0x0247); // (0046,0247)
/// CornealPointEstimated (0046,0248) CS 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_POINT_ESTIMATED: Tag = Tag(0x0046, 0x0248); // (0046,0248)
/// AxialPower (0046,0249) FL 1 DICOM
#[rustfmt::skip]
pub const AXIAL_POWER: Tag = Tag(0x0046, 0x0249); // (0046,0249)
/// TangentialPower (0046,0250) FL 1 DICOM
#[rustfmt::skip]
pub const TANGENTIAL_POWER: Tag = Tag(0x0046, 0x0250); // (0046,0250)
/// RefractivePower (0046,0251) FL 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_POWER: Tag = Tag(0x0046, 0x0251); // (0046,0251)
/// RelativeElevation (0046,0252) FL 1 DICOM
#[rustfmt::skip]
pub const RELATIVE_ELEVATION: Tag = Tag(0x0046, 0x0252); // (0046,0252)
/// CornealWavefront (0046,0253) FL 1 DICOM
#[rustfmt::skip]
pub const CORNEAL_WAVEFRONT: Tag = Tag(0x0046, 0x0253); // (0046,0253)
/// ImagedVolumeWidth (0048,0001) FL 1 DICOM
#[rustfmt::skip]
pub const IMAGED_VOLUME_WIDTH: Tag = Tag(0x0048, 0x0001); // (0048,0001)
/// ImagedVolumeHeight (0048,0002) FL 1 DICOM
#[rustfmt::skip]
pub const IMAGED_VOLUME_HEIGHT: Tag = Tag(0x0048, 0x0002); // (0048,0002)
/// ImagedVolumeDepth (0048,0003) FL 1 DICOM
#[rustfmt::skip]
pub const IMAGED_VOLUME_DEPTH: Tag = Tag(0x0048, 0x0003); // (0048,0003)
/// TotalPixelMatrixColumns (0048,0006) UL 1 DICOM
#[rustfmt::skip]
pub const TOTAL_PIXEL_MATRIX_COLUMNS: Tag = Tag(0x0048, 0x0006); // (0048,0006)
/// TotalPixelMatrixRows (0048,0007) UL 1 DICOM
#[rustfmt::skip]
pub const TOTAL_PIXEL_MATRIX_ROWS: Tag = Tag(0x0048, 0x0007); // (0048,0007)
/// TotalPixelMatrixOriginSequence (0048,0008) SQ 1 DICOM
#[rustfmt::skip]
pub const TOTAL_PIXEL_MATRIX_ORIGIN_SEQUENCE: Tag = Tag(0x0048, 0x0008); // (0048,0008)
/// SpecimenLabelInImage (0048,0010) CS 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_LABEL_IN_IMAGE: Tag = Tag(0x0048, 0x0010); // (0048,0010)
/// FocusMethod (0048,0011) CS 1 DICOM
#[rustfmt::skip]
pub const FOCUS_METHOD: Tag = Tag(0x0048, 0x0011); // (0048,0011)
/// ExtendedDepthOfField (0048,0012) CS 1 DICOM
#[rustfmt::skip]
pub const EXTENDED_DEPTH_OF_FIELD: Tag = Tag(0x0048, 0x0012); // (0048,0012)
/// NumberOfFocalPlanes (0048,0013) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FOCAL_PLANES: Tag = Tag(0x0048, 0x0013); // (0048,0013)
/// DistanceBetweenFocalPlanes (0048,0014) FL 1 DICOM
#[rustfmt::skip]
pub const DISTANCE_BETWEEN_FOCAL_PLANES: Tag = Tag(0x0048, 0x0014); // (0048,0014)
/// RecommendedAbsentPixelCIELabValue (0048,0015) US 3 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_ABSENT_PIXEL_CIE_LAB_VALUE: Tag = Tag(0x0048, 0x0015); // (0048,0015)
/// IlluminatorTypeCodeSequence (0048,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATOR_TYPE_CODE_SEQUENCE: Tag = Tag(0x0048, 0x0100); // (0048,0100)
/// ImageOrientationSlide (0048,0102) DS 6 DICOM
#[rustfmt::skip]
pub const IMAGE_ORIENTATION_SLIDE: Tag = Tag(0x0048, 0x0102); // (0048,0102)
/// OpticalPathSequence (0048,0105) SQ 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_PATH_SEQUENCE: Tag = Tag(0x0048, 0x0105); // (0048,0105)
/// OpticalPathIdentifier (0048,0106) SH 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_PATH_IDENTIFIER: Tag = Tag(0x0048, 0x0106); // (0048,0106)
/// OpticalPathDescription (0048,0107) ST 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_PATH_DESCRIPTION: Tag = Tag(0x0048, 0x0107); // (0048,0107)
/// IlluminationColorCodeSequence (0048,0108) SQ 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATION_COLOR_CODE_SEQUENCE: Tag = Tag(0x0048, 0x0108); // (0048,0108)
/// SpecimenReferenceSequence (0048,0110) SQ 1 DICOM
#[rustfmt::skip]
pub const SPECIMEN_REFERENCE_SEQUENCE: Tag = Tag(0x0048, 0x0110); // (0048,0110)
/// CondenserLensPower (0048,0111) DS 1 DICOM
#[rustfmt::skip]
pub const CONDENSER_LENS_POWER: Tag = Tag(0x0048, 0x0111); // (0048,0111)
/// ObjectiveLensPower (0048,0112) DS 1 DICOM
#[rustfmt::skip]
pub const OBJECTIVE_LENS_POWER: Tag = Tag(0x0048, 0x0112); // (0048,0112)
/// ObjectiveLensNumericalAperture (0048,0113) DS 1 DICOM
#[rustfmt::skip]
pub const OBJECTIVE_LENS_NUMERICAL_APERTURE: Tag = Tag(0x0048, 0x0113); // (0048,0113)
/// PaletteColorLookupTableSequence (0048,0120) SQ 1 DICOM
#[rustfmt::skip]
pub const PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE: Tag = Tag(0x0048, 0x0120); // (0048,0120)
/// ReferencedImageNavigationSequence (0048,0200) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_IMAGE_NAVIGATION_SEQUENCE: Tag = Tag(0x0048, 0x0200); // (0048,0200)
/// TopLeftHandCornerOfLocalizerArea (0048,0201) US 2 DICOM
#[rustfmt::skip]
pub const TOP_LEFT_HAND_CORNER_OF_LOCALIZER_AREA: Tag = Tag(0x0048, 0x0201); // (0048,0201)
/// BottomRightHandCornerOfLocalizerArea (0048,0202) US 2 DICOM
#[rustfmt::skip]
pub const BOTTOM_RIGHT_HAND_CORNER_OF_LOCALIZER_AREA: Tag = Tag(0x0048, 0x0202); // (0048,0202)
/// OpticalPathIdentificationSequence (0048,0207) SQ 1 DICOM
#[rustfmt::skip]
pub const OPTICAL_PATH_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0048, 0x0207); // (0048,0207)
/// PlanePositionSlideSequence (0048,021A) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANE_POSITION_SLIDE_SEQUENCE: Tag = Tag(0x0048, 0x021A); // (0048,021A)
/// ColumnPositionInTotalImagePixelMatrix (0048,021E) SL 1 DICOM
#[rustfmt::skip]
pub const COLUMN_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX: Tag = Tag(0x0048, 0x021E); // (0048,021E)
/// RowPositionInTotalImagePixelMatrix (0048,021F) SL 1 DICOM
#[rustfmt::skip]
pub const ROW_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX: Tag = Tag(0x0048, 0x021F); // (0048,021F)
/// PixelOriginInterpretation (0048,0301) CS 1 DICOM
#[rustfmt::skip]
pub const PIXEL_ORIGIN_INTERPRETATION: Tag = Tag(0x0048, 0x0301); // (0048,0301)
/// CalibrationImage (0050,0004) CS 1 DICOM
#[rustfmt::skip]
pub const CALIBRATION_IMAGE: Tag = Tag(0x0050, 0x0004); // (0050,0004)
/// DeviceSequence (0050,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const DEVICE_SEQUENCE: Tag = Tag(0x0050, 0x0010); // (0050,0010)
/// ContainerComponentTypeCodeSequence (0050,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0050, 0x0012); // (0050,0012)
/// ContainerComponentThickness (0050,0013) FD 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_THICKNESS: Tag = Tag(0x0050, 0x0013); // (0050,0013)
/// DeviceLength (0050,0014) DS 1 DICOM
#[rustfmt::skip]
pub const DEVICE_LENGTH: Tag = Tag(0x0050, 0x0014); // (0050,0014)
/// ContainerComponentWidth (0050,0015) FD 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_WIDTH: Tag = Tag(0x0050, 0x0015); // (0050,0015)
/// DeviceDiameter (0050,0016) DS 1 DICOM
#[rustfmt::skip]
pub const DEVICE_DIAMETER: Tag = Tag(0x0050, 0x0016); // (0050,0016)
/// DeviceDiameterUnits (0050,0017) CS 1 DICOM
#[rustfmt::skip]
pub const DEVICE_DIAMETER_UNITS: Tag = Tag(0x0050, 0x0017); // (0050,0017)
/// DeviceVolume (0050,0018) DS 1 DICOM
#[rustfmt::skip]
pub const DEVICE_VOLUME: Tag = Tag(0x0050, 0x0018); // (0050,0018)
/// InterMarkerDistance (0050,0019) DS 1 DICOM
#[rustfmt::skip]
pub const INTER_MARKER_DISTANCE: Tag = Tag(0x0050, 0x0019); // (0050,0019)
/// ContainerComponentMaterial (0050,001A) CS 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_MATERIAL: Tag = Tag(0x0050, 0x001A); // (0050,001A)
/// ContainerComponentID (0050,001B) LO 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_ID: Tag = Tag(0x0050, 0x001B); // (0050,001B)
/// ContainerComponentLength (0050,001C) FD 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_LENGTH: Tag = Tag(0x0050, 0x001C); // (0050,001C)
/// ContainerComponentDiameter (0050,001D) FD 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_DIAMETER: Tag = Tag(0x0050, 0x001D); // (0050,001D)
/// ContainerComponentDescription (0050,001E) LO 1 DICOM
#[rustfmt::skip]
pub const CONTAINER_COMPONENT_DESCRIPTION: Tag = Tag(0x0050, 0x001E); // (0050,001E)
/// DeviceDescription (0050,0020) LO 1 DICOM
#[rustfmt::skip]
pub const DEVICE_DESCRIPTION: Tag = Tag(0x0050, 0x0020); // (0050,0020)
/// ContrastBolusIngredientPercentByVolume (0052,0001) FL 1 DICOM
#[rustfmt::skip]
pub const CONTRAST_BOLUS_INGREDIENT_PERCENT_BY_VOLUME: Tag = Tag(0x0052, 0x0001); // (0052,0001)
/// OCTFocalDistance (0052,0002) FD 1 DICOM
#[rustfmt::skip]
pub const OCT_FOCAL_DISTANCE: Tag = Tag(0x0052, 0x0002); // (0052,0002)
/// BeamSpotSize (0052,0003) FD 1 DICOM
#[rustfmt::skip]
pub const BEAM_SPOT_SIZE: Tag = Tag(0x0052, 0x0003); // (0052,0003)
/// EffectiveRefractiveIndex (0052,0004) FD 1 DICOM
#[rustfmt::skip]
pub const EFFECTIVE_REFRACTIVE_INDEX: Tag = Tag(0x0052, 0x0004); // (0052,0004)
/// OCTAcquisitionDomain (0052,0006) CS 1 DICOM
#[rustfmt::skip]
pub const OCT_ACQUISITION_DOMAIN: Tag = Tag(0x0052, 0x0006); // (0052,0006)
/// OCTOpticalCenterWavelength (0052,0007) FD 1 DICOM
#[rustfmt::skip]
pub const OCT_OPTICAL_CENTER_WAVELENGTH: Tag = Tag(0x0052, 0x0007); // (0052,0007)
/// AxialResolution (0052,0008) FD 1 DICOM
#[rustfmt::skip]
pub const AXIAL_RESOLUTION: Tag = Tag(0x0052, 0x0008); // (0052,0008)
/// RangingDepth (0052,0009) FD 1 DICOM
#[rustfmt::skip]
pub const RANGING_DEPTH: Tag = Tag(0x0052, 0x0009); // (0052,0009)
/// ALineRate (0052,0011) FD 1 DICOM
#[rustfmt::skip]
pub const A_LINE_RATE: Tag = Tag(0x0052, 0x0011); // (0052,0011)
/// ALinesPerFrame (0052,0012) US 1 DICOM
#[rustfmt::skip]
pub const A_LINES_PER_FRAME: Tag = Tag(0x0052, 0x0012); // (0052,0012)
/// CatheterRotationalRate (0052,0013) FD 1 DICOM
#[rustfmt::skip]
pub const CATHETER_ROTATIONAL_RATE: Tag = Tag(0x0052, 0x0013); // (0052,0013)
/// ALinePixelSpacing (0052,0014) FD 1 DICOM
#[rustfmt::skip]
pub const A_LINE_PIXEL_SPACING: Tag = Tag(0x0052, 0x0014); // (0052,0014)
/// ModeOfPercutaneousAccessSequence (0052,0016) SQ 1 DICOM
#[rustfmt::skip]
pub const MODE_OF_PERCUTANEOUS_ACCESS_SEQUENCE: Tag = Tag(0x0052, 0x0016); // (0052,0016)
/// IntravascularOCTFrameTypeSequence (0052,0025) SQ 1 DICOM
#[rustfmt::skip]
pub const INTRAVASCULAR_OCT_FRAME_TYPE_SEQUENCE: Tag = Tag(0x0052, 0x0025); // (0052,0025)
/// OCTZOffsetApplied (0052,0026) CS 1 DICOM
#[rustfmt::skip]
pub const OCTZ_OFFSET_APPLIED: Tag = Tag(0x0052, 0x0026); // (0052,0026)
/// IntravascularFrameContentSequence (0052,0027) SQ 1 DICOM
#[rustfmt::skip]
pub const INTRAVASCULAR_FRAME_CONTENT_SEQUENCE: Tag = Tag(0x0052, 0x0027); // (0052,0027)
/// IntravascularLongitudinalDistance (0052,0028) FD 1 DICOM
#[rustfmt::skip]
pub const INTRAVASCULAR_LONGITUDINAL_DISTANCE: Tag = Tag(0x0052, 0x0028); // (0052,0028)
/// IntravascularOCTFrameContentSequence (0052,0029) SQ 1 DICOM
#[rustfmt::skip]
pub const INTRAVASCULAR_OCT_FRAME_CONTENT_SEQUENCE: Tag = Tag(0x0052, 0x0029); // (0052,0029)
/// OCTZOffsetCorrection (0052,0030) SS 1 DICOM
#[rustfmt::skip]
pub const OCTZ_OFFSET_CORRECTION: Tag = Tag(0x0052, 0x0030); // (0052,0030)
/// CatheterDirectionOfRotation (0052,0031) CS 1 DICOM
#[rustfmt::skip]
pub const CATHETER_DIRECTION_OF_ROTATION: Tag = Tag(0x0052, 0x0031); // (0052,0031)
/// SeamLineLocation (0052,0033) FD 1 DICOM
#[rustfmt::skip]
pub const SEAM_LINE_LOCATION: Tag = Tag(0x0052, 0x0033); // (0052,0033)
/// FirstALineLocation (0052,0034) FD 1 DICOM
#[rustfmt::skip]
pub const FIRST_A_LINE_LOCATION: Tag = Tag(0x0052, 0x0034); // (0052,0034)
/// SeamLineIndex (0052,0036) US 1 DICOM
#[rustfmt::skip]
pub const SEAM_LINE_INDEX: Tag = Tag(0x0052, 0x0036); // (0052,0036)
/// NumberOfPaddedALines (0052,0038) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PADDED_A_LINES: Tag = Tag(0x0052, 0x0038); // (0052,0038)
/// InterpolationType (0052,0039) CS 1 DICOM
#[rustfmt::skip]
pub const INTERPOLATION_TYPE: Tag = Tag(0x0052, 0x0039); // (0052,0039)
/// RefractiveIndexApplied (0052,003A) CS 1 DICOM
#[rustfmt::skip]
pub const REFRACTIVE_INDEX_APPLIED: Tag = Tag(0x0052, 0x003A); // (0052,003A)
/// EnergyWindowVector (0054,0010) US 1-n DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_VECTOR: Tag = Tag(0x0054, 0x0010); // (0054,0010)
/// NumberOfEnergyWindows (0054,0011) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_ENERGY_WINDOWS: Tag = Tag(0x0054, 0x0011); // (0054,0011)
/// EnergyWindowInformationSequence (0054,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0012); // (0054,0012)
/// EnergyWindowRangeSequence (0054,0013) SQ 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_RANGE_SEQUENCE: Tag = Tag(0x0054, 0x0013); // (0054,0013)
/// EnergyWindowLowerLimit (0054,0014) DS 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_LOWER_LIMIT: Tag = Tag(0x0054, 0x0014); // (0054,0014)
/// EnergyWindowUpperLimit (0054,0015) DS 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_UPPER_LIMIT: Tag = Tag(0x0054, 0x0015); // (0054,0015)
/// RadiopharmaceuticalInformationSequence (0054,0016) SQ 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0016); // (0054,0016)
/// ResidualSyringeCounts (0054,0017) IS 1 DICOM
#[rustfmt::skip]
pub const RESIDUAL_SYRINGE_COUNTS: Tag = Tag(0x0054, 0x0017); // (0054,0017)
/// EnergyWindowName (0054,0018) SH 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_NAME: Tag = Tag(0x0054, 0x0018); // (0054,0018)
/// DetectorVector (0054,0020) US 1-n DICOM
#[rustfmt::skip]
pub const DETECTOR_VECTOR: Tag = Tag(0x0054, 0x0020); // (0054,0020)
/// NumberOfDetectors (0054,0021) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_DETECTORS: Tag = Tag(0x0054, 0x0021); // (0054,0021)
/// DetectorInformationSequence (0054,0022) SQ 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0022); // (0054,0022)
/// PhaseVector (0054,0030) US 1-n DICOM
#[rustfmt::skip]
pub const PHASE_VECTOR: Tag = Tag(0x0054, 0x0030); // (0054,0030)
/// NumberOfPhases (0054,0031) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PHASES: Tag = Tag(0x0054, 0x0031); // (0054,0031)
/// PhaseInformationSequence (0054,0032) SQ 1 DICOM
#[rustfmt::skip]
pub const PHASE_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0032); // (0054,0032)
/// NumberOfFramesInPhase (0054,0033) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRAMES_IN_PHASE: Tag = Tag(0x0054, 0x0033); // (0054,0033)
/// PhaseDelay (0054,0036) IS 1 DICOM
#[rustfmt::skip]
pub const PHASE_DELAY: Tag = Tag(0x0054, 0x0036); // (0054,0036)
/// PauseBetweenFrames (0054,0038) IS 1 DICOM
#[rustfmt::skip]
pub const PAUSE_BETWEEN_FRAMES: Tag = Tag(0x0054, 0x0038); // (0054,0038)
/// PhaseDescription (0054,0039) CS 1 DICOM
#[rustfmt::skip]
pub const PHASE_DESCRIPTION: Tag = Tag(0x0054, 0x0039); // (0054,0039)
/// RotationVector (0054,0050) US 1-n DICOM
#[rustfmt::skip]
pub const ROTATION_VECTOR: Tag = Tag(0x0054, 0x0050); // (0054,0050)
/// NumberOfRotations (0054,0051) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_ROTATIONS: Tag = Tag(0x0054, 0x0051); // (0054,0051)
/// RotationInformationSequence (0054,0052) SQ 1 DICOM
#[rustfmt::skip]
pub const ROTATION_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0052); // (0054,0052)
/// NumberOfFramesInRotation (0054,0053) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRAMES_IN_ROTATION: Tag = Tag(0x0054, 0x0053); // (0054,0053)
/// RRIntervalVector (0054,0060) US 1-n DICOM
#[rustfmt::skip]
pub const RR_INTERVAL_VECTOR: Tag = Tag(0x0054, 0x0060); // (0054,0060)
/// NumberOfRRIntervals (0054,0061) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_RR_INTERVALS: Tag = Tag(0x0054, 0x0061); // (0054,0061)
/// GatedInformationSequence (0054,0062) SQ 1 DICOM
#[rustfmt::skip]
pub const GATED_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0062); // (0054,0062)
/// DataInformationSequence (0054,0063) SQ 1 DICOM
#[rustfmt::skip]
pub const DATA_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0063); // (0054,0063)
/// TimeSlotVector (0054,0070) US 1-n DICOM
#[rustfmt::skip]
pub const TIME_SLOT_VECTOR: Tag = Tag(0x0054, 0x0070); // (0054,0070)
/// NumberOfTimeSlots (0054,0071) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TIME_SLOTS: Tag = Tag(0x0054, 0x0071); // (0054,0071)
/// TimeSlotInformationSequence (0054,0072) SQ 1 DICOM
#[rustfmt::skip]
pub const TIME_SLOT_INFORMATION_SEQUENCE: Tag = Tag(0x0054, 0x0072); // (0054,0072)
/// TimeSlotTime (0054,0073) DS 1 DICOM
#[rustfmt::skip]
pub const TIME_SLOT_TIME: Tag = Tag(0x0054, 0x0073); // (0054,0073)
/// SliceVector (0054,0080) US 1-n DICOM
#[rustfmt::skip]
pub const SLICE_VECTOR: Tag = Tag(0x0054, 0x0080); // (0054,0080)
/// NumberOfSlices (0054,0081) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SLICES: Tag = Tag(0x0054, 0x0081); // (0054,0081)
/// AngularViewVector (0054,0090) US 1-n DICOM
#[rustfmt::skip]
pub const ANGULAR_VIEW_VECTOR: Tag = Tag(0x0054, 0x0090); // (0054,0090)
/// TimeSliceVector (0054,0100) US 1-n DICOM
#[rustfmt::skip]
pub const TIME_SLICE_VECTOR: Tag = Tag(0x0054, 0x0100); // (0054,0100)
/// NumberOfTimeSlices (0054,0101) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TIME_SLICES: Tag = Tag(0x0054, 0x0101); // (0054,0101)
/// StartAngle (0054,0200) DS 1 DICOM
#[rustfmt::skip]
pub const START_ANGLE: Tag = Tag(0x0054, 0x0200); // (0054,0200)
/// TypeOfDetectorMotion (0054,0202) CS 1 DICOM
#[rustfmt::skip]
pub const TYPE_OF_DETECTOR_MOTION: Tag = Tag(0x0054, 0x0202); // (0054,0202)
/// TriggerVector (0054,0210) IS 1-n DICOM
#[rustfmt::skip]
pub const TRIGGER_VECTOR: Tag = Tag(0x0054, 0x0210); // (0054,0210)
/// NumberOfTriggersInPhase (0054,0211) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_TRIGGERS_IN_PHASE: Tag = Tag(0x0054, 0x0211); // (0054,0211)
/// ViewCodeSequence (0054,0220) SQ 1 DICOM
#[rustfmt::skip]
pub const VIEW_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0220); // (0054,0220)
/// ViewModifierCodeSequence (0054,0222) SQ 1 DICOM
#[rustfmt::skip]
pub const VIEW_MODIFIER_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0222); // (0054,0222)
/// RadionuclideCodeSequence (0054,0300) SQ 1 DICOM
#[rustfmt::skip]
pub const RADIONUCLIDE_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0300); // (0054,0300)
/// AdministrationRouteCodeSequence (0054,0302) SQ 1 DICOM
#[rustfmt::skip]
pub const ADMINISTRATION_ROUTE_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0302); // (0054,0302)
/// RadiopharmaceuticalCodeSequence (0054,0304) SQ 1 DICOM
#[rustfmt::skip]
pub const RADIOPHARMACEUTICAL_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0304); // (0054,0304)
/// CalibrationDataSequence (0054,0306) SQ 1 DICOM
#[rustfmt::skip]
pub const CALIBRATION_DATA_SEQUENCE: Tag = Tag(0x0054, 0x0306); // (0054,0306)
/// EnergyWindowNumber (0054,0308) US 1 DICOM
#[rustfmt::skip]
pub const ENERGY_WINDOW_NUMBER: Tag = Tag(0x0054, 0x0308); // (0054,0308)
/// ImageID (0054,0400) SH 1 DICOM
#[rustfmt::skip]
pub const IMAGE_ID: Tag = Tag(0x0054, 0x0400); // (0054,0400)
/// PatientOrientationCodeSequence (0054,0410) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ORIENTATION_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0410); // (0054,0410)
/// PatientOrientationModifierCodeSequence (0054,0412) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0412); // (0054,0412)
/// PatientGantryRelationshipCodeSequence (0054,0414) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE: Tag = Tag(0x0054, 0x0414); // (0054,0414)
/// SliceProgressionDirection (0054,0500) CS 1 DICOM
#[rustfmt::skip]
pub const SLICE_PROGRESSION_DIRECTION: Tag = Tag(0x0054, 0x0500); // (0054,0500)
/// ScanProgressionDirection (0054,0501) CS 1 DICOM
#[rustfmt::skip]
pub const SCAN_PROGRESSION_DIRECTION: Tag = Tag(0x0054, 0x0501); // (0054,0501)
/// SeriesType (0054,1000) CS 2 DICOM
#[rustfmt::skip]
pub const SERIES_TYPE: Tag = Tag(0x0054, 0x1000); // (0054,1000)
/// Units (0054,1001) CS 1 DICOM
#[rustfmt::skip]
pub const UNITS: Tag = Tag(0x0054, 0x1001); // (0054,1001)
/// CountsSource (0054,1002) CS 1 DICOM
#[rustfmt::skip]
pub const COUNTS_SOURCE: Tag = Tag(0x0054, 0x1002); // (0054,1002)
/// ReprojectionMethod (0054,1004) CS 1 DICOM
#[rustfmt::skip]
pub const REPROJECTION_METHOD: Tag = Tag(0x0054, 0x1004); // (0054,1004)
/// SUVType (0054,1006) CS 1 DICOM
#[rustfmt::skip]
pub const SUV_TYPE: Tag = Tag(0x0054, 0x1006); // (0054,1006)
/// RandomsCorrectionMethod (0054,1100) CS 1 DICOM
#[rustfmt::skip]
pub const RANDOMS_CORRECTION_METHOD: Tag = Tag(0x0054, 0x1100); // (0054,1100)
/// AttenuationCorrectionMethod (0054,1101) LO 1 DICOM
#[rustfmt::skip]
pub const ATTENUATION_CORRECTION_METHOD: Tag = Tag(0x0054, 0x1101); // (0054,1101)
/// DecayCorrection (0054,1102) CS 1 DICOM
#[rustfmt::skip]
pub const DECAY_CORRECTION: Tag = Tag(0x0054, 0x1102); // (0054,1102)
/// ReconstructionMethod (0054,1103) LO 1 DICOM
#[rustfmt::skip]
pub const RECONSTRUCTION_METHOD: Tag = Tag(0x0054, 0x1103); // (0054,1103)
/// DetectorLinesOfResponseUsed (0054,1104) LO 1 DICOM
#[rustfmt::skip]
pub const DETECTOR_LINES_OF_RESPONSE_USED: Tag = Tag(0x0054, 0x1104); // (0054,1104)
/// ScatterCorrectionMethod (0054,1105) LO 1 DICOM
#[rustfmt::skip]
pub const SCATTER_CORRECTION_METHOD: Tag = Tag(0x0054, 0x1105); // (0054,1105)
/// AxialAcceptance (0054,1200) DS 1 DICOM
#[rustfmt::skip]
pub const AXIAL_ACCEPTANCE: Tag = Tag(0x0054, 0x1200); // (0054,1200)
/// AxialMash (0054,1201) IS 2 DICOM
#[rustfmt::skip]
pub const AXIAL_MASH: Tag = Tag(0x0054, 0x1201); // (0054,1201)
/// TransverseMash (0054,1202) IS 1 DICOM
#[rustfmt::skip]
pub const TRANSVERSE_MASH: Tag = Tag(0x0054, 0x1202); // (0054,1202)
/// DetectorElementSize (0054,1203) DS 2 DICOM
#[rustfmt::skip]
pub const DETECTOR_ELEMENT_SIZE: Tag = Tag(0x0054, 0x1203); // (0054,1203)
/// CoincidenceWindowWidth (0054,1210) DS 1 DICOM
#[rustfmt::skip]
pub const COINCIDENCE_WINDOW_WIDTH: Tag = Tag(0x0054, 0x1210); // (0054,1210)
/// SecondaryCountsType (0054,1220) CS 1-n DICOM
#[rustfmt::skip]
pub const SECONDARY_COUNTS_TYPE: Tag = Tag(0x0054, 0x1220); // (0054,1220)
/// FrameReferenceTime (0054,1300) DS 1 DICOM
#[rustfmt::skip]
pub const FRAME_REFERENCE_TIME: Tag = Tag(0x0054, 0x1300); // (0054,1300)
/// PrimaryPromptsCountsAccumulated (0054,1310) IS 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_PROMPTS_COUNTS_ACCUMULATED: Tag = Tag(0x0054, 0x1310); // (0054,1310)
/// SecondaryCountsAccumulated (0054,1311) IS 1-n DICOM
#[rustfmt::skip]
pub const SECONDARY_COUNTS_ACCUMULATED: Tag = Tag(0x0054, 0x1311); // (0054,1311)
/// SliceSensitivityFactor (0054,1320) DS 1 DICOM
#[rustfmt::skip]
pub const SLICE_SENSITIVITY_FACTOR: Tag = Tag(0x0054, 0x1320); // (0054,1320)
/// DecayFactor (0054,1321) DS 1 DICOM
#[rustfmt::skip]
pub const DECAY_FACTOR: Tag = Tag(0x0054, 0x1321); // (0054,1321)
/// DoseCalibrationFactor (0054,1322) DS 1 DICOM
#[rustfmt::skip]
pub const DOSE_CALIBRATION_FACTOR: Tag = Tag(0x0054, 0x1322); // (0054,1322)
/// ScatterFractionFactor (0054,1323) DS 1 DICOM
#[rustfmt::skip]
pub const SCATTER_FRACTION_FACTOR: Tag = Tag(0x0054, 0x1323); // (0054,1323)
/// DeadTimeFactor (0054,1324) DS 1 DICOM
#[rustfmt::skip]
pub const DEAD_TIME_FACTOR: Tag = Tag(0x0054, 0x1324); // (0054,1324)
/// ImageIndex (0054,1330) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_INDEX: Tag = Tag(0x0054, 0x1330); // (0054,1330)
/// HistogramSequence (0060,3000) SQ 1 DICOM
#[rustfmt::skip]
pub const HISTOGRAM_SEQUENCE: Tag = Tag(0x0060, 0x3000); // (0060,3000)
/// HistogramNumberOfBins (0060,3002) US 1 DICOM
#[rustfmt::skip]
pub const HISTOGRAM_NUMBER_OF_BINS: Tag = Tag(0x0060, 0x3002); // (0060,3002)
/// HistogramFirstBinValue (0060,3004) US 1 DICOM
#[rustfmt::skip]
pub const HISTOGRAM_FIRST_BIN_VALUE: Tag = Tag(0x0060, 0x3004); // (0060,3004)
/// HistogramLastBinValue (0060,3006) US 1 DICOM
#[rustfmt::skip]
pub const HISTOGRAM_LAST_BIN_VALUE: Tag = Tag(0x0060, 0x3006); // (0060,3006)
/// HistogramBinWidth (0060,3008) US 1 DICOM
#[rustfmt::skip]
pub const HISTOGRAM_BIN_WIDTH: Tag = Tag(0x0060, 0x3008); // (0060,3008)
/// HistogramExplanation (0060,3010) LO 1 DICOM
#[rustfmt::skip]
pub const HISTOGRAM_EXPLANATION: Tag = Tag(0x0060, 0x3010); // (0060,3010)
/// HistogramData (0060,3020) UL 1-n DICOM
#[rustfmt::skip]
pub const HISTOGRAM_DATA: Tag = Tag(0x0060, 0x3020); // (0060,3020)
/// SegmentationType (0062,0001) CS 1 DICOM
#[rustfmt::skip]
pub const SEGMENTATION_TYPE: Tag = Tag(0x0062, 0x0001); // (0062,0001)
/// SegmentSequence (0062,0002) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_SEQUENCE: Tag = Tag(0x0062, 0x0002); // (0062,0002)
/// SegmentedPropertyCategoryCodeSequence (0062,0003) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE: Tag = Tag(0x0062, 0x0003); // (0062,0003)
/// SegmentNumber (0062,0004) US 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_NUMBER: Tag = Tag(0x0062, 0x0004); // (0062,0004)
/// SegmentLabel (0062,0005) LO 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_LABEL: Tag = Tag(0x0062, 0x0005); // (0062,0005)
/// SegmentDescription (0062,0006) ST 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_DESCRIPTION: Tag = Tag(0x0062, 0x0006); // (0062,0006)
/// SegmentationAlgorithmIdentificationSequence (0062,0007) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENTATION_ALGORITHM_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0062, 0x0007); // (0062,0007)
/// SegmentAlgorithmType (0062,0008) CS 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_ALGORITHM_TYPE: Tag = Tag(0x0062, 0x0008); // (0062,0008)
/// SegmentAlgorithmName (0062,0009) LO 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_ALGORITHM_NAME: Tag = Tag(0x0062, 0x0009); // (0062,0009)
/// SegmentIdentificationSequence (0062,000A) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0062, 0x000A); // (0062,000A)
/// ReferencedSegmentNumber (0062,000B) US 1-n DICOM
#[rustfmt::skip]
pub const REFERENCED_SEGMENT_NUMBER: Tag = Tag(0x0062, 0x000B); // (0062,000B)
/// RecommendedDisplayGrayscaleValue (0062,000C) US 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_DISPLAY_GRAYSCALE_VALUE: Tag = Tag(0x0062, 0x000C); // (0062,000C)
/// RecommendedDisplayCIELabValue (0062,000D) US 3 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_DISPLAY_CIE_LAB_VALUE: Tag = Tag(0x0062, 0x000D); // (0062,000D)
/// MaximumFractionalValue (0062,000E) US 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_FRACTIONAL_VALUE: Tag = Tag(0x0062, 0x000E); // (0062,000E)
/// SegmentedPropertyTypeCodeSequence (0062,000F) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE: Tag = Tag(0x0062, 0x000F); // (0062,000F)
/// SegmentationFractionalType (0062,0010) CS 1 DICOM
#[rustfmt::skip]
pub const SEGMENTATION_FRACTIONAL_TYPE: Tag = Tag(0x0062, 0x0010); // (0062,0010)
/// SegmentedPropertyTypeModifierCodeSequence (0062,0011) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENTED_PROPERTY_TYPE_MODIFIER_CODE_SEQUENCE: Tag = Tag(0x0062, 0x0011); // (0062,0011)
/// UsedSegmentsSequence (0062,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const USED_SEGMENTS_SEQUENCE: Tag = Tag(0x0062, 0x0012); // (0062,0012)
/// TrackingID (0062,0020) UT 1 DICOM
#[rustfmt::skip]
pub const TRACKING_ID: Tag = Tag(0x0062, 0x0020); // (0062,0020)
/// TrackingUID (0062,0021) UI 1 DICOM
#[rustfmt::skip]
pub const TRACKING_UID: Tag = Tag(0x0062, 0x0021); // (0062,0021)
/// DeformableRegistrationSequence (0064,0002) SQ 1 DICOM
#[rustfmt::skip]
pub const DEFORMABLE_REGISTRATION_SEQUENCE: Tag = Tag(0x0064, 0x0002); // (0064,0002)
/// SourceFrameOfReferenceUID (0064,0003) UI 1 DICOM
#[rustfmt::skip]
pub const SOURCE_FRAME_OF_REFERENCE_UID: Tag = Tag(0x0064, 0x0003); // (0064,0003)
/// DeformableRegistrationGridSequence (0064,0005) SQ 1 DICOM
#[rustfmt::skip]
pub const DEFORMABLE_REGISTRATION_GRID_SEQUENCE: Tag = Tag(0x0064, 0x0005); // (0064,0005)
/// GridDimensions (0064,0007) UL 3 DICOM
#[rustfmt::skip]
pub const GRID_DIMENSIONS: Tag = Tag(0x0064, 0x0007); // (0064,0007)
/// GridResolution (0064,0008) FD 3 DICOM
#[rustfmt::skip]
pub const GRID_RESOLUTION: Tag = Tag(0x0064, 0x0008); // (0064,0008)
/// VectorGridData (0064,0009) OF 1 DICOM
#[rustfmt::skip]
pub const VECTOR_GRID_DATA: Tag = Tag(0x0064, 0x0009); // (0064,0009)
/// PreDeformationMatrixRegistrationSequence (0064,000F) SQ 1 DICOM
#[rustfmt::skip]
pub const PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE: Tag = Tag(0x0064, 0x000F); // (0064,000F)
/// PostDeformationMatrixRegistrationSequence (0064,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE: Tag = Tag(0x0064, 0x0010); // (0064,0010)
/// NumberOfSurfaces (0066,0001) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SURFACES: Tag = Tag(0x0066, 0x0001); // (0066,0001)
/// SurfaceSequence (0066,0002) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_SEQUENCE: Tag = Tag(0x0066, 0x0002); // (0066,0002)
/// SurfaceNumber (0066,0003) UL 1 DICOM
#[rustfmt::skip]
pub const SURFACE_NUMBER: Tag = Tag(0x0066, 0x0003); // (0066,0003)
/// SurfaceComments (0066,0004) LT 1 DICOM
#[rustfmt::skip]
pub const SURFACE_COMMENTS: Tag = Tag(0x0066, 0x0004); // (0066,0004)
/// SurfaceProcessing (0066,0009) CS 1 DICOM
#[rustfmt::skip]
pub const SURFACE_PROCESSING: Tag = Tag(0x0066, 0x0009); // (0066,0009)
/// SurfaceProcessingRatio (0066,000A) FL 1 DICOM
#[rustfmt::skip]
pub const SURFACE_PROCESSING_RATIO: Tag = Tag(0x0066, 0x000A); // (0066,000A)
/// SurfaceProcessingDescription (0066,000B) LO 1 DICOM
#[rustfmt::skip]
pub const SURFACE_PROCESSING_DESCRIPTION: Tag = Tag(0x0066, 0x000B); // (0066,000B)
/// RecommendedPresentationOpacity (0066,000C) FL 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_PRESENTATION_OPACITY: Tag = Tag(0x0066, 0x000C); // (0066,000C)
/// RecommendedPresentationType (0066,000D) CS 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_PRESENTATION_TYPE: Tag = Tag(0x0066, 0x000D); // (0066,000D)
/// FiniteVolume (0066,000E) CS 1 DICOM
#[rustfmt::skip]
pub const FINITE_VOLUME: Tag = Tag(0x0066, 0x000E); // (0066,000E)
/// Manifold (0066,0010) CS 1 DICOM
#[rustfmt::skip]
pub const MANIFOLD: Tag = Tag(0x0066, 0x0010); // (0066,0010)
/// SurfacePointsSequence (0066,0011) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_POINTS_SEQUENCE: Tag = Tag(0x0066, 0x0011); // (0066,0011)
/// SurfacePointsNormalsSequence (0066,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_POINTS_NORMALS_SEQUENCE: Tag = Tag(0x0066, 0x0012); // (0066,0012)
/// SurfaceMeshPrimitivesSequence (0066,0013) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_MESH_PRIMITIVES_SEQUENCE: Tag = Tag(0x0066, 0x0013); // (0066,0013)
/// NumberOfSurfacePoints (0066,0015) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SURFACE_POINTS: Tag = Tag(0x0066, 0x0015); // (0066,0015)
/// PointCoordinatesData (0066,0016) OF 1 DICOM
#[rustfmt::skip]
pub const POINT_COORDINATES_DATA: Tag = Tag(0x0066, 0x0016); // (0066,0016)
/// PointPositionAccuracy (0066,0017) FL 3 DICOM
#[rustfmt::skip]
pub const POINT_POSITION_ACCURACY: Tag = Tag(0x0066, 0x0017); // (0066,0017)
/// MeanPointDistance (0066,0018) FL 1 DICOM
#[rustfmt::skip]
pub const MEAN_POINT_DISTANCE: Tag = Tag(0x0066, 0x0018); // (0066,0018)
/// MaximumPointDistance (0066,0019) FL 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_POINT_DISTANCE: Tag = Tag(0x0066, 0x0019); // (0066,0019)
/// PointsBoundingBoxCoordinates (0066,001A) FL 6 DICOM
#[rustfmt::skip]
pub const POINTS_BOUNDING_BOX_COORDINATES: Tag = Tag(0x0066, 0x001A); // (0066,001A)
/// AxisOfRotation (0066,001B) FL 3 DICOM
#[rustfmt::skip]
pub const AXIS_OF_ROTATION: Tag = Tag(0x0066, 0x001B); // (0066,001B)
/// CenterOfRotation (0066,001C) FL 3 DICOM
#[rustfmt::skip]
pub const CENTER_OF_ROTATION: Tag = Tag(0x0066, 0x001C); // (0066,001C)
/// NumberOfVectors (0066,001E) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_VECTORS: Tag = Tag(0x0066, 0x001E); // (0066,001E)
/// VectorDimensionality (0066,001F) US 1 DICOM
#[rustfmt::skip]
pub const VECTOR_DIMENSIONALITY: Tag = Tag(0x0066, 0x001F); // (0066,001F)
/// VectorAccuracy (0066,0020) FL 1-n DICOM
#[rustfmt::skip]
pub const VECTOR_ACCURACY: Tag = Tag(0x0066, 0x0020); // (0066,0020)
/// VectorCoordinateData (0066,0021) OF 1 DICOM
#[rustfmt::skip]
pub const VECTOR_COORDINATE_DATA: Tag = Tag(0x0066, 0x0021); // (0066,0021)
/// TriangleStripSequence (0066,0026) SQ 1 DICOM
#[rustfmt::skip]
pub const TRIANGLE_STRIP_SEQUENCE: Tag = Tag(0x0066, 0x0026); // (0066,0026)
/// TriangleFanSequence (0066,0027) SQ 1 DICOM
#[rustfmt::skip]
pub const TRIANGLE_FAN_SEQUENCE: Tag = Tag(0x0066, 0x0027); // (0066,0027)
/// LineSequence (0066,0028) SQ 1 DICOM
#[rustfmt::skip]
pub const LINE_SEQUENCE: Tag = Tag(0x0066, 0x0028); // (0066,0028)
/// SurfaceCount (0066,002A) UL 1 DICOM
#[rustfmt::skip]
pub const SURFACE_COUNT: Tag = Tag(0x0066, 0x002A); // (0066,002A)
/// ReferencedSurfaceSequence (0066,002B) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SURFACE_SEQUENCE: Tag = Tag(0x0066, 0x002B); // (0066,002B)
/// ReferencedSurfaceNumber (0066,002C) UL 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SURFACE_NUMBER: Tag = Tag(0x0066, 0x002C); // (0066,002C)
/// SegmentSurfaceGenerationAlgorithmIdentificationSequence (0066,002D) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0066, 0x002D); // (0066,002D)
/// SegmentSurfaceSourceInstanceSequence (0066,002E) SQ 1 DICOM
#[rustfmt::skip]
pub const SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE: Tag = Tag(0x0066, 0x002E); // (0066,002E)
/// AlgorithmFamilyCodeSequence (0066,002F) SQ 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_FAMILY_CODE_SEQUENCE: Tag = Tag(0x0066, 0x002F); // (0066,002F)
/// AlgorithmNameCodeSequence (0066,0030) SQ 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_NAME_CODE_SEQUENCE: Tag = Tag(0x0066, 0x0030); // (0066,0030)
/// AlgorithmVersion (0066,0031) LO 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_VERSION: Tag = Tag(0x0066, 0x0031); // (0066,0031)
/// AlgorithmParameters (0066,0032) LT 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_PARAMETERS: Tag = Tag(0x0066, 0x0032); // (0066,0032)
/// FacetSequence (0066,0034) SQ 1 DICOM
#[rustfmt::skip]
pub const FACET_SEQUENCE: Tag = Tag(0x0066, 0x0034); // (0066,0034)
/// SurfaceProcessingAlgorithmIdentificationSequence (0066,0035) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0066, 0x0035); // (0066,0035)
/// AlgorithmName (0066,0036) LO 1 DICOM
#[rustfmt::skip]
pub const ALGORITHM_NAME: Tag = Tag(0x0066, 0x0036); // (0066,0036)
/// RecommendedPointRadius (0066,0037) FL 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_POINT_RADIUS: Tag = Tag(0x0066, 0x0037); // (0066,0037)
/// RecommendedLineThickness (0066,0038) FL 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_LINE_THICKNESS: Tag = Tag(0x0066, 0x0038); // (0066,0038)
/// LongPrimitivePointIndexList (0066,0040) OL 1 DICOM
#[rustfmt::skip]
pub const LONG_PRIMITIVE_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0040); // (0066,0040)
/// LongTrianglePointIndexList (0066,0041) OL 1 DICOM
#[rustfmt::skip]
pub const LONG_TRIANGLE_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0041); // (0066,0041)
/// LongEdgePointIndexList (0066,0042) OL 1 DICOM
#[rustfmt::skip]
pub const LONG_EDGE_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0042); // (0066,0042)
/// LongVertexPointIndexList (0066,0043) OL 1 DICOM
#[rustfmt::skip]
pub const LONG_VERTEX_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0043); // (0066,0043)
/// TrackSetSequence (0066,0101) SQ 1 DICOM
#[rustfmt::skip]
pub const TRACK_SET_SEQUENCE: Tag = Tag(0x0066, 0x0101); // (0066,0101)
/// TrackSequence (0066,0102) SQ 1 DICOM
#[rustfmt::skip]
pub const TRACK_SEQUENCE: Tag = Tag(0x0066, 0x0102); // (0066,0102)
/// RecommendedDisplayCIELabValueList (0066,0103) OW 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_DISPLAY_CIE_LAB_VALUE_LIST: Tag = Tag(0x0066, 0x0103); // (0066,0103)
/// TrackingAlgorithmIdentificationSequence (0066,0104) SQ 1 DICOM
#[rustfmt::skip]
pub const TRACKING_ALGORITHM_IDENTIFICATION_SEQUENCE: Tag = Tag(0x0066, 0x0104); // (0066,0104)
/// TrackSetNumber (0066,0105) UL 1 DICOM
#[rustfmt::skip]
pub const TRACK_SET_NUMBER: Tag = Tag(0x0066, 0x0105); // (0066,0105)
/// TrackSetLabel (0066,0106) LO 1 DICOM
#[rustfmt::skip]
pub const TRACK_SET_LABEL: Tag = Tag(0x0066, 0x0106); // (0066,0106)
/// TrackSetDescription (0066,0107) UT 1 DICOM
#[rustfmt::skip]
pub const TRACK_SET_DESCRIPTION: Tag = Tag(0x0066, 0x0107); // (0066,0107)
/// TrackSetAnatomicalTypeCodeSequence (0066,0108) SQ 1 DICOM
#[rustfmt::skip]
pub const TRACK_SET_ANATOMICAL_TYPE_CODE_SEQUENCE: Tag = Tag(0x0066, 0x0108); // (0066,0108)
/// MeasurementsSequence (0066,0121) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENTS_SEQUENCE: Tag = Tag(0x0066, 0x0121); // (0066,0121)
/// TrackSetStatisticsSequence (0066,0124) SQ 1 DICOM
#[rustfmt::skip]
pub const TRACK_SET_STATISTICS_SEQUENCE: Tag = Tag(0x0066, 0x0124); // (0066,0124)
/// FloatingPointValues (0066,0125) OF 1 DICOM
#[rustfmt::skip]
pub const FLOATING_POINT_VALUES: Tag = Tag(0x0066, 0x0125); // (0066,0125)
/// TrackPointIndexList (0066,0129) OL 1 DICOM
#[rustfmt::skip]
pub const TRACK_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0129); // (0066,0129)
/// TrackStatisticsSequence (0066,0130) SQ 1 DICOM
#[rustfmt::skip]
pub const TRACK_STATISTICS_SEQUENCE: Tag = Tag(0x0066, 0x0130); // (0066,0130)
/// MeasurementValuesSequence (0066,0132) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASUREMENT_VALUES_SEQUENCE: Tag = Tag(0x0066, 0x0132); // (0066,0132)
/// DiffusionAcquisitionCodeSequence (0066,0133) SQ 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_ACQUISITION_CODE_SEQUENCE: Tag = Tag(0x0066, 0x0133); // (0066,0133)
/// DiffusionModelCodeSequence (0066,0134) SQ 1 DICOM
#[rustfmt::skip]
pub const DIFFUSION_MODEL_CODE_SEQUENCE: Tag = Tag(0x0066, 0x0134); // (0066,0134)
/// ImplantSize (0068,6210) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_SIZE: Tag = Tag(0x0068, 0x6210); // (0068,6210)
/// ImplantTemplateVersion (0068,6221) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_VERSION: Tag = Tag(0x0068, 0x6221); // (0068,6221)
/// ReplacedImplantTemplateSequence (0068,6222) SQ 1 DICOM
#[rustfmt::skip]
pub const REPLACED_IMPLANT_TEMPLATE_SEQUENCE: Tag = Tag(0x0068, 0x6222); // (0068,6222)
/// ImplantType (0068,6223) CS 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TYPE: Tag = Tag(0x0068, 0x6223); // (0068,6223)
/// DerivationImplantTemplateSequence (0068,6224) SQ 1 DICOM
#[rustfmt::skip]
pub const DERIVATION_IMPLANT_TEMPLATE_SEQUENCE: Tag = Tag(0x0068, 0x6224); // (0068,6224)
/// OriginalImplantTemplateSequence (0068,6225) SQ 1 DICOM
#[rustfmt::skip]
pub const ORIGINAL_IMPLANT_TEMPLATE_SEQUENCE: Tag = Tag(0x0068, 0x6225); // (0068,6225)
/// EffectiveDateTime (0068,6226) DT 1 DICOM
#[rustfmt::skip]
pub const EFFECTIVE_DATE_TIME: Tag = Tag(0x0068, 0x6226); // (0068,6226)
/// ImplantTargetAnatomySequence (0068,6230) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TARGET_ANATOMY_SEQUENCE: Tag = Tag(0x0068, 0x6230); // (0068,6230)
/// InformationFromManufacturerSequence (0068,6260) SQ 1 DICOM
#[rustfmt::skip]
pub const INFORMATION_FROM_MANUFACTURER_SEQUENCE: Tag = Tag(0x0068, 0x6260); // (0068,6260)
/// NotificationFromManufacturerSequence (0068,6265) SQ 1 DICOM
#[rustfmt::skip]
pub const NOTIFICATION_FROM_MANUFACTURER_SEQUENCE: Tag = Tag(0x0068, 0x6265); // (0068,6265)
/// InformationIssueDateTime (0068,6270) DT 1 DICOM
#[rustfmt::skip]
pub const INFORMATION_ISSUE_DATE_TIME: Tag = Tag(0x0068, 0x6270); // (0068,6270)
/// InformationSummary (0068,6280) ST 1 DICOM
#[rustfmt::skip]
pub const INFORMATION_SUMMARY: Tag = Tag(0x0068, 0x6280); // (0068,6280)
/// ImplantRegulatoryDisapprovalCodeSequence (0068,62A0) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_REGULATORY_DISAPPROVAL_CODE_SEQUENCE: Tag = Tag(0x0068, 0x62A0); // (0068,62A0)
/// OverallTemplateSpatialTolerance (0068,62A5) FD 1 DICOM
#[rustfmt::skip]
pub const OVERALL_TEMPLATE_SPATIAL_TOLERANCE: Tag = Tag(0x0068, 0x62A5); // (0068,62A5)
/// HPGLDocumentSequence (0068,62C0) SQ 1 DICOM
#[rustfmt::skip]
pub const HPGL_DOCUMENT_SEQUENCE: Tag = Tag(0x0068, 0x62C0); // (0068,62C0)
/// HPGLDocumentID (0068,62D0) US 1 DICOM
#[rustfmt::skip]
pub const HPGL_DOCUMENT_ID: Tag = Tag(0x0068, 0x62D0); // (0068,62D0)
/// HPGLDocumentLabel (0068,62D5) LO 1 DICOM
#[rustfmt::skip]
pub const HPGL_DOCUMENT_LABEL: Tag = Tag(0x0068, 0x62D5); // (0068,62D5)
/// ViewOrientationCodeSequence (0068,62E0) SQ 1 DICOM
#[rustfmt::skip]
pub const VIEW_ORIENTATION_CODE_SEQUENCE: Tag = Tag(0x0068, 0x62E0); // (0068,62E0)
/// ViewOrientationModifierCodeSequence (0068,62F0) SQ 1 DICOM
#[rustfmt::skip]
pub const VIEW_ORIENTATION_MODIFIER_CODE_SEQUENCE: Tag = Tag(0x0068, 0x62F0); // (0068,62F0)
/// HPGLDocumentScaling (0068,62F2) FD 1 DICOM
#[rustfmt::skip]
pub const HPGL_DOCUMENT_SCALING: Tag = Tag(0x0068, 0x62F2); // (0068,62F2)
/// HPGLDocument (0068,6300) OB 1 DICOM
#[rustfmt::skip]
pub const HPGL_DOCUMENT: Tag = Tag(0x0068, 0x6300); // (0068,6300)
/// HPGLContourPenNumber (0068,6310) US 1 DICOM
#[rustfmt::skip]
pub const HPGL_CONTOUR_PEN_NUMBER: Tag = Tag(0x0068, 0x6310); // (0068,6310)
/// HPGLPenSequence (0068,6320) SQ 1 DICOM
#[rustfmt::skip]
pub const HPGL_PEN_SEQUENCE: Tag = Tag(0x0068, 0x6320); // (0068,6320)
/// HPGLPenNumber (0068,6330) US 1 DICOM
#[rustfmt::skip]
pub const HPGL_PEN_NUMBER: Tag = Tag(0x0068, 0x6330); // (0068,6330)
/// HPGLPenLabel (0068,6340) LO 1 DICOM
#[rustfmt::skip]
pub const HPGL_PEN_LABEL: Tag = Tag(0x0068, 0x6340); // (0068,6340)
/// HPGLPenDescription (0068,6345) ST 1 DICOM
#[rustfmt::skip]
pub const HPGL_PEN_DESCRIPTION: Tag = Tag(0x0068, 0x6345); // (0068,6345)
/// RecommendedRotationPoint (0068,6346) FD 2 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_ROTATION_POINT: Tag = Tag(0x0068, 0x6346); // (0068,6346)
/// BoundingRectangle (0068,6347) FD 4 DICOM
#[rustfmt::skip]
pub const BOUNDING_RECTANGLE: Tag = Tag(0x0068, 0x6347); // (0068,6347)
/// ImplantTemplate3DModelSurfaceNumber (0068,6350) US 1-n DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE3_D_MODEL_SURFACE_NUMBER: Tag = Tag(0x0068, 0x6350); // (0068,6350)
/// SurfaceModelDescriptionSequence (0068,6360) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_MODEL_DESCRIPTION_SEQUENCE: Tag = Tag(0x0068, 0x6360); // (0068,6360)
/// SurfaceModelLabel (0068,6380) LO 1 DICOM
#[rustfmt::skip]
pub const SURFACE_MODEL_LABEL: Tag = Tag(0x0068, 0x6380); // (0068,6380)
/// SurfaceModelScalingFactor (0068,6390) FD 1 DICOM
#[rustfmt::skip]
pub const SURFACE_MODEL_SCALING_FACTOR: Tag = Tag(0x0068, 0x6390); // (0068,6390)
/// MaterialsCodeSequence (0068,63A0) SQ 1 DICOM
#[rustfmt::skip]
pub const MATERIALS_CODE_SEQUENCE: Tag = Tag(0x0068, 0x63A0); // (0068,63A0)
/// CoatingMaterialsCodeSequence (0068,63A4) SQ 1 DICOM
#[rustfmt::skip]
pub const COATING_MATERIALS_CODE_SEQUENCE: Tag = Tag(0x0068, 0x63A4); // (0068,63A4)
/// ImplantTypeCodeSequence (0068,63A8) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0068, 0x63A8); // (0068,63A8)
/// FixationMethodCodeSequence (0068,63AC) SQ 1 DICOM
#[rustfmt::skip]
pub const FIXATION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0068, 0x63AC); // (0068,63AC)
/// MatingFeatureSetsSequence (0068,63B0) SQ 1 DICOM
#[rustfmt::skip]
pub const MATING_FEATURE_SETS_SEQUENCE: Tag = Tag(0x0068, 0x63B0); // (0068,63B0)
/// MatingFeatureSetID (0068,63C0) US 1 DICOM
#[rustfmt::skip]
pub const MATING_FEATURE_SET_ID: Tag = Tag(0x0068, 0x63C0); // (0068,63C0)
/// MatingFeatureSetLabel (0068,63D0) LO 1 DICOM
#[rustfmt::skip]
pub const MATING_FEATURE_SET_LABEL: Tag = Tag(0x0068, 0x63D0); // (0068,63D0)
/// MatingFeatureSequence (0068,63E0) SQ 1 DICOM
#[rustfmt::skip]
pub const MATING_FEATURE_SEQUENCE: Tag = Tag(0x0068, 0x63E0); // (0068,63E0)
/// MatingFeatureID (0068,63F0) US 1 DICOM
#[rustfmt::skip]
pub const MATING_FEATURE_ID: Tag = Tag(0x0068, 0x63F0); // (0068,63F0)
/// MatingFeatureDegreeOfFreedomSequence (0068,6400) SQ 1 DICOM
#[rustfmt::skip]
pub const MATING_FEATURE_DEGREE_OF_FREEDOM_SEQUENCE: Tag = Tag(0x0068, 0x6400); // (0068,6400)
/// DegreeOfFreedomID (0068,6410) US 1 DICOM
#[rustfmt::skip]
pub const DEGREE_OF_FREEDOM_ID: Tag = Tag(0x0068, 0x6410); // (0068,6410)
/// DegreeOfFreedomType (0068,6420) CS 1 DICOM
#[rustfmt::skip]
pub const DEGREE_OF_FREEDOM_TYPE: Tag = Tag(0x0068, 0x6420); // (0068,6420)
/// TwoDMatingFeatureCoordinatesSequence (0068,6430) SQ 1 DICOM
#[rustfmt::skip]
pub const TWO_D_MATING_FEATURE_COORDINATES_SEQUENCE: Tag = Tag(0x0068, 0x6430); // (0068,6430)
/// ReferencedHPGLDocumentID (0068,6440) US 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_HPGL_DOCUMENT_ID: Tag = Tag(0x0068, 0x6440); // (0068,6440)
/// TwoDMatingPoint (0068,6450) FD 2 DICOM
#[rustfmt::skip]
pub const TWO_D_MATING_POINT: Tag = Tag(0x0068, 0x6450); // (0068,6450)
/// TwoDMatingAxes (0068,6460) FD 4 DICOM
#[rustfmt::skip]
pub const TWO_D_MATING_AXES: Tag = Tag(0x0068, 0x6460); // (0068,6460)
/// TwoDDegreeOfFreedomSequence (0068,6470) SQ 1 DICOM
#[rustfmt::skip]
pub const TWO_D_DEGREE_OF_FREEDOM_SEQUENCE: Tag = Tag(0x0068, 0x6470); // (0068,6470)
/// ThreeDDegreeOfFreedomAxis (0068,6490) FD 3 DICOM
#[rustfmt::skip]
pub const THREE_D_DEGREE_OF_FREEDOM_AXIS: Tag = Tag(0x0068, 0x6490); // (0068,6490)
/// RangeOfFreedom (0068,64A0) FD 2 DICOM
#[rustfmt::skip]
pub const RANGE_OF_FREEDOM: Tag = Tag(0x0068, 0x64A0); // (0068,64A0)
/// ThreeDMatingPoint (0068,64C0) FD 3 DICOM
#[rustfmt::skip]
pub const THREE_D_MATING_POINT: Tag = Tag(0x0068, 0x64C0); // (0068,64C0)
/// ThreeDMatingAxes (0068,64D0) FD 9 DICOM
#[rustfmt::skip]
pub const THREE_D_MATING_AXES: Tag = Tag(0x0068, 0x64D0); // (0068,64D0)
/// TwoDDegreeOfFreedomAxis (0068,64F0) FD 3 DICOM
#[rustfmt::skip]
pub const TWO_D_DEGREE_OF_FREEDOM_AXIS: Tag = Tag(0x0068, 0x64F0); // (0068,64F0)
/// PlanningLandmarkPointSequence (0068,6500) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANNING_LANDMARK_POINT_SEQUENCE: Tag = Tag(0x0068, 0x6500); // (0068,6500)
/// PlanningLandmarkLineSequence (0068,6510) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANNING_LANDMARK_LINE_SEQUENCE: Tag = Tag(0x0068, 0x6510); // (0068,6510)
/// PlanningLandmarkPlaneSequence (0068,6520) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANNING_LANDMARK_PLANE_SEQUENCE: Tag = Tag(0x0068, 0x6520); // (0068,6520)
/// PlanningLandmarkID (0068,6530) US 1 DICOM
#[rustfmt::skip]
pub const PLANNING_LANDMARK_ID: Tag = Tag(0x0068, 0x6530); // (0068,6530)
/// PlanningLandmarkDescription (0068,6540) LO 1 DICOM
#[rustfmt::skip]
pub const PLANNING_LANDMARK_DESCRIPTION: Tag = Tag(0x0068, 0x6540); // (0068,6540)
/// PlanningLandmarkIdentificationCodeSequence (0068,6545) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANNING_LANDMARK_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x0068, 0x6545); // (0068,6545)
/// TwoDPointCoordinatesSequence (0068,6550) SQ 1 DICOM
#[rustfmt::skip]
pub const TWO_D_POINT_COORDINATES_SEQUENCE: Tag = Tag(0x0068, 0x6550); // (0068,6550)
/// TwoDPointCoordinates (0068,6560) FD 2 DICOM
#[rustfmt::skip]
pub const TWO_D_POINT_COORDINATES: Tag = Tag(0x0068, 0x6560); // (0068,6560)
/// ThreeDPointCoordinates (0068,6590) FD 3 DICOM
#[rustfmt::skip]
pub const THREE_D_POINT_COORDINATES: Tag = Tag(0x0068, 0x6590); // (0068,6590)
/// TwoDLineCoordinatesSequence (0068,65A0) SQ 1 DICOM
#[rustfmt::skip]
pub const TWO_D_LINE_COORDINATES_SEQUENCE: Tag = Tag(0x0068, 0x65A0); // (0068,65A0)
/// TwoDLineCoordinates (0068,65B0) FD 4 DICOM
#[rustfmt::skip]
pub const TWO_D_LINE_COORDINATES: Tag = Tag(0x0068, 0x65B0); // (0068,65B0)
/// ThreeDLineCoordinates (0068,65D0) FD 6 DICOM
#[rustfmt::skip]
pub const THREE_D_LINE_COORDINATES: Tag = Tag(0x0068, 0x65D0); // (0068,65D0)
/// TwoDPlaneCoordinatesSequence (0068,65E0) SQ 1 DICOM
#[rustfmt::skip]
pub const TWO_D_PLANE_COORDINATES_SEQUENCE: Tag = Tag(0x0068, 0x65E0); // (0068,65E0)
/// TwoDPlaneIntersection (0068,65F0) FD 4 DICOM
#[rustfmt::skip]
pub const TWO_D_PLANE_INTERSECTION: Tag = Tag(0x0068, 0x65F0); // (0068,65F0)
/// ThreeDPlaneOrigin (0068,6610) FD 3 DICOM
#[rustfmt::skip]
pub const THREE_D_PLANE_ORIGIN: Tag = Tag(0x0068, 0x6610); // (0068,6610)
/// ThreeDPlaneNormal (0068,6620) FD 3 DICOM
#[rustfmt::skip]
pub const THREE_D_PLANE_NORMAL: Tag = Tag(0x0068, 0x6620); // (0068,6620)
/// GraphicAnnotationSequence (0070,0001) SQ 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_ANNOTATION_SEQUENCE: Tag = Tag(0x0070, 0x0001); // (0070,0001)
/// GraphicLayer (0070,0002) CS 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_LAYER: Tag = Tag(0x0070, 0x0002); // (0070,0002)
/// BoundingBoxAnnotationUnits (0070,0003) CS 1 DICOM
#[rustfmt::skip]
pub const BOUNDING_BOX_ANNOTATION_UNITS: Tag = Tag(0x0070, 0x0003); // (0070,0003)
/// AnchorPointAnnotationUnits (0070,0004) CS 1 DICOM
#[rustfmt::skip]
pub const ANCHOR_POINT_ANNOTATION_UNITS: Tag = Tag(0x0070, 0x0004); // (0070,0004)
/// GraphicAnnotationUnits (0070,0005) CS 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_ANNOTATION_UNITS: Tag = Tag(0x0070, 0x0005); // (0070,0005)
/// UnformattedTextValue (0070,0006) ST 1 DICOM
#[rustfmt::skip]
pub const UNFORMATTED_TEXT_VALUE: Tag = Tag(0x0070, 0x0006); // (0070,0006)
/// TextObjectSequence (0070,0008) SQ 1 DICOM
#[rustfmt::skip]
pub const TEXT_OBJECT_SEQUENCE: Tag = Tag(0x0070, 0x0008); // (0070,0008)
/// GraphicObjectSequence (0070,0009) SQ 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_OBJECT_SEQUENCE: Tag = Tag(0x0070, 0x0009); // (0070,0009)
/// BoundingBoxTopLeftHandCorner (0070,0010) FL 2 DICOM
#[rustfmt::skip]
pub const BOUNDING_BOX_TOP_LEFT_HAND_CORNER: Tag = Tag(0x0070, 0x0010); // (0070,0010)
/// BoundingBoxBottomRightHandCorner (0070,0011) FL 2 DICOM
#[rustfmt::skip]
pub const BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER: Tag = Tag(0x0070, 0x0011); // (0070,0011)
/// BoundingBoxTextHorizontalJustification (0070,0012) CS 1 DICOM
#[rustfmt::skip]
pub const BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION: Tag = Tag(0x0070, 0x0012); // (0070,0012)
/// AnchorPoint (0070,0014) FL 2 DICOM
#[rustfmt::skip]
pub const ANCHOR_POINT: Tag = Tag(0x0070, 0x0014); // (0070,0014)
/// AnchorPointVisibility (0070,0015) CS 1 DICOM
#[rustfmt::skip]
pub const ANCHOR_POINT_VISIBILITY: Tag = Tag(0x0070, 0x0015); // (0070,0015)
/// GraphicDimensions (0070,0020) US 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_DIMENSIONS: Tag = Tag(0x0070, 0x0020); // (0070,0020)
/// NumberOfGraphicPoints (0070,0021) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_GRAPHIC_POINTS: Tag = Tag(0x0070, 0x0021); // (0070,0021)
/// GraphicData (0070,0022) FL 2-n DICOM
#[rustfmt::skip]
pub const GRAPHIC_DATA: Tag = Tag(0x0070, 0x0022); // (0070,0022)
/// GraphicType (0070,0023) CS 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_TYPE: Tag = Tag(0x0070, 0x0023); // (0070,0023)
/// GraphicFilled (0070,0024) CS 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_FILLED: Tag = Tag(0x0070, 0x0024); // (0070,0024)
/// ImageHorizontalFlip (0070,0041) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_HORIZONTAL_FLIP: Tag = Tag(0x0070, 0x0041); // (0070,0041)
/// ImageRotation (0070,0042) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_ROTATION: Tag = Tag(0x0070, 0x0042); // (0070,0042)
/// DisplayedAreaTopLeftHandCorner (0070,0052) SL 2 DICOM
#[rustfmt::skip]
pub const DISPLAYED_AREA_TOP_LEFT_HAND_CORNER: Tag = Tag(0x0070, 0x0052); // (0070,0052)
/// DisplayedAreaBottomRightHandCorner (0070,0053) SL 2 DICOM
#[rustfmt::skip]
pub const DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER: Tag = Tag(0x0070, 0x0053); // (0070,0053)
/// DisplayedAreaSelectionSequence (0070,005A) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAYED_AREA_SELECTION_SEQUENCE: Tag = Tag(0x0070, 0x005A); // (0070,005A)
/// GraphicLayerSequence (0070,0060) SQ 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_LAYER_SEQUENCE: Tag = Tag(0x0070, 0x0060); // (0070,0060)
/// GraphicLayerOrder (0070,0062) IS 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_LAYER_ORDER: Tag = Tag(0x0070, 0x0062); // (0070,0062)
/// GraphicLayerRecommendedDisplayGrayscaleValue (0070,0066) US 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE: Tag = Tag(0x0070, 0x0066); // (0070,0066)
/// GraphicLayerDescription (0070,0068) LO 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_LAYER_DESCRIPTION: Tag = Tag(0x0070, 0x0068); // (0070,0068)
/// ContentLabel (0070,0080) CS 1 DICOM
#[rustfmt::skip]
pub const CONTENT_LABEL: Tag = Tag(0x0070, 0x0080); // (0070,0080)
/// ContentDescription (0070,0081) LO 1 DICOM
#[rustfmt::skip]
pub const CONTENT_DESCRIPTION: Tag = Tag(0x0070, 0x0081); // (0070,0081)
/// PresentationCreationDate (0070,0082) DA 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_CREATION_DATE: Tag = Tag(0x0070, 0x0082); // (0070,0082)
/// PresentationCreationTime (0070,0083) TM 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_CREATION_TIME: Tag = Tag(0x0070, 0x0083); // (0070,0083)
/// ContentCreatorName (0070,0084) PN 1 DICOM
#[rustfmt::skip]
pub const CONTENT_CREATOR_NAME: Tag = Tag(0x0070, 0x0084); // (0070,0084)
/// ContentCreatorIdentificationCodeSequence (0070,0086) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x0070, 0x0086); // (0070,0086)
/// AlternateContentDescriptionSequence (0070,0087) SQ 1 DICOM
#[rustfmt::skip]
pub const ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE: Tag = Tag(0x0070, 0x0087); // (0070,0087)
/// PresentationSizeMode (0070,0100) CS 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_SIZE_MODE: Tag = Tag(0x0070, 0x0100); // (0070,0100)
/// PresentationPixelSpacing (0070,0101) DS 2 DICOM
#[rustfmt::skip]
pub const PRESENTATION_PIXEL_SPACING: Tag = Tag(0x0070, 0x0101); // (0070,0101)
/// PresentationPixelAspectRatio (0070,0102) IS 2 DICOM
#[rustfmt::skip]
pub const PRESENTATION_PIXEL_ASPECT_RATIO: Tag = Tag(0x0070, 0x0102); // (0070,0102)
/// PresentationPixelMagnificationRatio (0070,0103) FL 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_PIXEL_MAGNIFICATION_RATIO: Tag = Tag(0x0070, 0x0103); // (0070,0103)
/// GraphicGroupLabel (0070,0207) LO 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_GROUP_LABEL: Tag = Tag(0x0070, 0x0207); // (0070,0207)
/// GraphicGroupDescription (0070,0208) ST 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_GROUP_DESCRIPTION: Tag = Tag(0x0070, 0x0208); // (0070,0208)
/// CompoundGraphicSequence (0070,0209) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPOUND_GRAPHIC_SEQUENCE: Tag = Tag(0x0070, 0x0209); // (0070,0209)
/// CompoundGraphicInstanceID (0070,0226) UL 1 DICOM
#[rustfmt::skip]
pub const COMPOUND_GRAPHIC_INSTANCE_ID: Tag = Tag(0x0070, 0x0226); // (0070,0226)
/// FontName (0070,0227) LO 1 DICOM
#[rustfmt::skip]
pub const FONT_NAME: Tag = Tag(0x0070, 0x0227); // (0070,0227)
/// FontNameType (0070,0228) CS 1 DICOM
#[rustfmt::skip]
pub const FONT_NAME_TYPE: Tag = Tag(0x0070, 0x0228); // (0070,0228)
/// CSSFontName (0070,0229) LO 1 DICOM
#[rustfmt::skip]
pub const CSS_FONT_NAME: Tag = Tag(0x0070, 0x0229); // (0070,0229)
/// RotationAngle (0070,0230) FD 1 DICOM
#[rustfmt::skip]
pub const ROTATION_ANGLE: Tag = Tag(0x0070, 0x0230); // (0070,0230)
/// TextStyleSequence (0070,0231) SQ 1 DICOM
#[rustfmt::skip]
pub const TEXT_STYLE_SEQUENCE: Tag = Tag(0x0070, 0x0231); // (0070,0231)
/// LineStyleSequence (0070,0232) SQ 1 DICOM
#[rustfmt::skip]
pub const LINE_STYLE_SEQUENCE: Tag = Tag(0x0070, 0x0232); // (0070,0232)
/// FillStyleSequence (0070,0233) SQ 1 DICOM
#[rustfmt::skip]
pub const FILL_STYLE_SEQUENCE: Tag = Tag(0x0070, 0x0233); // (0070,0233)
/// GraphicGroupSequence (0070,0234) SQ 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_GROUP_SEQUENCE: Tag = Tag(0x0070, 0x0234); // (0070,0234)
/// TextColorCIELabValue (0070,0241) US 3 DICOM
#[rustfmt::skip]
pub const TEXT_COLOR_CIE_LAB_VALUE: Tag = Tag(0x0070, 0x0241); // (0070,0241)
/// HorizontalAlignment (0070,0242) CS 1 DICOM
#[rustfmt::skip]
pub const HORIZONTAL_ALIGNMENT: Tag = Tag(0x0070, 0x0242); // (0070,0242)
/// VerticalAlignment (0070,0243) CS 1 DICOM
#[rustfmt::skip]
pub const VERTICAL_ALIGNMENT: Tag = Tag(0x0070, 0x0243); // (0070,0243)
/// ShadowStyle (0070,0244) CS 1 DICOM
#[rustfmt::skip]
pub const SHADOW_STYLE: Tag = Tag(0x0070, 0x0244); // (0070,0244)
/// ShadowOffsetX (0070,0245) FL 1 DICOM
#[rustfmt::skip]
pub const SHADOW_OFFSET_X: Tag = Tag(0x0070, 0x0245); // (0070,0245)
/// ShadowOffsetY (0070,0246) FL 1 DICOM
#[rustfmt::skip]
pub const SHADOW_OFFSET_Y: Tag = Tag(0x0070, 0x0246); // (0070,0246)
/// ShadowColorCIELabValue (0070,0247) US 3 DICOM
#[rustfmt::skip]
pub const SHADOW_COLOR_CIE_LAB_VALUE: Tag = Tag(0x0070, 0x0247); // (0070,0247)
/// Underlined (0070,0248) CS 1 DICOM
#[rustfmt::skip]
pub const UNDERLINED: Tag = Tag(0x0070, 0x0248); // (0070,0248)
/// Bold (0070,0249) CS 1 DICOM
#[rustfmt::skip]
pub const BOLD: Tag = Tag(0x0070, 0x0249); // (0070,0249)
/// Italic (0070,0250) CS 1 DICOM
#[rustfmt::skip]
pub const ITALIC: Tag = Tag(0x0070, 0x0250); // (0070,0250)
/// PatternOnColorCIELabValue (0070,0251) US 3 DICOM
#[rustfmt::skip]
pub const PATTERN_ON_COLOR_CIE_LAB_VALUE: Tag = Tag(0x0070, 0x0251); // (0070,0251)
/// PatternOffColorCIELabValue (0070,0252) US 3 DICOM
#[rustfmt::skip]
pub const PATTERN_OFF_COLOR_CIE_LAB_VALUE: Tag = Tag(0x0070, 0x0252); // (0070,0252)
/// LineThickness (0070,0253) FL 1 DICOM
#[rustfmt::skip]
pub const LINE_THICKNESS: Tag = Tag(0x0070, 0x0253); // (0070,0253)
/// LineDashingStyle (0070,0254) CS 1 DICOM
#[rustfmt::skip]
pub const LINE_DASHING_STYLE: Tag = Tag(0x0070, 0x0254); // (0070,0254)
/// LinePattern (0070,0255) UL 1 DICOM
#[rustfmt::skip]
pub const LINE_PATTERN: Tag = Tag(0x0070, 0x0255); // (0070,0255)
/// FillPattern (0070,0256) OB 1 DICOM
#[rustfmt::skip]
pub const FILL_PATTERN: Tag = Tag(0x0070, 0x0256); // (0070,0256)
/// FillMode (0070,0257) CS 1 DICOM
#[rustfmt::skip]
pub const FILL_MODE: Tag = Tag(0x0070, 0x0257); // (0070,0257)
/// ShadowOpacity (0070,0258) FL 1 DICOM
#[rustfmt::skip]
pub const SHADOW_OPACITY: Tag = Tag(0x0070, 0x0258); // (0070,0258)
/// GapLength (0070,0261) FL 1 DICOM
#[rustfmt::skip]
pub const GAP_LENGTH: Tag = Tag(0x0070, 0x0261); // (0070,0261)
/// DiameterOfVisibility (0070,0262) FL 1 DICOM
#[rustfmt::skip]
pub const DIAMETER_OF_VISIBILITY: Tag = Tag(0x0070, 0x0262); // (0070,0262)
/// RotationPoint (0070,0273) FL 2 DICOM
#[rustfmt::skip]
pub const ROTATION_POINT: Tag = Tag(0x0070, 0x0273); // (0070,0273)
/// TickAlignment (0070,0274) CS 1 DICOM
#[rustfmt::skip]
pub const TICK_ALIGNMENT: Tag = Tag(0x0070, 0x0274); // (0070,0274)
/// ShowTickLabel (0070,0278) CS 1 DICOM
#[rustfmt::skip]
pub const SHOW_TICK_LABEL: Tag = Tag(0x0070, 0x0278); // (0070,0278)
/// TickLabelAlignment (0070,0279) CS 1 DICOM
#[rustfmt::skip]
pub const TICK_LABEL_ALIGNMENT: Tag = Tag(0x0070, 0x0279); // (0070,0279)
/// CompoundGraphicUnits (0070,0282) CS 1 DICOM
#[rustfmt::skip]
pub const COMPOUND_GRAPHIC_UNITS: Tag = Tag(0x0070, 0x0282); // (0070,0282)
/// PatternOnOpacity (0070,0284) FL 1 DICOM
#[rustfmt::skip]
pub const PATTERN_ON_OPACITY: Tag = Tag(0x0070, 0x0284); // (0070,0284)
/// PatternOffOpacity (0070,0285) FL 1 DICOM
#[rustfmt::skip]
pub const PATTERN_OFF_OPACITY: Tag = Tag(0x0070, 0x0285); // (0070,0285)
/// MajorTicksSequence (0070,0287) SQ 1 DICOM
#[rustfmt::skip]
pub const MAJOR_TICKS_SEQUENCE: Tag = Tag(0x0070, 0x0287); // (0070,0287)
/// TickPosition (0070,0288) FL 1 DICOM
#[rustfmt::skip]
pub const TICK_POSITION: Tag = Tag(0x0070, 0x0288); // (0070,0288)
/// TickLabel (0070,0289) SH 1 DICOM
#[rustfmt::skip]
pub const TICK_LABEL: Tag = Tag(0x0070, 0x0289); // (0070,0289)
/// CompoundGraphicType (0070,0294) CS 1 DICOM
#[rustfmt::skip]
pub const COMPOUND_GRAPHIC_TYPE: Tag = Tag(0x0070, 0x0294); // (0070,0294)
/// GraphicGroupID (0070,0295) UL 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_GROUP_ID: Tag = Tag(0x0070, 0x0295); // (0070,0295)
/// ShapeType (0070,0306) CS 1 DICOM
#[rustfmt::skip]
pub const SHAPE_TYPE: Tag = Tag(0x0070, 0x0306); // (0070,0306)
/// RegistrationSequence (0070,0308) SQ 1 DICOM
#[rustfmt::skip]
pub const REGISTRATION_SEQUENCE: Tag = Tag(0x0070, 0x0308); // (0070,0308)
/// MatrixRegistrationSequence (0070,0309) SQ 1 DICOM
#[rustfmt::skip]
pub const MATRIX_REGISTRATION_SEQUENCE: Tag = Tag(0x0070, 0x0309); // (0070,0309)
/// MatrixSequence (0070,030A) SQ 1 DICOM
#[rustfmt::skip]
pub const MATRIX_SEQUENCE: Tag = Tag(0x0070, 0x030A); // (0070,030A)
/// FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix (0070,030B) FD 16 DICOM
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_TO_DISPLAYED_COORDINATE_SYSTEM_TRANSFORMATION_MATRIX: Tag = Tag(0x0070, 0x030B); // (0070,030B)
/// FrameOfReferenceTransformationMatrixType (0070,030C) CS 1 DICOM
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE: Tag = Tag(0x0070, 0x030C); // (0070,030C)
/// RegistrationTypeCodeSequence (0070,030D) SQ 1 DICOM
#[rustfmt::skip]
pub const REGISTRATION_TYPE_CODE_SEQUENCE: Tag = Tag(0x0070, 0x030D); // (0070,030D)
/// FiducialDescription (0070,030F) ST 1 DICOM
#[rustfmt::skip]
pub const FIDUCIAL_DESCRIPTION: Tag = Tag(0x0070, 0x030F); // (0070,030F)
/// FiducialIdentifier (0070,0310) SH 1 DICOM
#[rustfmt::skip]
pub const FIDUCIAL_IDENTIFIER: Tag = Tag(0x0070, 0x0310); // (0070,0310)
/// FiducialIdentifierCodeSequence (0070,0311) SQ 1 DICOM
#[rustfmt::skip]
pub const FIDUCIAL_IDENTIFIER_CODE_SEQUENCE: Tag = Tag(0x0070, 0x0311); // (0070,0311)
/// ContourUncertaintyRadius (0070,0312) FD 1 DICOM
#[rustfmt::skip]
pub const CONTOUR_UNCERTAINTY_RADIUS: Tag = Tag(0x0070, 0x0312); // (0070,0312)
/// UsedFiducialsSequence (0070,0314) SQ 1 DICOM
#[rustfmt::skip]
pub const USED_FIDUCIALS_SEQUENCE: Tag = Tag(0x0070, 0x0314); // (0070,0314)
/// GraphicCoordinatesDataSequence (0070,0318) SQ 1 DICOM
#[rustfmt::skip]
pub const GRAPHIC_COORDINATES_DATA_SEQUENCE: Tag = Tag(0x0070, 0x0318); // (0070,0318)
/// FiducialUID (0070,031A) UI 1 DICOM
#[rustfmt::skip]
pub const FIDUCIAL_UID: Tag = Tag(0x0070, 0x031A); // (0070,031A)
/// FiducialSetSequence (0070,031C) SQ 1 DICOM
#[rustfmt::skip]
pub const FIDUCIAL_SET_SEQUENCE: Tag = Tag(0x0070, 0x031C); // (0070,031C)
/// FiducialSequence (0070,031E) SQ 1 DICOM
#[rustfmt::skip]
pub const FIDUCIAL_SEQUENCE: Tag = Tag(0x0070, 0x031E); // (0070,031E)
/// FiducialsPropertyCategoryCodeSequence (0070,031F) SQ 1 DICOM
#[rustfmt::skip]
pub const FIDUCIALS_PROPERTY_CATEGORY_CODE_SEQUENCE: Tag = Tag(0x0070, 0x031F); // (0070,031F)
/// GraphicLayerRecommendedDisplayCIELabValue (0070,0401) US 3 DICOM
#[rustfmt::skip]
pub const GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIE_LAB_VALUE: Tag = Tag(0x0070, 0x0401); // (0070,0401)
/// BlendingSequence (0070,0402) SQ 1 DICOM
#[rustfmt::skip]
pub const BLENDING_SEQUENCE: Tag = Tag(0x0070, 0x0402); // (0070,0402)
/// RelativeOpacity (0070,0403) FL 1 DICOM
#[rustfmt::skip]
pub const RELATIVE_OPACITY: Tag = Tag(0x0070, 0x0403); // (0070,0403)
/// ReferencedSpatialRegistrationSequence (0070,0404) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SPATIAL_REGISTRATION_SEQUENCE: Tag = Tag(0x0070, 0x0404); // (0070,0404)
/// BlendingPosition (0070,0405) CS 1 DICOM
#[rustfmt::skip]
pub const BLENDING_POSITION: Tag = Tag(0x0070, 0x0405); // (0070,0405)
/// PresentationDisplayCollectionUID (0070,1101) UI 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_DISPLAY_COLLECTION_UID: Tag = Tag(0x0070, 0x1101); // (0070,1101)
/// PresentationSequenceCollectionUID (0070,1102) UI 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_SEQUENCE_COLLECTION_UID: Tag = Tag(0x0070, 0x1102); // (0070,1102)
/// PresentationSequencePositionIndex (0070,1103) US 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_SEQUENCE_POSITION_INDEX: Tag = Tag(0x0070, 0x1103); // (0070,1103)
/// RenderedImageReferenceSequence (0070,1104) SQ 1 DICOM
#[rustfmt::skip]
pub const RENDERED_IMAGE_REFERENCE_SEQUENCE: Tag = Tag(0x0070, 0x1104); // (0070,1104)
/// VolumetricPresentationStateInputSequence (0070,1201) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PRESENTATION_STATE_INPUT_SEQUENCE: Tag = Tag(0x0070, 0x1201); // (0070,1201)
/// PresentationInputType (0070,1202) CS 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_INPUT_TYPE: Tag = Tag(0x0070, 0x1202); // (0070,1202)
/// InputSequencePositionIndex (0070,1203) US 1 DICOM
#[rustfmt::skip]
pub const INPUT_SEQUENCE_POSITION_INDEX: Tag = Tag(0x0070, 0x1203); // (0070,1203)
/// Crop (0070,1204) CS 1 DICOM
#[rustfmt::skip]
pub const CROP: Tag = Tag(0x0070, 0x1204); // (0070,1204)
/// CroppingSpecificationIndex (0070,1205) US 1-n DICOM
#[rustfmt::skip]
pub const CROPPING_SPECIFICATION_INDEX: Tag = Tag(0x0070, 0x1205); // (0070,1205)
/// VolumetricPresentationInputNumber (0070,1207) US 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PRESENTATION_INPUT_NUMBER: Tag = Tag(0x0070, 0x1207); // (0070,1207)
/// ImageVolumeGeometry (0070,1208) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_VOLUME_GEOMETRY: Tag = Tag(0x0070, 0x1208); // (0070,1208)
/// VolumetricPresentationInputSetUID (0070,1209) UI 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PRESENTATION_INPUT_SET_UID: Tag = Tag(0x0070, 0x1209); // (0070,1209)
/// VolumetricPresentationInputSetSequence (0070,120A) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PRESENTATION_INPUT_SET_SEQUENCE: Tag = Tag(0x0070, 0x120A); // (0070,120A)
/// GlobalCrop (0070,120B) CS 1 DICOM
#[rustfmt::skip]
pub const GLOBAL_CROP: Tag = Tag(0x0070, 0x120B); // (0070,120B)
/// GlobalCroppingSpecificationIndex (0070,120C) US 1-n DICOM
#[rustfmt::skip]
pub const GLOBAL_CROPPING_SPECIFICATION_INDEX: Tag = Tag(0x0070, 0x120C); // (0070,120C)
/// RenderingMethod (0070,120D) CS 1 DICOM
#[rustfmt::skip]
pub const RENDERING_METHOD: Tag = Tag(0x0070, 0x120D); // (0070,120D)
/// VolumeCroppingSequence (0070,1301) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUME_CROPPING_SEQUENCE: Tag = Tag(0x0070, 0x1301); // (0070,1301)
/// VolumeCroppingMethod (0070,1302) CS 1 DICOM
#[rustfmt::skip]
pub const VOLUME_CROPPING_METHOD: Tag = Tag(0x0070, 0x1302); // (0070,1302)
/// BoundingBoxCrop (0070,1303) FD 6 DICOM
#[rustfmt::skip]
pub const BOUNDING_BOX_CROP: Tag = Tag(0x0070, 0x1303); // (0070,1303)
/// ObliqueCroppingPlaneSequence (0070,1304) SQ 1 DICOM
#[rustfmt::skip]
pub const OBLIQUE_CROPPING_PLANE_SEQUENCE: Tag = Tag(0x0070, 0x1304); // (0070,1304)
/// Plane (0070,1305) FD 4 DICOM
#[rustfmt::skip]
pub const PLANE: Tag = Tag(0x0070, 0x1305); // (0070,1305)
/// PlaneNormal (0070,1306) FD 3 DICOM
#[rustfmt::skip]
pub const PLANE_NORMAL: Tag = Tag(0x0070, 0x1306); // (0070,1306)
/// CroppingSpecificationNumber (0070,1309) US 1 DICOM
#[rustfmt::skip]
pub const CROPPING_SPECIFICATION_NUMBER: Tag = Tag(0x0070, 0x1309); // (0070,1309)
/// MultiPlanarReconstructionStyle (0070,1501) CS 1 DICOM
#[rustfmt::skip]
pub const MULTI_PLANAR_RECONSTRUCTION_STYLE: Tag = Tag(0x0070, 0x1501); // (0070,1501)
/// MPRThicknessType (0070,1502) CS 1 DICOM
#[rustfmt::skip]
pub const MPR_THICKNESS_TYPE: Tag = Tag(0x0070, 0x1502); // (0070,1502)
/// MPRSlabThickness (0070,1503) FD 1 DICOM
#[rustfmt::skip]
pub const MPR_SLAB_THICKNESS: Tag = Tag(0x0070, 0x1503); // (0070,1503)
/// MPRTopLeftHandCorner (0070,1505) FD 3 DICOM
#[rustfmt::skip]
pub const MPR_TOP_LEFT_HAND_CORNER: Tag = Tag(0x0070, 0x1505); // (0070,1505)
/// MPRViewWidthDirection (0070,1507) FD 3 DICOM
#[rustfmt::skip]
pub const MPR_VIEW_WIDTH_DIRECTION: Tag = Tag(0x0070, 0x1507); // (0070,1507)
/// MPRViewWidth (0070,1508) FD 1 DICOM
#[rustfmt::skip]
pub const MPR_VIEW_WIDTH: Tag = Tag(0x0070, 0x1508); // (0070,1508)
/// NumberOfVolumetricCurvePoints (0070,150C) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_VOLUMETRIC_CURVE_POINTS: Tag = Tag(0x0070, 0x150C); // (0070,150C)
/// VolumetricCurvePoints (0070,150D) OD 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_CURVE_POINTS: Tag = Tag(0x0070, 0x150D); // (0070,150D)
/// MPRViewHeightDirection (0070,1511) FD 3 DICOM
#[rustfmt::skip]
pub const MPR_VIEW_HEIGHT_DIRECTION: Tag = Tag(0x0070, 0x1511); // (0070,1511)
/// MPRViewHeight (0070,1512) FD 1 DICOM
#[rustfmt::skip]
pub const MPR_VIEW_HEIGHT: Tag = Tag(0x0070, 0x1512); // (0070,1512)
/// RenderProjection (0070,1602) CS 1 DICOM
#[rustfmt::skip]
pub const RENDER_PROJECTION: Tag = Tag(0x0070, 0x1602); // (0070,1602)
/// ViewpointPosition (0070,1603) FD 3 DICOM
#[rustfmt::skip]
pub const VIEWPOINT_POSITION: Tag = Tag(0x0070, 0x1603); // (0070,1603)
/// ViewpointLookAtPoint (0070,1604) FD 3 DICOM
#[rustfmt::skip]
pub const VIEWPOINT_LOOK_AT_POINT: Tag = Tag(0x0070, 0x1604); // (0070,1604)
/// ViewpointUpDirection (0070,1605) FD 3 DICOM
#[rustfmt::skip]
pub const VIEWPOINT_UP_DIRECTION: Tag = Tag(0x0070, 0x1605); // (0070,1605)
/// RenderFieldOfView (0070,1606) FD 6 DICOM
#[rustfmt::skip]
pub const RENDER_FIELD_OF_VIEW: Tag = Tag(0x0070, 0x1606); // (0070,1606)
/// SamplingStepSize (0070,1607) FD 1 DICOM
#[rustfmt::skip]
pub const SAMPLING_STEP_SIZE: Tag = Tag(0x0070, 0x1607); // (0070,1607)
/// ShadingStyle (0070,1701) CS 1 DICOM
#[rustfmt::skip]
pub const SHADING_STYLE: Tag = Tag(0x0070, 0x1701); // (0070,1701)
/// AmbientReflectionIntensity (0070,1702) FD 1 DICOM
#[rustfmt::skip]
pub const AMBIENT_REFLECTION_INTENSITY: Tag = Tag(0x0070, 0x1702); // (0070,1702)
/// LightDirection (0070,1703) FD 3 DICOM
#[rustfmt::skip]
pub const LIGHT_DIRECTION: Tag = Tag(0x0070, 0x1703); // (0070,1703)
/// DiffuseReflectionIntensity (0070,1704) FD 1 DICOM
#[rustfmt::skip]
pub const DIFFUSE_REFLECTION_INTENSITY: Tag = Tag(0x0070, 0x1704); // (0070,1704)
/// SpecularReflectionIntensity (0070,1705) FD 1 DICOM
#[rustfmt::skip]
pub const SPECULAR_REFLECTION_INTENSITY: Tag = Tag(0x0070, 0x1705); // (0070,1705)
/// Shininess (0070,1706) FD 1 DICOM
#[rustfmt::skip]
pub const SHININESS: Tag = Tag(0x0070, 0x1706); // (0070,1706)
/// PresentationStateClassificationComponentSequence (0070,1801) SQ 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_STATE_CLASSIFICATION_COMPONENT_SEQUENCE: Tag = Tag(0x0070, 0x1801); // (0070,1801)
/// ComponentType (0070,1802) CS 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_TYPE: Tag = Tag(0x0070, 0x1802); // (0070,1802)
/// ComponentInputSequence (0070,1803) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_INPUT_SEQUENCE: Tag = Tag(0x0070, 0x1803); // (0070,1803)
/// VolumetricPresentationInputIndex (0070,1804) US 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PRESENTATION_INPUT_INDEX: Tag = Tag(0x0070, 0x1804); // (0070,1804)
/// PresentationStateCompositorComponentSequence (0070,1805) SQ 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_STATE_COMPOSITOR_COMPONENT_SEQUENCE: Tag = Tag(0x0070, 0x1805); // (0070,1805)
/// WeightingTransferFunctionSequence (0070,1806) SQ 1 DICOM
#[rustfmt::skip]
pub const WEIGHTING_TRANSFER_FUNCTION_SEQUENCE: Tag = Tag(0x0070, 0x1806); // (0070,1806)
/// WeightingLookupTableDescriptor (0070,1807) US 3 DICOM
#[rustfmt::skip]
pub const WEIGHTING_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0070, 0x1807); // (0070,1807)
/// WeightingLookupTableData (0070,1808) OB 1 DICOM
#[rustfmt::skip]
pub const WEIGHTING_LOOKUP_TABLE_DATA: Tag = Tag(0x0070, 0x1808); // (0070,1808)
/// VolumetricAnnotationSequence (0070,1901) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_ANNOTATION_SEQUENCE: Tag = Tag(0x0070, 0x1901); // (0070,1901)
/// ReferencedStructuredContextSequence (0070,1903) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_STRUCTURED_CONTEXT_SEQUENCE: Tag = Tag(0x0070, 0x1903); // (0070,1903)
/// ReferencedContentItem (0070,1904) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CONTENT_ITEM: Tag = Tag(0x0070, 0x1904); // (0070,1904)
/// VolumetricPresentationInputAnnotationSequence (0070,1905) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_PRESENTATION_INPUT_ANNOTATION_SEQUENCE: Tag = Tag(0x0070, 0x1905); // (0070,1905)
/// AnnotationClipping (0070,1907) CS 1 DICOM
#[rustfmt::skip]
pub const ANNOTATION_CLIPPING: Tag = Tag(0x0070, 0x1907); // (0070,1907)
/// PresentationAnimationStyle (0070,1A01) CS 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_ANIMATION_STYLE: Tag = Tag(0x0070, 0x1A01); // (0070,1A01)
/// RecommendedAnimationRate (0070,1A03) FD 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_ANIMATION_RATE: Tag = Tag(0x0070, 0x1A03); // (0070,1A03)
/// AnimationCurveSequence (0070,1A04) SQ 1 DICOM
#[rustfmt::skip]
pub const ANIMATION_CURVE_SEQUENCE: Tag = Tag(0x0070, 0x1A04); // (0070,1A04)
/// AnimationStepSize (0070,1A05) FD 1 DICOM
#[rustfmt::skip]
pub const ANIMATION_STEP_SIZE: Tag = Tag(0x0070, 0x1A05); // (0070,1A05)
/// SwivelRange (0070,1A06) FD 1 DICOM
#[rustfmt::skip]
pub const SWIVEL_RANGE: Tag = Tag(0x0070, 0x1A06); // (0070,1A06)
/// VolumetricCurveUpDirections (0070,1A07) OD 1 DICOM
#[rustfmt::skip]
pub const VOLUMETRIC_CURVE_UP_DIRECTIONS: Tag = Tag(0x0070, 0x1A07); // (0070,1A07)
/// VolumeStreamSequence (0070,1A08) SQ 1 DICOM
#[rustfmt::skip]
pub const VOLUME_STREAM_SEQUENCE: Tag = Tag(0x0070, 0x1A08); // (0070,1A08)
/// RGBATransferFunctionDescription (0070,1A09) LO 1 DICOM
#[rustfmt::skip]
pub const RGBA_TRANSFER_FUNCTION_DESCRIPTION: Tag = Tag(0x0070, 0x1A09); // (0070,1A09)
/// AdvancedBlendingSequence (0070,1B01) SQ 1 DICOM
#[rustfmt::skip]
pub const ADVANCED_BLENDING_SEQUENCE: Tag = Tag(0x0070, 0x1B01); // (0070,1B01)
/// BlendingInputNumber (0070,1B02) US 1 DICOM
#[rustfmt::skip]
pub const BLENDING_INPUT_NUMBER: Tag = Tag(0x0070, 0x1B02); // (0070,1B02)
/// BlendingDisplayInputSequence (0070,1B03) SQ 1 DICOM
#[rustfmt::skip]
pub const BLENDING_DISPLAY_INPUT_SEQUENCE: Tag = Tag(0x0070, 0x1B03); // (0070,1B03)
/// BlendingDisplaySequence (0070,1B04) SQ 1 DICOM
#[rustfmt::skip]
pub const BLENDING_DISPLAY_SEQUENCE: Tag = Tag(0x0070, 0x1B04); // (0070,1B04)
/// BlendingMode (0070,1B06) CS 1 DICOM
#[rustfmt::skip]
pub const BLENDING_MODE: Tag = Tag(0x0070, 0x1B06); // (0070,1B06)
/// TimeSeriesBlending (0070,1B07) CS 1 DICOM
#[rustfmt::skip]
pub const TIME_SERIES_BLENDING: Tag = Tag(0x0070, 0x1B07); // (0070,1B07)
/// GeometryForDisplay (0070,1B08) CS 1 DICOM
#[rustfmt::skip]
pub const GEOMETRY_FOR_DISPLAY: Tag = Tag(0x0070, 0x1B08); // (0070,1B08)
/// ThresholdSequence (0070,1B11) SQ 1 DICOM
#[rustfmt::skip]
pub const THRESHOLD_SEQUENCE: Tag = Tag(0x0070, 0x1B11); // (0070,1B11)
/// ThresholdValueSequence (0070,1B12) SQ 1 DICOM
#[rustfmt::skip]
pub const THRESHOLD_VALUE_SEQUENCE: Tag = Tag(0x0070, 0x1B12); // (0070,1B12)
/// ThresholdType (0070,1B13) CS 1 DICOM
#[rustfmt::skip]
pub const THRESHOLD_TYPE: Tag = Tag(0x0070, 0x1B13); // (0070,1B13)
/// ThresholdValue (0070,1B14) FD 1 DICOM
#[rustfmt::skip]
pub const THRESHOLD_VALUE: Tag = Tag(0x0070, 0x1B14); // (0070,1B14)
/// HangingProtocolName (0072,0002) SH 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_NAME: Tag = Tag(0x0072, 0x0002); // (0072,0002)
/// HangingProtocolDescription (0072,0004) LO 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_DESCRIPTION: Tag = Tag(0x0072, 0x0004); // (0072,0004)
/// HangingProtocolLevel (0072,0006) CS 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_LEVEL: Tag = Tag(0x0072, 0x0006); // (0072,0006)
/// HangingProtocolCreator (0072,0008) LO 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_CREATOR: Tag = Tag(0x0072, 0x0008); // (0072,0008)
/// HangingProtocolCreationDateTime (0072,000A) DT 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_CREATION_DATE_TIME: Tag = Tag(0x0072, 0x000A); // (0072,000A)
/// HangingProtocolDefinitionSequence (0072,000C) SQ 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_DEFINITION_SEQUENCE: Tag = Tag(0x0072, 0x000C); // (0072,000C)
/// HangingProtocolUserIdentificationCodeSequence (0072,000E) SQ 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x0072, 0x000E); // (0072,000E)
/// HangingProtocolUserGroupName (0072,0010) LO 1 DICOM
#[rustfmt::skip]
pub const HANGING_PROTOCOL_USER_GROUP_NAME: Tag = Tag(0x0072, 0x0010); // (0072,0010)
/// SourceHangingProtocolSequence (0072,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_HANGING_PROTOCOL_SEQUENCE: Tag = Tag(0x0072, 0x0012); // (0072,0012)
/// NumberOfPriorsReferenced (0072,0014) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PRIORS_REFERENCED: Tag = Tag(0x0072, 0x0014); // (0072,0014)
/// ImageSetsSequence (0072,0020) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_SETS_SEQUENCE: Tag = Tag(0x0072, 0x0020); // (0072,0020)
/// ImageSetSelectorSequence (0072,0022) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_SET_SELECTOR_SEQUENCE: Tag = Tag(0x0072, 0x0022); // (0072,0022)
/// ImageSetSelectorUsageFlag (0072,0024) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_SET_SELECTOR_USAGE_FLAG: Tag = Tag(0x0072, 0x0024); // (0072,0024)
/// SelectorAttribute (0072,0026) AT 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_ATTRIBUTE: Tag = Tag(0x0072, 0x0026); // (0072,0026)
/// SelectorValueNumber (0072,0028) US 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_VALUE_NUMBER: Tag = Tag(0x0072, 0x0028); // (0072,0028)
/// TimeBasedImageSetsSequence (0072,0030) SQ 1 DICOM
#[rustfmt::skip]
pub const TIME_BASED_IMAGE_SETS_SEQUENCE: Tag = Tag(0x0072, 0x0030); // (0072,0030)
/// ImageSetNumber (0072,0032) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_SET_NUMBER: Tag = Tag(0x0072, 0x0032); // (0072,0032)
/// ImageSetSelectorCategory (0072,0034) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_SET_SELECTOR_CATEGORY: Tag = Tag(0x0072, 0x0034); // (0072,0034)
/// RelativeTime (0072,0038) US 2 DICOM
#[rustfmt::skip]
pub const RELATIVE_TIME: Tag = Tag(0x0072, 0x0038); // (0072,0038)
/// RelativeTimeUnits (0072,003A) CS 1 DICOM
#[rustfmt::skip]
pub const RELATIVE_TIME_UNITS: Tag = Tag(0x0072, 0x003A); // (0072,003A)
/// AbstractPriorValue (0072,003C) SS 2 DICOM
#[rustfmt::skip]
pub const ABSTRACT_PRIOR_VALUE: Tag = Tag(0x0072, 0x003C); // (0072,003C)
/// AbstractPriorCodeSequence (0072,003E) SQ 1 DICOM
#[rustfmt::skip]
pub const ABSTRACT_PRIOR_CODE_SEQUENCE: Tag = Tag(0x0072, 0x003E); // (0072,003E)
/// ImageSetLabel (0072,0040) LO 1 DICOM
#[rustfmt::skip]
pub const IMAGE_SET_LABEL: Tag = Tag(0x0072, 0x0040); // (0072,0040)
/// SelectorAttributeVR (0072,0050) CS 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_ATTRIBUTE_VR: Tag = Tag(0x0072, 0x0050); // (0072,0050)
/// SelectorSequencePointer (0072,0052) AT 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_SEQUENCE_POINTER: Tag = Tag(0x0072, 0x0052); // (0072,0052)
/// SelectorSequencePointerPrivateCreator (0072,0054) LO 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR: Tag = Tag(0x0072, 0x0054); // (0072,0054)
/// SelectorAttributePrivateCreator (0072,0056) LO 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_ATTRIBUTE_PRIVATE_CREATOR: Tag = Tag(0x0072, 0x0056); // (0072,0056)
/// SelectorAEValue (0072,005E) AE 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_AE_VALUE: Tag = Tag(0x0072, 0x005E); // (0072,005E)
/// SelectorASValue (0072,005F) AS 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_AS_VALUE: Tag = Tag(0x0072, 0x005F); // (0072,005F)
/// SelectorATValue (0072,0060) AT 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_AT_VALUE: Tag = Tag(0x0072, 0x0060); // (0072,0060)
/// SelectorDAValue (0072,0061) DA 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_DA_VALUE: Tag = Tag(0x0072, 0x0061); // (0072,0061)
/// SelectorCSValue (0072,0062) CS 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_CS_VALUE: Tag = Tag(0x0072, 0x0062); // (0072,0062)
/// SelectorDTValue (0072,0063) DT 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_DT_VALUE: Tag = Tag(0x0072, 0x0063); // (0072,0063)
/// SelectorISValue (0072,0064) IS 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_IS_VALUE: Tag = Tag(0x0072, 0x0064); // (0072,0064)
/// SelectorOBValue (0072,0065) OB 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_OB_VALUE: Tag = Tag(0x0072, 0x0065); // (0072,0065)
/// SelectorLOValue (0072,0066) LO 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_LO_VALUE: Tag = Tag(0x0072, 0x0066); // (0072,0066)
/// SelectorOFValue (0072,0067) OF 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_OF_VALUE: Tag = Tag(0x0072, 0x0067); // (0072,0067)
/// SelectorLTValue (0072,0068) LT 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_LT_VALUE: Tag = Tag(0x0072, 0x0068); // (0072,0068)
/// SelectorOWValue (0072,0069) OW 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_OW_VALUE: Tag = Tag(0x0072, 0x0069); // (0072,0069)
/// SelectorPNValue (0072,006A) PN 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_PN_VALUE: Tag = Tag(0x0072, 0x006A); // (0072,006A)
/// SelectorTMValue (0072,006B) TM 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_TM_VALUE: Tag = Tag(0x0072, 0x006B); // (0072,006B)
/// SelectorSHValue (0072,006C) SH 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_SH_VALUE: Tag = Tag(0x0072, 0x006C); // (0072,006C)
/// SelectorUNValue (0072,006D) UN 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_UN_VALUE: Tag = Tag(0x0072, 0x006D); // (0072,006D)
/// SelectorSTValue (0072,006E) ST 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_ST_VALUE: Tag = Tag(0x0072, 0x006E); // (0072,006E)
/// SelectorUCValue (0072,006F) UC 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_UC_VALUE: Tag = Tag(0x0072, 0x006F); // (0072,006F)
/// SelectorUTValue (0072,0070) UT 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_UT_VALUE: Tag = Tag(0x0072, 0x0070); // (0072,0070)
/// SelectorURValue (0072,0071) UR 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_UR_VALUE: Tag = Tag(0x0072, 0x0071); // (0072,0071)
/// SelectorDSValue (0072,0072) DS 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_DS_VALUE: Tag = Tag(0x0072, 0x0072); // (0072,0072)
/// SelectorODValue (0072,0073) OD 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_OD_VALUE: Tag = Tag(0x0072, 0x0073); // (0072,0073)
/// SelectorFDValue (0072,0074) FD 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_FD_VALUE: Tag = Tag(0x0072, 0x0074); // (0072,0074)
/// SelectorOLValue (0072,0075) OL 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_OL_VALUE: Tag = Tag(0x0072, 0x0075); // (0072,0075)
/// SelectorFLValue (0072,0076) FL 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_FL_VALUE: Tag = Tag(0x0072, 0x0076); // (0072,0076)
/// SelectorULValue (0072,0078) UL 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_UL_VALUE: Tag = Tag(0x0072, 0x0078); // (0072,0078)
/// SelectorUSValue (0072,007A) US 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_US_VALUE: Tag = Tag(0x0072, 0x007A); // (0072,007A)
/// SelectorSLValue (0072,007C) SL 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_SL_VALUE: Tag = Tag(0x0072, 0x007C); // (0072,007C)
/// SelectorSSValue (0072,007E) SS 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_SS_VALUE: Tag = Tag(0x0072, 0x007E); // (0072,007E)
/// SelectorUIValue (0072,007F) UI 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_UI_VALUE: Tag = Tag(0x0072, 0x007F); // (0072,007F)
/// SelectorCodeSequenceValue (0072,0080) SQ 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_CODE_SEQUENCE_VALUE: Tag = Tag(0x0072, 0x0080); // (0072,0080)
/// NumberOfScreens (0072,0100) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SCREENS: Tag = Tag(0x0072, 0x0100); // (0072,0100)
/// NominalScreenDefinitionSequence (0072,0102) SQ 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_SCREEN_DEFINITION_SEQUENCE: Tag = Tag(0x0072, 0x0102); // (0072,0102)
/// NumberOfVerticalPixels (0072,0104) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_VERTICAL_PIXELS: Tag = Tag(0x0072, 0x0104); // (0072,0104)
/// NumberOfHorizontalPixels (0072,0106) US 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_HORIZONTAL_PIXELS: Tag = Tag(0x0072, 0x0106); // (0072,0106)
/// DisplayEnvironmentSpatialPosition (0072,0108) FD 4 DICOM
#[rustfmt::skip]
pub const DISPLAY_ENVIRONMENT_SPATIAL_POSITION: Tag = Tag(0x0072, 0x0108); // (0072,0108)
/// ScreenMinimumGrayscaleBitDepth (0072,010A) US 1 DICOM
#[rustfmt::skip]
pub const SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH: Tag = Tag(0x0072, 0x010A); // (0072,010A)
/// ScreenMinimumColorBitDepth (0072,010C) US 1 DICOM
#[rustfmt::skip]
pub const SCREEN_MINIMUM_COLOR_BIT_DEPTH: Tag = Tag(0x0072, 0x010C); // (0072,010C)
/// ApplicationMaximumRepaintTime (0072,010E) US 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_MAXIMUM_REPAINT_TIME: Tag = Tag(0x0072, 0x010E); // (0072,010E)
/// DisplaySetsSequence (0072,0200) SQ 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SETS_SEQUENCE: Tag = Tag(0x0072, 0x0200); // (0072,0200)
/// DisplaySetNumber (0072,0202) US 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_NUMBER: Tag = Tag(0x0072, 0x0202); // (0072,0202)
/// DisplaySetLabel (0072,0203) LO 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_LABEL: Tag = Tag(0x0072, 0x0203); // (0072,0203)
/// DisplaySetPresentationGroup (0072,0204) US 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_PRESENTATION_GROUP: Tag = Tag(0x0072, 0x0204); // (0072,0204)
/// DisplaySetPresentationGroupDescription (0072,0206) LO 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION: Tag = Tag(0x0072, 0x0206); // (0072,0206)
/// PartialDataDisplayHandling (0072,0208) CS 1 DICOM
#[rustfmt::skip]
pub const PARTIAL_DATA_DISPLAY_HANDLING: Tag = Tag(0x0072, 0x0208); // (0072,0208)
/// SynchronizedScrollingSequence (0072,0210) SQ 1 DICOM
#[rustfmt::skip]
pub const SYNCHRONIZED_SCROLLING_SEQUENCE: Tag = Tag(0x0072, 0x0210); // (0072,0210)
/// DisplaySetScrollingGroup (0072,0212) US 2-n DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_SCROLLING_GROUP: Tag = Tag(0x0072, 0x0212); // (0072,0212)
/// NavigationIndicatorSequence (0072,0214) SQ 1 DICOM
#[rustfmt::skip]
pub const NAVIGATION_INDICATOR_SEQUENCE: Tag = Tag(0x0072, 0x0214); // (0072,0214)
/// NavigationDisplaySet (0072,0216) US 1 DICOM
#[rustfmt::skip]
pub const NAVIGATION_DISPLAY_SET: Tag = Tag(0x0072, 0x0216); // (0072,0216)
/// ReferenceDisplaySets (0072,0218) US 1-n DICOM
#[rustfmt::skip]
pub const REFERENCE_DISPLAY_SETS: Tag = Tag(0x0072, 0x0218); // (0072,0218)
/// ImageBoxesSequence (0072,0300) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOXES_SEQUENCE: Tag = Tag(0x0072, 0x0300); // (0072,0300)
/// ImageBoxNumber (0072,0302) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_NUMBER: Tag = Tag(0x0072, 0x0302); // (0072,0302)
/// ImageBoxLayoutType (0072,0304) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_LAYOUT_TYPE: Tag = Tag(0x0072, 0x0304); // (0072,0304)
/// ImageBoxTileHorizontalDimension (0072,0306) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_TILE_HORIZONTAL_DIMENSION: Tag = Tag(0x0072, 0x0306); // (0072,0306)
/// ImageBoxTileVerticalDimension (0072,0308) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_TILE_VERTICAL_DIMENSION: Tag = Tag(0x0072, 0x0308); // (0072,0308)
/// ImageBoxScrollDirection (0072,0310) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_SCROLL_DIRECTION: Tag = Tag(0x0072, 0x0310); // (0072,0310)
/// ImageBoxSmallScrollType (0072,0312) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_SMALL_SCROLL_TYPE: Tag = Tag(0x0072, 0x0312); // (0072,0312)
/// ImageBoxSmallScrollAmount (0072,0314) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_SMALL_SCROLL_AMOUNT: Tag = Tag(0x0072, 0x0314); // (0072,0314)
/// ImageBoxLargeScrollType (0072,0316) CS 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_LARGE_SCROLL_TYPE: Tag = Tag(0x0072, 0x0316); // (0072,0316)
/// ImageBoxLargeScrollAmount (0072,0318) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_LARGE_SCROLL_AMOUNT: Tag = Tag(0x0072, 0x0318); // (0072,0318)
/// ImageBoxOverlapPriority (0072,0320) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_OVERLAP_PRIORITY: Tag = Tag(0x0072, 0x0320); // (0072,0320)
/// CineRelativeToRealTime (0072,0330) FD 1 DICOM
#[rustfmt::skip]
pub const CINE_RELATIVE_TO_REAL_TIME: Tag = Tag(0x0072, 0x0330); // (0072,0330)
/// FilterOperationsSequence (0072,0400) SQ 1 DICOM
#[rustfmt::skip]
pub const FILTER_OPERATIONS_SEQUENCE: Tag = Tag(0x0072, 0x0400); // (0072,0400)
/// FilterByCategory (0072,0402) CS 1 DICOM
#[rustfmt::skip]
pub const FILTER_BY_CATEGORY: Tag = Tag(0x0072, 0x0402); // (0072,0402)
/// FilterByAttributePresence (0072,0404) CS 1 DICOM
#[rustfmt::skip]
pub const FILTER_BY_ATTRIBUTE_PRESENCE: Tag = Tag(0x0072, 0x0404); // (0072,0404)
/// FilterByOperator (0072,0406) CS 1 DICOM
#[rustfmt::skip]
pub const FILTER_BY_OPERATOR: Tag = Tag(0x0072, 0x0406); // (0072,0406)
/// StructuredDisplayBackgroundCIELabValue (0072,0420) US 3 DICOM
#[rustfmt::skip]
pub const STRUCTURED_DISPLAY_BACKGROUND_CIE_LAB_VALUE: Tag = Tag(0x0072, 0x0420); // (0072,0420)
/// EmptyImageBoxCIELabValue (0072,0421) US 3 DICOM
#[rustfmt::skip]
pub const EMPTY_IMAGE_BOX_CIE_LAB_VALUE: Tag = Tag(0x0072, 0x0421); // (0072,0421)
/// StructuredDisplayImageBoxSequence (0072,0422) SQ 1 DICOM
#[rustfmt::skip]
pub const STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE: Tag = Tag(0x0072, 0x0422); // (0072,0422)
/// StructuredDisplayTextBoxSequence (0072,0424) SQ 1 DICOM
#[rustfmt::skip]
pub const STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE: Tag = Tag(0x0072, 0x0424); // (0072,0424)
/// ReferencedFirstFrameSequence (0072,0427) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FIRST_FRAME_SEQUENCE: Tag = Tag(0x0072, 0x0427); // (0072,0427)
/// ImageBoxSynchronizationSequence (0072,0430) SQ 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_SYNCHRONIZATION_SEQUENCE: Tag = Tag(0x0072, 0x0430); // (0072,0430)
/// SynchronizedImageBoxList (0072,0432) US 2-n DICOM
#[rustfmt::skip]
pub const SYNCHRONIZED_IMAGE_BOX_LIST: Tag = Tag(0x0072, 0x0432); // (0072,0432)
/// TypeOfSynchronization (0072,0434) CS 1 DICOM
#[rustfmt::skip]
pub const TYPE_OF_SYNCHRONIZATION: Tag = Tag(0x0072, 0x0434); // (0072,0434)
/// BlendingOperationType (0072,0500) CS 1 DICOM
#[rustfmt::skip]
pub const BLENDING_OPERATION_TYPE: Tag = Tag(0x0072, 0x0500); // (0072,0500)
/// ReformattingOperationType (0072,0510) CS 1 DICOM
#[rustfmt::skip]
pub const REFORMATTING_OPERATION_TYPE: Tag = Tag(0x0072, 0x0510); // (0072,0510)
/// ReformattingThickness (0072,0512) FD 1 DICOM
#[rustfmt::skip]
pub const REFORMATTING_THICKNESS: Tag = Tag(0x0072, 0x0512); // (0072,0512)
/// ReformattingInterval (0072,0514) FD 1 DICOM
#[rustfmt::skip]
pub const REFORMATTING_INTERVAL: Tag = Tag(0x0072, 0x0514); // (0072,0514)
/// ReformattingOperationInitialViewDirection (0072,0516) CS 1 DICOM
#[rustfmt::skip]
pub const REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION: Tag = Tag(0x0072, 0x0516); // (0072,0516)
/// ThreeDRenderingType (0072,0520) CS 1-n DICOM
#[rustfmt::skip]
pub const THREE_D_RENDERING_TYPE: Tag = Tag(0x0072, 0x0520); // (0072,0520)
/// SortingOperationsSequence (0072,0600) SQ 1 DICOM
#[rustfmt::skip]
pub const SORTING_OPERATIONS_SEQUENCE: Tag = Tag(0x0072, 0x0600); // (0072,0600)
/// SortByCategory (0072,0602) CS 1 DICOM
#[rustfmt::skip]
pub const SORT_BY_CATEGORY: Tag = Tag(0x0072, 0x0602); // (0072,0602)
/// SortingDirection (0072,0604) CS 1 DICOM
#[rustfmt::skip]
pub const SORTING_DIRECTION: Tag = Tag(0x0072, 0x0604); // (0072,0604)
/// DisplaySetPatientOrientation (0072,0700) CS 2 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_PATIENT_ORIENTATION: Tag = Tag(0x0072, 0x0700); // (0072,0700)
/// VOIType (0072,0702) CS 1 DICOM
#[rustfmt::skip]
pub const VOI_TYPE: Tag = Tag(0x0072, 0x0702); // (0072,0702)
/// PseudoColorType (0072,0704) CS 1 DICOM
#[rustfmt::skip]
pub const PSEUDO_COLOR_TYPE: Tag = Tag(0x0072, 0x0704); // (0072,0704)
/// PseudoColorPaletteInstanceReferenceSequence (0072,0705) SQ 1 DICOM
#[rustfmt::skip]
pub const PSEUDO_COLOR_PALETTE_INSTANCE_REFERENCE_SEQUENCE: Tag = Tag(0x0072, 0x0705); // (0072,0705)
/// ShowGrayscaleInverted (0072,0706) CS 1 DICOM
#[rustfmt::skip]
pub const SHOW_GRAYSCALE_INVERTED: Tag = Tag(0x0072, 0x0706); // (0072,0706)
/// ShowImageTrueSizeFlag (0072,0710) CS 1 DICOM
#[rustfmt::skip]
pub const SHOW_IMAGE_TRUE_SIZE_FLAG: Tag = Tag(0x0072, 0x0710); // (0072,0710)
/// ShowGraphicAnnotationFlag (0072,0712) CS 1 DICOM
#[rustfmt::skip]
pub const SHOW_GRAPHIC_ANNOTATION_FLAG: Tag = Tag(0x0072, 0x0712); // (0072,0712)
/// ShowPatientDemographicsFlag (0072,0714) CS 1 DICOM
#[rustfmt::skip]
pub const SHOW_PATIENT_DEMOGRAPHICS_FLAG: Tag = Tag(0x0072, 0x0714); // (0072,0714)
/// ShowAcquisitionTechniquesFlag (0072,0716) CS 1 DICOM
#[rustfmt::skip]
pub const SHOW_ACQUISITION_TECHNIQUES_FLAG: Tag = Tag(0x0072, 0x0716); // (0072,0716)
/// DisplaySetHorizontalJustification (0072,0717) CS 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_HORIZONTAL_JUSTIFICATION: Tag = Tag(0x0072, 0x0717); // (0072,0717)
/// DisplaySetVerticalJustification (0072,0718) CS 1 DICOM
#[rustfmt::skip]
pub const DISPLAY_SET_VERTICAL_JUSTIFICATION: Tag = Tag(0x0072, 0x0718); // (0072,0718)
/// ContinuationStartMeterset (0074,0120) FD 1 DICOM
#[rustfmt::skip]
pub const CONTINUATION_START_METERSET: Tag = Tag(0x0074, 0x0120); // (0074,0120)
/// ContinuationEndMeterset (0074,0121) FD 1 DICOM
#[rustfmt::skip]
pub const CONTINUATION_END_METERSET: Tag = Tag(0x0074, 0x0121); // (0074,0121)
/// ProcedureStepState (0074,1000) CS 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_STATE: Tag = Tag(0x0074, 0x1000); // (0074,1000)
/// ProcedureStepProgressInformationSequence (0074,1002) SQ 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE: Tag = Tag(0x0074, 0x1002); // (0074,1002)
/// ProcedureStepProgress (0074,1004) DS 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_PROGRESS: Tag = Tag(0x0074, 0x1004); // (0074,1004)
/// ProcedureStepProgressDescription (0074,1006) ST 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_PROGRESS_DESCRIPTION: Tag = Tag(0x0074, 0x1006); // (0074,1006)
/// ProcedureStepProgressParametersSequence (0074,1007) SQ 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_PROGRESS_PARAMETERS_SEQUENCE: Tag = Tag(0x0074, 0x1007); // (0074,1007)
/// ProcedureStepCommunicationsURISequence (0074,1008) SQ 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_COMMUNICATIONS_URI_SEQUENCE: Tag = Tag(0x0074, 0x1008); // (0074,1008)
/// ContactURI (0074,100A) UR 1 DICOM
#[rustfmt::skip]
pub const CONTACT_URI: Tag = Tag(0x0074, 0x100A); // (0074,100A)
/// ContactDisplayName (0074,100C) LO 1 DICOM
#[rustfmt::skip]
pub const CONTACT_DISPLAY_NAME: Tag = Tag(0x0074, 0x100C); // (0074,100C)
/// ProcedureStepDiscontinuationReasonCodeSequence (0074,100E) SQ 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE: Tag = Tag(0x0074, 0x100E); // (0074,100E)
/// BeamTaskSequence (0074,1020) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_TASK_SEQUENCE: Tag = Tag(0x0074, 0x1020); // (0074,1020)
/// BeamTaskType (0074,1022) CS 1 DICOM
#[rustfmt::skip]
pub const BEAM_TASK_TYPE: Tag = Tag(0x0074, 0x1022); // (0074,1022)
/// AutosequenceFlag (0074,1025) CS 1 DICOM
#[rustfmt::skip]
pub const AUTOSEQUENCE_FLAG: Tag = Tag(0x0074, 0x1025); // (0074,1025)
/// TableTopVerticalAdjustedPosition (0074,1026) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_VERTICAL_ADJUSTED_POSITION: Tag = Tag(0x0074, 0x1026); // (0074,1026)
/// TableTopLongitudinalAdjustedPosition (0074,1027) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LONGITUDINAL_ADJUSTED_POSITION: Tag = Tag(0x0074, 0x1027); // (0074,1027)
/// TableTopLateralAdjustedPosition (0074,1028) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LATERAL_ADJUSTED_POSITION: Tag = Tag(0x0074, 0x1028); // (0074,1028)
/// PatientSupportAdjustedAngle (0074,102A) FD 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_ADJUSTED_ANGLE: Tag = Tag(0x0074, 0x102A); // (0074,102A)
/// TableTopEccentricAdjustedAngle (0074,102B) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ECCENTRIC_ADJUSTED_ANGLE: Tag = Tag(0x0074, 0x102B); // (0074,102B)
/// TableTopPitchAdjustedAngle (0074,102C) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_PITCH_ADJUSTED_ANGLE: Tag = Tag(0x0074, 0x102C); // (0074,102C)
/// TableTopRollAdjustedAngle (0074,102D) FD 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ROLL_ADJUSTED_ANGLE: Tag = Tag(0x0074, 0x102D); // (0074,102D)
/// DeliveryVerificationImageSequence (0074,1030) SQ 1 DICOM
#[rustfmt::skip]
pub const DELIVERY_VERIFICATION_IMAGE_SEQUENCE: Tag = Tag(0x0074, 0x1030); // (0074,1030)
/// VerificationImageTiming (0074,1032) CS 1 DICOM
#[rustfmt::skip]
pub const VERIFICATION_IMAGE_TIMING: Tag = Tag(0x0074, 0x1032); // (0074,1032)
/// DoubleExposureFlag (0074,1034) CS 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_EXPOSURE_FLAG: Tag = Tag(0x0074, 0x1034); // (0074,1034)
/// DoubleExposureOrdering (0074,1036) CS 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_EXPOSURE_ORDERING: Tag = Tag(0x0074, 0x1036); // (0074,1036)
/// RelatedReferenceRTImageSequence (0074,1040) SQ 1 DICOM
#[rustfmt::skip]
pub const RELATED_REFERENCE_RT_IMAGE_SEQUENCE: Tag = Tag(0x0074, 0x1040); // (0074,1040)
/// GeneralMachineVerificationSequence (0074,1042) SQ 1 DICOM
#[rustfmt::skip]
pub const GENERAL_MACHINE_VERIFICATION_SEQUENCE: Tag = Tag(0x0074, 0x1042); // (0074,1042)
/// ConventionalMachineVerificationSequence (0074,1044) SQ 1 DICOM
#[rustfmt::skip]
pub const CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE: Tag = Tag(0x0074, 0x1044); // (0074,1044)
/// IonMachineVerificationSequence (0074,1046) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_MACHINE_VERIFICATION_SEQUENCE: Tag = Tag(0x0074, 0x1046); // (0074,1046)
/// FailedAttributesSequence (0074,1048) SQ 1 DICOM
#[rustfmt::skip]
pub const FAILED_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0074, 0x1048); // (0074,1048)
/// OverriddenAttributesSequence (0074,104A) SQ 1 DICOM
#[rustfmt::skip]
pub const OVERRIDDEN_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0074, 0x104A); // (0074,104A)
/// ConventionalControlPointVerificationSequence (0074,104C) SQ 1 DICOM
#[rustfmt::skip]
pub const CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE: Tag = Tag(0x0074, 0x104C); // (0074,104C)
/// IonControlPointVerificationSequence (0074,104E) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_CONTROL_POINT_VERIFICATION_SEQUENCE: Tag = Tag(0x0074, 0x104E); // (0074,104E)
/// AttributeOccurrenceSequence (0074,1050) SQ 1 DICOM
#[rustfmt::skip]
pub const ATTRIBUTE_OCCURRENCE_SEQUENCE: Tag = Tag(0x0074, 0x1050); // (0074,1050)
/// AttributeOccurrencePointer (0074,1052) AT 1 DICOM
#[rustfmt::skip]
pub const ATTRIBUTE_OCCURRENCE_POINTER: Tag = Tag(0x0074, 0x1052); // (0074,1052)
/// AttributeItemSelector (0074,1054) UL 1 DICOM
#[rustfmt::skip]
pub const ATTRIBUTE_ITEM_SELECTOR: Tag = Tag(0x0074, 0x1054); // (0074,1054)
/// AttributeOccurrencePrivateCreator (0074,1056) LO 1 DICOM
#[rustfmt::skip]
pub const ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR: Tag = Tag(0x0074, 0x1056); // (0074,1056)
/// SelectorSequencePointerItems (0074,1057) IS 1-n DICOM
#[rustfmt::skip]
pub const SELECTOR_SEQUENCE_POINTER_ITEMS: Tag = Tag(0x0074, 0x1057); // (0074,1057)
/// ScheduledProcedureStepPriority (0074,1200) CS 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCEDURE_STEP_PRIORITY: Tag = Tag(0x0074, 0x1200); // (0074,1200)
/// WorklistLabel (0074,1202) LO 1 DICOM
#[rustfmt::skip]
pub const WORKLIST_LABEL: Tag = Tag(0x0074, 0x1202); // (0074,1202)
/// ProcedureStepLabel (0074,1204) LO 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_STEP_LABEL: Tag = Tag(0x0074, 0x1204); // (0074,1204)
/// ScheduledProcessingParametersSequence (0074,1210) SQ 1 DICOM
#[rustfmt::skip]
pub const SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE: Tag = Tag(0x0074, 0x1210); // (0074,1210)
/// PerformedProcessingParametersSequence (0074,1212) SQ 1 DICOM
#[rustfmt::skip]
pub const PERFORMED_PROCESSING_PARAMETERS_SEQUENCE: Tag = Tag(0x0074, 0x1212); // (0074,1212)
/// UnifiedProcedureStepPerformedProcedureSequence (0074,1216) SQ 1 DICOM
#[rustfmt::skip]
pub const UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE: Tag = Tag(0x0074, 0x1216); // (0074,1216)
/// ReplacedProcedureStepSequence (0074,1224) SQ 1 DICOM
#[rustfmt::skip]
pub const REPLACED_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0074, 0x1224); // (0074,1224)
/// DeletionLock (0074,1230) LO 1 DICOM
#[rustfmt::skip]
pub const DELETION_LOCK: Tag = Tag(0x0074, 0x1230); // (0074,1230)
/// ReceivingAE (0074,1234) AE 1 DICOM
#[rustfmt::skip]
pub const RECEIVING_AE: Tag = Tag(0x0074, 0x1234); // (0074,1234)
/// RequestingAE (0074,1236) AE 1 DICOM
#[rustfmt::skip]
pub const REQUESTING_AE: Tag = Tag(0x0074, 0x1236); // (0074,1236)
/// ReasonForCancellation (0074,1238) LT 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_CANCELLATION: Tag = Tag(0x0074, 0x1238); // (0074,1238)
/// SCPStatus (0074,1242) CS 1 DICOM
#[rustfmt::skip]
pub const SCP_STATUS: Tag = Tag(0x0074, 0x1242); // (0074,1242)
/// SubscriptionListStatus (0074,1244) CS 1 DICOM
#[rustfmt::skip]
pub const SUBSCRIPTION_LIST_STATUS: Tag = Tag(0x0074, 0x1244); // (0074,1244)
/// UnifiedProcedureStepListStatus (0074,1246) CS 1 DICOM
#[rustfmt::skip]
pub const UNIFIED_PROCEDURE_STEP_LIST_STATUS: Tag = Tag(0x0074, 0x1246); // (0074,1246)
/// BeamOrderIndex (0074,1324) UL 1 DICOM
#[rustfmt::skip]
pub const BEAM_ORDER_INDEX: Tag = Tag(0x0074, 0x1324); // (0074,1324)
/// DoubleExposureMeterset (0074,1338) FD 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_EXPOSURE_METERSET: Tag = Tag(0x0074, 0x1338); // (0074,1338)
/// DoubleExposureFieldDelta (0074,133A) FD 4 DICOM
#[rustfmt::skip]
pub const DOUBLE_EXPOSURE_FIELD_DELTA: Tag = Tag(0x0074, 0x133A); // (0074,133A)
/// BrachyTaskSequence (0074,1401) SQ 1 DICOM
#[rustfmt::skip]
pub const BRACHY_TASK_SEQUENCE: Tag = Tag(0x0074, 0x1401); // (0074,1401)
/// ContinuationStartTotalReferenceAirKerma (0074,1402) DS 1 DICOM
#[rustfmt::skip]
pub const CONTINUATION_START_TOTAL_REFERENCE_AIR_KERMA: Tag = Tag(0x0074, 0x1402); // (0074,1402)
/// ContinuationEndTotalReferenceAirKerma (0074,1403) DS 1 DICOM
#[rustfmt::skip]
pub const CONTINUATION_END_TOTAL_REFERENCE_AIR_KERMA: Tag = Tag(0x0074, 0x1403); // (0074,1403)
/// ContinuationPulseNumber (0074,1404) IS 1 DICOM
#[rustfmt::skip]
pub const CONTINUATION_PULSE_NUMBER: Tag = Tag(0x0074, 0x1404); // (0074,1404)
/// ChannelDeliveryOrderSequence (0074,1405) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DELIVERY_ORDER_SEQUENCE: Tag = Tag(0x0074, 0x1405); // (0074,1405)
/// ReferencedChannelNumber (0074,1406) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CHANNEL_NUMBER: Tag = Tag(0x0074, 0x1406); // (0074,1406)
/// StartCumulativeTimeWeight (0074,1407) DS 1 DICOM
#[rustfmt::skip]
pub const START_CUMULATIVE_TIME_WEIGHT: Tag = Tag(0x0074, 0x1407); // (0074,1407)
/// EndCumulativeTimeWeight (0074,1408) DS 1 DICOM
#[rustfmt::skip]
pub const END_CUMULATIVE_TIME_WEIGHT: Tag = Tag(0x0074, 0x1408); // (0074,1408)
/// OmittedChannelSequence (0074,1409) SQ 1 DICOM
#[rustfmt::skip]
pub const OMITTED_CHANNEL_SEQUENCE: Tag = Tag(0x0074, 0x1409); // (0074,1409)
/// ReasonForChannelOmission (0074,140A) CS 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_CHANNEL_OMISSION: Tag = Tag(0x0074, 0x140A); // (0074,140A)
/// ReasonForChannelOmissionDescription (0074,140B) LO 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_CHANNEL_OMISSION_DESCRIPTION: Tag = Tag(0x0074, 0x140B); // (0074,140B)
/// ChannelDeliveryOrderIndex (0074,140C) IS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DELIVERY_ORDER_INDEX: Tag = Tag(0x0074, 0x140C); // (0074,140C)
/// ChannelDeliveryContinuationSequence (0074,140D) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_DELIVERY_CONTINUATION_SEQUENCE: Tag = Tag(0x0074, 0x140D); // (0074,140D)
/// OmittedApplicationSetupSequence (0074,140E) SQ 1 DICOM
#[rustfmt::skip]
pub const OMITTED_APPLICATION_SETUP_SEQUENCE: Tag = Tag(0x0074, 0x140E); // (0074,140E)
/// ImplantAssemblyTemplateName (0076,0001) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_ASSEMBLY_TEMPLATE_NAME: Tag = Tag(0x0076, 0x0001); // (0076,0001)
/// ImplantAssemblyTemplateIssuer (0076,0003) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_ASSEMBLY_TEMPLATE_ISSUER: Tag = Tag(0x0076, 0x0003); // (0076,0003)
/// ImplantAssemblyTemplateVersion (0076,0006) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_ASSEMBLY_TEMPLATE_VERSION: Tag = Tag(0x0076, 0x0006); // (0076,0006)
/// ReplacedImplantAssemblyTemplateSequence (0076,0008) SQ 1 DICOM
#[rustfmt::skip]
pub const REPLACED_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE: Tag = Tag(0x0076, 0x0008); // (0076,0008)
/// ImplantAssemblyTemplateType (0076,000A) CS 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_ASSEMBLY_TEMPLATE_TYPE: Tag = Tag(0x0076, 0x000A); // (0076,000A)
/// OriginalImplantAssemblyTemplateSequence (0076,000C) SQ 1 DICOM
#[rustfmt::skip]
pub const ORIGINAL_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE: Tag = Tag(0x0076, 0x000C); // (0076,000C)
/// DerivationImplantAssemblyTemplateSequence (0076,000E) SQ 1 DICOM
#[rustfmt::skip]
pub const DERIVATION_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE: Tag = Tag(0x0076, 0x000E); // (0076,000E)
/// ImplantAssemblyTemplateTargetAnatomySequence (0076,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_ASSEMBLY_TEMPLATE_TARGET_ANATOMY_SEQUENCE: Tag = Tag(0x0076, 0x0010); // (0076,0010)
/// ProcedureTypeCodeSequence (0076,0020) SQ 1 DICOM
#[rustfmt::skip]
pub const PROCEDURE_TYPE_CODE_SEQUENCE: Tag = Tag(0x0076, 0x0020); // (0076,0020)
/// SurgicalTechnique (0076,0030) LO 1 DICOM
#[rustfmt::skip]
pub const SURGICAL_TECHNIQUE: Tag = Tag(0x0076, 0x0030); // (0076,0030)
/// ComponentTypesSequence (0076,0032) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_TYPES_SEQUENCE: Tag = Tag(0x0076, 0x0032); // (0076,0032)
/// ComponentTypeCodeSequence (0076,0034) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0076, 0x0034); // (0076,0034)
/// ExclusiveComponentType (0076,0036) CS 1 DICOM
#[rustfmt::skip]
pub const EXCLUSIVE_COMPONENT_TYPE: Tag = Tag(0x0076, 0x0036); // (0076,0036)
/// MandatoryComponentType (0076,0038) CS 1 DICOM
#[rustfmt::skip]
pub const MANDATORY_COMPONENT_TYPE: Tag = Tag(0x0076, 0x0038); // (0076,0038)
/// ComponentSequence (0076,0040) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_SEQUENCE: Tag = Tag(0x0076, 0x0040); // (0076,0040)
/// ComponentID (0076,0055) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_ID: Tag = Tag(0x0076, 0x0055); // (0076,0055)
/// ComponentAssemblySequence (0076,0060) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPONENT_ASSEMBLY_SEQUENCE: Tag = Tag(0x0076, 0x0060); // (0076,0060)
/// Component1ReferencedID (0076,0070) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT1_REFERENCED_ID: Tag = Tag(0x0076, 0x0070); // (0076,0070)
/// Component1ReferencedMatingFeatureSetID (0076,0080) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT1_REFERENCED_MATING_FEATURE_SET_ID: Tag = Tag(0x0076, 0x0080); // (0076,0080)
/// Component1ReferencedMatingFeatureID (0076,0090) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT1_REFERENCED_MATING_FEATURE_ID: Tag = Tag(0x0076, 0x0090); // (0076,0090)
/// Component2ReferencedID (0076,00A0) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT2_REFERENCED_ID: Tag = Tag(0x0076, 0x00A0); // (0076,00A0)
/// Component2ReferencedMatingFeatureSetID (0076,00B0) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT2_REFERENCED_MATING_FEATURE_SET_ID: Tag = Tag(0x0076, 0x00B0); // (0076,00B0)
/// Component2ReferencedMatingFeatureID (0076,00C0) US 1 DICOM
#[rustfmt::skip]
pub const COMPONENT2_REFERENCED_MATING_FEATURE_ID: Tag = Tag(0x0076, 0x00C0); // (0076,00C0)
/// ImplantTemplateGroupName (0078,0001) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_NAME: Tag = Tag(0x0078, 0x0001); // (0078,0001)
/// ImplantTemplateGroupDescription (0078,0010) ST 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_DESCRIPTION: Tag = Tag(0x0078, 0x0010); // (0078,0010)
/// ImplantTemplateGroupIssuer (0078,0020) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_ISSUER: Tag = Tag(0x0078, 0x0020); // (0078,0020)
/// ImplantTemplateGroupVersion (0078,0024) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_VERSION: Tag = Tag(0x0078, 0x0024); // (0078,0024)
/// ReplacedImplantTemplateGroupSequence (0078,0026) SQ 1 DICOM
#[rustfmt::skip]
pub const REPLACED_IMPLANT_TEMPLATE_GROUP_SEQUENCE: Tag = Tag(0x0078, 0x0026); // (0078,0026)
/// ImplantTemplateGroupTargetAnatomySequence (0078,0028) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_TARGET_ANATOMY_SEQUENCE: Tag = Tag(0x0078, 0x0028); // (0078,0028)
/// ImplantTemplateGroupMembersSequence (0078,002A) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_MEMBERS_SEQUENCE: Tag = Tag(0x0078, 0x002A); // (0078,002A)
/// ImplantTemplateGroupMemberID (0078,002E) US 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_MEMBER_ID: Tag = Tag(0x0078, 0x002E); // (0078,002E)
/// ThreeDImplantTemplateGroupMemberMatchingPoint (0078,0050) FD 3 DICOM
#[rustfmt::skip]
pub const THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT: Tag = Tag(0x0078, 0x0050); // (0078,0050)
/// ThreeDImplantTemplateGroupMemberMatchingAxes (0078,0060) FD 9 DICOM
#[rustfmt::skip]
pub const THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES: Tag = Tag(0x0078, 0x0060); // (0078,0060)
/// ImplantTemplateGroupMemberMatching2DCoordinatesSequence (0078,0070) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING2_D_COORDINATES_SEQUENCE: Tag = Tag(0x0078, 0x0070); // (0078,0070)
/// TwoDImplantTemplateGroupMemberMatchingPoint (0078,0090) FD 2 DICOM
#[rustfmt::skip]
pub const TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT: Tag = Tag(0x0078, 0x0090); // (0078,0090)
/// TwoDImplantTemplateGroupMemberMatchingAxes (0078,00A0) FD 4 DICOM
#[rustfmt::skip]
pub const TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES: Tag = Tag(0x0078, 0x00A0); // (0078,00A0)
/// ImplantTemplateGroupVariationDimensionSequence (0078,00B0) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_SEQUENCE: Tag = Tag(0x0078, 0x00B0); // (0078,00B0)
/// ImplantTemplateGroupVariationDimensionName (0078,00B2) LO 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_NAME: Tag = Tag(0x0078, 0x00B2); // (0078,00B2)
/// ImplantTemplateGroupVariationDimensionRankSequence (0078,00B4) SQ 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK_SEQUENCE: Tag = Tag(0x0078, 0x00B4); // (0078,00B4)
/// ReferencedImplantTemplateGroupMemberID (0078,00B6) US 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_IMPLANT_TEMPLATE_GROUP_MEMBER_ID: Tag = Tag(0x0078, 0x00B6); // (0078,00B6)
/// ImplantTemplateGroupVariationDimensionRank (0078,00B8) US 1 DICOM
#[rustfmt::skip]
pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK: Tag = Tag(0x0078, 0x00B8); // (0078,00B8)
/// SurfaceScanAcquisitionTypeCodeSequence (0080,0001) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_SCAN_ACQUISITION_TYPE_CODE_SEQUENCE: Tag = Tag(0x0080, 0x0001); // (0080,0001)
/// SurfaceScanModeCodeSequence (0080,0002) SQ 1 DICOM
#[rustfmt::skip]
pub const SURFACE_SCAN_MODE_CODE_SEQUENCE: Tag = Tag(0x0080, 0x0002); // (0080,0002)
/// RegistrationMethodCodeSequence (0080,0003) SQ 1 DICOM
#[rustfmt::skip]
pub const REGISTRATION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0080, 0x0003); // (0080,0003)
/// ShotDurationTime (0080,0004) FD 1 DICOM
#[rustfmt::skip]
pub const SHOT_DURATION_TIME: Tag = Tag(0x0080, 0x0004); // (0080,0004)
/// ShotOffsetTime (0080,0005) FD 1 DICOM
#[rustfmt::skip]
pub const SHOT_OFFSET_TIME: Tag = Tag(0x0080, 0x0005); // (0080,0005)
/// SurfacePointPresentationValueData (0080,0006) US 1-n DICOM
#[rustfmt::skip]
pub const SURFACE_POINT_PRESENTATION_VALUE_DATA: Tag = Tag(0x0080, 0x0006); // (0080,0006)
/// SurfacePointColorCIELabValueData (0080,0007) US 3-3n DICOM
#[rustfmt::skip]
pub const SURFACE_POINT_COLOR_CIE_LAB_VALUE_DATA: Tag = Tag(0x0080, 0x0007); // (0080,0007)
/// UVMappingSequence (0080,0008) SQ 1 DICOM
#[rustfmt::skip]
pub const UV_MAPPING_SEQUENCE: Tag = Tag(0x0080, 0x0008); // (0080,0008)
/// TextureLabel (0080,0009) SH 1 DICOM
#[rustfmt::skip]
pub const TEXTURE_LABEL: Tag = Tag(0x0080, 0x0009); // (0080,0009)
/// UValueData (0080,0010) OF 1-n DICOM
#[rustfmt::skip]
pub const U_VALUE_DATA: Tag = Tag(0x0080, 0x0010); // (0080,0010)
/// VValueData (0080,0011) OF 1-n DICOM
#[rustfmt::skip]
pub const V_VALUE_DATA: Tag = Tag(0x0080, 0x0011); // (0080,0011)
/// ReferencedTextureSequence (0080,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_TEXTURE_SEQUENCE: Tag = Tag(0x0080, 0x0012); // (0080,0012)
/// ReferencedSurfaceDataSequence (0080,0013) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SURFACE_DATA_SEQUENCE: Tag = Tag(0x0080, 0x0013); // (0080,0013)
/// AssessmentSummary (0082,0001) CS 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_SUMMARY: Tag = Tag(0x0082, 0x0001); // (0082,0001)
/// AssessmentSummaryDescription (0082,0003) UT 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_SUMMARY_DESCRIPTION: Tag = Tag(0x0082, 0x0003); // (0082,0003)
/// AssessedSOPInstanceSequence (0082,0004) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSESSED_SOP_INSTANCE_SEQUENCE: Tag = Tag(0x0082, 0x0004); // (0082,0004)
/// ReferencedComparisonSOPInstanceSequence (0082,0005) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_COMPARISON_SOP_INSTANCE_SEQUENCE: Tag = Tag(0x0082, 0x0005); // (0082,0005)
/// NumberOfAssessmentObservations (0082,0006) UL 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_ASSESSMENT_OBSERVATIONS: Tag = Tag(0x0082, 0x0006); // (0082,0006)
/// AssessmentObservationsSequence (0082,0007) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_OBSERVATIONS_SEQUENCE: Tag = Tag(0x0082, 0x0007); // (0082,0007)
/// ObservationSignificance (0082,0008) CS 1 DICOM
#[rustfmt::skip]
pub const OBSERVATION_SIGNIFICANCE: Tag = Tag(0x0082, 0x0008); // (0082,0008)
/// ObservationDescription (0082,000A) UT 1 DICOM
#[rustfmt::skip]
pub const OBSERVATION_DESCRIPTION: Tag = Tag(0x0082, 0x000A); // (0082,000A)
/// StructuredConstraintObservationSequence (0082,000C) SQ 1 DICOM
#[rustfmt::skip]
pub const STRUCTURED_CONSTRAINT_OBSERVATION_SEQUENCE: Tag = Tag(0x0082, 0x000C); // (0082,000C)
/// AssessedAttributeValueSequence (0082,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSESSED_ATTRIBUTE_VALUE_SEQUENCE: Tag = Tag(0x0082, 0x0010); // (0082,0010)
/// AssessmentSetID (0082,0016) LO 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_SET_ID: Tag = Tag(0x0082, 0x0016); // (0082,0016)
/// AssessmentRequesterSequence (0082,0017) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_REQUESTER_SEQUENCE: Tag = Tag(0x0082, 0x0017); // (0082,0017)
/// SelectorAttributeName (0082,0018) LO 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_ATTRIBUTE_NAME: Tag = Tag(0x0082, 0x0018); // (0082,0018)
/// SelectorAttributeKeyword (0082,0019) LO 1 DICOM
#[rustfmt::skip]
pub const SELECTOR_ATTRIBUTE_KEYWORD: Tag = Tag(0x0082, 0x0019); // (0082,0019)
/// AssessmentTypeCodeSequence (0082,0021) SQ 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_TYPE_CODE_SEQUENCE: Tag = Tag(0x0082, 0x0021); // (0082,0021)
/// ObservationBasisCodeSequence (0082,0022) SQ 1 DICOM
#[rustfmt::skip]
pub const OBSERVATION_BASIS_CODE_SEQUENCE: Tag = Tag(0x0082, 0x0022); // (0082,0022)
/// AssessmentLabel (0082,0023) LO 1 DICOM
#[rustfmt::skip]
pub const ASSESSMENT_LABEL: Tag = Tag(0x0082, 0x0023); // (0082,0023)
/// ConstraintType (0082,0032) CS 1 DICOM
#[rustfmt::skip]
pub const CONSTRAINT_TYPE: Tag = Tag(0x0082, 0x0032); // (0082,0032)
/// SpecificationSelectionGuidance (0082,0033) UT 1 DICOM
#[rustfmt::skip]
pub const SPECIFICATION_SELECTION_GUIDANCE: Tag = Tag(0x0082, 0x0033); // (0082,0033)
/// ConstraintValueSequence (0082,0034) SQ 1 DICOM
#[rustfmt::skip]
pub const CONSTRAINT_VALUE_SEQUENCE: Tag = Tag(0x0082, 0x0034); // (0082,0034)
/// RecommendedDefaultValueSequence (0082,0035) SQ 1 DICOM
#[rustfmt::skip]
pub const RECOMMENDED_DEFAULT_VALUE_SEQUENCE: Tag = Tag(0x0082, 0x0035); // (0082,0035)
/// ConstraintViolationSignificance (0082,0036) CS 1 DICOM
#[rustfmt::skip]
pub const CONSTRAINT_VIOLATION_SIGNIFICANCE: Tag = Tag(0x0082, 0x0036); // (0082,0036)
/// ConstraintViolationCondition (0082,0037) UT 1 DICOM
#[rustfmt::skip]
pub const CONSTRAINT_VIOLATION_CONDITION: Tag = Tag(0x0082, 0x0037); // (0082,0037)
/// ModifiableConstraintFlag (0082,0038) CS 1 DICOM
#[rustfmt::skip]
pub const MODIFIABLE_CONSTRAINT_FLAG: Tag = Tag(0x0082, 0x0038); // (0082,0038)
/// StorageMediaFileSetID (0088,0130) SH 1 DICOM
#[rustfmt::skip]
pub const STORAGE_MEDIA_FILE_SET_ID: Tag = Tag(0x0088, 0x0130); // (0088,0130)
/// StorageMediaFileSetUID (0088,0140) UI 1 DICOM
#[rustfmt::skip]
pub const STORAGE_MEDIA_FILE_SET_UID: Tag = Tag(0x0088, 0x0140); // (0088,0140)
/// IconImageSequence (0088,0200) SQ 1 DICOM
#[rustfmt::skip]
pub const ICON_IMAGE_SEQUENCE: Tag = Tag(0x0088, 0x0200); // (0088,0200)
/// SOPInstanceStatus (0100,0410) CS 1 DICOM
#[rustfmt::skip]
pub const SOP_INSTANCE_STATUS: Tag = Tag(0x0100, 0x0410); // (0100,0410)
/// SOPAuthorizationDateTime (0100,0420) DT 1 DICOM
#[rustfmt::skip]
pub const SOP_AUTHORIZATION_DATE_TIME: Tag = Tag(0x0100, 0x0420); // (0100,0420)
/// SOPAuthorizationComment (0100,0424) LT 1 DICOM
#[rustfmt::skip]
pub const SOP_AUTHORIZATION_COMMENT: Tag = Tag(0x0100, 0x0424); // (0100,0424)
/// AuthorizationEquipmentCertificationNumber (0100,0426) LO 1 DICOM
#[rustfmt::skip]
pub const AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER: Tag = Tag(0x0100, 0x0426); // (0100,0426)
/// MACIDNumber (0400,0005) US 1 DICOM
#[rustfmt::skip]
pub const MACID_NUMBER: Tag = Tag(0x0400, 0x0005); // (0400,0005)
/// MACCalculationTransferSyntaxUID (0400,0010) UI 1 DICOM
#[rustfmt::skip]
pub const MAC_CALCULATION_TRANSFER_SYNTAX_UID: Tag = Tag(0x0400, 0x0010); // (0400,0010)
/// MACAlgorithm (0400,0015) CS 1 DICOM
#[rustfmt::skip]
pub const MAC_ALGORITHM: Tag = Tag(0x0400, 0x0015); // (0400,0015)
/// DataElementsSigned (0400,0020) AT 1-n DICOM
#[rustfmt::skip]
pub const DATA_ELEMENTS_SIGNED: Tag = Tag(0x0400, 0x0020); // (0400,0020)
/// DigitalSignatureUID (0400,0100) UI 1 DICOM
#[rustfmt::skip]
pub const DIGITAL_SIGNATURE_UID: Tag = Tag(0x0400, 0x0100); // (0400,0100)
/// DigitalSignatureDateTime (0400,0105) DT 1 DICOM
#[rustfmt::skip]
pub const DIGITAL_SIGNATURE_DATE_TIME: Tag = Tag(0x0400, 0x0105); // (0400,0105)
/// CertificateType (0400,0110) CS 1 DICOM
#[rustfmt::skip]
pub const CERTIFICATE_TYPE: Tag = Tag(0x0400, 0x0110); // (0400,0110)
/// CertificateOfSigner (0400,0115) OB 1 DICOM
#[rustfmt::skip]
pub const CERTIFICATE_OF_SIGNER: Tag = Tag(0x0400, 0x0115); // (0400,0115)
/// Signature (0400,0120) OB 1 DICOM
#[rustfmt::skip]
pub const SIGNATURE: Tag = Tag(0x0400, 0x0120); // (0400,0120)
/// CertifiedTimestampType (0400,0305) CS 1 DICOM
#[rustfmt::skip]
pub const CERTIFIED_TIMESTAMP_TYPE: Tag = Tag(0x0400, 0x0305); // (0400,0305)
/// CertifiedTimestamp (0400,0310) OB 1 DICOM
#[rustfmt::skip]
pub const CERTIFIED_TIMESTAMP: Tag = Tag(0x0400, 0x0310); // (0400,0310)
/// DigitalSignaturePurposeCodeSequence (0400,0401) SQ 1 DICOM
#[rustfmt::skip]
pub const DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE: Tag = Tag(0x0400, 0x0401); // (0400,0401)
/// ReferencedDigitalSignatureSequence (0400,0402) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_DIGITAL_SIGNATURE_SEQUENCE: Tag = Tag(0x0400, 0x0402); // (0400,0402)
/// ReferencedSOPInstanceMACSequence (0400,0403) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOP_INSTANCE_MAC_SEQUENCE: Tag = Tag(0x0400, 0x0403); // (0400,0403)
/// MAC (0400,0404) OB 1 DICOM
#[rustfmt::skip]
pub const MAC: Tag = Tag(0x0400, 0x0404); // (0400,0404)
/// EncryptedAttributesSequence (0400,0500) SQ 1 DICOM
#[rustfmt::skip]
pub const ENCRYPTED_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0400, 0x0500); // (0400,0500)
/// EncryptedContentTransferSyntaxUID (0400,0510) UI 1 DICOM
#[rustfmt::skip]
pub const ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID: Tag = Tag(0x0400, 0x0510); // (0400,0510)
/// EncryptedContent (0400,0520) OB 1 DICOM
#[rustfmt::skip]
pub const ENCRYPTED_CONTENT: Tag = Tag(0x0400, 0x0520); // (0400,0520)
/// ModifiedAttributesSequence (0400,0550) SQ 1 DICOM
#[rustfmt::skip]
pub const MODIFIED_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0400, 0x0550); // (0400,0550)
/// OriginalAttributesSequence (0400,0561) SQ 1 DICOM
#[rustfmt::skip]
pub const ORIGINAL_ATTRIBUTES_SEQUENCE: Tag = Tag(0x0400, 0x0561); // (0400,0561)
/// AttributeModificationDateTime (0400,0562) DT 1 DICOM
#[rustfmt::skip]
pub const ATTRIBUTE_MODIFICATION_DATE_TIME: Tag = Tag(0x0400, 0x0562); // (0400,0562)
/// ModifyingSystem (0400,0563) LO 1 DICOM
#[rustfmt::skip]
pub const MODIFYING_SYSTEM: Tag = Tag(0x0400, 0x0563); // (0400,0563)
/// SourceOfPreviousValues (0400,0564) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_OF_PREVIOUS_VALUES: Tag = Tag(0x0400, 0x0564); // (0400,0564)
/// ReasonForTheAttributeModification (0400,0565) CS 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_THE_ATTRIBUTE_MODIFICATION: Tag = Tag(0x0400, 0x0565); // (0400,0565)
/// NumberOfCopies (2000,0010) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_COPIES: Tag = Tag(0x2000, 0x0010); // (2000,0010)
/// PrinterConfigurationSequence (2000,001E) SQ 1 DICOM
#[rustfmt::skip]
pub const PRINTER_CONFIGURATION_SEQUENCE: Tag = Tag(0x2000, 0x001E); // (2000,001E)
/// PrintPriority (2000,0020) CS 1 DICOM
#[rustfmt::skip]
pub const PRINT_PRIORITY: Tag = Tag(0x2000, 0x0020); // (2000,0020)
/// MediumType (2000,0030) CS 1 DICOM
#[rustfmt::skip]
pub const MEDIUM_TYPE: Tag = Tag(0x2000, 0x0030); // (2000,0030)
/// FilmDestination (2000,0040) CS 1 DICOM
#[rustfmt::skip]
pub const FILM_DESTINATION: Tag = Tag(0x2000, 0x0040); // (2000,0040)
/// FilmSessionLabel (2000,0050) LO 1 DICOM
#[rustfmt::skip]
pub const FILM_SESSION_LABEL: Tag = Tag(0x2000, 0x0050); // (2000,0050)
/// MemoryAllocation (2000,0060) IS 1 DICOM
#[rustfmt::skip]
pub const MEMORY_ALLOCATION: Tag = Tag(0x2000, 0x0060); // (2000,0060)
/// MaximumMemoryAllocation (2000,0061) IS 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_MEMORY_ALLOCATION: Tag = Tag(0x2000, 0x0061); // (2000,0061)
/// MemoryBitDepth (2000,00A0) US 1 DICOM
#[rustfmt::skip]
pub const MEMORY_BIT_DEPTH: Tag = Tag(0x2000, 0x00A0); // (2000,00A0)
/// PrintingBitDepth (2000,00A1) US 1 DICOM
#[rustfmt::skip]
pub const PRINTING_BIT_DEPTH: Tag = Tag(0x2000, 0x00A1); // (2000,00A1)
/// MediaInstalledSequence (2000,00A2) SQ 1 DICOM
#[rustfmt::skip]
pub const MEDIA_INSTALLED_SEQUENCE: Tag = Tag(0x2000, 0x00A2); // (2000,00A2)
/// OtherMediaAvailableSequence (2000,00A4) SQ 1 DICOM
#[rustfmt::skip]
pub const OTHER_MEDIA_AVAILABLE_SEQUENCE: Tag = Tag(0x2000, 0x00A4); // (2000,00A4)
/// SupportedImageDisplayFormatsSequence (2000,00A8) SQ 1 DICOM
#[rustfmt::skip]
pub const SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE: Tag = Tag(0x2000, 0x00A8); // (2000,00A8)
/// ReferencedFilmBoxSequence (2000,0500) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FILM_BOX_SEQUENCE: Tag = Tag(0x2000, 0x0500); // (2000,0500)
/// ImageDisplayFormat (2010,0010) ST 1 DICOM
#[rustfmt::skip]
pub const IMAGE_DISPLAY_FORMAT: Tag = Tag(0x2010, 0x0010); // (2010,0010)
/// AnnotationDisplayFormatID (2010,0030) CS 1 DICOM
#[rustfmt::skip]
pub const ANNOTATION_DISPLAY_FORMAT_ID: Tag = Tag(0x2010, 0x0030); // (2010,0030)
/// FilmOrientation (2010,0040) CS 1 DICOM
#[rustfmt::skip]
pub const FILM_ORIENTATION: Tag = Tag(0x2010, 0x0040); // (2010,0040)
/// FilmSizeID (2010,0050) CS 1 DICOM
#[rustfmt::skip]
pub const FILM_SIZE_ID: Tag = Tag(0x2010, 0x0050); // (2010,0050)
/// PrinterResolutionID (2010,0052) CS 1 DICOM
#[rustfmt::skip]
pub const PRINTER_RESOLUTION_ID: Tag = Tag(0x2010, 0x0052); // (2010,0052)
/// DefaultPrinterResolutionID (2010,0054) CS 1 DICOM
#[rustfmt::skip]
pub const DEFAULT_PRINTER_RESOLUTION_ID: Tag = Tag(0x2010, 0x0054); // (2010,0054)
/// MagnificationType (2010,0060) CS 1 DICOM
#[rustfmt::skip]
pub const MAGNIFICATION_TYPE: Tag = Tag(0x2010, 0x0060); // (2010,0060)
/// SmoothingType (2010,0080) CS 1 DICOM
#[rustfmt::skip]
pub const SMOOTHING_TYPE: Tag = Tag(0x2010, 0x0080); // (2010,0080)
/// DefaultMagnificationType (2010,00A6) CS 1 DICOM
#[rustfmt::skip]
pub const DEFAULT_MAGNIFICATION_TYPE: Tag = Tag(0x2010, 0x00A6); // (2010,00A6)
/// OtherMagnificationTypesAvailable (2010,00A7) CS 1-n DICOM
#[rustfmt::skip]
pub const OTHER_MAGNIFICATION_TYPES_AVAILABLE: Tag = Tag(0x2010, 0x00A7); // (2010,00A7)
/// DefaultSmoothingType (2010,00A8) CS 1 DICOM
#[rustfmt::skip]
pub const DEFAULT_SMOOTHING_TYPE: Tag = Tag(0x2010, 0x00A8); // (2010,00A8)
/// OtherSmoothingTypesAvailable (2010,00A9) CS 1-n DICOM
#[rustfmt::skip]
pub const OTHER_SMOOTHING_TYPES_AVAILABLE: Tag = Tag(0x2010, 0x00A9); // (2010,00A9)
/// BorderDensity (2010,0100) CS 1 DICOM
#[rustfmt::skip]
pub const BORDER_DENSITY: Tag = Tag(0x2010, 0x0100); // (2010,0100)
/// EmptyImageDensity (2010,0110) CS 1 DICOM
#[rustfmt::skip]
pub const EMPTY_IMAGE_DENSITY: Tag = Tag(0x2010, 0x0110); // (2010,0110)
/// MinDensity (2010,0120) US 1 DICOM
#[rustfmt::skip]
pub const MIN_DENSITY: Tag = Tag(0x2010, 0x0120); // (2010,0120)
/// MaxDensity (2010,0130) US 1 DICOM
#[rustfmt::skip]
pub const MAX_DENSITY: Tag = Tag(0x2010, 0x0130); // (2010,0130)
/// Trim (2010,0140) CS 1 DICOM
#[rustfmt::skip]
pub const TRIM: Tag = Tag(0x2010, 0x0140); // (2010,0140)
/// ConfigurationInformation (2010,0150) ST 1 DICOM
#[rustfmt::skip]
pub const CONFIGURATION_INFORMATION: Tag = Tag(0x2010, 0x0150); // (2010,0150)
/// ConfigurationInformationDescription (2010,0152) LT 1 DICOM
#[rustfmt::skip]
pub const CONFIGURATION_INFORMATION_DESCRIPTION: Tag = Tag(0x2010, 0x0152); // (2010,0152)
/// MaximumCollatedFilms (2010,0154) IS 1 DICOM
#[rustfmt::skip]
pub const MAXIMUM_COLLATED_FILMS: Tag = Tag(0x2010, 0x0154); // (2010,0154)
/// Illumination (2010,015E) US 1 DICOM
#[rustfmt::skip]
pub const ILLUMINATION: Tag = Tag(0x2010, 0x015E); // (2010,015E)
/// ReflectedAmbientLight (2010,0160) US 1 DICOM
#[rustfmt::skip]
pub const REFLECTED_AMBIENT_LIGHT: Tag = Tag(0x2010, 0x0160); // (2010,0160)
/// PrinterPixelSpacing (2010,0376) DS 2 DICOM
#[rustfmt::skip]
pub const PRINTER_PIXEL_SPACING: Tag = Tag(0x2010, 0x0376); // (2010,0376)
/// ReferencedFilmSessionSequence (2010,0500) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FILM_SESSION_SEQUENCE: Tag = Tag(0x2010, 0x0500); // (2010,0500)
/// ReferencedImageBoxSequence (2010,0510) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_IMAGE_BOX_SEQUENCE: Tag = Tag(0x2010, 0x0510); // (2010,0510)
/// ReferencedBasicAnnotationBoxSequence (2010,0520) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE: Tag = Tag(0x2010, 0x0520); // (2010,0520)
/// ImageBoxPosition (2020,0010) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_BOX_POSITION: Tag = Tag(0x2020, 0x0010); // (2020,0010)
/// Polarity (2020,0020) CS 1 DICOM
#[rustfmt::skip]
pub const POLARITY: Tag = Tag(0x2020, 0x0020); // (2020,0020)
/// RequestedImageSize (2020,0030) DS 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_IMAGE_SIZE: Tag = Tag(0x2020, 0x0030); // (2020,0030)
/// RequestedDecimateCropBehavior (2020,0040) CS 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_DECIMATE_CROP_BEHAVIOR: Tag = Tag(0x2020, 0x0040); // (2020,0040)
/// RequestedResolutionID (2020,0050) CS 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_RESOLUTION_ID: Tag = Tag(0x2020, 0x0050); // (2020,0050)
/// RequestedImageSizeFlag (2020,00A0) CS 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_IMAGE_SIZE_FLAG: Tag = Tag(0x2020, 0x00A0); // (2020,00A0)
/// DecimateCropResult (2020,00A2) CS 1 DICOM
#[rustfmt::skip]
pub const DECIMATE_CROP_RESULT: Tag = Tag(0x2020, 0x00A2); // (2020,00A2)
/// BasicGrayscaleImageSequence (2020,0110) SQ 1 DICOM
#[rustfmt::skip]
pub const BASIC_GRAYSCALE_IMAGE_SEQUENCE: Tag = Tag(0x2020, 0x0110); // (2020,0110)
/// BasicColorImageSequence (2020,0111) SQ 1 DICOM
#[rustfmt::skip]
pub const BASIC_COLOR_IMAGE_SEQUENCE: Tag = Tag(0x2020, 0x0111); // (2020,0111)
/// AnnotationPosition (2030,0010) US 1 DICOM
#[rustfmt::skip]
pub const ANNOTATION_POSITION: Tag = Tag(0x2030, 0x0010); // (2030,0010)
/// TextString (2030,0020) LO 1 DICOM
#[rustfmt::skip]
pub const TEXT_STRING: Tag = Tag(0x2030, 0x0020); // (2030,0020)
/// PresentationLUTSequence (2050,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_LUT_SEQUENCE: Tag = Tag(0x2050, 0x0010); // (2050,0010)
/// PresentationLUTShape (2050,0020) CS 1 DICOM
#[rustfmt::skip]
pub const PRESENTATION_LUT_SHAPE: Tag = Tag(0x2050, 0x0020); // (2050,0020)
/// ReferencedPresentationLUTSequence (2050,0500) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PRESENTATION_LUT_SEQUENCE: Tag = Tag(0x2050, 0x0500); // (2050,0500)
/// ExecutionStatus (2100,0020) CS 1 DICOM
#[rustfmt::skip]
pub const EXECUTION_STATUS: Tag = Tag(0x2100, 0x0020); // (2100,0020)
/// ExecutionStatusInfo (2100,0030) CS 1 DICOM
#[rustfmt::skip]
pub const EXECUTION_STATUS_INFO: Tag = Tag(0x2100, 0x0030); // (2100,0030)
/// CreationDate (2100,0040) DA 1 DICOM
#[rustfmt::skip]
pub const CREATION_DATE: Tag = Tag(0x2100, 0x0040); // (2100,0040)
/// CreationTime (2100,0050) TM 1 DICOM
#[rustfmt::skip]
pub const CREATION_TIME: Tag = Tag(0x2100, 0x0050); // (2100,0050)
/// Originator (2100,0070) AE 1 DICOM
#[rustfmt::skip]
pub const ORIGINATOR: Tag = Tag(0x2100, 0x0070); // (2100,0070)
/// DestinationAE (2100,0140) AE 1 DICOM
#[rustfmt::skip]
pub const DESTINATION_AE: Tag = Tag(0x2100, 0x0140); // (2100,0140)
/// OwnerID (2100,0160) SH 1 DICOM
#[rustfmt::skip]
pub const OWNER_ID: Tag = Tag(0x2100, 0x0160); // (2100,0160)
/// NumberOfFilms (2100,0170) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FILMS: Tag = Tag(0x2100, 0x0170); // (2100,0170)
/// PrinterStatus (2110,0010) CS 1 DICOM
#[rustfmt::skip]
pub const PRINTER_STATUS: Tag = Tag(0x2110, 0x0010); // (2110,0010)
/// PrinterStatusInfo (2110,0020) CS 1 DICOM
#[rustfmt::skip]
pub const PRINTER_STATUS_INFO: Tag = Tag(0x2110, 0x0020); // (2110,0020)
/// PrinterName (2110,0030) LO 1 DICOM
#[rustfmt::skip]
pub const PRINTER_NAME: Tag = Tag(0x2110, 0x0030); // (2110,0030)
/// LabelUsingInformationExtractedFromInstances (2200,0001) CS 1 DICOM
#[rustfmt::skip]
pub const LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES: Tag = Tag(0x2200, 0x0001); // (2200,0001)
/// LabelText (2200,0002) UT 1 DICOM
#[rustfmt::skip]
pub const LABEL_TEXT: Tag = Tag(0x2200, 0x0002); // (2200,0002)
/// LabelStyleSelection (2200,0003) CS 1 DICOM
#[rustfmt::skip]
pub const LABEL_STYLE_SELECTION: Tag = Tag(0x2200, 0x0003); // (2200,0003)
/// MediaDisposition (2200,0004) LT 1 DICOM
#[rustfmt::skip]
pub const MEDIA_DISPOSITION: Tag = Tag(0x2200, 0x0004); // (2200,0004)
/// BarcodeValue (2200,0005) LT 1 DICOM
#[rustfmt::skip]
pub const BARCODE_VALUE: Tag = Tag(0x2200, 0x0005); // (2200,0005)
/// BarcodeSymbology (2200,0006) CS 1 DICOM
#[rustfmt::skip]
pub const BARCODE_SYMBOLOGY: Tag = Tag(0x2200, 0x0006); // (2200,0006)
/// AllowMediaSplitting (2200,0007) CS 1 DICOM
#[rustfmt::skip]
pub const ALLOW_MEDIA_SPLITTING: Tag = Tag(0x2200, 0x0007); // (2200,0007)
/// IncludeNonDICOMObjects (2200,0008) CS 1 DICOM
#[rustfmt::skip]
pub const INCLUDE_NON_DICOM_OBJECTS: Tag = Tag(0x2200, 0x0008); // (2200,0008)
/// IncludeDisplayApplication (2200,0009) CS 1 DICOM
#[rustfmt::skip]
pub const INCLUDE_DISPLAY_APPLICATION: Tag = Tag(0x2200, 0x0009); // (2200,0009)
/// PreserveCompositeInstancesAfterMediaCreation (2200,000A) CS 1 DICOM
#[rustfmt::skip]
pub const PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION: Tag = Tag(0x2200, 0x000A); // (2200,000A)
/// TotalNumberOfPiecesOfMediaCreated (2200,000B) US 1 DICOM
#[rustfmt::skip]
pub const TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED: Tag = Tag(0x2200, 0x000B); // (2200,000B)
/// RequestedMediaApplicationProfile (2200,000C) LO 1 DICOM
#[rustfmt::skip]
pub const REQUESTED_MEDIA_APPLICATION_PROFILE: Tag = Tag(0x2200, 0x000C); // (2200,000C)
/// ReferencedStorageMediaSequence (2200,000D) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_STORAGE_MEDIA_SEQUENCE: Tag = Tag(0x2200, 0x000D); // (2200,000D)
/// FailureAttributes (2200,000E) AT 1-n DICOM
#[rustfmt::skip]
pub const FAILURE_ATTRIBUTES: Tag = Tag(0x2200, 0x000E); // (2200,000E)
/// AllowLossyCompression (2200,000F) CS 1 DICOM
#[rustfmt::skip]
pub const ALLOW_LOSSY_COMPRESSION: Tag = Tag(0x2200, 0x000F); // (2200,000F)
/// RequestPriority (2200,0020) CS 1 DICOM
#[rustfmt::skip]
pub const REQUEST_PRIORITY: Tag = Tag(0x2200, 0x0020); // (2200,0020)
/// RTImageLabel (3002,0002) SH 1 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_LABEL: Tag = Tag(0x3002, 0x0002); // (3002,0002)
/// RTImageName (3002,0003) LO 1 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_NAME: Tag = Tag(0x3002, 0x0003); // (3002,0003)
/// RTImageDescription (3002,0004) ST 1 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_DESCRIPTION: Tag = Tag(0x3002, 0x0004); // (3002,0004)
/// ReportedValuesOrigin (3002,000A) CS 1 DICOM
#[rustfmt::skip]
pub const REPORTED_VALUES_ORIGIN: Tag = Tag(0x3002, 0x000A); // (3002,000A)
/// RTImagePlane (3002,000C) CS 1 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_PLANE: Tag = Tag(0x3002, 0x000C); // (3002,000C)
/// XRayImageReceptorTranslation (3002,000D) DS 3 DICOM
#[rustfmt::skip]
pub const X_RAY_IMAGE_RECEPTOR_TRANSLATION: Tag = Tag(0x3002, 0x000D); // (3002,000D)
/// XRayImageReceptorAngle (3002,000E) DS 1 DICOM
#[rustfmt::skip]
pub const X_RAY_IMAGE_RECEPTOR_ANGLE: Tag = Tag(0x3002, 0x000E); // (3002,000E)
/// RTImageOrientation (3002,0010) DS 6 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_ORIENTATION: Tag = Tag(0x3002, 0x0010); // (3002,0010)
/// ImagePlanePixelSpacing (3002,0011) DS 2 DICOM
#[rustfmt::skip]
pub const IMAGE_PLANE_PIXEL_SPACING: Tag = Tag(0x3002, 0x0011); // (3002,0011)
/// RTImagePosition (3002,0012) DS 2 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_POSITION: Tag = Tag(0x3002, 0x0012); // (3002,0012)
/// RadiationMachineName (3002,0020) SH 1 DICOM
#[rustfmt::skip]
pub const RADIATION_MACHINE_NAME: Tag = Tag(0x3002, 0x0020); // (3002,0020)
/// RadiationMachineSAD (3002,0022) DS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_MACHINE_SAD: Tag = Tag(0x3002, 0x0022); // (3002,0022)
/// RadiationMachineSSD (3002,0024) DS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_MACHINE_SSD: Tag = Tag(0x3002, 0x0024); // (3002,0024)
/// RTImageSID (3002,0026) DS 1 DICOM
#[rustfmt::skip]
pub const RT_IMAGE_SID: Tag = Tag(0x3002, 0x0026); // (3002,0026)
/// SourceToReferenceObjectDistance (3002,0028) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_REFERENCE_OBJECT_DISTANCE: Tag = Tag(0x3002, 0x0028); // (3002,0028)
/// FractionNumber (3002,0029) IS 1 DICOM
#[rustfmt::skip]
pub const FRACTION_NUMBER: Tag = Tag(0x3002, 0x0029); // (3002,0029)
/// ExposureSequence (3002,0030) SQ 1 DICOM
#[rustfmt::skip]
pub const EXPOSURE_SEQUENCE: Tag = Tag(0x3002, 0x0030); // (3002,0030)
/// MetersetExposure (3002,0032) DS 1 DICOM
#[rustfmt::skip]
pub const METERSET_EXPOSURE: Tag = Tag(0x3002, 0x0032); // (3002,0032)
/// DiaphragmPosition (3002,0034) DS 4 DICOM
#[rustfmt::skip]
pub const DIAPHRAGM_POSITION: Tag = Tag(0x3002, 0x0034); // (3002,0034)
/// FluenceMapSequence (3002,0040) SQ 1 DICOM
#[rustfmt::skip]
pub const FLUENCE_MAP_SEQUENCE: Tag = Tag(0x3002, 0x0040); // (3002,0040)
/// FluenceDataSource (3002,0041) CS 1 DICOM
#[rustfmt::skip]
pub const FLUENCE_DATA_SOURCE: Tag = Tag(0x3002, 0x0041); // (3002,0041)
/// FluenceDataScale (3002,0042) DS 1 DICOM
#[rustfmt::skip]
pub const FLUENCE_DATA_SCALE: Tag = Tag(0x3002, 0x0042); // (3002,0042)
/// PrimaryFluenceModeSequence (3002,0050) SQ 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_FLUENCE_MODE_SEQUENCE: Tag = Tag(0x3002, 0x0050); // (3002,0050)
/// FluenceMode (3002,0051) CS 1 DICOM
#[rustfmt::skip]
pub const FLUENCE_MODE: Tag = Tag(0x3002, 0x0051); // (3002,0051)
/// FluenceModeID (3002,0052) SH 1 DICOM
#[rustfmt::skip]
pub const FLUENCE_MODE_ID: Tag = Tag(0x3002, 0x0052); // (3002,0052)
/// DVHType (3004,0001) CS 1 DICOM
#[rustfmt::skip]
pub const DVH_TYPE: Tag = Tag(0x3004, 0x0001); // (3004,0001)
/// DoseUnits (3004,0002) CS 1 DICOM
#[rustfmt::skip]
pub const DOSE_UNITS: Tag = Tag(0x3004, 0x0002); // (3004,0002)
/// DoseType (3004,0004) CS 1 DICOM
#[rustfmt::skip]
pub const DOSE_TYPE: Tag = Tag(0x3004, 0x0004); // (3004,0004)
/// SpatialTransformOfDose (3004,0005) CS 1 DICOM
#[rustfmt::skip]
pub const SPATIAL_TRANSFORM_OF_DOSE: Tag = Tag(0x3004, 0x0005); // (3004,0005)
/// DoseComment (3004,0006) LO 1 DICOM
#[rustfmt::skip]
pub const DOSE_COMMENT: Tag = Tag(0x3004, 0x0006); // (3004,0006)
/// NormalizationPoint (3004,0008) DS 3 DICOM
#[rustfmt::skip]
pub const NORMALIZATION_POINT: Tag = Tag(0x3004, 0x0008); // (3004,0008)
/// DoseSummationType (3004,000A) CS 1 DICOM
#[rustfmt::skip]
pub const DOSE_SUMMATION_TYPE: Tag = Tag(0x3004, 0x000A); // (3004,000A)
/// GridFrameOffsetVector (3004,000C) DS 2-n DICOM
#[rustfmt::skip]
pub const GRID_FRAME_OFFSET_VECTOR: Tag = Tag(0x3004, 0x000C); // (3004,000C)
/// DoseGridScaling (3004,000E) DS 1 DICOM
#[rustfmt::skip]
pub const DOSE_GRID_SCALING: Tag = Tag(0x3004, 0x000E); // (3004,000E)
/// RTDoseROISequence (3004,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const RT_DOSE_ROI_SEQUENCE: Tag = Tag(0x3004, 0x0010); // (3004,0010)
/// DoseValue (3004,0012) DS 1 DICOM
#[rustfmt::skip]
pub const DOSE_VALUE: Tag = Tag(0x3004, 0x0012); // (3004,0012)
/// TissueHeterogeneityCorrection (3004,0014) CS 1-3 DICOM
#[rustfmt::skip]
pub const TISSUE_HETEROGENEITY_CORRECTION: Tag = Tag(0x3004, 0x0014); // (3004,0014)
/// DVHNormalizationPoint (3004,0040) DS 3 DICOM
#[rustfmt::skip]
pub const DVH_NORMALIZATION_POINT: Tag = Tag(0x3004, 0x0040); // (3004,0040)
/// DVHNormalizationDoseValue (3004,0042) DS 1 DICOM
#[rustfmt::skip]
pub const DVH_NORMALIZATION_DOSE_VALUE: Tag = Tag(0x3004, 0x0042); // (3004,0042)
/// DVHSequence (3004,0050) SQ 1 DICOM
#[rustfmt::skip]
pub const DVH_SEQUENCE: Tag = Tag(0x3004, 0x0050); // (3004,0050)
/// DVHDoseScaling (3004,0052) DS 1 DICOM
#[rustfmt::skip]
pub const DVH_DOSE_SCALING: Tag = Tag(0x3004, 0x0052); // (3004,0052)
/// DVHVolumeUnits (3004,0054) CS 1 DICOM
#[rustfmt::skip]
pub const DVH_VOLUME_UNITS: Tag = Tag(0x3004, 0x0054); // (3004,0054)
/// DVHNumberOfBins (3004,0056) IS 1 DICOM
#[rustfmt::skip]
pub const DVH_NUMBER_OF_BINS: Tag = Tag(0x3004, 0x0056); // (3004,0056)
/// DVHData (3004,0058) DS 2-2n DICOM
#[rustfmt::skip]
pub const DVH_DATA: Tag = Tag(0x3004, 0x0058); // (3004,0058)
/// DVHReferencedROISequence (3004,0060) SQ 1 DICOM
#[rustfmt::skip]
pub const DVH_REFERENCED_ROI_SEQUENCE: Tag = Tag(0x3004, 0x0060); // (3004,0060)
/// DVHROIContributionType (3004,0062) CS 1 DICOM
#[rustfmt::skip]
pub const DVHROI_CONTRIBUTION_TYPE: Tag = Tag(0x3004, 0x0062); // (3004,0062)
/// DVHMinimumDose (3004,0070) DS 1 DICOM
#[rustfmt::skip]
pub const DVH_MINIMUM_DOSE: Tag = Tag(0x3004, 0x0070); // (3004,0070)
/// DVHMaximumDose (3004,0072) DS 1 DICOM
#[rustfmt::skip]
pub const DVH_MAXIMUM_DOSE: Tag = Tag(0x3004, 0x0072); // (3004,0072)
/// DVHMeanDose (3004,0074) DS 1 DICOM
#[rustfmt::skip]
pub const DVH_MEAN_DOSE: Tag = Tag(0x3004, 0x0074); // (3004,0074)
/// StructureSetLabel (3006,0002) SH 1 DICOM
#[rustfmt::skip]
pub const STRUCTURE_SET_LABEL: Tag = Tag(0x3006, 0x0002); // (3006,0002)
/// StructureSetName (3006,0004) LO 1 DICOM
#[rustfmt::skip]
pub const STRUCTURE_SET_NAME: Tag = Tag(0x3006, 0x0004); // (3006,0004)
/// StructureSetDescription (3006,0006) ST 1 DICOM
#[rustfmt::skip]
pub const STRUCTURE_SET_DESCRIPTION: Tag = Tag(0x3006, 0x0006); // (3006,0006)
/// StructureSetDate (3006,0008) DA 1 DICOM
#[rustfmt::skip]
pub const STRUCTURE_SET_DATE: Tag = Tag(0x3006, 0x0008); // (3006,0008)
/// StructureSetTime (3006,0009) TM 1 DICOM
#[rustfmt::skip]
pub const STRUCTURE_SET_TIME: Tag = Tag(0x3006, 0x0009); // (3006,0009)
/// ReferencedFrameOfReferenceSequence (3006,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FRAME_OF_REFERENCE_SEQUENCE: Tag = Tag(0x3006, 0x0010); // (3006,0010)
/// RTReferencedStudySequence (3006,0012) SQ 1 DICOM
#[rustfmt::skip]
pub const RT_REFERENCED_STUDY_SEQUENCE: Tag = Tag(0x3006, 0x0012); // (3006,0012)
/// RTReferencedSeriesSequence (3006,0014) SQ 1 DICOM
#[rustfmt::skip]
pub const RT_REFERENCED_SERIES_SEQUENCE: Tag = Tag(0x3006, 0x0014); // (3006,0014)
/// ContourImageSequence (3006,0016) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTOUR_IMAGE_SEQUENCE: Tag = Tag(0x3006, 0x0016); // (3006,0016)
/// PredecessorStructureSetSequence (3006,0018) SQ 1 DICOM
#[rustfmt::skip]
pub const PREDECESSOR_STRUCTURE_SET_SEQUENCE: Tag = Tag(0x3006, 0x0018); // (3006,0018)
/// StructureSetROISequence (3006,0020) SQ 1 DICOM
#[rustfmt::skip]
pub const STRUCTURE_SET_ROI_SEQUENCE: Tag = Tag(0x3006, 0x0020); // (3006,0020)
/// ROINumber (3006,0022) IS 1 DICOM
#[rustfmt::skip]
pub const ROI_NUMBER: Tag = Tag(0x3006, 0x0022); // (3006,0022)
/// ReferencedFrameOfReferenceUID (3006,0024) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FRAME_OF_REFERENCE_UID: Tag = Tag(0x3006, 0x0024); // (3006,0024)
/// ROIName (3006,0026) LO 1 DICOM
#[rustfmt::skip]
pub const ROI_NAME: Tag = Tag(0x3006, 0x0026); // (3006,0026)
/// ROIDescription (3006,0028) ST 1 DICOM
#[rustfmt::skip]
pub const ROI_DESCRIPTION: Tag = Tag(0x3006, 0x0028); // (3006,0028)
/// ROIDisplayColor (3006,002A) IS 3 DICOM
#[rustfmt::skip]
pub const ROI_DISPLAY_COLOR: Tag = Tag(0x3006, 0x002A); // (3006,002A)
/// ROIVolume (3006,002C) DS 1 DICOM
#[rustfmt::skip]
pub const ROI_VOLUME: Tag = Tag(0x3006, 0x002C); // (3006,002C)
/// RTRelatedROISequence (3006,0030) SQ 1 DICOM
#[rustfmt::skip]
pub const RT_RELATED_ROI_SEQUENCE: Tag = Tag(0x3006, 0x0030); // (3006,0030)
/// RTROIRelationship (3006,0033) CS 1 DICOM
#[rustfmt::skip]
pub const RTROI_RELATIONSHIP: Tag = Tag(0x3006, 0x0033); // (3006,0033)
/// ROIGenerationAlgorithm (3006,0036) CS 1 DICOM
#[rustfmt::skip]
pub const ROI_GENERATION_ALGORITHM: Tag = Tag(0x3006, 0x0036); // (3006,0036)
/// ROIGenerationDescription (3006,0038) LO 1 DICOM
#[rustfmt::skip]
pub const ROI_GENERATION_DESCRIPTION: Tag = Tag(0x3006, 0x0038); // (3006,0038)
/// ROIContourSequence (3006,0039) SQ 1 DICOM
#[rustfmt::skip]
pub const ROI_CONTOUR_SEQUENCE: Tag = Tag(0x3006, 0x0039); // (3006,0039)
/// ContourSequence (3006,0040) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTOUR_SEQUENCE: Tag = Tag(0x3006, 0x0040); // (3006,0040)
/// ContourGeometricType (3006,0042) CS 1 DICOM
#[rustfmt::skip]
pub const CONTOUR_GEOMETRIC_TYPE: Tag = Tag(0x3006, 0x0042); // (3006,0042)
/// ContourSlabThickness (3006,0044) DS 1 DICOM
#[rustfmt::skip]
pub const CONTOUR_SLAB_THICKNESS: Tag = Tag(0x3006, 0x0044); // (3006,0044)
/// ContourOffsetVector (3006,0045) DS 3 DICOM
#[rustfmt::skip]
pub const CONTOUR_OFFSET_VECTOR: Tag = Tag(0x3006, 0x0045); // (3006,0045)
/// NumberOfContourPoints (3006,0046) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_CONTOUR_POINTS: Tag = Tag(0x3006, 0x0046); // (3006,0046)
/// ContourNumber (3006,0048) IS 1 DICOM
#[rustfmt::skip]
pub const CONTOUR_NUMBER: Tag = Tag(0x3006, 0x0048); // (3006,0048)
/// AttachedContours (3006,0049) IS 1-n DICOM
#[rustfmt::skip]
pub const ATTACHED_CONTOURS: Tag = Tag(0x3006, 0x0049); // (3006,0049)
/// ContourData (3006,0050) DS 3-3n DICOM
#[rustfmt::skip]
pub const CONTOUR_DATA: Tag = Tag(0x3006, 0x0050); // (3006,0050)
/// RTROIObservationsSequence (3006,0080) SQ 1 DICOM
#[rustfmt::skip]
pub const RTROI_OBSERVATIONS_SEQUENCE: Tag = Tag(0x3006, 0x0080); // (3006,0080)
/// ObservationNumber (3006,0082) IS 1 DICOM
#[rustfmt::skip]
pub const OBSERVATION_NUMBER: Tag = Tag(0x3006, 0x0082); // (3006,0082)
/// ReferencedROINumber (3006,0084) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_ROI_NUMBER: Tag = Tag(0x3006, 0x0084); // (3006,0084)
/// ROIObservationLabel (3006,0085) SH 1 DICOM
#[rustfmt::skip]
pub const ROI_OBSERVATION_LABEL: Tag = Tag(0x3006, 0x0085); // (3006,0085)
/// RTROIIdentificationCodeSequence (3006,0086) SQ 1 DICOM
#[rustfmt::skip]
pub const RTROI_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x3006, 0x0086); // (3006,0086)
/// ROIObservationDescription (3006,0088) ST 1 DICOM
#[rustfmt::skip]
pub const ROI_OBSERVATION_DESCRIPTION: Tag = Tag(0x3006, 0x0088); // (3006,0088)
/// RelatedRTROIObservationsSequence (3006,00A0) SQ 1 DICOM
#[rustfmt::skip]
pub const RELATED_RTROI_OBSERVATIONS_SEQUENCE: Tag = Tag(0x3006, 0x00A0); // (3006,00A0)
/// RTROIInterpretedType (3006,00A4) CS 1 DICOM
#[rustfmt::skip]
pub const RTROI_INTERPRETED_TYPE: Tag = Tag(0x3006, 0x00A4); // (3006,00A4)
/// ROIInterpreter (3006,00A6) PN 1 DICOM
#[rustfmt::skip]
pub const ROI_INTERPRETER: Tag = Tag(0x3006, 0x00A6); // (3006,00A6)
/// ROIPhysicalPropertiesSequence (3006,00B0) SQ 1 DICOM
#[rustfmt::skip]
pub const ROI_PHYSICAL_PROPERTIES_SEQUENCE: Tag = Tag(0x3006, 0x00B0); // (3006,00B0)
/// ROIPhysicalProperty (3006,00B2) CS 1 DICOM
#[rustfmt::skip]
pub const ROI_PHYSICAL_PROPERTY: Tag = Tag(0x3006, 0x00B2); // (3006,00B2)
/// ROIPhysicalPropertyValue (3006,00B4) DS 1 DICOM
#[rustfmt::skip]
pub const ROI_PHYSICAL_PROPERTY_VALUE: Tag = Tag(0x3006, 0x00B4); // (3006,00B4)
/// ROIElementalCompositionSequence (3006,00B6) SQ 1 DICOM
#[rustfmt::skip]
pub const ROI_ELEMENTAL_COMPOSITION_SEQUENCE: Tag = Tag(0x3006, 0x00B6); // (3006,00B6)
/// ROIElementalCompositionAtomicNumber (3006,00B7) US 1 DICOM
#[rustfmt::skip]
pub const ROI_ELEMENTAL_COMPOSITION_ATOMIC_NUMBER: Tag = Tag(0x3006, 0x00B7); // (3006,00B7)
/// ROIElementalCompositionAtomicMassFraction (3006,00B8) FL 1 DICOM
#[rustfmt::skip]
pub const ROI_ELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION: Tag = Tag(0x3006, 0x00B8); // (3006,00B8)
/// FrameOfReferenceTransformationMatrix (3006,00C6) DS 16 DICOM
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX: Tag = Tag(0x3006, 0x00C6); // (3006,00C6)
/// FrameOfReferenceTransformationComment (3006,00C8) LO 1 DICOM
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT: Tag = Tag(0x3006, 0x00C8); // (3006,00C8)
/// MeasuredDoseReferenceSequence (3008,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const MEASURED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x3008, 0x0010); // (3008,0010)
/// MeasuredDoseDescription (3008,0012) ST 1 DICOM
#[rustfmt::skip]
pub const MEASURED_DOSE_DESCRIPTION: Tag = Tag(0x3008, 0x0012); // (3008,0012)
/// MeasuredDoseType (3008,0014) CS 1 DICOM
#[rustfmt::skip]
pub const MEASURED_DOSE_TYPE: Tag = Tag(0x3008, 0x0014); // (3008,0014)
/// MeasuredDoseValue (3008,0016) DS 1 DICOM
#[rustfmt::skip]
pub const MEASURED_DOSE_VALUE: Tag = Tag(0x3008, 0x0016); // (3008,0016)
/// TreatmentSessionBeamSequence (3008,0020) SQ 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_SESSION_BEAM_SEQUENCE: Tag = Tag(0x3008, 0x0020); // (3008,0020)
/// TreatmentSessionIonBeamSequence (3008,0021) SQ 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_SESSION_ION_BEAM_SEQUENCE: Tag = Tag(0x3008, 0x0021); // (3008,0021)
/// CurrentFractionNumber (3008,0022) IS 1 DICOM
#[rustfmt::skip]
pub const CURRENT_FRACTION_NUMBER: Tag = Tag(0x3008, 0x0022); // (3008,0022)
/// TreatmentControlPointDate (3008,0024) DA 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_CONTROL_POINT_DATE: Tag = Tag(0x3008, 0x0024); // (3008,0024)
/// TreatmentControlPointTime (3008,0025) TM 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_CONTROL_POINT_TIME: Tag = Tag(0x3008, 0x0025); // (3008,0025)
/// TreatmentTerminationStatus (3008,002A) CS 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_TERMINATION_STATUS: Tag = Tag(0x3008, 0x002A); // (3008,002A)
/// TreatmentTerminationCode (3008,002B) SH 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_TERMINATION_CODE: Tag = Tag(0x3008, 0x002B); // (3008,002B)
/// TreatmentVerificationStatus (3008,002C) CS 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_VERIFICATION_STATUS: Tag = Tag(0x3008, 0x002C); // (3008,002C)
/// ReferencedTreatmentRecordSequence (3008,0030) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_TREATMENT_RECORD_SEQUENCE: Tag = Tag(0x3008, 0x0030); // (3008,0030)
/// SpecifiedPrimaryMeterset (3008,0032) DS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_PRIMARY_METERSET: Tag = Tag(0x3008, 0x0032); // (3008,0032)
/// SpecifiedSecondaryMeterset (3008,0033) DS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_SECONDARY_METERSET: Tag = Tag(0x3008, 0x0033); // (3008,0033)
/// DeliveredPrimaryMeterset (3008,0036) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_PRIMARY_METERSET: Tag = Tag(0x3008, 0x0036); // (3008,0036)
/// DeliveredSecondaryMeterset (3008,0037) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_SECONDARY_METERSET: Tag = Tag(0x3008, 0x0037); // (3008,0037)
/// SpecifiedTreatmentTime (3008,003A) DS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_TREATMENT_TIME: Tag = Tag(0x3008, 0x003A); // (3008,003A)
/// DeliveredTreatmentTime (3008,003B) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_TREATMENT_TIME: Tag = Tag(0x3008, 0x003B); // (3008,003B)
/// ControlPointDeliverySequence (3008,0040) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTROL_POINT_DELIVERY_SEQUENCE: Tag = Tag(0x3008, 0x0040); // (3008,0040)
/// IonControlPointDeliverySequence (3008,0041) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_CONTROL_POINT_DELIVERY_SEQUENCE: Tag = Tag(0x3008, 0x0041); // (3008,0041)
/// SpecifiedMeterset (3008,0042) DS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_METERSET: Tag = Tag(0x3008, 0x0042); // (3008,0042)
/// DeliveredMeterset (3008,0044) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_METERSET: Tag = Tag(0x3008, 0x0044); // (3008,0044)
/// MetersetRateSet (3008,0045) FL 1 DICOM
#[rustfmt::skip]
pub const METERSET_RATE_SET: Tag = Tag(0x3008, 0x0045); // (3008,0045)
/// MetersetRateDelivered (3008,0046) FL 1 DICOM
#[rustfmt::skip]
pub const METERSET_RATE_DELIVERED: Tag = Tag(0x3008, 0x0046); // (3008,0046)
/// ScanSpotMetersetsDelivered (3008,0047) FL 1-n DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_METERSETS_DELIVERED: Tag = Tag(0x3008, 0x0047); // (3008,0047)
/// DoseRateDelivered (3008,0048) DS 1 DICOM
#[rustfmt::skip]
pub const DOSE_RATE_DELIVERED: Tag = Tag(0x3008, 0x0048); // (3008,0048)
/// TreatmentSummaryCalculatedDoseReferenceSequence (3008,0050) SQ 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x3008, 0x0050); // (3008,0050)
/// CumulativeDoseToDoseReference (3008,0052) DS 1 DICOM
#[rustfmt::skip]
pub const CUMULATIVE_DOSE_TO_DOSE_REFERENCE: Tag = Tag(0x3008, 0x0052); // (3008,0052)
/// FirstTreatmentDate (3008,0054) DA 1 DICOM
#[rustfmt::skip]
pub const FIRST_TREATMENT_DATE: Tag = Tag(0x3008, 0x0054); // (3008,0054)
/// MostRecentTreatmentDate (3008,0056) DA 1 DICOM
#[rustfmt::skip]
pub const MOST_RECENT_TREATMENT_DATE: Tag = Tag(0x3008, 0x0056); // (3008,0056)
/// NumberOfFractionsDelivered (3008,005A) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRACTIONS_DELIVERED: Tag = Tag(0x3008, 0x005A); // (3008,005A)
/// OverrideSequence (3008,0060) SQ 1 DICOM
#[rustfmt::skip]
pub const OVERRIDE_SEQUENCE: Tag = Tag(0x3008, 0x0060); // (3008,0060)
/// ParameterSequencePointer (3008,0061) AT 1 DICOM
#[rustfmt::skip]
pub const PARAMETER_SEQUENCE_POINTER: Tag = Tag(0x3008, 0x0061); // (3008,0061)
/// OverrideParameterPointer (3008,0062) AT 1 DICOM
#[rustfmt::skip]
pub const OVERRIDE_PARAMETER_POINTER: Tag = Tag(0x3008, 0x0062); // (3008,0062)
/// ParameterItemIndex (3008,0063) IS 1 DICOM
#[rustfmt::skip]
pub const PARAMETER_ITEM_INDEX: Tag = Tag(0x3008, 0x0063); // (3008,0063)
/// MeasuredDoseReferenceNumber (3008,0064) IS 1 DICOM
#[rustfmt::skip]
pub const MEASURED_DOSE_REFERENCE_NUMBER: Tag = Tag(0x3008, 0x0064); // (3008,0064)
/// ParameterPointer (3008,0065) AT 1 DICOM
#[rustfmt::skip]
pub const PARAMETER_POINTER: Tag = Tag(0x3008, 0x0065); // (3008,0065)
/// OverrideReason (3008,0066) ST 1 DICOM
#[rustfmt::skip]
pub const OVERRIDE_REASON: Tag = Tag(0x3008, 0x0066); // (3008,0066)
/// ParameterValueNumber (3008,0067) US 1 DICOM
#[rustfmt::skip]
pub const PARAMETER_VALUE_NUMBER: Tag = Tag(0x3008, 0x0067); // (3008,0067)
/// CorrectedParameterSequence (3008,0068) SQ 1 DICOM
#[rustfmt::skip]
pub const CORRECTED_PARAMETER_SEQUENCE: Tag = Tag(0x3008, 0x0068); // (3008,0068)
/// CorrectionValue (3008,006A) FL 1 DICOM
#[rustfmt::skip]
pub const CORRECTION_VALUE: Tag = Tag(0x3008, 0x006A); // (3008,006A)
/// CalculatedDoseReferenceSequence (3008,0070) SQ 1 DICOM
#[rustfmt::skip]
pub const CALCULATED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x3008, 0x0070); // (3008,0070)
/// CalculatedDoseReferenceNumber (3008,0072) IS 1 DICOM
#[rustfmt::skip]
pub const CALCULATED_DOSE_REFERENCE_NUMBER: Tag = Tag(0x3008, 0x0072); // (3008,0072)
/// CalculatedDoseReferenceDescription (3008,0074) ST 1 DICOM
#[rustfmt::skip]
pub const CALCULATED_DOSE_REFERENCE_DESCRIPTION: Tag = Tag(0x3008, 0x0074); // (3008,0074)
/// CalculatedDoseReferenceDoseValue (3008,0076) DS 1 DICOM
#[rustfmt::skip]
pub const CALCULATED_DOSE_REFERENCE_DOSE_VALUE: Tag = Tag(0x3008, 0x0076); // (3008,0076)
/// StartMeterset (3008,0078) DS 1 DICOM
#[rustfmt::skip]
pub const START_METERSET: Tag = Tag(0x3008, 0x0078); // (3008,0078)
/// EndMeterset (3008,007A) DS 1 DICOM
#[rustfmt::skip]
pub const END_METERSET: Tag = Tag(0x3008, 0x007A); // (3008,007A)
/// ReferencedMeasuredDoseReferenceSequence (3008,0080) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x3008, 0x0080); // (3008,0080)
/// ReferencedMeasuredDoseReferenceNumber (3008,0082) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER: Tag = Tag(0x3008, 0x0082); // (3008,0082)
/// ReferencedCalculatedDoseReferenceSequence (3008,0090) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x3008, 0x0090); // (3008,0090)
/// ReferencedCalculatedDoseReferenceNumber (3008,0092) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER: Tag = Tag(0x3008, 0x0092); // (3008,0092)
/// BeamLimitingDeviceLeafPairsSequence (3008,00A0) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE: Tag = Tag(0x3008, 0x00A0); // (3008,00A0)
/// RecordedWedgeSequence (3008,00B0) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_WEDGE_SEQUENCE: Tag = Tag(0x3008, 0x00B0); // (3008,00B0)
/// RecordedCompensatorSequence (3008,00C0) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_COMPENSATOR_SEQUENCE: Tag = Tag(0x3008, 0x00C0); // (3008,00C0)
/// RecordedBlockSequence (3008,00D0) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_BLOCK_SEQUENCE: Tag = Tag(0x3008, 0x00D0); // (3008,00D0)
/// TreatmentSummaryMeasuredDoseReferenceSequence (3008,00E0) SQ 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x3008, 0x00E0); // (3008,00E0)
/// RecordedSnoutSequence (3008,00F0) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_SNOUT_SEQUENCE: Tag = Tag(0x3008, 0x00F0); // (3008,00F0)
/// RecordedRangeShifterSequence (3008,00F2) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_RANGE_SHIFTER_SEQUENCE: Tag = Tag(0x3008, 0x00F2); // (3008,00F2)
/// RecordedLateralSpreadingDeviceSequence (3008,00F4) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE: Tag = Tag(0x3008, 0x00F4); // (3008,00F4)
/// RecordedRangeModulatorSequence (3008,00F6) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_RANGE_MODULATOR_SEQUENCE: Tag = Tag(0x3008, 0x00F6); // (3008,00F6)
/// RecordedSourceSequence (3008,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_SOURCE_SEQUENCE: Tag = Tag(0x3008, 0x0100); // (3008,0100)
/// SourceSerialNumber (3008,0105) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_SERIAL_NUMBER: Tag = Tag(0x3008, 0x0105); // (3008,0105)
/// TreatmentSessionApplicationSetupSequence (3008,0110) SQ 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE: Tag = Tag(0x3008, 0x0110); // (3008,0110)
/// ApplicationSetupCheck (3008,0116) CS 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_SETUP_CHECK: Tag = Tag(0x3008, 0x0116); // (3008,0116)
/// RecordedBrachyAccessoryDeviceSequence (3008,0120) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE: Tag = Tag(0x3008, 0x0120); // (3008,0120)
/// ReferencedBrachyAccessoryDeviceNumber (3008,0122) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER: Tag = Tag(0x3008, 0x0122); // (3008,0122)
/// RecordedChannelSequence (3008,0130) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_CHANNEL_SEQUENCE: Tag = Tag(0x3008, 0x0130); // (3008,0130)
/// SpecifiedChannelTotalTime (3008,0132) DS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_CHANNEL_TOTAL_TIME: Tag = Tag(0x3008, 0x0132); // (3008,0132)
/// DeliveredChannelTotalTime (3008,0134) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_CHANNEL_TOTAL_TIME: Tag = Tag(0x3008, 0x0134); // (3008,0134)
/// SpecifiedNumberOfPulses (3008,0136) IS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_NUMBER_OF_PULSES: Tag = Tag(0x3008, 0x0136); // (3008,0136)
/// DeliveredNumberOfPulses (3008,0138) IS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_NUMBER_OF_PULSES: Tag = Tag(0x3008, 0x0138); // (3008,0138)
/// SpecifiedPulseRepetitionInterval (3008,013A) DS 1 DICOM
#[rustfmt::skip]
pub const SPECIFIED_PULSE_REPETITION_INTERVAL: Tag = Tag(0x3008, 0x013A); // (3008,013A)
/// DeliveredPulseRepetitionInterval (3008,013C) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_PULSE_REPETITION_INTERVAL: Tag = Tag(0x3008, 0x013C); // (3008,013C)
/// RecordedSourceApplicatorSequence (3008,0140) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_SOURCE_APPLICATOR_SEQUENCE: Tag = Tag(0x3008, 0x0140); // (3008,0140)
/// ReferencedSourceApplicatorNumber (3008,0142) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOURCE_APPLICATOR_NUMBER: Tag = Tag(0x3008, 0x0142); // (3008,0142)
/// RecordedChannelShieldSequence (3008,0150) SQ 1 DICOM
#[rustfmt::skip]
pub const RECORDED_CHANNEL_SHIELD_SEQUENCE: Tag = Tag(0x3008, 0x0150); // (3008,0150)
/// ReferencedChannelShieldNumber (3008,0152) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CHANNEL_SHIELD_NUMBER: Tag = Tag(0x3008, 0x0152); // (3008,0152)
/// BrachyControlPointDeliveredSequence (3008,0160) SQ 1 DICOM
#[rustfmt::skip]
pub const BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE: Tag = Tag(0x3008, 0x0160); // (3008,0160)
/// SafePositionExitDate (3008,0162) DA 1 DICOM
#[rustfmt::skip]
pub const SAFE_POSITION_EXIT_DATE: Tag = Tag(0x3008, 0x0162); // (3008,0162)
/// SafePositionExitTime (3008,0164) TM 1 DICOM
#[rustfmt::skip]
pub const SAFE_POSITION_EXIT_TIME: Tag = Tag(0x3008, 0x0164); // (3008,0164)
/// SafePositionReturnDate (3008,0166) DA 1 DICOM
#[rustfmt::skip]
pub const SAFE_POSITION_RETURN_DATE: Tag = Tag(0x3008, 0x0166); // (3008,0166)
/// SafePositionReturnTime (3008,0168) TM 1 DICOM
#[rustfmt::skip]
pub const SAFE_POSITION_RETURN_TIME: Tag = Tag(0x3008, 0x0168); // (3008,0168)
/// PulseSpecificBrachyControlPointDeliveredSequence (3008,0171) SQ 1 DICOM
#[rustfmt::skip]
pub const PULSE_SPECIFIC_BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE: Tag = Tag(0x3008, 0x0171); // (3008,0171)
/// PulseNumber (3008,0172) US 1 DICOM
#[rustfmt::skip]
pub const PULSE_NUMBER: Tag = Tag(0x3008, 0x0172); // (3008,0172)
/// BrachyPulseControlPointDeliveredSequence (3008,0173) SQ 1 DICOM
#[rustfmt::skip]
pub const BRACHY_PULSE_CONTROL_POINT_DELIVERED_SEQUENCE: Tag = Tag(0x3008, 0x0173); // (3008,0173)
/// CurrentTreatmentStatus (3008,0200) CS 1 DICOM
#[rustfmt::skip]
pub const CURRENT_TREATMENT_STATUS: Tag = Tag(0x3008, 0x0200); // (3008,0200)
/// TreatmentStatusComment (3008,0202) ST 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_STATUS_COMMENT: Tag = Tag(0x3008, 0x0202); // (3008,0202)
/// FractionGroupSummarySequence (3008,0220) SQ 1 DICOM
#[rustfmt::skip]
pub const FRACTION_GROUP_SUMMARY_SEQUENCE: Tag = Tag(0x3008, 0x0220); // (3008,0220)
/// ReferencedFractionNumber (3008,0223) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FRACTION_NUMBER: Tag = Tag(0x3008, 0x0223); // (3008,0223)
/// FractionGroupType (3008,0224) CS 1 DICOM
#[rustfmt::skip]
pub const FRACTION_GROUP_TYPE: Tag = Tag(0x3008, 0x0224); // (3008,0224)
/// BeamStopperPosition (3008,0230) CS 1 DICOM
#[rustfmt::skip]
pub const BEAM_STOPPER_POSITION: Tag = Tag(0x3008, 0x0230); // (3008,0230)
/// FractionStatusSummarySequence (3008,0240) SQ 1 DICOM
#[rustfmt::skip]
pub const FRACTION_STATUS_SUMMARY_SEQUENCE: Tag = Tag(0x3008, 0x0240); // (3008,0240)
/// TreatmentDate (3008,0250) DA 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_DATE: Tag = Tag(0x3008, 0x0250); // (3008,0250)
/// TreatmentTime (3008,0251) TM 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_TIME: Tag = Tag(0x3008, 0x0251); // (3008,0251)
/// RTPlanLabel (300A,0002) SH 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_LABEL: Tag = Tag(0x300A, 0x0002); // (300A,0002)
/// RTPlanName (300A,0003) LO 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_NAME: Tag = Tag(0x300A, 0x0003); // (300A,0003)
/// RTPlanDescription (300A,0004) ST 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_DESCRIPTION: Tag = Tag(0x300A, 0x0004); // (300A,0004)
/// RTPlanDate (300A,0006) DA 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_DATE: Tag = Tag(0x300A, 0x0006); // (300A,0006)
/// RTPlanTime (300A,0007) TM 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_TIME: Tag = Tag(0x300A, 0x0007); // (300A,0007)
/// TreatmentProtocols (300A,0009) LO 1-n DICOM
#[rustfmt::skip]
pub const TREATMENT_PROTOCOLS: Tag = Tag(0x300A, 0x0009); // (300A,0009)
/// PlanIntent (300A,000A) CS 1 DICOM
#[rustfmt::skip]
pub const PLAN_INTENT: Tag = Tag(0x300A, 0x000A); // (300A,000A)
/// TreatmentSites (300A,000B) LO 1-n DICOM
#[rustfmt::skip]
pub const TREATMENT_SITES: Tag = Tag(0x300A, 0x000B); // (300A,000B)
/// RTPlanGeometry (300A,000C) CS 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_GEOMETRY: Tag = Tag(0x300A, 0x000C); // (300A,000C)
/// PrescriptionDescription (300A,000E) ST 1 DICOM
#[rustfmt::skip]
pub const PRESCRIPTION_DESCRIPTION: Tag = Tag(0x300A, 0x000E); // (300A,000E)
/// DoseReferenceSequence (300A,0010) SQ 1 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x300A, 0x0010); // (300A,0010)
/// DoseReferenceNumber (300A,0012) IS 1 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_NUMBER: Tag = Tag(0x300A, 0x0012); // (300A,0012)
/// DoseReferenceUID (300A,0013) UI 1 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_UID: Tag = Tag(0x300A, 0x0013); // (300A,0013)
/// DoseReferenceStructureType (300A,0014) CS 1 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_STRUCTURE_TYPE: Tag = Tag(0x300A, 0x0014); // (300A,0014)
/// NominalBeamEnergyUnit (300A,0015) CS 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_BEAM_ENERGY_UNIT: Tag = Tag(0x300A, 0x0015); // (300A,0015)
/// DoseReferenceDescription (300A,0016) LO 1 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_DESCRIPTION: Tag = Tag(0x300A, 0x0016); // (300A,0016)
/// DoseReferencePointCoordinates (300A,0018) DS 3 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_POINT_COORDINATES: Tag = Tag(0x300A, 0x0018); // (300A,0018)
/// NominalPriorDose (300A,001A) DS 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_PRIOR_DOSE: Tag = Tag(0x300A, 0x001A); // (300A,001A)
/// DoseReferenceType (300A,0020) CS 1 DICOM
#[rustfmt::skip]
pub const DOSE_REFERENCE_TYPE: Tag = Tag(0x300A, 0x0020); // (300A,0020)
/// ConstraintWeight (300A,0021) DS 1 DICOM
#[rustfmt::skip]
pub const CONSTRAINT_WEIGHT: Tag = Tag(0x300A, 0x0021); // (300A,0021)
/// DeliveryWarningDose (300A,0022) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERY_WARNING_DOSE: Tag = Tag(0x300A, 0x0022); // (300A,0022)
/// DeliveryMaximumDose (300A,0023) DS 1 DICOM
#[rustfmt::skip]
pub const DELIVERY_MAXIMUM_DOSE: Tag = Tag(0x300A, 0x0023); // (300A,0023)
/// TargetMinimumDose (300A,0025) DS 1 DICOM
#[rustfmt::skip]
pub const TARGET_MINIMUM_DOSE: Tag = Tag(0x300A, 0x0025); // (300A,0025)
/// TargetPrescriptionDose (300A,0026) DS 1 DICOM
#[rustfmt::skip]
pub const TARGET_PRESCRIPTION_DOSE: Tag = Tag(0x300A, 0x0026); // (300A,0026)
/// TargetMaximumDose (300A,0027) DS 1 DICOM
#[rustfmt::skip]
pub const TARGET_MAXIMUM_DOSE: Tag = Tag(0x300A, 0x0027); // (300A,0027)
/// TargetUnderdoseVolumeFraction (300A,0028) DS 1 DICOM
#[rustfmt::skip]
pub const TARGET_UNDERDOSE_VOLUME_FRACTION: Tag = Tag(0x300A, 0x0028); // (300A,0028)
/// OrganAtRiskFullVolumeDose (300A,002A) DS 1 DICOM
#[rustfmt::skip]
pub const ORGAN_AT_RISK_FULL_VOLUME_DOSE: Tag = Tag(0x300A, 0x002A); // (300A,002A)
/// OrganAtRiskLimitDose (300A,002B) DS 1 DICOM
#[rustfmt::skip]
pub const ORGAN_AT_RISK_LIMIT_DOSE: Tag = Tag(0x300A, 0x002B); // (300A,002B)
/// OrganAtRiskMaximumDose (300A,002C) DS 1 DICOM
#[rustfmt::skip]
pub const ORGAN_AT_RISK_MAXIMUM_DOSE: Tag = Tag(0x300A, 0x002C); // (300A,002C)
/// OrganAtRiskOverdoseVolumeFraction (300A,002D) DS 1 DICOM
#[rustfmt::skip]
pub const ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION: Tag = Tag(0x300A, 0x002D); // (300A,002D)
/// ToleranceTableSequence (300A,0040) SQ 1 DICOM
#[rustfmt::skip]
pub const TOLERANCE_TABLE_SEQUENCE: Tag = Tag(0x300A, 0x0040); // (300A,0040)
/// ToleranceTableNumber (300A,0042) IS 1 DICOM
#[rustfmt::skip]
pub const TOLERANCE_TABLE_NUMBER: Tag = Tag(0x300A, 0x0042); // (300A,0042)
/// ToleranceTableLabel (300A,0043) SH 1 DICOM
#[rustfmt::skip]
pub const TOLERANCE_TABLE_LABEL: Tag = Tag(0x300A, 0x0043); // (300A,0043)
/// GantryAngleTolerance (300A,0044) DS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x0044); // (300A,0044)
/// BeamLimitingDeviceAngleTolerance (300A,0046) DS 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x0046); // (300A,0046)
/// BeamLimitingDeviceToleranceSequence (300A,0048) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE: Tag = Tag(0x300A, 0x0048); // (300A,0048)
/// BeamLimitingDevicePositionTolerance (300A,004A) DS 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_POSITION_TOLERANCE: Tag = Tag(0x300A, 0x004A); // (300A,004A)
/// SnoutPositionTolerance (300A,004B) FL 1 DICOM
#[rustfmt::skip]
pub const SNOUT_POSITION_TOLERANCE: Tag = Tag(0x300A, 0x004B); // (300A,004B)
/// PatientSupportAngleTolerance (300A,004C) DS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x004C); // (300A,004C)
/// TableTopEccentricAngleTolerance (300A,004E) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x004E); // (300A,004E)
/// TableTopPitchAngleTolerance (300A,004F) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_PITCH_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x004F); // (300A,004F)
/// TableTopRollAngleTolerance (300A,0050) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ROLL_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x0050); // (300A,0050)
/// TableTopVerticalPositionTolerance (300A,0051) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_VERTICAL_POSITION_TOLERANCE: Tag = Tag(0x300A, 0x0051); // (300A,0051)
/// TableTopLongitudinalPositionTolerance (300A,0052) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE: Tag = Tag(0x300A, 0x0052); // (300A,0052)
/// TableTopLateralPositionTolerance (300A,0053) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LATERAL_POSITION_TOLERANCE: Tag = Tag(0x300A, 0x0053); // (300A,0053)
/// RTPlanRelationship (300A,0055) CS 1 DICOM
#[rustfmt::skip]
pub const RT_PLAN_RELATIONSHIP: Tag = Tag(0x300A, 0x0055); // (300A,0055)
/// FractionGroupSequence (300A,0070) SQ 1 DICOM
#[rustfmt::skip]
pub const FRACTION_GROUP_SEQUENCE: Tag = Tag(0x300A, 0x0070); // (300A,0070)
/// FractionGroupNumber (300A,0071) IS 1 DICOM
#[rustfmt::skip]
pub const FRACTION_GROUP_NUMBER: Tag = Tag(0x300A, 0x0071); // (300A,0071)
/// FractionGroupDescription (300A,0072) LO 1 DICOM
#[rustfmt::skip]
pub const FRACTION_GROUP_DESCRIPTION: Tag = Tag(0x300A, 0x0072); // (300A,0072)
/// NumberOfFractionsPlanned (300A,0078) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRACTIONS_PLANNED: Tag = Tag(0x300A, 0x0078); // (300A,0078)
/// NumberOfFractionPatternDigitsPerDay (300A,0079) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY: Tag = Tag(0x300A, 0x0079); // (300A,0079)
/// RepeatFractionCycleLength (300A,007A) IS 1 DICOM
#[rustfmt::skip]
pub const REPEAT_FRACTION_CYCLE_LENGTH: Tag = Tag(0x300A, 0x007A); // (300A,007A)
/// FractionPattern (300A,007B) LT 1 DICOM
#[rustfmt::skip]
pub const FRACTION_PATTERN: Tag = Tag(0x300A, 0x007B); // (300A,007B)
/// NumberOfBeams (300A,0080) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_BEAMS: Tag = Tag(0x300A, 0x0080); // (300A,0080)
/// BeamDoseSpecificationPoint (300A,0082) DS 3 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_SPECIFICATION_POINT: Tag = Tag(0x300A, 0x0082); // (300A,0082)
/// ReferencedDoseReferenceUID (300A,0083) UI 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_DOSE_REFERENCE_UID: Tag = Tag(0x300A, 0x0083); // (300A,0083)
/// BeamDose (300A,0084) DS 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE: Tag = Tag(0x300A, 0x0084); // (300A,0084)
/// BeamMeterset (300A,0086) DS 1 DICOM
#[rustfmt::skip]
pub const BEAM_METERSET: Tag = Tag(0x300A, 0x0086); // (300A,0086)
/// BeamDosePointDepth (300A,0088) FL 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_POINT_DEPTH: Tag = Tag(0x300A, 0x0088); // (300A,0088)
/// BeamDosePointEquivalentDepth (300A,0089) FL 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_POINT_EQUIVALENT_DEPTH: Tag = Tag(0x300A, 0x0089); // (300A,0089)
/// BeamDosePointSSD (300A,008A) FL 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_POINT_SSD: Tag = Tag(0x300A, 0x008A); // (300A,008A)
/// BeamDoseMeaning (300A,008B) CS 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_MEANING: Tag = Tag(0x300A, 0x008B); // (300A,008B)
/// BeamDoseVerificationControlPointSequence (300A,008C) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_VERIFICATION_CONTROL_POINT_SEQUENCE: Tag = Tag(0x300A, 0x008C); // (300A,008C)
/// BeamDoseType (300A,0090) CS 1 DICOM
#[rustfmt::skip]
pub const BEAM_DOSE_TYPE: Tag = Tag(0x300A, 0x0090); // (300A,0090)
/// AlternateBeamDose (300A,0091) DS 1 DICOM
#[rustfmt::skip]
pub const ALTERNATE_BEAM_DOSE: Tag = Tag(0x300A, 0x0091); // (300A,0091)
/// AlternateBeamDoseType (300A,0092) CS 1 DICOM
#[rustfmt::skip]
pub const ALTERNATE_BEAM_DOSE_TYPE: Tag = Tag(0x300A, 0x0092); // (300A,0092)
/// DepthValueAveragingFlag (300A,0093) CS 1 DICOM
#[rustfmt::skip]
pub const DEPTH_VALUE_AVERAGING_FLAG: Tag = Tag(0x300A, 0x0093); // (300A,0093)
/// NumberOfBrachyApplicationSetups (300A,00A0) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_BRACHY_APPLICATION_SETUPS: Tag = Tag(0x300A, 0x00A0); // (300A,00A0)
/// BrachyApplicationSetupDoseSpecificationPoint (300A,00A2) DS 3 DICOM
#[rustfmt::skip]
pub const BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT: Tag = Tag(0x300A, 0x00A2); // (300A,00A2)
/// BrachyApplicationSetupDose (300A,00A4) DS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_APPLICATION_SETUP_DOSE: Tag = Tag(0x300A, 0x00A4); // (300A,00A4)
/// BeamSequence (300A,00B0) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_SEQUENCE: Tag = Tag(0x300A, 0x00B0); // (300A,00B0)
/// TreatmentMachineName (300A,00B2) SH 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_MACHINE_NAME: Tag = Tag(0x300A, 0x00B2); // (300A,00B2)
/// PrimaryDosimeterUnit (300A,00B3) CS 1 DICOM
#[rustfmt::skip]
pub const PRIMARY_DOSIMETER_UNIT: Tag = Tag(0x300A, 0x00B3); // (300A,00B3)
/// SourceAxisDistance (300A,00B4) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_AXIS_DISTANCE: Tag = Tag(0x300A, 0x00B4); // (300A,00B4)
/// BeamLimitingDeviceSequence (300A,00B6) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x00B6); // (300A,00B6)
/// RTBeamLimitingDeviceType (300A,00B8) CS 1 DICOM
#[rustfmt::skip]
pub const RT_BEAM_LIMITING_DEVICE_TYPE: Tag = Tag(0x300A, 0x00B8); // (300A,00B8)
/// SourceToBeamLimitingDeviceDistance (300A,00BA) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE: Tag = Tag(0x300A, 0x00BA); // (300A,00BA)
/// IsocenterToBeamLimitingDeviceDistance (300A,00BB) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE: Tag = Tag(0x300A, 0x00BB); // (300A,00BB)
/// NumberOfLeafJawPairs (300A,00BC) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_LEAF_JAW_PAIRS: Tag = Tag(0x300A, 0x00BC); // (300A,00BC)
/// LeafPositionBoundaries (300A,00BE) DS 3-n DICOM
#[rustfmt::skip]
pub const LEAF_POSITION_BOUNDARIES: Tag = Tag(0x300A, 0x00BE); // (300A,00BE)
/// BeamNumber (300A,00C0) IS 1 DICOM
#[rustfmt::skip]
pub const BEAM_NUMBER: Tag = Tag(0x300A, 0x00C0); // (300A,00C0)
/// BeamName (300A,00C2) LO 1 DICOM
#[rustfmt::skip]
pub const BEAM_NAME: Tag = Tag(0x300A, 0x00C2); // (300A,00C2)
/// BeamDescription (300A,00C3) ST 1 DICOM
#[rustfmt::skip]
pub const BEAM_DESCRIPTION: Tag = Tag(0x300A, 0x00C3); // (300A,00C3)
/// BeamType (300A,00C4) CS 1 DICOM
#[rustfmt::skip]
pub const BEAM_TYPE: Tag = Tag(0x300A, 0x00C4); // (300A,00C4)
/// BeamDeliveryDurationLimit (300A,00C5) FD 1 DICOM
#[rustfmt::skip]
pub const BEAM_DELIVERY_DURATION_LIMIT: Tag = Tag(0x300A, 0x00C5); // (300A,00C5)
/// RadiationType (300A,00C6) CS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_TYPE: Tag = Tag(0x300A, 0x00C6); // (300A,00C6)
/// HighDoseTechniqueType (300A,00C7) CS 1 DICOM
#[rustfmt::skip]
pub const HIGH_DOSE_TECHNIQUE_TYPE: Tag = Tag(0x300A, 0x00C7); // (300A,00C7)
/// ReferenceImageNumber (300A,00C8) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_IMAGE_NUMBER: Tag = Tag(0x300A, 0x00C8); // (300A,00C8)
/// PlannedVerificationImageSequence (300A,00CA) SQ 1 DICOM
#[rustfmt::skip]
pub const PLANNED_VERIFICATION_IMAGE_SEQUENCE: Tag = Tag(0x300A, 0x00CA); // (300A,00CA)
/// ImagingDeviceSpecificAcquisitionParameters (300A,00CC) LO 1-n DICOM
#[rustfmt::skip]
pub const IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS: Tag = Tag(0x300A, 0x00CC); // (300A,00CC)
/// TreatmentDeliveryType (300A,00CE) CS 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_DELIVERY_TYPE: Tag = Tag(0x300A, 0x00CE); // (300A,00CE)
/// NumberOfWedges (300A,00D0) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_WEDGES: Tag = Tag(0x300A, 0x00D0); // (300A,00D0)
/// WedgeSequence (300A,00D1) SQ 1 DICOM
#[rustfmt::skip]
pub const WEDGE_SEQUENCE: Tag = Tag(0x300A, 0x00D1); // (300A,00D1)
/// WedgeNumber (300A,00D2) IS 1 DICOM
#[rustfmt::skip]
pub const WEDGE_NUMBER: Tag = Tag(0x300A, 0x00D2); // (300A,00D2)
/// WedgeType (300A,00D3) CS 1 DICOM
#[rustfmt::skip]
pub const WEDGE_TYPE: Tag = Tag(0x300A, 0x00D3); // (300A,00D3)
/// WedgeID (300A,00D4) SH 1 DICOM
#[rustfmt::skip]
pub const WEDGE_ID: Tag = Tag(0x300A, 0x00D4); // (300A,00D4)
/// WedgeAngle (300A,00D5) IS 1 DICOM
#[rustfmt::skip]
pub const WEDGE_ANGLE: Tag = Tag(0x300A, 0x00D5); // (300A,00D5)
/// WedgeFactor (300A,00D6) DS 1 DICOM
#[rustfmt::skip]
pub const WEDGE_FACTOR: Tag = Tag(0x300A, 0x00D6); // (300A,00D6)
/// TotalWedgeTrayWaterEquivalentThickness (300A,00D7) FL 1 DICOM
#[rustfmt::skip]
pub const TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x00D7); // (300A,00D7)
/// WedgeOrientation (300A,00D8) DS 1 DICOM
#[rustfmt::skip]
pub const WEDGE_ORIENTATION: Tag = Tag(0x300A, 0x00D8); // (300A,00D8)
/// IsocenterToWedgeTrayDistance (300A,00D9) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_WEDGE_TRAY_DISTANCE: Tag = Tag(0x300A, 0x00D9); // (300A,00D9)
/// SourceToWedgeTrayDistance (300A,00DA) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_WEDGE_TRAY_DISTANCE: Tag = Tag(0x300A, 0x00DA); // (300A,00DA)
/// WedgeThinEdgePosition (300A,00DB) FL 1 DICOM
#[rustfmt::skip]
pub const WEDGE_THIN_EDGE_POSITION: Tag = Tag(0x300A, 0x00DB); // (300A,00DB)
/// BolusID (300A,00DC) SH 1 DICOM
#[rustfmt::skip]
pub const BOLUS_ID: Tag = Tag(0x300A, 0x00DC); // (300A,00DC)
/// BolusDescription (300A,00DD) ST 1 DICOM
#[rustfmt::skip]
pub const BOLUS_DESCRIPTION: Tag = Tag(0x300A, 0x00DD); // (300A,00DD)
/// EffectiveWedgeAngle (300A,00DE) DS 1 DICOM
#[rustfmt::skip]
pub const EFFECTIVE_WEDGE_ANGLE: Tag = Tag(0x300A, 0x00DE); // (300A,00DE)
/// NumberOfCompensators (300A,00E0) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_COMPENSATORS: Tag = Tag(0x300A, 0x00E0); // (300A,00E0)
/// MaterialID (300A,00E1) SH 1 DICOM
#[rustfmt::skip]
pub const MATERIAL_ID: Tag = Tag(0x300A, 0x00E1); // (300A,00E1)
/// TotalCompensatorTrayFactor (300A,00E2) DS 1 DICOM
#[rustfmt::skip]
pub const TOTAL_COMPENSATOR_TRAY_FACTOR: Tag = Tag(0x300A, 0x00E2); // (300A,00E2)
/// CompensatorSequence (300A,00E3) SQ 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_SEQUENCE: Tag = Tag(0x300A, 0x00E3); // (300A,00E3)
/// CompensatorNumber (300A,00E4) IS 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_NUMBER: Tag = Tag(0x300A, 0x00E4); // (300A,00E4)
/// CompensatorID (300A,00E5) SH 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_ID: Tag = Tag(0x300A, 0x00E5); // (300A,00E5)
/// SourceToCompensatorTrayDistance (300A,00E6) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_COMPENSATOR_TRAY_DISTANCE: Tag = Tag(0x300A, 0x00E6); // (300A,00E6)
/// CompensatorRows (300A,00E7) IS 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_ROWS: Tag = Tag(0x300A, 0x00E7); // (300A,00E7)
/// CompensatorColumns (300A,00E8) IS 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_COLUMNS: Tag = Tag(0x300A, 0x00E8); // (300A,00E8)
/// CompensatorPixelSpacing (300A,00E9) DS 2 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_PIXEL_SPACING: Tag = Tag(0x300A, 0x00E9); // (300A,00E9)
/// CompensatorPosition (300A,00EA) DS 2 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_POSITION: Tag = Tag(0x300A, 0x00EA); // (300A,00EA)
/// CompensatorTransmissionData (300A,00EB) DS 1-n DICOM
#[rustfmt::skip]
pub const COMPENSATOR_TRANSMISSION_DATA: Tag = Tag(0x300A, 0x00EB); // (300A,00EB)
/// CompensatorThicknessData (300A,00EC) DS 1-n DICOM
#[rustfmt::skip]
pub const COMPENSATOR_THICKNESS_DATA: Tag = Tag(0x300A, 0x00EC); // (300A,00EC)
/// NumberOfBoli (300A,00ED) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_BOLI: Tag = Tag(0x300A, 0x00ED); // (300A,00ED)
/// CompensatorType (300A,00EE) CS 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_TYPE: Tag = Tag(0x300A, 0x00EE); // (300A,00EE)
/// CompensatorTrayID (300A,00EF) SH 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_TRAY_ID: Tag = Tag(0x300A, 0x00EF); // (300A,00EF)
/// NumberOfBlocks (300A,00F0) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_BLOCKS: Tag = Tag(0x300A, 0x00F0); // (300A,00F0)
/// TotalBlockTrayFactor (300A,00F2) DS 1 DICOM
#[rustfmt::skip]
pub const TOTAL_BLOCK_TRAY_FACTOR: Tag = Tag(0x300A, 0x00F2); // (300A,00F2)
/// TotalBlockTrayWaterEquivalentThickness (300A,00F3) FL 1 DICOM
#[rustfmt::skip]
pub const TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x00F3); // (300A,00F3)
/// BlockSequence (300A,00F4) SQ 1 DICOM
#[rustfmt::skip]
pub const BLOCK_SEQUENCE: Tag = Tag(0x300A, 0x00F4); // (300A,00F4)
/// BlockTrayID (300A,00F5) SH 1 DICOM
#[rustfmt::skip]
pub const BLOCK_TRAY_ID: Tag = Tag(0x300A, 0x00F5); // (300A,00F5)
/// SourceToBlockTrayDistance (300A,00F6) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_BLOCK_TRAY_DISTANCE: Tag = Tag(0x300A, 0x00F6); // (300A,00F6)
/// IsocenterToBlockTrayDistance (300A,00F7) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_BLOCK_TRAY_DISTANCE: Tag = Tag(0x300A, 0x00F7); // (300A,00F7)
/// BlockType (300A,00F8) CS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_TYPE: Tag = Tag(0x300A, 0x00F8); // (300A,00F8)
/// AccessoryCode (300A,00F9) LO 1 DICOM
#[rustfmt::skip]
pub const ACCESSORY_CODE: Tag = Tag(0x300A, 0x00F9); // (300A,00F9)
/// BlockDivergence (300A,00FA) CS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_DIVERGENCE: Tag = Tag(0x300A, 0x00FA); // (300A,00FA)
/// BlockMountingPosition (300A,00FB) CS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_MOUNTING_POSITION: Tag = Tag(0x300A, 0x00FB); // (300A,00FB)
/// BlockNumber (300A,00FC) IS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_NUMBER: Tag = Tag(0x300A, 0x00FC); // (300A,00FC)
/// BlockName (300A,00FE) LO 1 DICOM
#[rustfmt::skip]
pub const BLOCK_NAME: Tag = Tag(0x300A, 0x00FE); // (300A,00FE)
/// BlockThickness (300A,0100) DS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_THICKNESS: Tag = Tag(0x300A, 0x0100); // (300A,0100)
/// BlockTransmission (300A,0102) DS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_TRANSMISSION: Tag = Tag(0x300A, 0x0102); // (300A,0102)
/// BlockNumberOfPoints (300A,0104) IS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_NUMBER_OF_POINTS: Tag = Tag(0x300A, 0x0104); // (300A,0104)
/// BlockData (300A,0106) DS 2-2n DICOM
#[rustfmt::skip]
pub const BLOCK_DATA: Tag = Tag(0x300A, 0x0106); // (300A,0106)
/// ApplicatorSequence (300A,0107) SQ 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_SEQUENCE: Tag = Tag(0x300A, 0x0107); // (300A,0107)
/// ApplicatorID (300A,0108) SH 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_ID: Tag = Tag(0x300A, 0x0108); // (300A,0108)
/// ApplicatorType (300A,0109) CS 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_TYPE: Tag = Tag(0x300A, 0x0109); // (300A,0109)
/// ApplicatorDescription (300A,010A) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_DESCRIPTION: Tag = Tag(0x300A, 0x010A); // (300A,010A)
/// CumulativeDoseReferenceCoefficient (300A,010C) DS 1 DICOM
#[rustfmt::skip]
pub const CUMULATIVE_DOSE_REFERENCE_COEFFICIENT: Tag = Tag(0x300A, 0x010C); // (300A,010C)
/// FinalCumulativeMetersetWeight (300A,010E) DS 1 DICOM
#[rustfmt::skip]
pub const FINAL_CUMULATIVE_METERSET_WEIGHT: Tag = Tag(0x300A, 0x010E); // (300A,010E)
/// NumberOfControlPoints (300A,0110) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_CONTROL_POINTS: Tag = Tag(0x300A, 0x0110); // (300A,0110)
/// ControlPointSequence (300A,0111) SQ 1 DICOM
#[rustfmt::skip]
pub const CONTROL_POINT_SEQUENCE: Tag = Tag(0x300A, 0x0111); // (300A,0111)
/// ControlPointIndex (300A,0112) IS 1 DICOM
#[rustfmt::skip]
pub const CONTROL_POINT_INDEX: Tag = Tag(0x300A, 0x0112); // (300A,0112)
/// NominalBeamEnergy (300A,0114) DS 1 DICOM
#[rustfmt::skip]
pub const NOMINAL_BEAM_ENERGY: Tag = Tag(0x300A, 0x0114); // (300A,0114)
/// DoseRateSet (300A,0115) DS 1 DICOM
#[rustfmt::skip]
pub const DOSE_RATE_SET: Tag = Tag(0x300A, 0x0115); // (300A,0115)
/// WedgePositionSequence (300A,0116) SQ 1 DICOM
#[rustfmt::skip]
pub const WEDGE_POSITION_SEQUENCE: Tag = Tag(0x300A, 0x0116); // (300A,0116)
/// WedgePosition (300A,0118) CS 1 DICOM
#[rustfmt::skip]
pub const WEDGE_POSITION: Tag = Tag(0x300A, 0x0118); // (300A,0118)
/// BeamLimitingDevicePositionSequence (300A,011A) SQ 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_POSITION_SEQUENCE: Tag = Tag(0x300A, 0x011A); // (300A,011A)
/// LeafJawPositions (300A,011C) DS 2-2n DICOM
#[rustfmt::skip]
pub const LEAF_JAW_POSITIONS: Tag = Tag(0x300A, 0x011C); // (300A,011C)
/// GantryAngle (300A,011E) DS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_ANGLE: Tag = Tag(0x300A, 0x011E); // (300A,011E)
/// GantryRotationDirection (300A,011F) CS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x011F); // (300A,011F)
/// BeamLimitingDeviceAngle (300A,0120) DS 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_ANGLE: Tag = Tag(0x300A, 0x0120); // (300A,0120)
/// BeamLimitingDeviceRotationDirection (300A,0121) CS 1 DICOM
#[rustfmt::skip]
pub const BEAM_LIMITING_DEVICE_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x0121); // (300A,0121)
/// PatientSupportAngle (300A,0122) DS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_ANGLE: Tag = Tag(0x300A, 0x0122); // (300A,0122)
/// PatientSupportRotationDirection (300A,0123) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x0123); // (300A,0123)
/// TableTopEccentricAxisDistance (300A,0124) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ECCENTRIC_AXIS_DISTANCE: Tag = Tag(0x300A, 0x0124); // (300A,0124)
/// TableTopEccentricAngle (300A,0125) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ECCENTRIC_ANGLE: Tag = Tag(0x300A, 0x0125); // (300A,0125)
/// TableTopEccentricRotationDirection (300A,0126) CS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x0126); // (300A,0126)
/// TableTopVerticalPosition (300A,0128) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_VERTICAL_POSITION: Tag = Tag(0x300A, 0x0128); // (300A,0128)
/// TableTopLongitudinalPosition (300A,0129) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LONGITUDINAL_POSITION: Tag = Tag(0x300A, 0x0129); // (300A,0129)
/// TableTopLateralPosition (300A,012A) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LATERAL_POSITION: Tag = Tag(0x300A, 0x012A); // (300A,012A)
/// IsocenterPosition (300A,012C) DS 3 DICOM
#[rustfmt::skip]
pub const ISOCENTER_POSITION: Tag = Tag(0x300A, 0x012C); // (300A,012C)
/// SurfaceEntryPoint (300A,012E) DS 3 DICOM
#[rustfmt::skip]
pub const SURFACE_ENTRY_POINT: Tag = Tag(0x300A, 0x012E); // (300A,012E)
/// SourceToSurfaceDistance (300A,0130) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_SURFACE_DISTANCE: Tag = Tag(0x300A, 0x0130); // (300A,0130)
/// AverageBeamDosePointSourceToExternalContourDistance (300A,0131) FL 1 DICOM
#[rustfmt::skip]
pub const AVERAGE_BEAM_DOSE_POINT_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE: Tag = Tag(0x300A, 0x0131); // (300A,0131)
/// SourceToExternalContourDistance (300A,0132) FL 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE: Tag = Tag(0x300A, 0x0132); // (300A,0132)
/// ExternalContourEntryPoint (300A,0133) FL 3 DICOM
#[rustfmt::skip]
pub const EXTERNAL_CONTOUR_ENTRY_POINT: Tag = Tag(0x300A, 0x0133); // (300A,0133)
/// CumulativeMetersetWeight (300A,0134) DS 1 DICOM
#[rustfmt::skip]
pub const CUMULATIVE_METERSET_WEIGHT: Tag = Tag(0x300A, 0x0134); // (300A,0134)
/// TableTopPitchAngle (300A,0140) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_PITCH_ANGLE: Tag = Tag(0x300A, 0x0140); // (300A,0140)
/// TableTopPitchRotationDirection (300A,0142) CS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_PITCH_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x0142); // (300A,0142)
/// TableTopRollAngle (300A,0144) FL 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ROLL_ANGLE: Tag = Tag(0x300A, 0x0144); // (300A,0144)
/// TableTopRollRotationDirection (300A,0146) CS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_ROLL_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x0146); // (300A,0146)
/// HeadFixationAngle (300A,0148) FL 1 DICOM
#[rustfmt::skip]
pub const HEAD_FIXATION_ANGLE: Tag = Tag(0x300A, 0x0148); // (300A,0148)
/// GantryPitchAngle (300A,014A) FL 1 DICOM
#[rustfmt::skip]
pub const GANTRY_PITCH_ANGLE: Tag = Tag(0x300A, 0x014A); // (300A,014A)
/// GantryPitchRotationDirection (300A,014C) CS 1 DICOM
#[rustfmt::skip]
pub const GANTRY_PITCH_ROTATION_DIRECTION: Tag = Tag(0x300A, 0x014C); // (300A,014C)
/// GantryPitchAngleTolerance (300A,014E) FL 1 DICOM
#[rustfmt::skip]
pub const GANTRY_PITCH_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x014E); // (300A,014E)
/// FixationEye (300A,0150) CS 1 DICOM
#[rustfmt::skip]
pub const FIXATION_EYE: Tag = Tag(0x300A, 0x0150); // (300A,0150)
/// ChairHeadFramePosition (300A,0151) DS 1 DICOM
#[rustfmt::skip]
pub const CHAIR_HEAD_FRAME_POSITION: Tag = Tag(0x300A, 0x0151); // (300A,0151)
/// HeadFixationAngleTolerance (300A,0152) DS 1 DICOM
#[rustfmt::skip]
pub const HEAD_FIXATION_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x0152); // (300A,0152)
/// ChairHeadFramePositionTolerance (300A,0153) DS 1 DICOM
#[rustfmt::skip]
pub const CHAIR_HEAD_FRAME_POSITION_TOLERANCE: Tag = Tag(0x300A, 0x0153); // (300A,0153)
/// FixationLightAzimuthalAngleTolerance (300A,0154) DS 1 DICOM
#[rustfmt::skip]
pub const FIXATION_LIGHT_AZIMUTHAL_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x0154); // (300A,0154)
/// FixationLightPolarAngleTolerance (300A,0155) DS 1 DICOM
#[rustfmt::skip]
pub const FIXATION_LIGHT_POLAR_ANGLE_TOLERANCE: Tag = Tag(0x300A, 0x0155); // (300A,0155)
/// PatientSetupSequence (300A,0180) SQ 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SETUP_SEQUENCE: Tag = Tag(0x300A, 0x0180); // (300A,0180)
/// PatientSetupNumber (300A,0182) IS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SETUP_NUMBER: Tag = Tag(0x300A, 0x0182); // (300A,0182)
/// PatientSetupLabel (300A,0183) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SETUP_LABEL: Tag = Tag(0x300A, 0x0183); // (300A,0183)
/// PatientAdditionalPosition (300A,0184) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_ADDITIONAL_POSITION: Tag = Tag(0x300A, 0x0184); // (300A,0184)
/// FixationDeviceSequence (300A,0190) SQ 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x0190); // (300A,0190)
/// FixationDeviceType (300A,0192) CS 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_TYPE: Tag = Tag(0x300A, 0x0192); // (300A,0192)
/// FixationDeviceLabel (300A,0194) SH 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_LABEL: Tag = Tag(0x300A, 0x0194); // (300A,0194)
/// FixationDeviceDescription (300A,0196) ST 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_DESCRIPTION: Tag = Tag(0x300A, 0x0196); // (300A,0196)
/// FixationDevicePosition (300A,0198) SH 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_POSITION: Tag = Tag(0x300A, 0x0198); // (300A,0198)
/// FixationDevicePitchAngle (300A,0199) FL 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_PITCH_ANGLE: Tag = Tag(0x300A, 0x0199); // (300A,0199)
/// FixationDeviceRollAngle (300A,019A) FL 1 DICOM
#[rustfmt::skip]
pub const FIXATION_DEVICE_ROLL_ANGLE: Tag = Tag(0x300A, 0x019A); // (300A,019A)
/// ShieldingDeviceSequence (300A,01A0) SQ 1 DICOM
#[rustfmt::skip]
pub const SHIELDING_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x01A0); // (300A,01A0)
/// ShieldingDeviceType (300A,01A2) CS 1 DICOM
#[rustfmt::skip]
pub const SHIELDING_DEVICE_TYPE: Tag = Tag(0x300A, 0x01A2); // (300A,01A2)
/// ShieldingDeviceLabel (300A,01A4) SH 1 DICOM
#[rustfmt::skip]
pub const SHIELDING_DEVICE_LABEL: Tag = Tag(0x300A, 0x01A4); // (300A,01A4)
/// ShieldingDeviceDescription (300A,01A6) ST 1 DICOM
#[rustfmt::skip]
pub const SHIELDING_DEVICE_DESCRIPTION: Tag = Tag(0x300A, 0x01A6); // (300A,01A6)
/// ShieldingDevicePosition (300A,01A8) SH 1 DICOM
#[rustfmt::skip]
pub const SHIELDING_DEVICE_POSITION: Tag = Tag(0x300A, 0x01A8); // (300A,01A8)
/// SetupTechnique (300A,01B0) CS 1 DICOM
#[rustfmt::skip]
pub const SETUP_TECHNIQUE: Tag = Tag(0x300A, 0x01B0); // (300A,01B0)
/// SetupTechniqueDescription (300A,01B2) ST 1 DICOM
#[rustfmt::skip]
pub const SETUP_TECHNIQUE_DESCRIPTION: Tag = Tag(0x300A, 0x01B2); // (300A,01B2)
/// SetupDeviceSequence (300A,01B4) SQ 1 DICOM
#[rustfmt::skip]
pub const SETUP_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x01B4); // (300A,01B4)
/// SetupDeviceType (300A,01B6) CS 1 DICOM
#[rustfmt::skip]
pub const SETUP_DEVICE_TYPE: Tag = Tag(0x300A, 0x01B6); // (300A,01B6)
/// SetupDeviceLabel (300A,01B8) SH 1 DICOM
#[rustfmt::skip]
pub const SETUP_DEVICE_LABEL: Tag = Tag(0x300A, 0x01B8); // (300A,01B8)
/// SetupDeviceDescription (300A,01BA) ST 1 DICOM
#[rustfmt::skip]
pub const SETUP_DEVICE_DESCRIPTION: Tag = Tag(0x300A, 0x01BA); // (300A,01BA)
/// SetupDeviceParameter (300A,01BC) DS 1 DICOM
#[rustfmt::skip]
pub const SETUP_DEVICE_PARAMETER: Tag = Tag(0x300A, 0x01BC); // (300A,01BC)
/// SetupReferenceDescription (300A,01D0) ST 1 DICOM
#[rustfmt::skip]
pub const SETUP_REFERENCE_DESCRIPTION: Tag = Tag(0x300A, 0x01D0); // (300A,01D0)
/// TableTopVerticalSetupDisplacement (300A,01D2) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT: Tag = Tag(0x300A, 0x01D2); // (300A,01D2)
/// TableTopLongitudinalSetupDisplacement (300A,01D4) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT: Tag = Tag(0x300A, 0x01D4); // (300A,01D4)
/// TableTopLateralSetupDisplacement (300A,01D6) DS 1 DICOM
#[rustfmt::skip]
pub const TABLE_TOP_LATERAL_SETUP_DISPLACEMENT: Tag = Tag(0x300A, 0x01D6); // (300A,01D6)
/// BrachyTreatmentTechnique (300A,0200) CS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_TREATMENT_TECHNIQUE: Tag = Tag(0x300A, 0x0200); // (300A,0200)
/// BrachyTreatmentType (300A,0202) CS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_TREATMENT_TYPE: Tag = Tag(0x300A, 0x0202); // (300A,0202)
/// TreatmentMachineSequence (300A,0206) SQ 1 DICOM
#[rustfmt::skip]
pub const TREATMENT_MACHINE_SEQUENCE: Tag = Tag(0x300A, 0x0206); // (300A,0206)
/// SourceSequence (300A,0210) SQ 1 DICOM
#[rustfmt::skip]
pub const SOURCE_SEQUENCE: Tag = Tag(0x300A, 0x0210); // (300A,0210)
/// SourceNumber (300A,0212) IS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_NUMBER: Tag = Tag(0x300A, 0x0212); // (300A,0212)
/// SourceType (300A,0214) CS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TYPE: Tag = Tag(0x300A, 0x0214); // (300A,0214)
/// SourceManufacturer (300A,0216) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_MANUFACTURER: Tag = Tag(0x300A, 0x0216); // (300A,0216)
/// ActiveSourceDiameter (300A,0218) DS 1 DICOM
#[rustfmt::skip]
pub const ACTIVE_SOURCE_DIAMETER: Tag = Tag(0x300A, 0x0218); // (300A,0218)
/// ActiveSourceLength (300A,021A) DS 1 DICOM
#[rustfmt::skip]
pub const ACTIVE_SOURCE_LENGTH: Tag = Tag(0x300A, 0x021A); // (300A,021A)
/// SourceModelID (300A,021B) SH 1 DICOM
#[rustfmt::skip]
pub const SOURCE_MODEL_ID: Tag = Tag(0x300A, 0x021B); // (300A,021B)
/// SourceDescription (300A,021C) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_DESCRIPTION: Tag = Tag(0x300A, 0x021C); // (300A,021C)
/// SourceEncapsulationNominalThickness (300A,0222) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_ENCAPSULATION_NOMINAL_THICKNESS: Tag = Tag(0x300A, 0x0222); // (300A,0222)
/// SourceEncapsulationNominalTransmission (300A,0224) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION: Tag = Tag(0x300A, 0x0224); // (300A,0224)
/// SourceIsotopeName (300A,0226) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_ISOTOPE_NAME: Tag = Tag(0x300A, 0x0226); // (300A,0226)
/// SourceIsotopeHalfLife (300A,0228) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_ISOTOPE_HALF_LIFE: Tag = Tag(0x300A, 0x0228); // (300A,0228)
/// SourceStrengthUnits (300A,0229) CS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_STRENGTH_UNITS: Tag = Tag(0x300A, 0x0229); // (300A,0229)
/// ReferenceAirKermaRate (300A,022A) DS 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_AIR_KERMA_RATE: Tag = Tag(0x300A, 0x022A); // (300A,022A)
/// SourceStrength (300A,022B) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_STRENGTH: Tag = Tag(0x300A, 0x022B); // (300A,022B)
/// SourceStrengthReferenceDate (300A,022C) DA 1 DICOM
#[rustfmt::skip]
pub const SOURCE_STRENGTH_REFERENCE_DATE: Tag = Tag(0x300A, 0x022C); // (300A,022C)
/// SourceStrengthReferenceTime (300A,022E) TM 1 DICOM
#[rustfmt::skip]
pub const SOURCE_STRENGTH_REFERENCE_TIME: Tag = Tag(0x300A, 0x022E); // (300A,022E)
/// ApplicationSetupSequence (300A,0230) SQ 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_SETUP_SEQUENCE: Tag = Tag(0x300A, 0x0230); // (300A,0230)
/// ApplicationSetupType (300A,0232) CS 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_SETUP_TYPE: Tag = Tag(0x300A, 0x0232); // (300A,0232)
/// ApplicationSetupNumber (300A,0234) IS 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_SETUP_NUMBER: Tag = Tag(0x300A, 0x0234); // (300A,0234)
/// ApplicationSetupName (300A,0236) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_SETUP_NAME: Tag = Tag(0x300A, 0x0236); // (300A,0236)
/// ApplicationSetupManufacturer (300A,0238) LO 1 DICOM
#[rustfmt::skip]
pub const APPLICATION_SETUP_MANUFACTURER: Tag = Tag(0x300A, 0x0238); // (300A,0238)
/// TemplateNumber (300A,0240) IS 1 DICOM
#[rustfmt::skip]
pub const TEMPLATE_NUMBER: Tag = Tag(0x300A, 0x0240); // (300A,0240)
/// TemplateType (300A,0242) SH 1 DICOM
#[rustfmt::skip]
pub const TEMPLATE_TYPE: Tag = Tag(0x300A, 0x0242); // (300A,0242)
/// TemplateName (300A,0244) LO 1 DICOM
#[rustfmt::skip]
pub const TEMPLATE_NAME: Tag = Tag(0x300A, 0x0244); // (300A,0244)
/// TotalReferenceAirKerma (300A,0250) DS 1 DICOM
#[rustfmt::skip]
pub const TOTAL_REFERENCE_AIR_KERMA: Tag = Tag(0x300A, 0x0250); // (300A,0250)
/// BrachyAccessoryDeviceSequence (300A,0260) SQ 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x0260); // (300A,0260)
/// BrachyAccessoryDeviceNumber (300A,0262) IS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_NUMBER: Tag = Tag(0x300A, 0x0262); // (300A,0262)
/// BrachyAccessoryDeviceID (300A,0263) SH 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_ID: Tag = Tag(0x300A, 0x0263); // (300A,0263)
/// BrachyAccessoryDeviceType (300A,0264) CS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_TYPE: Tag = Tag(0x300A, 0x0264); // (300A,0264)
/// BrachyAccessoryDeviceName (300A,0266) LO 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_NAME: Tag = Tag(0x300A, 0x0266); // (300A,0266)
/// BrachyAccessoryDeviceNominalThickness (300A,026A) DS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS: Tag = Tag(0x300A, 0x026A); // (300A,026A)
/// BrachyAccessoryDeviceNominalTransmission (300A,026C) DS 1 DICOM
#[rustfmt::skip]
pub const BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION: Tag = Tag(0x300A, 0x026C); // (300A,026C)
/// ChannelEffectiveLength (300A,0271) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_EFFECTIVE_LENGTH: Tag = Tag(0x300A, 0x0271); // (300A,0271)
/// ChannelInnerLength (300A,0272) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_INNER_LENGTH: Tag = Tag(0x300A, 0x0272); // (300A,0272)
/// AfterloaderChannelID (300A,0273) SH 1 DICOM
#[rustfmt::skip]
pub const AFTERLOADER_CHANNEL_ID: Tag = Tag(0x300A, 0x0273); // (300A,0273)
/// SourceApplicatorTipLength (300A,0274) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_TIP_LENGTH: Tag = Tag(0x300A, 0x0274); // (300A,0274)
/// ChannelSequence (300A,0280) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SEQUENCE: Tag = Tag(0x300A, 0x0280); // (300A,0280)
/// ChannelNumber (300A,0282) IS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_NUMBER: Tag = Tag(0x300A, 0x0282); // (300A,0282)
/// ChannelLength (300A,0284) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_LENGTH: Tag = Tag(0x300A, 0x0284); // (300A,0284)
/// ChannelTotalTime (300A,0286) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_TOTAL_TIME: Tag = Tag(0x300A, 0x0286); // (300A,0286)
/// SourceMovementType (300A,0288) CS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_MOVEMENT_TYPE: Tag = Tag(0x300A, 0x0288); // (300A,0288)
/// NumberOfPulses (300A,028A) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PULSES: Tag = Tag(0x300A, 0x028A); // (300A,028A)
/// PulseRepetitionInterval (300A,028C) DS 1 DICOM
#[rustfmt::skip]
pub const PULSE_REPETITION_INTERVAL: Tag = Tag(0x300A, 0x028C); // (300A,028C)
/// SourceApplicatorNumber (300A,0290) IS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_NUMBER: Tag = Tag(0x300A, 0x0290); // (300A,0290)
/// SourceApplicatorID (300A,0291) SH 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_ID: Tag = Tag(0x300A, 0x0291); // (300A,0291)
/// SourceApplicatorType (300A,0292) CS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_TYPE: Tag = Tag(0x300A, 0x0292); // (300A,0292)
/// SourceApplicatorName (300A,0294) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_NAME: Tag = Tag(0x300A, 0x0294); // (300A,0294)
/// SourceApplicatorLength (300A,0296) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_LENGTH: Tag = Tag(0x300A, 0x0296); // (300A,0296)
/// SourceApplicatorManufacturer (300A,0298) LO 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_MANUFACTURER: Tag = Tag(0x300A, 0x0298); // (300A,0298)
/// SourceApplicatorWallNominalThickness (300A,029C) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS: Tag = Tag(0x300A, 0x029C); // (300A,029C)
/// SourceApplicatorWallNominalTransmission (300A,029E) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION: Tag = Tag(0x300A, 0x029E); // (300A,029E)
/// SourceApplicatorStepSize (300A,02A0) DS 1 DICOM
#[rustfmt::skip]
pub const SOURCE_APPLICATOR_STEP_SIZE: Tag = Tag(0x300A, 0x02A0); // (300A,02A0)
/// TransferTubeNumber (300A,02A2) IS 1 DICOM
#[rustfmt::skip]
pub const TRANSFER_TUBE_NUMBER: Tag = Tag(0x300A, 0x02A2); // (300A,02A2)
/// TransferTubeLength (300A,02A4) DS 1 DICOM
#[rustfmt::skip]
pub const TRANSFER_TUBE_LENGTH: Tag = Tag(0x300A, 0x02A4); // (300A,02A4)
/// ChannelShieldSequence (300A,02B0) SQ 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SHIELD_SEQUENCE: Tag = Tag(0x300A, 0x02B0); // (300A,02B0)
/// ChannelShieldNumber (300A,02B2) IS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SHIELD_NUMBER: Tag = Tag(0x300A, 0x02B2); // (300A,02B2)
/// ChannelShieldID (300A,02B3) SH 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SHIELD_ID: Tag = Tag(0x300A, 0x02B3); // (300A,02B3)
/// ChannelShieldName (300A,02B4) LO 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SHIELD_NAME: Tag = Tag(0x300A, 0x02B4); // (300A,02B4)
/// ChannelShieldNominalThickness (300A,02B8) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SHIELD_NOMINAL_THICKNESS: Tag = Tag(0x300A, 0x02B8); // (300A,02B8)
/// ChannelShieldNominalTransmission (300A,02BA) DS 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_SHIELD_NOMINAL_TRANSMISSION: Tag = Tag(0x300A, 0x02BA); // (300A,02BA)
/// FinalCumulativeTimeWeight (300A,02C8) DS 1 DICOM
#[rustfmt::skip]
pub const FINAL_CUMULATIVE_TIME_WEIGHT: Tag = Tag(0x300A, 0x02C8); // (300A,02C8)
/// BrachyControlPointSequence (300A,02D0) SQ 1 DICOM
#[rustfmt::skip]
pub const BRACHY_CONTROL_POINT_SEQUENCE: Tag = Tag(0x300A, 0x02D0); // (300A,02D0)
/// ControlPointRelativePosition (300A,02D2) DS 1 DICOM
#[rustfmt::skip]
pub const CONTROL_POINT_RELATIVE_POSITION: Tag = Tag(0x300A, 0x02D2); // (300A,02D2)
/// ControlPoint3DPosition (300A,02D4) DS 3 DICOM
#[rustfmt::skip]
pub const CONTROL_POINT3_D_POSITION: Tag = Tag(0x300A, 0x02D4); // (300A,02D4)
/// CumulativeTimeWeight (300A,02D6) DS 1 DICOM
#[rustfmt::skip]
pub const CUMULATIVE_TIME_WEIGHT: Tag = Tag(0x300A, 0x02D6); // (300A,02D6)
/// CompensatorDivergence (300A,02E0) CS 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_DIVERGENCE: Tag = Tag(0x300A, 0x02E0); // (300A,02E0)
/// CompensatorMountingPosition (300A,02E1) CS 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_MOUNTING_POSITION: Tag = Tag(0x300A, 0x02E1); // (300A,02E1)
/// SourceToCompensatorDistance (300A,02E2) DS 1-n DICOM
#[rustfmt::skip]
pub const SOURCE_TO_COMPENSATOR_DISTANCE: Tag = Tag(0x300A, 0x02E2); // (300A,02E2)
/// TotalCompensatorTrayWaterEquivalentThickness (300A,02E3) FL 1 DICOM
#[rustfmt::skip]
pub const TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x02E3); // (300A,02E3)
/// IsocenterToCompensatorTrayDistance (300A,02E4) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE: Tag = Tag(0x300A, 0x02E4); // (300A,02E4)
/// CompensatorColumnOffset (300A,02E5) FL 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_COLUMN_OFFSET: Tag = Tag(0x300A, 0x02E5); // (300A,02E5)
/// IsocenterToCompensatorDistances (300A,02E6) FL 1-n DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_COMPENSATOR_DISTANCES: Tag = Tag(0x300A, 0x02E6); // (300A,02E6)
/// CompensatorRelativeStoppingPowerRatio (300A,02E7) FL 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO: Tag = Tag(0x300A, 0x02E7); // (300A,02E7)
/// CompensatorMillingToolDiameter (300A,02E8) FL 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_MILLING_TOOL_DIAMETER: Tag = Tag(0x300A, 0x02E8); // (300A,02E8)
/// IonRangeCompensatorSequence (300A,02EA) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_RANGE_COMPENSATOR_SEQUENCE: Tag = Tag(0x300A, 0x02EA); // (300A,02EA)
/// CompensatorDescription (300A,02EB) LT 1 DICOM
#[rustfmt::skip]
pub const COMPENSATOR_DESCRIPTION: Tag = Tag(0x300A, 0x02EB); // (300A,02EB)
/// RadiationMassNumber (300A,0302) IS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_MASS_NUMBER: Tag = Tag(0x300A, 0x0302); // (300A,0302)
/// RadiationAtomicNumber (300A,0304) IS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_ATOMIC_NUMBER: Tag = Tag(0x300A, 0x0304); // (300A,0304)
/// RadiationChargeState (300A,0306) SS 1 DICOM
#[rustfmt::skip]
pub const RADIATION_CHARGE_STATE: Tag = Tag(0x300A, 0x0306); // (300A,0306)
/// ScanMode (300A,0308) CS 1 DICOM
#[rustfmt::skip]
pub const SCAN_MODE: Tag = Tag(0x300A, 0x0308); // (300A,0308)
/// ModulatedScanModeType (300A,0309) CS 1 DICOM
#[rustfmt::skip]
pub const MODULATED_SCAN_MODE_TYPE: Tag = Tag(0x300A, 0x0309); // (300A,0309)
/// VirtualSourceAxisDistances (300A,030A) FL 2 DICOM
#[rustfmt::skip]
pub const VIRTUAL_SOURCE_AXIS_DISTANCES: Tag = Tag(0x300A, 0x030A); // (300A,030A)
/// SnoutSequence (300A,030C) SQ 1 DICOM
#[rustfmt::skip]
pub const SNOUT_SEQUENCE: Tag = Tag(0x300A, 0x030C); // (300A,030C)
/// SnoutPosition (300A,030D) FL 1 DICOM
#[rustfmt::skip]
pub const SNOUT_POSITION: Tag = Tag(0x300A, 0x030D); // (300A,030D)
/// SnoutID (300A,030F) SH 1 DICOM
#[rustfmt::skip]
pub const SNOUT_ID: Tag = Tag(0x300A, 0x030F); // (300A,030F)
/// NumberOfRangeShifters (300A,0312) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_RANGE_SHIFTERS: Tag = Tag(0x300A, 0x0312); // (300A,0312)
/// RangeShifterSequence (300A,0314) SQ 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_SEQUENCE: Tag = Tag(0x300A, 0x0314); // (300A,0314)
/// RangeShifterNumber (300A,0316) IS 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_NUMBER: Tag = Tag(0x300A, 0x0316); // (300A,0316)
/// RangeShifterID (300A,0318) SH 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_ID: Tag = Tag(0x300A, 0x0318); // (300A,0318)
/// RangeShifterType (300A,0320) CS 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_TYPE: Tag = Tag(0x300A, 0x0320); // (300A,0320)
/// RangeShifterDescription (300A,0322) LO 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_DESCRIPTION: Tag = Tag(0x300A, 0x0322); // (300A,0322)
/// NumberOfLateralSpreadingDevices (300A,0330) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_LATERAL_SPREADING_DEVICES: Tag = Tag(0x300A, 0x0330); // (300A,0330)
/// LateralSpreadingDeviceSequence (300A,0332) SQ 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x0332); // (300A,0332)
/// LateralSpreadingDeviceNumber (300A,0334) IS 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_NUMBER: Tag = Tag(0x300A, 0x0334); // (300A,0334)
/// LateralSpreadingDeviceID (300A,0336) SH 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_ID: Tag = Tag(0x300A, 0x0336); // (300A,0336)
/// LateralSpreadingDeviceType (300A,0338) CS 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_TYPE: Tag = Tag(0x300A, 0x0338); // (300A,0338)
/// LateralSpreadingDeviceDescription (300A,033A) LO 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_DESCRIPTION: Tag = Tag(0x300A, 0x033A); // (300A,033A)
/// LateralSpreadingDeviceWaterEquivalentThickness (300A,033C) FL 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x033C); // (300A,033C)
/// NumberOfRangeModulators (300A,0340) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_RANGE_MODULATORS: Tag = Tag(0x300A, 0x0340); // (300A,0340)
/// RangeModulatorSequence (300A,0342) SQ 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_SEQUENCE: Tag = Tag(0x300A, 0x0342); // (300A,0342)
/// RangeModulatorNumber (300A,0344) IS 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_NUMBER: Tag = Tag(0x300A, 0x0344); // (300A,0344)
/// RangeModulatorID (300A,0346) SH 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_ID: Tag = Tag(0x300A, 0x0346); // (300A,0346)
/// RangeModulatorType (300A,0348) CS 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_TYPE: Tag = Tag(0x300A, 0x0348); // (300A,0348)
/// RangeModulatorDescription (300A,034A) LO 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_DESCRIPTION: Tag = Tag(0x300A, 0x034A); // (300A,034A)
/// BeamCurrentModulationID (300A,034C) SH 1 DICOM
#[rustfmt::skip]
pub const BEAM_CURRENT_MODULATION_ID: Tag = Tag(0x300A, 0x034C); // (300A,034C)
/// PatientSupportType (300A,0350) CS 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_TYPE: Tag = Tag(0x300A, 0x0350); // (300A,0350)
/// PatientSupportID (300A,0352) SH 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_ID: Tag = Tag(0x300A, 0x0352); // (300A,0352)
/// PatientSupportAccessoryCode (300A,0354) LO 1 DICOM
#[rustfmt::skip]
pub const PATIENT_SUPPORT_ACCESSORY_CODE: Tag = Tag(0x300A, 0x0354); // (300A,0354)
/// TrayAccessoryCode (300A,0355) LO 1 DICOM
#[rustfmt::skip]
pub const TRAY_ACCESSORY_CODE: Tag = Tag(0x300A, 0x0355); // (300A,0355)
/// FixationLightAzimuthalAngle (300A,0356) FL 1 DICOM
#[rustfmt::skip]
pub const FIXATION_LIGHT_AZIMUTHAL_ANGLE: Tag = Tag(0x300A, 0x0356); // (300A,0356)
/// FixationLightPolarAngle (300A,0358) FL 1 DICOM
#[rustfmt::skip]
pub const FIXATION_LIGHT_POLAR_ANGLE: Tag = Tag(0x300A, 0x0358); // (300A,0358)
/// MetersetRate (300A,035A) FL 1 DICOM
#[rustfmt::skip]
pub const METERSET_RATE: Tag = Tag(0x300A, 0x035A); // (300A,035A)
/// RangeShifterSettingsSequence (300A,0360) SQ 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_SETTINGS_SEQUENCE: Tag = Tag(0x300A, 0x0360); // (300A,0360)
/// RangeShifterSetting (300A,0362) LO 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_SETTING: Tag = Tag(0x300A, 0x0362); // (300A,0362)
/// IsocenterToRangeShifterDistance (300A,0364) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_RANGE_SHIFTER_DISTANCE: Tag = Tag(0x300A, 0x0364); // (300A,0364)
/// RangeShifterWaterEquivalentThickness (300A,0366) FL 1 DICOM
#[rustfmt::skip]
pub const RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x0366); // (300A,0366)
/// LateralSpreadingDeviceSettingsSequence (300A,0370) SQ 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE: Tag = Tag(0x300A, 0x0370); // (300A,0370)
/// LateralSpreadingDeviceSetting (300A,0372) LO 1 DICOM
#[rustfmt::skip]
pub const LATERAL_SPREADING_DEVICE_SETTING: Tag = Tag(0x300A, 0x0372); // (300A,0372)
/// IsocenterToLateralSpreadingDeviceDistance (300A,0374) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE: Tag = Tag(0x300A, 0x0374); // (300A,0374)
/// RangeModulatorSettingsSequence (300A,0380) SQ 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_SETTINGS_SEQUENCE: Tag = Tag(0x300A, 0x0380); // (300A,0380)
/// RangeModulatorGatingStartValue (300A,0382) FL 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_GATING_START_VALUE: Tag = Tag(0x300A, 0x0382); // (300A,0382)
/// RangeModulatorGatingStopValue (300A,0384) FL 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_GATING_STOP_VALUE: Tag = Tag(0x300A, 0x0384); // (300A,0384)
/// RangeModulatorGatingStartWaterEquivalentThickness (300A,0386) FL 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x0386); // (300A,0386)
/// RangeModulatorGatingStopWaterEquivalentThickness (300A,0388) FL 1 DICOM
#[rustfmt::skip]
pub const RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS: Tag = Tag(0x300A, 0x0388); // (300A,0388)
/// IsocenterToRangeModulatorDistance (300A,038A) FL 1 DICOM
#[rustfmt::skip]
pub const ISOCENTER_TO_RANGE_MODULATOR_DISTANCE: Tag = Tag(0x300A, 0x038A); // (300A,038A)
/// ScanSpotTimeOffset (300A,038F) FL 1-n DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_TIME_OFFSET: Tag = Tag(0x300A, 0x038F); // (300A,038F)
/// ScanSpotTuneID (300A,0390) SH 1 DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_TUNE_ID: Tag = Tag(0x300A, 0x0390); // (300A,0390)
/// ScanSpotPrescribedIndices (300A,0391) IS 1-n DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_PRESCRIBED_INDICES: Tag = Tag(0x300A, 0x0391); // (300A,0391)
/// NumberOfScanSpotPositions (300A,0392) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_SCAN_SPOT_POSITIONS: Tag = Tag(0x300A, 0x0392); // (300A,0392)
/// ScanSpotReordered (300A,0393) CS 1 DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_REORDERED: Tag = Tag(0x300A, 0x0393); // (300A,0393)
/// ScanSpotPositionMap (300A,0394) FL 1-n DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_POSITION_MAP: Tag = Tag(0x300A, 0x0394); // (300A,0394)
/// ScanSpotReorderingAllowed (300A,0395) CS 1 DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_REORDERING_ALLOWED: Tag = Tag(0x300A, 0x0395); // (300A,0395)
/// ScanSpotMetersetWeights (300A,0396) FL 1-n DICOM
#[rustfmt::skip]
pub const SCAN_SPOT_METERSET_WEIGHTS: Tag = Tag(0x300A, 0x0396); // (300A,0396)
/// ScanningSpotSize (300A,0398) FL 2 DICOM
#[rustfmt::skip]
pub const SCANNING_SPOT_SIZE: Tag = Tag(0x300A, 0x0398); // (300A,0398)
/// NumberOfPaintings (300A,039A) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_PAINTINGS: Tag = Tag(0x300A, 0x039A); // (300A,039A)
/// IonToleranceTableSequence (300A,03A0) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_TOLERANCE_TABLE_SEQUENCE: Tag = Tag(0x300A, 0x03A0); // (300A,03A0)
/// IonBeamSequence (300A,03A2) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_BEAM_SEQUENCE: Tag = Tag(0x300A, 0x03A2); // (300A,03A2)
/// IonBeamLimitingDeviceSequence (300A,03A4) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_BEAM_LIMITING_DEVICE_SEQUENCE: Tag = Tag(0x300A, 0x03A4); // (300A,03A4)
/// IonBlockSequence (300A,03A6) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_BLOCK_SEQUENCE: Tag = Tag(0x300A, 0x03A6); // (300A,03A6)
/// IonControlPointSequence (300A,03A8) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_CONTROL_POINT_SEQUENCE: Tag = Tag(0x300A, 0x03A8); // (300A,03A8)
/// IonWedgeSequence (300A,03AA) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_WEDGE_SEQUENCE: Tag = Tag(0x300A, 0x03AA); // (300A,03AA)
/// IonWedgePositionSequence (300A,03AC) SQ 1 DICOM
#[rustfmt::skip]
pub const ION_WEDGE_POSITION_SEQUENCE: Tag = Tag(0x300A, 0x03AC); // (300A,03AC)
/// ReferencedSetupImageSequence (300A,0401) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SETUP_IMAGE_SEQUENCE: Tag = Tag(0x300A, 0x0401); // (300A,0401)
/// SetupImageComment (300A,0402) ST 1 DICOM
#[rustfmt::skip]
pub const SETUP_IMAGE_COMMENT: Tag = Tag(0x300A, 0x0402); // (300A,0402)
/// MotionSynchronizationSequence (300A,0410) SQ 1 DICOM
#[rustfmt::skip]
pub const MOTION_SYNCHRONIZATION_SEQUENCE: Tag = Tag(0x300A, 0x0410); // (300A,0410)
/// ControlPointOrientation (300A,0412) FL 3 DICOM
#[rustfmt::skip]
pub const CONTROL_POINT_ORIENTATION: Tag = Tag(0x300A, 0x0412); // (300A,0412)
/// GeneralAccessorySequence (300A,0420) SQ 1 DICOM
#[rustfmt::skip]
pub const GENERAL_ACCESSORY_SEQUENCE: Tag = Tag(0x300A, 0x0420); // (300A,0420)
/// GeneralAccessoryID (300A,0421) SH 1 DICOM
#[rustfmt::skip]
pub const GENERAL_ACCESSORY_ID: Tag = Tag(0x300A, 0x0421); // (300A,0421)
/// GeneralAccessoryDescription (300A,0422) ST 1 DICOM
#[rustfmt::skip]
pub const GENERAL_ACCESSORY_DESCRIPTION: Tag = Tag(0x300A, 0x0422); // (300A,0422)
/// GeneralAccessoryType (300A,0423) CS 1 DICOM
#[rustfmt::skip]
pub const GENERAL_ACCESSORY_TYPE: Tag = Tag(0x300A, 0x0423); // (300A,0423)
/// GeneralAccessoryNumber (300A,0424) IS 1 DICOM
#[rustfmt::skip]
pub const GENERAL_ACCESSORY_NUMBER: Tag = Tag(0x300A, 0x0424); // (300A,0424)
/// SourceToGeneralAccessoryDistance (300A,0425) FL 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_GENERAL_ACCESSORY_DISTANCE: Tag = Tag(0x300A, 0x0425); // (300A,0425)
/// ApplicatorGeometrySequence (300A,0431) SQ 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_GEOMETRY_SEQUENCE: Tag = Tag(0x300A, 0x0431); // (300A,0431)
/// ApplicatorApertureShape (300A,0432) CS 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_APERTURE_SHAPE: Tag = Tag(0x300A, 0x0432); // (300A,0432)
/// ApplicatorOpening (300A,0433) FL 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_OPENING: Tag = Tag(0x300A, 0x0433); // (300A,0433)
/// ApplicatorOpeningX (300A,0434) FL 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_OPENING_X: Tag = Tag(0x300A, 0x0434); // (300A,0434)
/// ApplicatorOpeningY (300A,0435) FL 1 DICOM
#[rustfmt::skip]
pub const APPLICATOR_OPENING_Y: Tag = Tag(0x300A, 0x0435); // (300A,0435)
/// SourceToApplicatorMountingPositionDistance (300A,0436) FL 1 DICOM
#[rustfmt::skip]
pub const SOURCE_TO_APPLICATOR_MOUNTING_POSITION_DISTANCE: Tag = Tag(0x300A, 0x0436); // (300A,0436)
/// NumberOfBlockSlabItems (300A,0440) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_BLOCK_SLAB_ITEMS: Tag = Tag(0x300A, 0x0440); // (300A,0440)
/// BlockSlabSequence (300A,0441) SQ 1 DICOM
#[rustfmt::skip]
pub const BLOCK_SLAB_SEQUENCE: Tag = Tag(0x300A, 0x0441); // (300A,0441)
/// BlockSlabThickness (300A,0442) DS 1 DICOM
#[rustfmt::skip]
pub const BLOCK_SLAB_THICKNESS: Tag = Tag(0x300A, 0x0442); // (300A,0442)
/// BlockSlabNumber (300A,0443) US 1 DICOM
#[rustfmt::skip]
pub const BLOCK_SLAB_NUMBER: Tag = Tag(0x300A, 0x0443); // (300A,0443)
/// DeviceMotionControlSequence (300A,0450) SQ 1 DICOM
#[rustfmt::skip]
pub const DEVICE_MOTION_CONTROL_SEQUENCE: Tag = Tag(0x300A, 0x0450); // (300A,0450)
/// DeviceMotionExecutionMode (300A,0451) CS 1 DICOM
#[rustfmt::skip]
pub const DEVICE_MOTION_EXECUTION_MODE: Tag = Tag(0x300A, 0x0451); // (300A,0451)
/// DeviceMotionObservationMode (300A,0452) CS 1 DICOM
#[rustfmt::skip]
pub const DEVICE_MOTION_OBSERVATION_MODE: Tag = Tag(0x300A, 0x0452); // (300A,0452)
/// DeviceMotionParameterCodeSequence (300A,0453) SQ 1 DICOM
#[rustfmt::skip]
pub const DEVICE_MOTION_PARAMETER_CODE_SEQUENCE: Tag = Tag(0x300A, 0x0453); // (300A,0453)
/// DistalDepthFraction (300A,0501) FL 1 DICOM
#[rustfmt::skip]
pub const DISTAL_DEPTH_FRACTION: Tag = Tag(0x300A, 0x0501); // (300A,0501)
/// DistalDepth (300A,0502) FL 1 DICOM
#[rustfmt::skip]
pub const DISTAL_DEPTH: Tag = Tag(0x300A, 0x0502); // (300A,0502)
/// NominalRangeModulationFractions (300A,0503) FL 2 DICOM
#[rustfmt::skip]
pub const NOMINAL_RANGE_MODULATION_FRACTIONS: Tag = Tag(0x300A, 0x0503); // (300A,0503)
/// NominalRangeModulatedRegionDepths (300A,0504) FL 2 DICOM
#[rustfmt::skip]
pub const NOMINAL_RANGE_MODULATED_REGION_DEPTHS: Tag = Tag(0x300A, 0x0504); // (300A,0504)
/// DepthDoseParametersSequence (300A,0505) SQ 1 DICOM
#[rustfmt::skip]
pub const DEPTH_DOSE_PARAMETERS_SEQUENCE: Tag = Tag(0x300A, 0x0505); // (300A,0505)
/// DeliveredDepthDoseParametersSequence (300A,0506) SQ 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_DEPTH_DOSE_PARAMETERS_SEQUENCE: Tag = Tag(0x300A, 0x0506); // (300A,0506)
/// DeliveredDistalDepthFraction (300A,0507) FL 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_DISTAL_DEPTH_FRACTION: Tag = Tag(0x300A, 0x0507); // (300A,0507)
/// DeliveredDistalDepth (300A,0508) FL 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_DISTAL_DEPTH: Tag = Tag(0x300A, 0x0508); // (300A,0508)
/// DeliveredNominalRangeModulationFractions (300A,0509) FL 2 DICOM
#[rustfmt::skip]
pub const DELIVERED_NOMINAL_RANGE_MODULATION_FRACTIONS: Tag = Tag(0x300A, 0x0509); // (300A,0509)
/// DeliveredNominalRangeModulatedRegionDepths (300A,0510) FL 2 DICOM
#[rustfmt::skip]
pub const DELIVERED_NOMINAL_RANGE_MODULATED_REGION_DEPTHS: Tag = Tag(0x300A, 0x0510); // (300A,0510)
/// DeliveredReferenceDoseDefinition (300A,0511) CS 1 DICOM
#[rustfmt::skip]
pub const DELIVERED_REFERENCE_DOSE_DEFINITION: Tag = Tag(0x300A, 0x0511); // (300A,0511)
/// ReferenceDoseDefinition (300A,0512) CS 1 DICOM
#[rustfmt::skip]
pub const REFERENCE_DOSE_DEFINITION: Tag = Tag(0x300A, 0x0512); // (300A,0512)
/// ReferencedRTPlanSequence (300C,0002) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_RT_PLAN_SEQUENCE: Tag = Tag(0x300C, 0x0002); // (300C,0002)
/// ReferencedBeamSequence (300C,0004) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BEAM_SEQUENCE: Tag = Tag(0x300C, 0x0004); // (300C,0004)
/// ReferencedBeamNumber (300C,0006) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BEAM_NUMBER: Tag = Tag(0x300C, 0x0006); // (300C,0006)
/// ReferencedReferenceImageNumber (300C,0007) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_REFERENCE_IMAGE_NUMBER: Tag = Tag(0x300C, 0x0007); // (300C,0007)
/// StartCumulativeMetersetWeight (300C,0008) DS 1 DICOM
#[rustfmt::skip]
pub const START_CUMULATIVE_METERSET_WEIGHT: Tag = Tag(0x300C, 0x0008); // (300C,0008)
/// EndCumulativeMetersetWeight (300C,0009) DS 1 DICOM
#[rustfmt::skip]
pub const END_CUMULATIVE_METERSET_WEIGHT: Tag = Tag(0x300C, 0x0009); // (300C,0009)
/// ReferencedBrachyApplicationSetupSequence (300C,000A) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE: Tag = Tag(0x300C, 0x000A); // (300C,000A)
/// ReferencedBrachyApplicationSetupNumber (300C,000C) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER: Tag = Tag(0x300C, 0x000C); // (300C,000C)
/// ReferencedSourceNumber (300C,000E) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_SOURCE_NUMBER: Tag = Tag(0x300C, 0x000E); // (300C,000E)
/// ReferencedFractionGroupSequence (300C,0020) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FRACTION_GROUP_SEQUENCE: Tag = Tag(0x300C, 0x0020); // (300C,0020)
/// ReferencedFractionGroupNumber (300C,0022) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_FRACTION_GROUP_NUMBER: Tag = Tag(0x300C, 0x0022); // (300C,0022)
/// ReferencedVerificationImageSequence (300C,0040) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_VERIFICATION_IMAGE_SEQUENCE: Tag = Tag(0x300C, 0x0040); // (300C,0040)
/// ReferencedReferenceImageSequence (300C,0042) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_REFERENCE_IMAGE_SEQUENCE: Tag = Tag(0x300C, 0x0042); // (300C,0042)
/// ReferencedDoseReferenceSequence (300C,0050) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x300C, 0x0050); // (300C,0050)
/// ReferencedDoseReferenceNumber (300C,0051) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_DOSE_REFERENCE_NUMBER: Tag = Tag(0x300C, 0x0051); // (300C,0051)
/// BrachyReferencedDoseReferenceSequence (300C,0055) SQ 1 DICOM
#[rustfmt::skip]
pub const BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE: Tag = Tag(0x300C, 0x0055); // (300C,0055)
/// ReferencedStructureSetSequence (300C,0060) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_STRUCTURE_SET_SEQUENCE: Tag = Tag(0x300C, 0x0060); // (300C,0060)
/// ReferencedPatientSetupNumber (300C,006A) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_PATIENT_SETUP_NUMBER: Tag = Tag(0x300C, 0x006A); // (300C,006A)
/// ReferencedDoseSequence (300C,0080) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_DOSE_SEQUENCE: Tag = Tag(0x300C, 0x0080); // (300C,0080)
/// ReferencedToleranceTableNumber (300C,00A0) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_TOLERANCE_TABLE_NUMBER: Tag = Tag(0x300C, 0x00A0); // (300C,00A0)
/// ReferencedBolusSequence (300C,00B0) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BOLUS_SEQUENCE: Tag = Tag(0x300C, 0x00B0); // (300C,00B0)
/// ReferencedWedgeNumber (300C,00C0) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_WEDGE_NUMBER: Tag = Tag(0x300C, 0x00C0); // (300C,00C0)
/// ReferencedCompensatorNumber (300C,00D0) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_COMPENSATOR_NUMBER: Tag = Tag(0x300C, 0x00D0); // (300C,00D0)
/// ReferencedBlockNumber (300C,00E0) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_BLOCK_NUMBER: Tag = Tag(0x300C, 0x00E0); // (300C,00E0)
/// ReferencedControlPointIndex (300C,00F0) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CONTROL_POINT_INDEX: Tag = Tag(0x300C, 0x00F0); // (300C,00F0)
/// ReferencedControlPointSequence (300C,00F2) SQ 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_CONTROL_POINT_SEQUENCE: Tag = Tag(0x300C, 0x00F2); // (300C,00F2)
/// ReferencedStartControlPointIndex (300C,00F4) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_START_CONTROL_POINT_INDEX: Tag = Tag(0x300C, 0x00F4); // (300C,00F4)
/// ReferencedStopControlPointIndex (300C,00F6) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_STOP_CONTROL_POINT_INDEX: Tag = Tag(0x300C, 0x00F6); // (300C,00F6)
/// ReferencedRangeShifterNumber (300C,0100) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_RANGE_SHIFTER_NUMBER: Tag = Tag(0x300C, 0x0100); // (300C,0100)
/// ReferencedLateralSpreadingDeviceNumber (300C,0102) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER: Tag = Tag(0x300C, 0x0102); // (300C,0102)
/// ReferencedRangeModulatorNumber (300C,0104) IS 1 DICOM
#[rustfmt::skip]
pub const REFERENCED_RANGE_MODULATOR_NUMBER: Tag = Tag(0x300C, 0x0104); // (300C,0104)
/// OmittedBeamTaskSequence (300C,0111) SQ 1 DICOM
#[rustfmt::skip]
pub const OMITTED_BEAM_TASK_SEQUENCE: Tag = Tag(0x300C, 0x0111); // (300C,0111)
/// ReasonForOmission (300C,0112) CS 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_OMISSION: Tag = Tag(0x300C, 0x0112); // (300C,0112)
/// ReasonForOmissionDescription (300C,0113) LO 1 DICOM
#[rustfmt::skip]
pub const REASON_FOR_OMISSION_DESCRIPTION: Tag = Tag(0x300C, 0x0113); // (300C,0113)
/// ApprovalStatus (300E,0002) CS 1 DICOM
#[rustfmt::skip]
pub const APPROVAL_STATUS: Tag = Tag(0x300E, 0x0002); // (300E,0002)
/// ReviewDate (300E,0004) DA 1 DICOM
#[rustfmt::skip]
pub const REVIEW_DATE: Tag = Tag(0x300E, 0x0004); // (300E,0004)
/// ReviewTime (300E,0005) TM 1 DICOM
#[rustfmt::skip]
pub const REVIEW_TIME: Tag = Tag(0x300E, 0x0005); // (300E,0005)
/// ReviewerName (300E,0008) PN 1 DICOM
#[rustfmt::skip]
pub const REVIEWER_NAME: Tag = Tag(0x300E, 0x0008); // (300E,0008)
/// LowEnergyDetectors (4010,0001) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const LOW_ENERGY_DETECTORS: Tag = Tag(0x4010, 0x0001); // (4010,0001)
/// HighEnergyDetectors (4010,0002) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const HIGH_ENERGY_DETECTORS: Tag = Tag(0x4010, 0x0002); // (4010,0002)
/// DetectorGeometrySequence (4010,0004) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const DETECTOR_GEOMETRY_SEQUENCE: Tag = Tag(0x4010, 0x0004); // (4010,0004)
/// ThreatROIVoxelSequence (4010,1001) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_ROI_VOXEL_SEQUENCE: Tag = Tag(0x4010, 0x1001); // (4010,1001)
/// ThreatROIBase (4010,1004) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_ROI_BASE: Tag = Tag(0x4010, 0x1004); // (4010,1004)
/// ThreatROIExtents (4010,1005) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_ROI_EXTENTS: Tag = Tag(0x4010, 0x1005); // (4010,1005)
/// ThreatROIBitmap (4010,1006) OB 1 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_ROI_BITMAP: Tag = Tag(0x4010, 0x1006); // (4010,1006)
/// RouteSegmentID (4010,1007) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_ID: Tag = Tag(0x4010, 0x1007); // (4010,1007)
/// GantryType (4010,1008) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const GANTRY_TYPE: Tag = Tag(0x4010, 0x1008); // (4010,1008)
/// OOIOwnerType (4010,1009) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const OOI_OWNER_TYPE: Tag = Tag(0x4010, 0x1009); // (4010,1009)
/// RouteSegmentSequence (4010,100A) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_SEQUENCE: Tag = Tag(0x4010, 0x100A); // (4010,100A)
/// PotentialThreatObjectID (4010,1010) US 1 DICOM/DICOS
#[rustfmt::skip]
pub const POTENTIAL_THREAT_OBJECT_ID: Tag = Tag(0x4010, 0x1010); // (4010,1010)
/// ThreatSequence (4010,1011) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_SEQUENCE: Tag = Tag(0x4010, 0x1011); // (4010,1011)
/// ThreatCategory (4010,1012) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_CATEGORY: Tag = Tag(0x4010, 0x1012); // (4010,1012)
/// ThreatCategoryDescription (4010,1013) LT 1 DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_CATEGORY_DESCRIPTION: Tag = Tag(0x4010, 0x1013); // (4010,1013)
/// ATDAbilityAssessment (4010,1014) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ATD_ABILITY_ASSESSMENT: Tag = Tag(0x4010, 0x1014); // (4010,1014)
/// ATDAssessmentFlag (4010,1015) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ATD_ASSESSMENT_FLAG: Tag = Tag(0x4010, 0x1015); // (4010,1015)
/// ATDAssessmentProbability (4010,1016) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const ATD_ASSESSMENT_PROBABILITY: Tag = Tag(0x4010, 0x1016); // (4010,1016)
/// Mass (4010,1017) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const MASS: Tag = Tag(0x4010, 0x1017); // (4010,1017)
/// Density (4010,1018) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const DENSITY: Tag = Tag(0x4010, 0x1018); // (4010,1018)
/// ZEffective (4010,1019) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const Z_EFFECTIVE: Tag = Tag(0x4010, 0x1019); // (4010,1019)
/// BoardingPassID (4010,101A) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const BOARDING_PASS_ID: Tag = Tag(0x4010, 0x101A); // (4010,101A)
/// CenterOfMass (4010,101B) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const CENTER_OF_MASS: Tag = Tag(0x4010, 0x101B); // (4010,101B)
/// CenterOfPTO (4010,101C) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const CENTER_OF_PTO: Tag = Tag(0x4010, 0x101C); // (4010,101C)
/// BoundingPolygon (4010,101D) FL 6-n DICOM/DICOS
#[rustfmt::skip]
pub const BOUNDING_POLYGON: Tag = Tag(0x4010, 0x101D); // (4010,101D)
/// RouteSegmentStartLocationID (4010,101E) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_START_LOCATION_ID: Tag = Tag(0x4010, 0x101E); // (4010,101E)
/// RouteSegmentEndLocationID (4010,101F) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_END_LOCATION_ID: Tag = Tag(0x4010, 0x101F); // (4010,101F)
/// RouteSegmentLocationIDType (4010,1020) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_LOCATION_ID_TYPE: Tag = Tag(0x4010, 0x1020); // (4010,1020)
/// AbortReason (4010,1021) CS 1-n DICOM/DICOS
#[rustfmt::skip]
pub const ABORT_REASON: Tag = Tag(0x4010, 0x1021); // (4010,1021)
/// VolumeOfPTO (4010,1023) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const VOLUME_OF_PTO: Tag = Tag(0x4010, 0x1023); // (4010,1023)
/// AbortFlag (4010,1024) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ABORT_FLAG: Tag = Tag(0x4010, 0x1024); // (4010,1024)
/// RouteSegmentStartTime (4010,1025) DT 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_START_TIME: Tag = Tag(0x4010, 0x1025); // (4010,1025)
/// RouteSegmentEndTime (4010,1026) DT 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_SEGMENT_END_TIME: Tag = Tag(0x4010, 0x1026); // (4010,1026)
/// TDRType (4010,1027) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const TDR_TYPE: Tag = Tag(0x4010, 0x1027); // (4010,1027)
/// InternationalRouteSegment (4010,1028) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const INTERNATIONAL_ROUTE_SEGMENT: Tag = Tag(0x4010, 0x1028); // (4010,1028)
/// ThreatDetectionAlgorithmandVersion (4010,1029) LO 1-n DICOM/DICOS
#[rustfmt::skip]
pub const THREAT_DETECTION_ALGORITHMAND_VERSION: Tag = Tag(0x4010, 0x1029); // (4010,1029)
/// AssignedLocation (4010,102A) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ASSIGNED_LOCATION: Tag = Tag(0x4010, 0x102A); // (4010,102A)
/// AlarmDecisionTime (4010,102B) DT 1 DICOM/DICOS
#[rustfmt::skip]
pub const ALARM_DECISION_TIME: Tag = Tag(0x4010, 0x102B); // (4010,102B)
/// AlarmDecision (4010,1031) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ALARM_DECISION: Tag = Tag(0x4010, 0x1031); // (4010,1031)
/// NumberOfTotalObjects (4010,1033) US 1 DICOM/DICOS
#[rustfmt::skip]
pub const NUMBER_OF_TOTAL_OBJECTS: Tag = Tag(0x4010, 0x1033); // (4010,1033)
/// NumberOfAlarmObjects (4010,1034) US 1 DICOM/DICOS
#[rustfmt::skip]
pub const NUMBER_OF_ALARM_OBJECTS: Tag = Tag(0x4010, 0x1034); // (4010,1034)
/// PTORepresentationSequence (4010,1037) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const PTO_REPRESENTATION_SEQUENCE: Tag = Tag(0x4010, 0x1037); // (4010,1037)
/// ATDAssessmentSequence (4010,1038) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const ATD_ASSESSMENT_SEQUENCE: Tag = Tag(0x4010, 0x1038); // (4010,1038)
/// TIPType (4010,1039) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const TIP_TYPE: Tag = Tag(0x4010, 0x1039); // (4010,1039)
/// DICOSVersion (4010,103A) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const DICOS_VERSION: Tag = Tag(0x4010, 0x103A); // (4010,103A)
/// OOIOwnerCreationTime (4010,1041) DT 1 DICOM/DICOS
#[rustfmt::skip]
pub const OOI_OWNER_CREATION_TIME: Tag = Tag(0x4010, 0x1041); // (4010,1041)
/// OOIType (4010,1042) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const OOI_TYPE: Tag = Tag(0x4010, 0x1042); // (4010,1042)
/// OOISize (4010,1043) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const OOI_SIZE: Tag = Tag(0x4010, 0x1043); // (4010,1043)
/// AcquisitionStatus (4010,1044) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ACQUISITION_STATUS: Tag = Tag(0x4010, 0x1044); // (4010,1044)
/// BasisMaterialsCodeSequence (4010,1045) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const BASIS_MATERIALS_CODE_SEQUENCE: Tag = Tag(0x4010, 0x1045); // (4010,1045)
/// PhantomType (4010,1046) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const PHANTOM_TYPE: Tag = Tag(0x4010, 0x1046); // (4010,1046)
/// OOIOwnerSequence (4010,1047) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const OOI_OWNER_SEQUENCE: Tag = Tag(0x4010, 0x1047); // (4010,1047)
/// ScanType (4010,1048) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const SCAN_TYPE: Tag = Tag(0x4010, 0x1048); // (4010,1048)
/// ItineraryID (4010,1051) LO 1 DICOM/DICOS
#[rustfmt::skip]
pub const ITINERARY_ID: Tag = Tag(0x4010, 0x1051); // (4010,1051)
/// ItineraryIDType (4010,1052) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ITINERARY_ID_TYPE: Tag = Tag(0x4010, 0x1052); // (4010,1052)
/// ItineraryIDAssigningAuthority (4010,1053) LO 1 DICOM/DICOS
#[rustfmt::skip]
pub const ITINERARY_ID_ASSIGNING_AUTHORITY: Tag = Tag(0x4010, 0x1053); // (4010,1053)
/// RouteID (4010,1054) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_ID: Tag = Tag(0x4010, 0x1054); // (4010,1054)
/// RouteIDAssigningAuthority (4010,1055) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const ROUTE_ID_ASSIGNING_AUTHORITY: Tag = Tag(0x4010, 0x1055); // (4010,1055)
/// InboundArrivalType (4010,1056) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const INBOUND_ARRIVAL_TYPE: Tag = Tag(0x4010, 0x1056); // (4010,1056)
/// CarrierID (4010,1058) SH 1 DICOM/DICOS
#[rustfmt::skip]
pub const CARRIER_ID: Tag = Tag(0x4010, 0x1058); // (4010,1058)
/// CarrierIDAssigningAuthority (4010,1059) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const CARRIER_ID_ASSIGNING_AUTHORITY: Tag = Tag(0x4010, 0x1059); // (4010,1059)
/// SourceOrientation (4010,1060) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const SOURCE_ORIENTATION: Tag = Tag(0x4010, 0x1060); // (4010,1060)
/// SourcePosition (4010,1061) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const SOURCE_POSITION: Tag = Tag(0x4010, 0x1061); // (4010,1061)
/// BeltHeight (4010,1062) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const BELT_HEIGHT: Tag = Tag(0x4010, 0x1062); // (4010,1062)
/// AlgorithmRoutingCodeSequence (4010,1064) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const ALGORITHM_ROUTING_CODE_SEQUENCE: Tag = Tag(0x4010, 0x1064); // (4010,1064)
/// TransportClassification (4010,1067) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const TRANSPORT_CLASSIFICATION: Tag = Tag(0x4010, 0x1067); // (4010,1067)
/// OOITypeDescriptor (4010,1068) LT 1 DICOM/DICOS
#[rustfmt::skip]
pub const OOI_TYPE_DESCRIPTOR: Tag = Tag(0x4010, 0x1068); // (4010,1068)
/// TotalProcessingTime (4010,1069) FL 1 DICOM/DICOS
#[rustfmt::skip]
pub const TOTAL_PROCESSING_TIME: Tag = Tag(0x4010, 0x1069); // (4010,1069)
/// DetectorCalibrationData (4010,106C) OB 1 DICOM/DICOS
#[rustfmt::skip]
pub const DETECTOR_CALIBRATION_DATA: Tag = Tag(0x4010, 0x106C); // (4010,106C)
/// AdditionalScreeningPerformed (4010,106D) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ADDITIONAL_SCREENING_PERFORMED: Tag = Tag(0x4010, 0x106D); // (4010,106D)
/// AdditionalInspectionSelectionCriteria (4010,106E) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const ADDITIONAL_INSPECTION_SELECTION_CRITERIA: Tag = Tag(0x4010, 0x106E); // (4010,106E)
/// AdditionalInspectionMethodSequence (4010,106F) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const ADDITIONAL_INSPECTION_METHOD_SEQUENCE: Tag = Tag(0x4010, 0x106F); // (4010,106F)
/// AITDeviceType (4010,1070) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const AIT_DEVICE_TYPE: Tag = Tag(0x4010, 0x1070); // (4010,1070)
/// QRMeasurementsSequence (4010,1071) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const QR_MEASUREMENTS_SEQUENCE: Tag = Tag(0x4010, 0x1071); // (4010,1071)
/// TargetMaterialSequence (4010,1072) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const TARGET_MATERIAL_SEQUENCE: Tag = Tag(0x4010, 0x1072); // (4010,1072)
/// SNRThreshold (4010,1073) FD 1 DICOM/DICOS
#[rustfmt::skip]
pub const SNR_THRESHOLD: Tag = Tag(0x4010, 0x1073); // (4010,1073)
/// ImageScaleRepresentation (4010,1075) DS 1 DICOM/DICOS
#[rustfmt::skip]
pub const IMAGE_SCALE_REPRESENTATION: Tag = Tag(0x4010, 0x1075); // (4010,1075)
/// ReferencedPTOSequence (4010,1076) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const REFERENCED_PTO_SEQUENCE: Tag = Tag(0x4010, 0x1076); // (4010,1076)
/// ReferencedTDRInstanceSequence (4010,1077) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const REFERENCED_TDR_INSTANCE_SEQUENCE: Tag = Tag(0x4010, 0x1077); // (4010,1077)
/// PTOLocationDescription (4010,1078) ST 1 DICOM/DICOS
#[rustfmt::skip]
pub const PTO_LOCATION_DESCRIPTION: Tag = Tag(0x4010, 0x1078); // (4010,1078)
/// AnomalyLocatorIndicatorSequence (4010,1079) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const ANOMALY_LOCATOR_INDICATOR_SEQUENCE: Tag = Tag(0x4010, 0x1079); // (4010,1079)
/// AnomalyLocatorIndicator (4010,107A) FL 3 DICOM/DICOS
#[rustfmt::skip]
pub const ANOMALY_LOCATOR_INDICATOR: Tag = Tag(0x4010, 0x107A); // (4010,107A)
/// PTORegionSequence (4010,107B) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const PTO_REGION_SEQUENCE: Tag = Tag(0x4010, 0x107B); // (4010,107B)
/// InspectionSelectionCriteria (4010,107C) CS 1 DICOM/DICOS
#[rustfmt::skip]
pub const INSPECTION_SELECTION_CRITERIA: Tag = Tag(0x4010, 0x107C); // (4010,107C)
/// SecondaryInspectionMethodSequence (4010,107D) SQ 1 DICOM/DICOS
#[rustfmt::skip]
pub const SECONDARY_INSPECTION_METHOD_SEQUENCE: Tag = Tag(0x4010, 0x107D); // (4010,107D)
/// PRCSToRCSOrientation (4010,107E) DS 6 DICOM/DICOS
#[rustfmt::skip]
pub const PRCS_TO_RCS_ORIENTATION: Tag = Tag(0x4010, 0x107E); // (4010,107E)
/// MACParametersSequence (4FFE,0001) SQ 1 DICOM
#[rustfmt::skip]
pub const MAC_PARAMETERS_SEQUENCE: Tag = Tag(0x4FFE, 0x0001); // (4FFE,0001)
/// SharedFunctionalGroupsSequence (5200,9229) SQ 1 DICOM
#[rustfmt::skip]
pub const SHARED_FUNCTIONAL_GROUPS_SEQUENCE: Tag = Tag(0x5200, 0x9229); // (5200,9229)
/// PerFrameFunctionalGroupsSequence (5200,9230) SQ 1 DICOM
#[rustfmt::skip]
pub const PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE: Tag = Tag(0x5200, 0x9230); // (5200,9230)
/// WaveformSequence (5400,0100) SQ 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_SEQUENCE: Tag = Tag(0x5400, 0x0100); // (5400,0100)
/// ChannelMinimumValue (5400,0110) OB 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_MINIMUM_VALUE: Tag = Tag(0x5400, 0x0110); // (5400,0110)
/// ChannelMaximumValue (5400,0112) OB 1 DICOM
#[rustfmt::skip]
pub const CHANNEL_MAXIMUM_VALUE: Tag = Tag(0x5400, 0x0112); // (5400,0112)
/// WaveformBitsAllocated (5400,1004) US 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_BITS_ALLOCATED: Tag = Tag(0x5400, 0x1004); // (5400,1004)
/// WaveformSampleInterpretation (5400,1006) CS 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_SAMPLE_INTERPRETATION: Tag = Tag(0x5400, 0x1006); // (5400,1006)
/// WaveformPaddingValue (5400,100A) OB 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_PADDING_VALUE: Tag = Tag(0x5400, 0x100A); // (5400,100A)
/// WaveformData (5400,1010) OB 1 DICOM
#[rustfmt::skip]
pub const WAVEFORM_DATA: Tag = Tag(0x5400, 0x1010); // (5400,1010)
/// FirstOrderPhaseCorrectionAngle (5600,0010) OF 1 DICOM
#[rustfmt::skip]
pub const FIRST_ORDER_PHASE_CORRECTION_ANGLE: Tag = Tag(0x5600, 0x0010); // (5600,0010)
/// SpectroscopyData (5600,0020) OF 1 DICOM
#[rustfmt::skip]
pub const SPECTROSCOPY_DATA: Tag = Tag(0x5600, 0x0020); // (5600,0020)
/// OverlayRows (6000-60FF,0010) US 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_ROWS: TagRange = Group100(Tag(0x6000, 0x0010)); // (6000-60FF,0010)
/// OverlayColumns (6000-60FF,0011) US 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_COLUMNS: TagRange = Group100(Tag(0x6000, 0x0011)); // (6000-60FF,0011)
/// NumberOfFramesInOverlay (6000-60FF,0015) IS 1 DICOM
#[rustfmt::skip]
pub const NUMBER_OF_FRAMES_IN_OVERLAY: TagRange = Group100(Tag(0x6000, 0x0015)); // (6000-60FF,0015)
/// OverlayDescription (6000-60FF,0022) LO 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_DESCRIPTION: TagRange = Group100(Tag(0x6000, 0x0022)); // (6000-60FF,0022)
/// OverlayType (6000-60FF,0040) CS 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_TYPE: TagRange = Group100(Tag(0x6000, 0x0040)); // (6000-60FF,0040)
/// OverlaySubtype (6000-60FF,0045) LO 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_SUBTYPE: TagRange = Group100(Tag(0x6000, 0x0045)); // (6000-60FF,0045)
/// OverlayOrigin (6000-60FF,0050) SS 2 DICOM
#[rustfmt::skip]
pub const OVERLAY_ORIGIN: TagRange = Group100(Tag(0x6000, 0x0050)); // (6000-60FF,0050)
/// ImageFrameOrigin (6000-60FF,0051) US 1 DICOM
#[rustfmt::skip]
pub const IMAGE_FRAME_ORIGIN: TagRange = Group100(Tag(0x6000, 0x0051)); // (6000-60FF,0051)
/// OverlayBitsAllocated (6000-60FF,0100) US 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_BITS_ALLOCATED: TagRange = Group100(Tag(0x6000, 0x0100)); // (6000-60FF,0100)
/// OverlayBitPosition (6000-60FF,0102) US 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_BIT_POSITION: TagRange = Group100(Tag(0x6000, 0x0102)); // (6000-60FF,0102)
/// OverlayActivationLayer (6000-60FF,1001) CS 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_ACTIVATION_LAYER: TagRange = Group100(Tag(0x6000, 0x1001)); // (6000-60FF,1001)
/// ROIArea (6000-60FF,1301) IS 1 DICOM
#[rustfmt::skip]
pub const ROI_AREA: TagRange = Group100(Tag(0x6000, 0x1301)); // (6000-60FF,1301)
/// ROIMean (6000-60FF,1302) DS 1 DICOM
#[rustfmt::skip]
pub const ROI_MEAN: TagRange = Group100(Tag(0x6000, 0x1302)); // (6000-60FF,1302)
/// ROIStandardDeviation (6000-60FF,1303) DS 1 DICOM
#[rustfmt::skip]
pub const ROI_STANDARD_DEVIATION: TagRange = Group100(Tag(0x6000, 0x1303)); // (6000-60FF,1303)
/// OverlayLabel (6000-60FF,1500) LO 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_LABEL: TagRange = Group100(Tag(0x6000, 0x1500)); // (6000-60FF,1500)
/// OverlayData (6000-60FF,3000) OB 1 DICOM
#[rustfmt::skip]
pub const OVERLAY_DATA: TagRange = Group100(Tag(0x6000, 0x3000)); // (6000-60FF,3000)
/// FloatPixelData (7FE0,0008) OF 1 DICOM
#[rustfmt::skip]
pub const FLOAT_PIXEL_DATA: Tag = Tag(0x7FE0, 0x0008); // (7FE0,0008)
/// DoubleFloatPixelData (7FE0,0009) OD 1 DICOM
#[rustfmt::skip]
pub const DOUBLE_FLOAT_PIXEL_DATA: Tag = Tag(0x7FE0, 0x0009); // (7FE0,0009)
/// PixelData (7FE0,0010) OB 1 DICOM
#[rustfmt::skip]
pub const PIXEL_DATA: Tag = Tag(0x7FE0, 0x0010); // (7FE0,0010)
/// DigitalSignaturesSequence (FFFA,FFFA) SQ 1 DICOM
#[rustfmt::skip]
pub const DIGITAL_SIGNATURES_SEQUENCE: Tag = Tag(0xFFFA, 0xFFFA); // (FFFA,FFFA)
/// DataSetTrailingPadding (FFFC,FFFC) OB 1 DICOM
#[rustfmt::skip]
pub const DATA_SET_TRAILING_PADDING: Tag = Tag(0xFFFC, 0xFFFC); // (FFFC,FFFC)
/// CommandLengthToEnd (0000,0001) UL 1 DICOM/retired
#[rustfmt::skip]
pub const COMMAND_LENGTH_TO_END: Tag = Tag(0x0000, 0x0001); // (0000,0001)
/// CommandRecognitionCode (0000,0010) SH 1 DICOM/retired
#[rustfmt::skip]
pub const COMMAND_RECOGNITION_CODE: Tag = Tag(0x0000, 0x0010); // (0000,0010)
/// Initiator (0000,0200) AE 1 DICOM/retired
#[rustfmt::skip]
pub const INITIATOR: Tag = Tag(0x0000, 0x0200); // (0000,0200)
/// Receiver (0000,0300) AE 1 DICOM/retired
#[rustfmt::skip]
pub const RECEIVER: Tag = Tag(0x0000, 0x0300); // (0000,0300)
/// FindLocation (0000,0400) AE 1 DICOM/retired
#[rustfmt::skip]
pub const FIND_LOCATION: Tag = Tag(0x0000, 0x0400); // (0000,0400)
/// NumberOfMatches (0000,0850) US 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_MATCHES: Tag = Tag(0x0000, 0x0850); // (0000,0850)
/// ResponseSequenceNumber (0000,0860) US 1 DICOM/retired
#[rustfmt::skip]
pub const RESPONSE_SEQUENCE_NUMBER: Tag = Tag(0x0000, 0x0860); // (0000,0860)
/// DialogReceiver (0000,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const DIALOG_RECEIVER: Tag = Tag(0x0000, 0x4000); // (0000,4000)
/// TerminalType (0000,4010) LT 1 DICOM/retired
#[rustfmt::skip]
pub const TERMINAL_TYPE: Tag = Tag(0x0000, 0x4010); // (0000,4010)
/// MessageSetID (0000,5010) SH 1 DICOM/retired
#[rustfmt::skip]
pub const MESSAGE_SET_ID: Tag = Tag(0x0000, 0x5010); // (0000,5010)
/// EndMessageID (0000,5020) SH 1 DICOM/retired
#[rustfmt::skip]
pub const END_MESSAGE_ID: Tag = Tag(0x0000, 0x5020); // (0000,5020)
/// DisplayFormat (0000,5110) LT 1 DICOM/retired
#[rustfmt::skip]
pub const DISPLAY_FORMAT: Tag = Tag(0x0000, 0x5110); // (0000,5110)
/// PagePositionID (0000,5120) LT 1 DICOM/retired
#[rustfmt::skip]
pub const PAGE_POSITION_ID: Tag = Tag(0x0000, 0x5120); // (0000,5120)
/// TextFormatID (0000,5130) CS 1 DICOM/retired
#[rustfmt::skip]
pub const TEXT_FORMAT_ID: Tag = Tag(0x0000, 0x5130); // (0000,5130)
/// NormalReverse (0000,5140) CS 1 DICOM/retired
#[rustfmt::skip]
pub const NORMAL_REVERSE: Tag = Tag(0x0000, 0x5140); // (0000,5140)
/// AddGrayScale (0000,5150) CS 1 DICOM/retired
#[rustfmt::skip]
pub const ADD_GRAY_SCALE: Tag = Tag(0x0000, 0x5150); // (0000,5150)
/// Borders (0000,5160) CS 1 DICOM/retired
#[rustfmt::skip]
pub const BORDERS: Tag = Tag(0x0000, 0x5160); // (0000,5160)
/// Copies (0000,5170) IS 1 DICOM/retired
#[rustfmt::skip]
pub const COPIES: Tag = Tag(0x0000, 0x5170); // (0000,5170)
/// CommandMagnificationType (0000,5180) CS 1 DICOM/retired
#[rustfmt::skip]
pub const COMMAND_MAGNIFICATION_TYPE: Tag = Tag(0x0000, 0x5180); // (0000,5180)
/// Erase (0000,5190) CS 1 DICOM/retired
#[rustfmt::skip]
pub const ERASE: Tag = Tag(0x0000, 0x5190); // (0000,5190)
/// Print (0000,51A0) CS 1 DICOM/retired
#[rustfmt::skip]
pub const PRINT: Tag = Tag(0x0000, 0x51A0); // (0000,51A0)
/// Overlays (0000,51B0) US 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAYS: Tag = Tag(0x0000, 0x51B0); // (0000,51B0)
/// MRDRDirectoryRecordOffset (0004,1504) UL 1 DICOM/retired
#[rustfmt::skip]
pub const MRDR_DIRECTORY_RECORD_OFFSET: Tag = Tag(0x0004, 0x1504); // (0004,1504)
/// NumberOfReferences (0004,1600) UL 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_REFERENCES: Tag = Tag(0x0004, 0x1600); // (0004,1600)
/// LengthToEnd (0008,0001) UL 1 DICOM/retired
#[rustfmt::skip]
pub const LENGTH_TO_END: Tag = Tag(0x0008, 0x0001); // (0008,0001)
/// RecognitionCode (0008,0010) SH 1 DICOM/retired
#[rustfmt::skip]
pub const RECOGNITION_CODE: Tag = Tag(0x0008, 0x0010); // (0008,0010)
/// OverlayDate (0008,0024) DA 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_DATE: Tag = Tag(0x0008, 0x0024); // (0008,0024)
/// CurveDate (0008,0025) DA 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_DATE: Tag = Tag(0x0008, 0x0025); // (0008,0025)
/// OverlayTime (0008,0034) TM 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_TIME: Tag = Tag(0x0008, 0x0034); // (0008,0034)
/// CurveTime (0008,0035) TM 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_TIME: Tag = Tag(0x0008, 0x0035); // (0008,0035)
/// DataSetType (0008,0040) US 1 DICOM/retired
#[rustfmt::skip]
pub const DATA_SET_TYPE: Tag = Tag(0x0008, 0x0040); // (0008,0040)
/// DataSetSubtype (0008,0041) LO 1 DICOM/retired
#[rustfmt::skip]
pub const DATA_SET_SUBTYPE: Tag = Tag(0x0008, 0x0041); // (0008,0041)
/// NuclearMedicineSeriesType (0008,0042) CS 1 DICOM/retired
#[rustfmt::skip]
pub const NUCLEAR_MEDICINE_SERIES_TYPE: Tag = Tag(0x0008, 0x0042); // (0008,0042)
/// NetworkID (0008,1000) AE 1 DICOM/retired
#[rustfmt::skip]
pub const NETWORK_ID: Tag = Tag(0x0008, 0x1000); // (0008,1000)
/// ReferencedResultsSequence (0008,1100) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_RESULTS_SEQUENCE: Tag = Tag(0x0008, 0x1100); // (0008,1100)
/// ReferencedOverlaySequence (0008,1130) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_OVERLAY_SEQUENCE: Tag = Tag(0x0008, 0x1130); // (0008,1130)
/// ReferencedCurveSequence (0008,1145) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_CURVE_SEQUENCE: Tag = Tag(0x0008, 0x1145); // (0008,1145)
/// LossyImageCompressionRetired (0008,2110) CS 1 DICOM/retired
#[rustfmt::skip]
pub const LOSSY_IMAGE_COMPRESSION_RETIRED: Tag = Tag(0x0008, 0x2110); // (0008,2110)
/// TransducerPosition (0008,2200) CS 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSDUCER_POSITION: Tag = Tag(0x0008, 0x2200); // (0008,2200)
/// TransducerOrientation (0008,2204) CS 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSDUCER_ORIENTATION: Tag = Tag(0x0008, 0x2204); // (0008,2204)
/// AnatomicStructure (0008,2208) CS 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_STRUCTURE: Tag = Tag(0x0008, 0x2208); // (0008,2208)
/// AnatomicStructureSpaceOrRegionSequence (0008,2229) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE: Tag = Tag(0x0008, 0x2229); // (0008,2229)
/// TransducerPositionSequence (0008,2240) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSDUCER_POSITION_SEQUENCE: Tag = Tag(0x0008, 0x2240); // (0008,2240)
/// TransducerPositionModifierSequence (0008,2242) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSDUCER_POSITION_MODIFIER_SEQUENCE: Tag = Tag(0x0008, 0x2242); // (0008,2242)
/// TransducerOrientationSequence (0008,2244) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSDUCER_ORIENTATION_SEQUENCE: Tag = Tag(0x0008, 0x2244); // (0008,2244)
/// TransducerOrientationModifierSequence (0008,2246) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE: Tag = Tag(0x0008, 0x2246); // (0008,2246)
/// AnatomicStructureSpaceOrRegionCodeSequenceTrial (0008,2251) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x2251); // (0008,2251)
/// AnatomicPortalOfEntranceCodeSequenceTrial (0008,2253) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x2253); // (0008,2253)
/// AnatomicApproachDirectionCodeSequenceTrial (0008,2255) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x2255); // (0008,2255)
/// AnatomicPerspectiveDescriptionTrial (0008,2256) ST 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL: Tag = Tag(0x0008, 0x2256); // (0008,2256)
/// AnatomicPerspectiveCodeSequenceTrial (0008,2257) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x2257); // (0008,2257)
/// AnatomicLocationOfExaminingInstrumentDescriptionTrial (0008,2258) ST 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL: Tag = Tag(0x0008, 0x2258); // (0008,2258)
/// AnatomicLocationOfExaminingInstrumentCodeSequenceTrial (0008,2259) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x2259); // (0008,2259)
/// AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial (0008,225A) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x225A); // (0008,225A)
/// OnAxisBackgroundAnatomicStructureCodeSequenceTrial (0008,225C) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0008, 0x225C); // (0008,225C)
/// IdentifyingComments (0008,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const IDENTIFYING_COMMENTS: Tag = Tag(0x0008, 0x4000); // (0008,4000)
/// OtherPatientIDs (0010,1000) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const OTHER_PATIENT_I_DS: Tag = Tag(0x0010, 0x1000); // (0010,1000)
/// InsurancePlanIdentification (0010,1050) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const INSURANCE_PLAN_IDENTIFICATION: Tag = Tag(0x0010, 0x1050); // (0010,1050)
/// MedicalRecordLocator (0010,1090) LO 1 DICOM/retired
#[rustfmt::skip]
pub const MEDICAL_RECORD_LOCATOR: Tag = Tag(0x0010, 0x1090); // (0010,1090)
/// CADFileFormat (0014,0023) ST 1 DICOM/retired
#[rustfmt::skip]
pub const CAD_FILE_FORMAT: Tag = Tag(0x0014, 0x0023); // (0014,0023)
/// ComponentReferenceSystem (0014,0024) ST 1 DICOM/retired
#[rustfmt::skip]
pub const COMPONENT_REFERENCE_SYSTEM: Tag = Tag(0x0014, 0x0024); // (0014,0024)
/// MaterialPropertiesFileFormatRetired (0014,0045) ST 1 DICOM/retired
#[rustfmt::skip]
pub const MATERIAL_PROPERTIES_FILE_FORMAT_RETIRED: Tag = Tag(0x0014, 0x0045); // (0014,0045)
/// Radionuclide (0018,0030) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const RADIONUCLIDE: Tag = Tag(0x0018, 0x0030); // (0018,0030)
/// EnergyWindowCenterline (0018,0032) DS 1 DICOM/retired
#[rustfmt::skip]
pub const ENERGY_WINDOW_CENTERLINE: Tag = Tag(0x0018, 0x0032); // (0018,0032)
/// EnergyWindowTotalWidth (0018,0033) DS 1-n DICOM/retired
#[rustfmt::skip]
pub const ENERGY_WINDOW_TOTAL_WIDTH: Tag = Tag(0x0018, 0x0033); // (0018,0033)
/// TherapyType (0018,0037) CS 1 DICOM/retired
#[rustfmt::skip]
pub const THERAPY_TYPE: Tag = Tag(0x0018, 0x0037); // (0018,0037)
/// TherapyDescription (0018,0039) CS 1 DICOM/retired
#[rustfmt::skip]
pub const THERAPY_DESCRIPTION: Tag = Tag(0x0018, 0x0039); // (0018,0039)
/// HardcopyCreationDeviceID (0018,1011) LO 1 DICOM/retired
#[rustfmt::skip]
pub const HARDCOPY_CREATION_DEVICE_ID: Tag = Tag(0x0018, 0x1011); // (0018,1011)
/// HardcopyDeviceManufacturer (0018,1017) LO 1 DICOM/retired
#[rustfmt::skip]
pub const HARDCOPY_DEVICE_MANUFACTURER: Tag = Tag(0x0018, 0x1017); // (0018,1017)
/// HardcopyDeviceSoftwareVersion (0018,101A) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const HARDCOPY_DEVICE_SOFTWARE_VERSION: Tag = Tag(0x0018, 0x101A); // (0018,101A)
/// HardcopyDeviceManufacturerModelName (0018,101B) LO 1 DICOM/retired
#[rustfmt::skip]
pub const HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME: Tag = Tag(0x0018, 0x101B); // (0018,101B)
/// AngularPosition (0018,1141) DS 1 DICOM/retired
#[rustfmt::skip]
pub const ANGULAR_POSITION: Tag = Tag(0x0018, 0x1141); // (0018,1141)
/// RotationOffset (0018,1146) DS 1-n DICOM/retired
#[rustfmt::skip]
pub const ROTATION_OFFSET: Tag = Tag(0x0018, 0x1146); // (0018,1146)
/// UpperLowerPixelValues (0018,1240) IS 1-n DICOM/retired
#[rustfmt::skip]
pub const UPPER_LOWER_PIXEL_VALUES: Tag = Tag(0x0018, 0x1240); // (0018,1240)
/// AcquisitionComments (0018,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const ACQUISITION_COMMENTS: Tag = Tag(0x0018, 0x4000); // (0018,4000)
/// PostprocessingFunction (0018,5021) LO 1 DICOM/retired
#[rustfmt::skip]
pub const POSTPROCESSING_FUNCTION: Tag = Tag(0x0018, 0x5021); // (0018,5021)
/// DynamicRange (0018,5030) DS 1 DICOM/retired
#[rustfmt::skip]
pub const DYNAMIC_RANGE: Tag = Tag(0x0018, 0x5030); // (0018,5030)
/// TotalGain (0018,5040) DS 1 DICOM/retired
#[rustfmt::skip]
pub const TOTAL_GAIN: Tag = Tag(0x0018, 0x5040); // (0018,5040)
/// ImageTransformationMatrix (0018,5210) DS 6 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_TRANSFORMATION_MATRIX: Tag = Tag(0x0018, 0x5210); // (0018,5210)
/// ImageTranslationVector (0018,5212) DS 3 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_TRANSLATION_VECTOR: Tag = Tag(0x0018, 0x5212); // (0018,5212)
/// DopplerSampleVolumeXPositionRetired (0018,6038) UL 1 DICOM/retired
#[rustfmt::skip]
pub const DOPPLER_SAMPLE_VOLUME_X_POSITION_RETIRED: Tag = Tag(0x0018, 0x6038); // (0018,6038)
/// DopplerSampleVolumeYPositionRetired (0018,603A) UL 1 DICOM/retired
#[rustfmt::skip]
pub const DOPPLER_SAMPLE_VOLUME_Y_POSITION_RETIRED: Tag = Tag(0x0018, 0x603A); // (0018,603A)
/// TMLinePositionX0Retired (0018,603C) UL 1 DICOM/retired
#[rustfmt::skip]
pub const TM_LINE_POSITION_X0_RETIRED: Tag = Tag(0x0018, 0x603C); // (0018,603C)
/// TMLinePositionY0Retired (0018,603E) UL 1 DICOM/retired
#[rustfmt::skip]
pub const TM_LINE_POSITION_Y0_RETIRED: Tag = Tag(0x0018, 0x603E); // (0018,603E)
/// TMLinePositionX1Retired (0018,6040) UL 1 DICOM/retired
#[rustfmt::skip]
pub const TM_LINE_POSITION_X1_RETIRED: Tag = Tag(0x0018, 0x6040); // (0018,6040)
/// TMLinePositionY1Retired (0018,6042) UL 1 DICOM/retired
#[rustfmt::skip]
pub const TM_LINE_POSITION_Y1_RETIRED: Tag = Tag(0x0018, 0x6042); // (0018,6042)
/// ParallelReductionFactorInPlaneRetired (0018,9096) FD 1 DICOM/retired
#[rustfmt::skip]
pub const PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED: Tag = Tag(0x0018, 0x9096); // (0018,9096)
/// BulkMotionStatus (0018,9166) CS 1 DICOM/retired
#[rustfmt::skip]
pub const BULK_MOTION_STATUS: Tag = Tag(0x0018, 0x9166); // (0018,9166)
/// ChemicalShiftMinimumIntegrationLimitInHz (0018,9195) FD 1 DICOM/retired
#[rustfmt::skip]
pub const CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ: Tag = Tag(0x0018, 0x9195); // (0018,9195)
/// ChemicalShiftMaximumIntegrationLimitInHz (0018,9196) FD 1 DICOM/retired
#[rustfmt::skip]
pub const CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ: Tag = Tag(0x0018, 0x9196); // (0018,9196)
/// IsotopeNumber (0020,0014) IS 1 DICOM/retired
#[rustfmt::skip]
pub const ISOTOPE_NUMBER: Tag = Tag(0x0020, 0x0014); // (0020,0014)
/// PhaseNumber (0020,0015) IS 1 DICOM/retired
#[rustfmt::skip]
pub const PHASE_NUMBER: Tag = Tag(0x0020, 0x0015); // (0020,0015)
/// IntervalNumber (0020,0016) IS 1 DICOM/retired
#[rustfmt::skip]
pub const INTERVAL_NUMBER: Tag = Tag(0x0020, 0x0016); // (0020,0016)
/// TimeSlotNumber (0020,0017) IS 1 DICOM/retired
#[rustfmt::skip]
pub const TIME_SLOT_NUMBER: Tag = Tag(0x0020, 0x0017); // (0020,0017)
/// AngleNumber (0020,0018) IS 1 DICOM/retired
#[rustfmt::skip]
pub const ANGLE_NUMBER: Tag = Tag(0x0020, 0x0018); // (0020,0018)
/// OverlayNumber (0020,0022) IS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_NUMBER: Tag = Tag(0x0020, 0x0022); // (0020,0022)
/// CurveNumber (0020,0024) IS 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_NUMBER: Tag = Tag(0x0020, 0x0024); // (0020,0024)
/// LUTNumber (0020,0026) IS 1 DICOM/retired
#[rustfmt::skip]
pub const LUT_NUMBER: Tag = Tag(0x0020, 0x0026); // (0020,0026)
/// ImagePosition (0020,0030) DS 3 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_POSITION: Tag = Tag(0x0020, 0x0030); // (0020,0030)
/// ImageOrientation (0020,0035) DS 6 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_ORIENTATION: Tag = Tag(0x0020, 0x0035); // (0020,0035)
/// Location (0020,0050) DS 1 DICOM/retired
#[rustfmt::skip]
pub const LOCATION: Tag = Tag(0x0020, 0x0050); // (0020,0050)
/// ImageGeometryType (0020,0070) LO 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_GEOMETRY_TYPE: Tag = Tag(0x0020, 0x0070); // (0020,0070)
/// MaskingImage (0020,0080) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const MASKING_IMAGE: Tag = Tag(0x0020, 0x0080); // (0020,0080)
/// ReportNumber (0020,00AA) IS 1 DICOM/retired
#[rustfmt::skip]
pub const REPORT_NUMBER: Tag = Tag(0x0020, 0x00AA); // (0020,00AA)
/// SeriesInStudy (0020,1000) IS 1 DICOM/retired
#[rustfmt::skip]
pub const SERIES_IN_STUDY: Tag = Tag(0x0020, 0x1000); // (0020,1000)
/// AcquisitionsInSeries (0020,1001) IS 1 DICOM/retired
#[rustfmt::skip]
pub const ACQUISITIONS_IN_SERIES: Tag = Tag(0x0020, 0x1001); // (0020,1001)
/// ImagesInSeries (0020,1003) IS 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGES_IN_SERIES: Tag = Tag(0x0020, 0x1003); // (0020,1003)
/// AcquisitionsInStudy (0020,1004) IS 1 DICOM/retired
#[rustfmt::skip]
pub const ACQUISITIONS_IN_STUDY: Tag = Tag(0x0020, 0x1004); // (0020,1004)
/// ImagesInStudy (0020,1005) IS 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGES_IN_STUDY: Tag = Tag(0x0020, 0x1005); // (0020,1005)
/// Reference (0020,1020) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const REFERENCE: Tag = Tag(0x0020, 0x1020); // (0020,1020)
/// OtherStudyNumbers (0020,1070) IS 1-n DICOM/retired
#[rustfmt::skip]
pub const OTHER_STUDY_NUMBERS: Tag = Tag(0x0020, 0x1070); // (0020,1070)
/// SourceImageIDs (0020,3100-31FF) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const SOURCE_IMAGE_I_DS: TagRange = Element100(Tag(0x0020, 0x3100)); // (0020,3100-31FF)
/// ModifyingDeviceID (0020,3401) CS 1 DICOM/retired
#[rustfmt::skip]
pub const MODIFYING_DEVICE_ID: Tag = Tag(0x0020, 0x3401); // (0020,3401)
/// ModifiedImageID (0020,3402) CS 1 DICOM/retired
#[rustfmt::skip]
pub const MODIFIED_IMAGE_ID: Tag = Tag(0x0020, 0x3402); // (0020,3402)
/// ModifiedImageDate (0020,3403) DA 1 DICOM/retired
#[rustfmt::skip]
pub const MODIFIED_IMAGE_DATE: Tag = Tag(0x0020, 0x3403); // (0020,3403)
/// ModifyingDeviceManufacturer (0020,3404) LO 1 DICOM/retired
#[rustfmt::skip]
pub const MODIFYING_DEVICE_MANUFACTURER: Tag = Tag(0x0020, 0x3404); // (0020,3404)
/// ModifiedImageTime (0020,3405) TM 1 DICOM/retired
#[rustfmt::skip]
pub const MODIFIED_IMAGE_TIME: Tag = Tag(0x0020, 0x3405); // (0020,3405)
/// ModifiedImageDescription (0020,3406) LO 1 DICOM/retired
#[rustfmt::skip]
pub const MODIFIED_IMAGE_DESCRIPTION: Tag = Tag(0x0020, 0x3406); // (0020,3406)
/// OriginalImageIdentification (0020,5000) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const ORIGINAL_IMAGE_IDENTIFICATION: Tag = Tag(0x0020, 0x5000); // (0020,5000)
/// OriginalImageIdentificationNomenclature (0020,5002) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE: Tag = Tag(0x0020, 0x5002); // (0020,5002)
/// LensConstantDescription (0022,1094) LO 1 DICOM/retired
#[rustfmt::skip]
pub const LENS_CONSTANT_DESCRIPTION: Tag = Tag(0x0022, 0x1094); // (0022,1094)
/// OphthalmicAxialLengthAcquisitionMethodCodeSequence (0022,1153) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_ACQUISITION_METHOD_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1153); // (0022,1153)
/// OphthalmicAxialLengthQualityMetricTypeCodeSequence (0022,1265) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_CODE_SEQUENCE: Tag = Tag(0x0022, 0x1265); // (0022,1265)
/// OphthalmicAxialLengthQualityMetricTypeDescription (0022,1273) LO 1 DICOM/retired
#[rustfmt::skip]
pub const OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_DESCRIPTION: Tag = Tag(0x0022, 0x1273); // (0022,1273)
/// ImageDimensions (0028,0005) US 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_DIMENSIONS: Tag = Tag(0x0028, 0x0005); // (0028,0005)
/// Planes (0028,0012) US 1 DICOM/retired
#[rustfmt::skip]
pub const PLANES: Tag = Tag(0x0028, 0x0012); // (0028,0012)
/// ImageFormat (0028,0040) CS 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_FORMAT: Tag = Tag(0x0028, 0x0040); // (0028,0040)
/// ManipulatedImage (0028,0050) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const MANIPULATED_IMAGE: Tag = Tag(0x0028, 0x0050); // (0028,0050)
/// CompressionRecognitionCode (0028,005F) LO 1 DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_RECOGNITION_CODE: Tag = Tag(0x0028, 0x005F); // (0028,005F)
/// CompressionCode (0028,0060) CS 1 DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_CODE: Tag = Tag(0x0028, 0x0060); // (0028,0060)
/// CompressionOriginator (0028,0061) SH 1 DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_ORIGINATOR: Tag = Tag(0x0028, 0x0061); // (0028,0061)
/// CompressionLabel (0028,0062) LO 1 DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_LABEL: Tag = Tag(0x0028, 0x0062); // (0028,0062)
/// CompressionDescription (0028,0063) SH 1 DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_DESCRIPTION: Tag = Tag(0x0028, 0x0063); // (0028,0063)
/// CompressionSequence (0028,0065) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_SEQUENCE: Tag = Tag(0x0028, 0x0065); // (0028,0065)
/// CompressionStepPointers (0028,0066) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const COMPRESSION_STEP_POINTERS: Tag = Tag(0x0028, 0x0066); // (0028,0066)
/// RepeatInterval (0028,0068) US 1 DICOM/retired
#[rustfmt::skip]
pub const REPEAT_INTERVAL: Tag = Tag(0x0028, 0x0068); // (0028,0068)
/// BitsGrouped (0028,0069) US 1 DICOM/retired
#[rustfmt::skip]
pub const BITS_GROUPED: Tag = Tag(0x0028, 0x0069); // (0028,0069)
/// PerimeterTable (0028,0070) US 1-n DICOM/retired
#[rustfmt::skip]
pub const PERIMETER_TABLE: Tag = Tag(0x0028, 0x0070); // (0028,0070)
/// PerimeterValue (0028,0071) US 1 DICOM/retired
#[rustfmt::skip]
pub const PERIMETER_VALUE: Tag = Tag(0x0028, 0x0071); // (0028,0071)
/// PredictorRows (0028,0080) US 1 DICOM/retired
#[rustfmt::skip]
pub const PREDICTOR_ROWS: Tag = Tag(0x0028, 0x0080); // (0028,0080)
/// PredictorColumns (0028,0081) US 1 DICOM/retired
#[rustfmt::skip]
pub const PREDICTOR_COLUMNS: Tag = Tag(0x0028, 0x0081); // (0028,0081)
/// PredictorConstants (0028,0082) US 1-n DICOM/retired
#[rustfmt::skip]
pub const PREDICTOR_CONSTANTS: Tag = Tag(0x0028, 0x0082); // (0028,0082)
/// BlockedPixels (0028,0090) CS 1 DICOM/retired
#[rustfmt::skip]
pub const BLOCKED_PIXELS: Tag = Tag(0x0028, 0x0090); // (0028,0090)
/// BlockRows (0028,0091) US 1 DICOM/retired
#[rustfmt::skip]
pub const BLOCK_ROWS: Tag = Tag(0x0028, 0x0091); // (0028,0091)
/// BlockColumns (0028,0092) US 1 DICOM/retired
#[rustfmt::skip]
pub const BLOCK_COLUMNS: Tag = Tag(0x0028, 0x0092); // (0028,0092)
/// RowOverlap (0028,0093) US 1 DICOM/retired
#[rustfmt::skip]
pub const ROW_OVERLAP: Tag = Tag(0x0028, 0x0093); // (0028,0093)
/// ColumnOverlap (0028,0094) US 1 DICOM/retired
#[rustfmt::skip]
pub const COLUMN_OVERLAP: Tag = Tag(0x0028, 0x0094); // (0028,0094)
/// SmallestValidPixelValue (0028,0104) US 1 DICOM/retired
#[rustfmt::skip]
pub const SMALLEST_VALID_PIXEL_VALUE: Tag = Tag(0x0028, 0x0104); // (0028,0104)
/// LargestValidPixelValue (0028,0105) US 1 DICOM/retired
#[rustfmt::skip]
pub const LARGEST_VALID_PIXEL_VALUE: Tag = Tag(0x0028, 0x0105); // (0028,0105)
/// SmallestImagePixelValueInPlane (0028,0110) US 1 DICOM/retired
#[rustfmt::skip]
pub const SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE: Tag = Tag(0x0028, 0x0110); // (0028,0110)
/// LargestImagePixelValueInPlane (0028,0111) US 1 DICOM/retired
#[rustfmt::skip]
pub const LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE: Tag = Tag(0x0028, 0x0111); // (0028,0111)
/// ImageLocation (0028,0200) US 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_LOCATION: Tag = Tag(0x0028, 0x0200); // (0028,0200)
/// TransformLabel (0028,0400) LO 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSFORM_LABEL: Tag = Tag(0x0028, 0x0400); // (0028,0400)
/// TransformVersionNumber (0028,0401) LO 1 DICOM/retired
#[rustfmt::skip]
pub const TRANSFORM_VERSION_NUMBER: Tag = Tag(0x0028, 0x0401); // (0028,0401)
/// NumberOfTransformSteps (0028,0402) US 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_TRANSFORM_STEPS: Tag = Tag(0x0028, 0x0402); // (0028,0402)
/// SequenceOfCompressedData (0028,0403) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const SEQUENCE_OF_COMPRESSED_DATA: Tag = Tag(0x0028, 0x0403); // (0028,0403)
/// DetailsOfCoefficients (0028,0404) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const DETAILS_OF_COEFFICIENTS: Tag = Tag(0x0028, 0x0404); // (0028,0404)
/// DCTLabel (0028,0700) LO 1 DICOM/retired
#[rustfmt::skip]
pub const DCT_LABEL: Tag = Tag(0x0028, 0x0700); // (0028,0700)
/// DataBlockDescription (0028,0701) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const DATA_BLOCK_DESCRIPTION: Tag = Tag(0x0028, 0x0701); // (0028,0701)
/// DataBlock (0028,0702) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const DATA_BLOCK: Tag = Tag(0x0028, 0x0702); // (0028,0702)
/// NormalizationFactorFormat (0028,0710) US 1 DICOM/retired
#[rustfmt::skip]
pub const NORMALIZATION_FACTOR_FORMAT: Tag = Tag(0x0028, 0x0710); // (0028,0710)
/// ZonalMapNumberFormat (0028,0720) US 1 DICOM/retired
#[rustfmt::skip]
pub const ZONAL_MAP_NUMBER_FORMAT: Tag = Tag(0x0028, 0x0720); // (0028,0720)
/// ZonalMapLocation (0028,0721) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const ZONAL_MAP_LOCATION: Tag = Tag(0x0028, 0x0721); // (0028,0721)
/// ZonalMapFormat (0028,0722) US 1 DICOM/retired
#[rustfmt::skip]
pub const ZONAL_MAP_FORMAT: Tag = Tag(0x0028, 0x0722); // (0028,0722)
/// AdaptiveMapFormat (0028,0730) US 1 DICOM/retired
#[rustfmt::skip]
pub const ADAPTIVE_MAP_FORMAT: Tag = Tag(0x0028, 0x0730); // (0028,0730)
/// CodeNumberFormat (0028,0740) US 1 DICOM/retired
#[rustfmt::skip]
pub const CODE_NUMBER_FORMAT: Tag = Tag(0x0028, 0x0740); // (0028,0740)
/// GrayScale (0028,1080) CS 1 DICOM/retired
#[rustfmt::skip]
pub const GRAY_SCALE: Tag = Tag(0x0028, 0x1080); // (0028,1080)
/// GrayLookupTableDescriptor (0028,1100) US 3 DICOM/retired
#[rustfmt::skip]
pub const GRAY_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1100); // (0028,1100)
/// LargeRedPaletteColorLookupTableDescriptor (0028,1111) US 4 DICOM/retired
#[rustfmt::skip]
pub const LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1111); // (0028,1111)
/// LargeGreenPaletteColorLookupTableDescriptor (0028,1112) US 4 DICOM/retired
#[rustfmt::skip]
pub const LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1112); // (0028,1112)
/// LargeBluePaletteColorLookupTableDescriptor (0028,1113) US 4 DICOM/retired
#[rustfmt::skip]
pub const LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Tag = Tag(0x0028, 0x1113); // (0028,1113)
/// GrayLookupTableData (0028,1200) OW 1-n DICOM/retired
#[rustfmt::skip]
pub const GRAY_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1200); // (0028,1200)
/// LargeRedPaletteColorLookupTableData (0028,1211) OW 1 DICOM/retired
#[rustfmt::skip]
pub const LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1211); // (0028,1211)
/// LargeGreenPaletteColorLookupTableData (0028,1212) OW 1 DICOM/retired
#[rustfmt::skip]
pub const LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1212); // (0028,1212)
/// LargeBluePaletteColorLookupTableData (0028,1213) OW 1 DICOM/retired
#[rustfmt::skip]
pub const LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA: Tag = Tag(0x0028, 0x1213); // (0028,1213)
/// LargePaletteColorLookupTableUID (0028,1214) UI 1 DICOM/retired
#[rustfmt::skip]
pub const LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID: Tag = Tag(0x0028, 0x1214); // (0028,1214)
/// ImagePresentationComments (0028,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_PRESENTATION_COMMENTS: Tag = Tag(0x0028, 0x4000); // (0028,4000)
/// BiPlaneAcquisitionSequence (0028,5000) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const BI_PLANE_ACQUISITION_SEQUENCE: Tag = Tag(0x0028, 0x5000); // (0028,5000)
/// MaskPointers (0028,6030) US 1-n DICOM/retired
#[rustfmt::skip]
pub const MASK_POINTERS: Tag = Tag(0x0028, 0x6030); // (0028,6030)
/// LargestMonochromePixelValue (0028,9099) US 1 DICOM/retired
#[rustfmt::skip]
pub const LARGEST_MONOCHROME_PIXEL_VALUE: Tag = Tag(0x0028, 0x9099); // (0028,9099)
/// StudyStatusID (0032,000A) CS 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_STATUS_ID: Tag = Tag(0x0032, 0x000A); // (0032,000A)
/// StudyPriorityID (0032,000C) CS 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_PRIORITY_ID: Tag = Tag(0x0032, 0x000C); // (0032,000C)
/// StudyIDIssuer (0032,0012) LO 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_ID_ISSUER: Tag = Tag(0x0032, 0x0012); // (0032,0012)
/// StudyVerifiedDate (0032,0032) DA 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_VERIFIED_DATE: Tag = Tag(0x0032, 0x0032); // (0032,0032)
/// StudyVerifiedTime (0032,0033) TM 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_VERIFIED_TIME: Tag = Tag(0x0032, 0x0033); // (0032,0033)
/// StudyReadDate (0032,0034) DA 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_READ_DATE: Tag = Tag(0x0032, 0x0034); // (0032,0034)
/// StudyReadTime (0032,0035) TM 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_READ_TIME: Tag = Tag(0x0032, 0x0035); // (0032,0035)
/// ScheduledStudyStartDate (0032,1000) DA 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_STUDY_START_DATE: Tag = Tag(0x0032, 0x1000); // (0032,1000)
/// ScheduledStudyStartTime (0032,1001) TM 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_STUDY_START_TIME: Tag = Tag(0x0032, 0x1001); // (0032,1001)
/// ScheduledStudyStopDate (0032,1010) DA 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_STUDY_STOP_DATE: Tag = Tag(0x0032, 0x1010); // (0032,1010)
/// ScheduledStudyStopTime (0032,1011) TM 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_STUDY_STOP_TIME: Tag = Tag(0x0032, 0x1011); // (0032,1011)
/// ScheduledStudyLocation (0032,1020) LO 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_STUDY_LOCATION: Tag = Tag(0x0032, 0x1020); // (0032,1020)
/// ScheduledStudyLocationAETitle (0032,1021) AE 1-n DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_STUDY_LOCATION_AE_TITLE: Tag = Tag(0x0032, 0x1021); // (0032,1021)
/// ReasonForStudy (0032,1030) LO 1 DICOM/retired
#[rustfmt::skip]
pub const REASON_FOR_STUDY: Tag = Tag(0x0032, 0x1030); // (0032,1030)
/// StudyArrivalDate (0032,1040) DA 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_ARRIVAL_DATE: Tag = Tag(0x0032, 0x1040); // (0032,1040)
/// StudyArrivalTime (0032,1041) TM 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_ARRIVAL_TIME: Tag = Tag(0x0032, 0x1041); // (0032,1041)
/// StudyCompletionDate (0032,1050) DA 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_COMPLETION_DATE: Tag = Tag(0x0032, 0x1050); // (0032,1050)
/// StudyCompletionTime (0032,1051) TM 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_COMPLETION_TIME: Tag = Tag(0x0032, 0x1051); // (0032,1051)
/// StudyComponentStatusID (0032,1055) CS 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_COMPONENT_STATUS_ID: Tag = Tag(0x0032, 0x1055); // (0032,1055)
/// StudyComments (0032,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const STUDY_COMMENTS: Tag = Tag(0x0032, 0x4000); // (0032,4000)
/// IssuerOfAdmissionID (0038,0011) LO 1 DICOM/retired
#[rustfmt::skip]
pub const ISSUER_OF_ADMISSION_ID: Tag = Tag(0x0038, 0x0011); // (0038,0011)
/// ScheduledAdmissionDate (0038,001A) DA 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_ADMISSION_DATE: Tag = Tag(0x0038, 0x001A); // (0038,001A)
/// ScheduledAdmissionTime (0038,001B) TM 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_ADMISSION_TIME: Tag = Tag(0x0038, 0x001B); // (0038,001B)
/// ScheduledDischargeDate (0038,001C) DA 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_DISCHARGE_DATE: Tag = Tag(0x0038, 0x001C); // (0038,001C)
/// ScheduledDischargeTime (0038,001D) TM 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_DISCHARGE_TIME: Tag = Tag(0x0038, 0x001D); // (0038,001D)
/// ScheduledPatientInstitutionResidence (0038,001E) LO 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_PATIENT_INSTITUTION_RESIDENCE: Tag = Tag(0x0038, 0x001E); // (0038,001E)
/// DischargeDate (0038,0030) DA 1 DICOM/retired
#[rustfmt::skip]
pub const DISCHARGE_DATE: Tag = Tag(0x0038, 0x0030); // (0038,0030)
/// DischargeTime (0038,0032) TM 1 DICOM/retired
#[rustfmt::skip]
pub const DISCHARGE_TIME: Tag = Tag(0x0038, 0x0032); // (0038,0032)
/// DischargeDiagnosisDescription (0038,0040) LO 1 DICOM/retired
#[rustfmt::skip]
pub const DISCHARGE_DIAGNOSIS_DESCRIPTION: Tag = Tag(0x0038, 0x0040); // (0038,0040)
/// DischargeDiagnosisCodeSequence (0038,0044) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const DISCHARGE_DIAGNOSIS_CODE_SEQUENCE: Tag = Tag(0x0038, 0x0044); // (0038,0044)
/// IssuerOfServiceEpisodeID (0038,0061) LO 1 DICOM/retired
#[rustfmt::skip]
pub const ISSUER_OF_SERVICE_EPISODE_ID: Tag = Tag(0x0038, 0x0061); // (0038,0061)
/// TotalTimeOfFluoroscopy (0040,0300) US 1 DICOM/retired
#[rustfmt::skip]
pub const TOTAL_TIME_OF_FLUOROSCOPY: Tag = Tag(0x0040, 0x0300); // (0040,0300)
/// TotalNumberOfExposures (0040,0301) US 1 DICOM/retired
#[rustfmt::skip]
pub const TOTAL_NUMBER_OF_EXPOSURES: Tag = Tag(0x0040, 0x0301); // (0040,0301)
/// DistanceSourceToSupport (0040,0307) DS 1 DICOM/retired
#[rustfmt::skip]
pub const DISTANCE_SOURCE_TO_SUPPORT: Tag = Tag(0x0040, 0x0307); // (0040,0307)
/// ExposureDoseSequence (0040,030E) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const EXPOSURE_DOSE_SEQUENCE: Tag = Tag(0x0040, 0x030E); // (0040,030E)
/// ReferencedProcedureStepSequence (0040,0330) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0040, 0x0330); // (0040,0330)
/// SpecimenAccessionNumber (0040,050A) LO 1 DICOM/retired
#[rustfmt::skip]
pub const SPECIMEN_ACCESSION_NUMBER: Tag = Tag(0x0040, 0x050A); // (0040,050A)
/// SpecimenSequence (0040,0550) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const SPECIMEN_SEQUENCE: Tag = Tag(0x0040, 0x0550); // (0040,0550)
/// SpecimenDescriptionSequenceTrial (0040,0552) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0x0552); // (0040,0552)
/// SpecimenDescriptionTrial (0040,0553) ST 1 DICOM/retired
#[rustfmt::skip]
pub const SPECIMEN_DESCRIPTION_TRIAL: Tag = Tag(0x0040, 0x0553); // (0040,0553)
/// SlideIdentifier (0040,06FA) LO 1 DICOM/retired
#[rustfmt::skip]
pub const SLIDE_IDENTIFIER: Tag = Tag(0x0040, 0x06FA); // (0040,06FA)
/// PixelSpacingSequence (0040,08D8) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PIXEL_SPACING_SEQUENCE: Tag = Tag(0x0040, 0x08D8); // (0040,08D8)
/// CoordinateSystemAxisCodeSequence (0040,08DA) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE: Tag = Tag(0x0040, 0x08DA); // (0040,08DA)
/// VitalStainCodeSequenceTrial (0040,09F8) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const VITAL_STAIN_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0x09F8); // (0040,09F8)
/// PlacerOrderNumberProcedure (0040,1006) SH 1 DICOM/retired
#[rustfmt::skip]
pub const PLACER_ORDER_NUMBER_PROCEDURE: Tag = Tag(0x0040, 0x1006); // (0040,1006)
/// FillerOrderNumberProcedure (0040,1007) SH 1 DICOM/retired
#[rustfmt::skip]
pub const FILLER_ORDER_NUMBER_PROCEDURE: Tag = Tag(0x0040, 0x1007); // (0040,1007)
/// RequestedProcedureDescriptionTrial (0040,1060) LO 1 DICOM/retired
#[rustfmt::skip]
pub const REQUESTED_PROCEDURE_DESCRIPTION_TRIAL: Tag = Tag(0x0040, 0x1060); // (0040,1060)
/// ReasonForTheImagingServiceRequest (0040,2001) LO 1 DICOM/retired
#[rustfmt::skip]
pub const REASON_FOR_THE_IMAGING_SERVICE_REQUEST: Tag = Tag(0x0040, 0x2001); // (0040,2001)
/// PlacerOrderNumberImagingServiceRequestRetired (0040,2006) SH 1 DICOM/retired
#[rustfmt::skip]
pub const PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED: Tag = Tag(0x0040, 0x2006); // (0040,2006)
/// FillerOrderNumberImagingServiceRequestRetired (0040,2007) SH 1 DICOM/retired
#[rustfmt::skip]
pub const FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED: Tag = Tag(0x0040, 0x2007); // (0040,2007)
/// GeneralPurposeScheduledProcedureStepStatus (0040,4001) CS 1 DICOM/retired
#[rustfmt::skip]
pub const GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS: Tag = Tag(0x0040, 0x4001); // (0040,4001)
/// GeneralPurposePerformedProcedureStepStatus (0040,4002) CS 1 DICOM/retired
#[rustfmt::skip]
pub const GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS: Tag = Tag(0x0040, 0x4002); // (0040,4002)
/// GeneralPurposeScheduledProcedureStepPriority (0040,4003) CS 1 DICOM/retired
#[rustfmt::skip]
pub const GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY: Tag = Tag(0x0040, 0x4003); // (0040,4003)
/// ScheduledProcessingApplicationsCodeSequence (0040,4004) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4004); // (0040,4004)
/// MultipleCopiesFlag (0040,4006) CS 1 DICOM/retired
#[rustfmt::skip]
pub const MULTIPLE_COPIES_FLAG: Tag = Tag(0x0040, 0x4006); // (0040,4006)
/// ResultingGeneralPurposePerformedProcedureStepsSequence (0040,4015) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE: Tag = Tag(0x0040, 0x4015); // (0040,4015)
/// ReferencedGeneralPurposeScheduledProcedureStepSequence (0040,4016) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0040, 0x4016); // (0040,4016)
/// InputAvailabilityFlag (0040,4020) CS 1 DICOM/retired
#[rustfmt::skip]
pub const INPUT_AVAILABILITY_FLAG: Tag = Tag(0x0040, 0x4020); // (0040,4020)
/// RelevantInformationSequence (0040,4022) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const RELEVANT_INFORMATION_SEQUENCE: Tag = Tag(0x0040, 0x4022); // (0040,4022)
/// ReferencedGeneralPurposeScheduledProcedureStepTransactionUID (0040,4023) UI 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID: Tag = Tag(0x0040, 0x4023); // (0040,4023)
/// RequestedSubsequentWorkitemCodeSequence (0040,4031) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4031); // (0040,4031)
/// NonDICOMOutputCodeSequence (0040,4032) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const NON_DICOM_OUTPUT_CODE_SEQUENCE: Tag = Tag(0x0040, 0x4032); // (0040,4032)
/// FindingsFlagTrial (0040,A007) CS 1 DICOM/retired
#[rustfmt::skip]
pub const FINDINGS_FLAG_TRIAL: Tag = Tag(0x0040, 0xA007); // (0040,A007)
/// FindingsSequenceTrial (0040,A020) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const FINDINGS_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA020); // (0040,A020)
/// FindingsGroupUIDTrial (0040,A021) UI 1 DICOM/retired
#[rustfmt::skip]
pub const FINDINGS_GROUP_UID_TRIAL: Tag = Tag(0x0040, 0xA021); // (0040,A021)
/// ReferencedFindingsGroupUIDTrial (0040,A022) UI 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_FINDINGS_GROUP_UID_TRIAL: Tag = Tag(0x0040, 0xA022); // (0040,A022)
/// FindingsGroupRecordingDateTrial (0040,A023) DA 1 DICOM/retired
#[rustfmt::skip]
pub const FINDINGS_GROUP_RECORDING_DATE_TRIAL: Tag = Tag(0x0040, 0xA023); // (0040,A023)
/// FindingsGroupRecordingTimeTrial (0040,A024) TM 1 DICOM/retired
#[rustfmt::skip]
pub const FINDINGS_GROUP_RECORDING_TIME_TRIAL: Tag = Tag(0x0040, 0xA024); // (0040,A024)
/// FindingsSourceCategoryCodeSequenceTrial (0040,A026) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const FINDINGS_SOURCE_CATEGORY_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA026); // (0040,A026)
/// DocumentingOrganizationIdentifierCodeSequenceTrial (0040,A028) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const DOCUMENTING_ORGANIZATION_IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA028); // (0040,A028)
/// MeasurementPrecisionDescriptionTrial (0040,A047) LO 1 DICOM/retired
#[rustfmt::skip]
pub const MEASUREMENT_PRECISION_DESCRIPTION_TRIAL: Tag = Tag(0x0040, 0xA047); // (0040,A047)
/// UrgencyOrPriorityAlertsTrial (0040,A057) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const URGENCY_OR_PRIORITY_ALERTS_TRIAL: Tag = Tag(0x0040, 0xA057); // (0040,A057)
/// SequencingIndicatorTrial (0040,A060) LO 1 DICOM/retired
#[rustfmt::skip]
pub const SEQUENCING_INDICATOR_TRIAL: Tag = Tag(0x0040, 0xA060); // (0040,A060)
/// DocumentIdentifierCodeSequenceTrial (0040,A066) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const DOCUMENT_IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA066); // (0040,A066)
/// DocumentAuthorTrial (0040,A067) PN 1 DICOM/retired
#[rustfmt::skip]
pub const DOCUMENT_AUTHOR_TRIAL: Tag = Tag(0x0040, 0xA067); // (0040,A067)
/// DocumentAuthorIdentifierCodeSequenceTrial (0040,A068) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const DOCUMENT_AUTHOR_IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA068); // (0040,A068)
/// IdentifierCodeSequenceTrial (0040,A070) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA070); // (0040,A070)
/// ObjectBinaryIdentifierTrial (0040,A074) OB 1 DICOM/retired
#[rustfmt::skip]
pub const OBJECT_BINARY_IDENTIFIER_TRIAL: Tag = Tag(0x0040, 0xA074); // (0040,A074)
/// DocumentingObserverIdentifierCodeSequenceTrial (0040,A076) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const DOCUMENTING_OBSERVER_IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA076); // (0040,A076)
/// ProcedureIdentifierCodeSequenceTrial (0040,A085) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PROCEDURE_IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA085); // (0040,A085)
/// ObjectDirectoryBinaryIdentifierTrial (0040,A089) OB 1 DICOM/retired
#[rustfmt::skip]
pub const OBJECT_DIRECTORY_BINARY_IDENTIFIER_TRIAL: Tag = Tag(0x0040, 0xA089); // (0040,A089)
/// EquivalentCDADocumentSequence (0040,A090) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const EQUIVALENT_CDA_DOCUMENT_SEQUENCE: Tag = Tag(0x0040, 0xA090); // (0040,A090)
/// DateOfDocumentOrVerbalTransactionTrial (0040,A110) DA 1 DICOM/retired
#[rustfmt::skip]
pub const DATE_OF_DOCUMENT_OR_VERBAL_TRANSACTION_TRIAL: Tag = Tag(0x0040, 0xA110); // (0040,A110)
/// TimeOfDocumentCreationOrVerbalTransactionTrial (0040,A112) TM 1 DICOM/retired
#[rustfmt::skip]
pub const TIME_OF_DOCUMENT_CREATION_OR_VERBAL_TRANSACTION_TRIAL: Tag = Tag(0x0040, 0xA112); // (0040,A112)
/// ReportStatusIDTrial (0040,A125) CS 2 DICOM/retired
#[rustfmt::skip]
pub const REPORT_STATUS_ID_TRIAL: Tag = Tag(0x0040, 0xA125); // (0040,A125)
/// ObservationCategoryCodeSequenceTrial (0040,A167) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_CATEGORY_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA167); // (0040,A167)
/// BibliographicCitationTrial (0040,A16A) ST 1 DICOM/retired
#[rustfmt::skip]
pub const BIBLIOGRAPHIC_CITATION_TRIAL: Tag = Tag(0x0040, 0xA16A); // (0040,A16A)
/// ReferencedObservationUIDTrial (0040,A172) UI 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_OBSERVATION_UID_TRIAL: Tag = Tag(0x0040, 0xA172); // (0040,A172)
/// ReferencedObservationClassTrial (0040,A173) CS 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_OBSERVATION_CLASS_TRIAL: Tag = Tag(0x0040, 0xA173); // (0040,A173)
/// ReferencedObjectObservationClassTrial (0040,A174) CS 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_OBJECT_OBSERVATION_CLASS_TRIAL: Tag = Tag(0x0040, 0xA174); // (0040,A174)
/// ObservationDateTrial (0040,A192) DA 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_DATE_TRIAL: Tag = Tag(0x0040, 0xA192); // (0040,A192)
/// ObservationTimeTrial (0040,A193) TM 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_TIME_TRIAL: Tag = Tag(0x0040, 0xA193); // (0040,A193)
/// MeasurementAutomationTrial (0040,A194) CS 1 DICOM/retired
#[rustfmt::skip]
pub const MEASUREMENT_AUTOMATION_TRIAL: Tag = Tag(0x0040, 0xA194); // (0040,A194)
/// IdentificationDescriptionTrial (0040,A224) ST 1 DICOM/retired
#[rustfmt::skip]
pub const IDENTIFICATION_DESCRIPTION_TRIAL: Tag = Tag(0x0040, 0xA224); // (0040,A224)
/// CoordinatesSetGeometricTypeTrial (0040,A290) CS 1 DICOM/retired
#[rustfmt::skip]
pub const COORDINATES_SET_GEOMETRIC_TYPE_TRIAL: Tag = Tag(0x0040, 0xA290); // (0040,A290)
/// AlgorithmCodeSequenceTrial (0040,A296) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ALGORITHM_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA296); // (0040,A296)
/// AlgorithmDescriptionTrial (0040,A297) ST 1 DICOM/retired
#[rustfmt::skip]
pub const ALGORITHM_DESCRIPTION_TRIAL: Tag = Tag(0x0040, 0xA297); // (0040,A297)
/// PixelCoordinatesSetTrial (0040,A29A) SL 2-2n DICOM/retired
#[rustfmt::skip]
pub const PIXEL_COORDINATES_SET_TRIAL: Tag = Tag(0x0040, 0xA29A); // (0040,A29A)
/// CurrentObserverTrial (0040,A307) PN 1 DICOM/retired
#[rustfmt::skip]
pub const CURRENT_OBSERVER_TRIAL: Tag = Tag(0x0040, 0xA307); // (0040,A307)
/// ReferencedAccessionSequenceTrial (0040,A313) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_ACCESSION_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA313); // (0040,A313)
/// ReportStatusCommentTrial (0040,A33A) ST 1 DICOM/retired
#[rustfmt::skip]
pub const REPORT_STATUS_COMMENT_TRIAL: Tag = Tag(0x0040, 0xA33A); // (0040,A33A)
/// ProcedureContextSequenceTrial (0040,A340) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PROCEDURE_CONTEXT_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA340); // (0040,A340)
/// VerbalSourceTrial (0040,A352) PN 1 DICOM/retired
#[rustfmt::skip]
pub const VERBAL_SOURCE_TRIAL: Tag = Tag(0x0040, 0xA352); // (0040,A352)
/// AddressTrial (0040,A353) ST 1 DICOM/retired
#[rustfmt::skip]
pub const ADDRESS_TRIAL: Tag = Tag(0x0040, 0xA353); // (0040,A353)
/// TelephoneNumberTrial (0040,A354) LO 1 DICOM/retired
#[rustfmt::skip]
pub const TELEPHONE_NUMBER_TRIAL: Tag = Tag(0x0040, 0xA354); // (0040,A354)
/// VerbalSourceIdentifierCodeSequenceTrial (0040,A358) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const VERBAL_SOURCE_IDENTIFIER_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA358); // (0040,A358)
/// ReportDetailSequenceTrial (0040,A380) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REPORT_DETAIL_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA380); // (0040,A380)
/// ObservationSubjectUIDTrial (0040,A402) UI 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_SUBJECT_UID_TRIAL: Tag = Tag(0x0040, 0xA402); // (0040,A402)
/// ObservationSubjectClassTrial (0040,A403) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_SUBJECT_CLASS_TRIAL: Tag = Tag(0x0040, 0xA403); // (0040,A403)
/// ObservationSubjectTypeCodeSequenceTrial (0040,A404) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_SUBJECT_TYPE_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA404); // (0040,A404)
/// ObservationSubjectContextFlagTrial (0040,A600) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVATION_SUBJECT_CONTEXT_FLAG_TRIAL: Tag = Tag(0x0040, 0xA600); // (0040,A600)
/// ObserverContextFlagTrial (0040,A601) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OBSERVER_CONTEXT_FLAG_TRIAL: Tag = Tag(0x0040, 0xA601); // (0040,A601)
/// ProcedureContextFlagTrial (0040,A603) CS 1 DICOM/retired
#[rustfmt::skip]
pub const PROCEDURE_CONTEXT_FLAG_TRIAL: Tag = Tag(0x0040, 0xA603); // (0040,A603)
/// RelationshipSequenceTrial (0040,A731) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const RELATIONSHIP_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA731); // (0040,A731)
/// RelationshipTypeCodeSequenceTrial (0040,A732) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const RELATIONSHIP_TYPE_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA732); // (0040,A732)
/// LanguageCodeSequenceTrial (0040,A744) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const LANGUAGE_CODE_SEQUENCE_TRIAL: Tag = Tag(0x0040, 0xA744); // (0040,A744)
/// UniformResourceLocatorTrial (0040,A992) ST 1 DICOM/retired
#[rustfmt::skip]
pub const UNIFORM_RESOURCE_LOCATOR_TRIAL: Tag = Tag(0x0040, 0xA992); // (0040,A992)
/// TemplateVersion (0040,DB06) DT 1 DICOM/retired
#[rustfmt::skip]
pub const TEMPLATE_VERSION: Tag = Tag(0x0040, 0xDB06); // (0040,DB06)
/// TemplateLocalVersion (0040,DB07) DT 1 DICOM/retired
#[rustfmt::skip]
pub const TEMPLATE_LOCAL_VERSION: Tag = Tag(0x0040, 0xDB07); // (0040,DB07)
/// TemplateExtensionFlag (0040,DB0B) CS 1 DICOM/retired
#[rustfmt::skip]
pub const TEMPLATE_EXTENSION_FLAG: Tag = Tag(0x0040, 0xDB0B); // (0040,DB0B)
/// TemplateExtensionOrganizationUID (0040,DB0C) UI 1 DICOM/retired
#[rustfmt::skip]
pub const TEMPLATE_EXTENSION_ORGANIZATION_UID: Tag = Tag(0x0040, 0xDB0C); // (0040,DB0C)
/// TemplateExtensionCreatorUID (0040,DB0D) UI 1 DICOM/retired
#[rustfmt::skip]
pub const TEMPLATE_EXTENSION_CREATOR_UID: Tag = Tag(0x0040, 0xDB0D); // (0040,DB0D)
/// CountsIncluded (0054,1400) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const COUNTS_INCLUDED: Tag = Tag(0x0054, 0x1400); // (0054,1400)
/// DeadTimeCorrectionFlag (0054,1401) CS 1 DICOM/retired
#[rustfmt::skip]
pub const DEAD_TIME_CORRECTION_FLAG: Tag = Tag(0x0054, 0x1401); // (0054,1401)
/// TrianglePointIndexList (0066,0023) OW 1 DICOM/retired
#[rustfmt::skip]
pub const TRIANGLE_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0023); // (0066,0023)
/// EdgePointIndexList (0066,0024) OW 1 DICOM/retired
#[rustfmt::skip]
pub const EDGE_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0024); // (0066,0024)
/// VertexPointIndexList (0066,0025) OW 1 DICOM/retired
#[rustfmt::skip]
pub const VERTEX_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0025); // (0066,0025)
/// PrimitivePointIndexList (0066,0029) OW 1 DICOM/retired
#[rustfmt::skip]
pub const PRIMITIVE_POINT_INDEX_LIST: Tag = Tag(0x0066, 0x0029); // (0066,0029)
/// ImageRotationRetired (0070,0040) IS 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_ROTATION_RETIRED: Tag = Tag(0x0070, 0x0040); // (0070,0040)
/// DisplayedAreaTopLeftHandCornerTrial (0070,0050) US 2 DICOM/retired
#[rustfmt::skip]
pub const DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL: Tag = Tag(0x0070, 0x0050); // (0070,0050)
/// DisplayedAreaBottomRightHandCornerTrial (0070,0051) US 2 DICOM/retired
#[rustfmt::skip]
pub const DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL: Tag = Tag(0x0070, 0x0051); // (0070,0051)
/// GraphicLayerRecommendedDisplayRGBValue (0070,0067) US 3 DICOM/retired
#[rustfmt::skip]
pub const GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGB_VALUE: Tag = Tag(0x0070, 0x0067); // (0070,0067)
/// CompositingMethod (0070,1206) CS 1 DICOM/retired
#[rustfmt::skip]
pub const COMPOSITING_METHOD: Tag = Tag(0x0070, 0x1206); // (0070,1206)
/// BeamOrderIndexTrial (0074,1024) IS 1 DICOM/retired
#[rustfmt::skip]
pub const BEAM_ORDER_INDEX_TRIAL: Tag = Tag(0x0074, 0x1024); // (0074,1024)
/// DoubleExposureMetersetTrial (0074,1038) DS 1 DICOM/retired
#[rustfmt::skip]
pub const DOUBLE_EXPOSURE_METERSET_TRIAL: Tag = Tag(0x0074, 0x1038); // (0074,1038)
/// DoubleExposureFieldDeltaTrial (0074,103A) DS 4 DICOM/retired
#[rustfmt::skip]
pub const DOUBLE_EXPOSURE_FIELD_DELTA_TRIAL: Tag = Tag(0x0074, 0x103A); // (0074,103A)
/// RelatedProcedureStepSequence (0074,1220) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const RELATED_PROCEDURE_STEP_SEQUENCE: Tag = Tag(0x0074, 0x1220); // (0074,1220)
/// ProcedureStepRelationshipType (0074,1222) LO 1 DICOM/retired
#[rustfmt::skip]
pub const PROCEDURE_STEP_RELATIONSHIP_TYPE: Tag = Tag(0x0074, 0x1222); // (0074,1222)
/// TopicTitle (0088,0904) LO 1 DICOM/retired
#[rustfmt::skip]
pub const TOPIC_TITLE: Tag = Tag(0x0088, 0x0904); // (0088,0904)
/// TopicSubject (0088,0906) ST 1 DICOM/retired
#[rustfmt::skip]
pub const TOPIC_SUBJECT: Tag = Tag(0x0088, 0x0906); // (0088,0906)
/// TopicAuthor (0088,0910) LO 1 DICOM/retired
#[rustfmt::skip]
pub const TOPIC_AUTHOR: Tag = Tag(0x0088, 0x0910); // (0088,0910)
/// TopicKeywords (0088,0912) LO 1-32 DICOM/retired
#[rustfmt::skip]
pub const TOPIC_KEYWORDS: Tag = Tag(0x0088, 0x0912); // (0088,0912)
/// ColorImagePrintingFlag (2000,0062) CS 1 DICOM/retired
#[rustfmt::skip]
pub const COLOR_IMAGE_PRINTING_FLAG: Tag = Tag(0x2000, 0x0062); // (2000,0062)
/// CollationFlag (2000,0063) CS 1 DICOM/retired
#[rustfmt::skip]
pub const COLLATION_FLAG: Tag = Tag(0x2000, 0x0063); // (2000,0063)
/// AnnotationFlag (2000,0065) CS 1 DICOM/retired
#[rustfmt::skip]
pub const ANNOTATION_FLAG: Tag = Tag(0x2000, 0x0065); // (2000,0065)
/// ImageOverlayFlag (2000,0067) CS 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_OVERLAY_FLAG: Tag = Tag(0x2000, 0x0067); // (2000,0067)
/// PresentationLUTFlag (2000,0069) CS 1 DICOM/retired
#[rustfmt::skip]
pub const PRESENTATION_LUT_FLAG: Tag = Tag(0x2000, 0x0069); // (2000,0069)
/// ImageBoxPresentationLUTFlag (2000,006A) CS 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_BOX_PRESENTATION_LUT_FLAG: Tag = Tag(0x2000, 0x006A); // (2000,006A)
/// ReferencedStoredPrintSequence (2000,0510) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_STORED_PRINT_SEQUENCE: Tag = Tag(0x2000, 0x0510); // (2000,0510)
/// ReferencedImageOverlayBoxSequence (2020,0130) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE: Tag = Tag(0x2020, 0x0130); // (2020,0130)
/// ReferencedVOILUTBoxSequence (2020,0140) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_VOILUT_BOX_SEQUENCE: Tag = Tag(0x2020, 0x0140); // (2020,0140)
/// ReferencedOverlayPlaneSequence (2040,0010) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_OVERLAY_PLANE_SEQUENCE: Tag = Tag(0x2040, 0x0010); // (2040,0010)
/// ReferencedOverlayPlaneGroups (2040,0011) US 1-99 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_OVERLAY_PLANE_GROUPS: Tag = Tag(0x2040, 0x0011); // (2040,0011)
/// OverlayPixelDataSequence (2040,0020) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_PIXEL_DATA_SEQUENCE: Tag = Tag(0x2040, 0x0020); // (2040,0020)
/// OverlayMagnificationType (2040,0060) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_MAGNIFICATION_TYPE: Tag = Tag(0x2040, 0x0060); // (2040,0060)
/// OverlaySmoothingType (2040,0070) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_SMOOTHING_TYPE: Tag = Tag(0x2040, 0x0070); // (2040,0070)
/// OverlayOrImageMagnification (2040,0072) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_OR_IMAGE_MAGNIFICATION: Tag = Tag(0x2040, 0x0072); // (2040,0072)
/// MagnifyToNumberOfColumns (2040,0074) US 1 DICOM/retired
#[rustfmt::skip]
pub const MAGNIFY_TO_NUMBER_OF_COLUMNS: Tag = Tag(0x2040, 0x0074); // (2040,0074)
/// OverlayForegroundDensity (2040,0080) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_FOREGROUND_DENSITY: Tag = Tag(0x2040, 0x0080); // (2040,0080)
/// OverlayBackgroundDensity (2040,0082) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_BACKGROUND_DENSITY: Tag = Tag(0x2040, 0x0082); // (2040,0082)
/// OverlayMode (2040,0090) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_MODE: Tag = Tag(0x2040, 0x0090); // (2040,0090)
/// ThresholdDensity (2040,0100) CS 1 DICOM/retired
#[rustfmt::skip]
pub const THRESHOLD_DENSITY: Tag = Tag(0x2040, 0x0100); // (2040,0100)
/// ReferencedImageBoxSequenceRetired (2040,0500) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED: Tag = Tag(0x2040, 0x0500); // (2040,0500)
/// PrintJobID (2100,0010) SH 1 DICOM/retired
#[rustfmt::skip]
pub const PRINT_JOB_ID: Tag = Tag(0x2100, 0x0010); // (2100,0010)
/// ReferencedPrintJobSequencePullStoredPrint (2100,0500) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT: Tag = Tag(0x2100, 0x0500); // (2100,0500)
/// PrintQueueID (2110,0099) SH 1 DICOM/retired
#[rustfmt::skip]
pub const PRINT_QUEUE_ID: Tag = Tag(0x2110, 0x0099); // (2110,0099)
/// QueueStatus (2120,0010) CS 1 DICOM/retired
#[rustfmt::skip]
pub const QUEUE_STATUS: Tag = Tag(0x2120, 0x0010); // (2120,0010)
/// PrintJobDescriptionSequence (2120,0050) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PRINT_JOB_DESCRIPTION_SEQUENCE: Tag = Tag(0x2120, 0x0050); // (2120,0050)
/// ReferencedPrintJobSequence (2120,0070) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_PRINT_JOB_SEQUENCE: Tag = Tag(0x2120, 0x0070); // (2120,0070)
/// PrintManagementCapabilitiesSequence (2130,0010) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE: Tag = Tag(0x2130, 0x0010); // (2130,0010)
/// PrinterCharacteristicsSequence (2130,0015) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PRINTER_CHARACTERISTICS_SEQUENCE: Tag = Tag(0x2130, 0x0015); // (2130,0015)
/// FilmBoxContentSequence (2130,0030) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const FILM_BOX_CONTENT_SEQUENCE: Tag = Tag(0x2130, 0x0030); // (2130,0030)
/// ImageBoxContentSequence (2130,0040) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_BOX_CONTENT_SEQUENCE: Tag = Tag(0x2130, 0x0040); // (2130,0040)
/// AnnotationContentSequence (2130,0050) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ANNOTATION_CONTENT_SEQUENCE: Tag = Tag(0x2130, 0x0050); // (2130,0050)
/// ImageOverlayBoxContentSequence (2130,0060) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE: Tag = Tag(0x2130, 0x0060); // (2130,0060)
/// PresentationLUTContentSequence (2130,0080) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PRESENTATION_LUT_CONTENT_SEQUENCE: Tag = Tag(0x2130, 0x0080); // (2130,0080)
/// ProposedStudySequence (2130,00A0) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const PROPOSED_STUDY_SEQUENCE: Tag = Tag(0x2130, 0x00A0); // (2130,00A0)
/// OriginalImageSequence (2130,00C0) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ORIGINAL_IMAGE_SEQUENCE: Tag = Tag(0x2130, 0x00C0); // (2130,00C0)
/// AdditionalRTROIIdentificationCodeSequence (3006,00B9) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const ADDITIONAL_RTROI_IDENTIFICATION_CODE_SEQUENCE: Tag = Tag(0x3006, 0x00B9); // (3006,00B9)
/// FrameOfReferenceRelationshipSequence (3006,00C0) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE: Tag = Tag(0x3006, 0x00C0); // (3006,00C0)
/// RelatedFrameOfReferenceUID (3006,00C2) UI 1 DICOM/retired
#[rustfmt::skip]
pub const RELATED_FRAME_OF_REFERENCE_UID: Tag = Tag(0x3006, 0x00C2); // (3006,00C2)
/// FrameOfReferenceTransformationType (3006,00C4) CS 1 DICOM/retired
#[rustfmt::skip]
pub const FRAME_OF_REFERENCE_TRANSFORMATION_TYPE: Tag = Tag(0x3006, 0x00C4); // (3006,00C4)
/// AverageBeamDosePointDepth (300A,008D) FL 1 DICOM/retired
#[rustfmt::skip]
pub const AVERAGE_BEAM_DOSE_POINT_DEPTH: Tag = Tag(0x300A, 0x008D); // (300A,008D)
/// AverageBeamDosePointEquivalentDepth (300A,008E) FL 1 DICOM/retired
#[rustfmt::skip]
pub const AVERAGE_BEAM_DOSE_POINT_EQUIVALENT_DEPTH: Tag = Tag(0x300A, 0x008E); // (300A,008E)
/// AverageBeamDosePointSSD (300A,008F) FL 1 DICOM/retired
#[rustfmt::skip]
pub const AVERAGE_BEAM_DOSE_POINT_SSD: Tag = Tag(0x300A, 0x008F); // (300A,008F)
/// Arbitrary (4000,0010) LT 1 DICOM/retired
#[rustfmt::skip]
pub const ARBITRARY: Tag = Tag(0x4000, 0x0010); // (4000,0010)
/// TextComments (4000,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const TEXT_COMMENTS: Tag = Tag(0x4000, 0x4000); // (4000,4000)
/// ResultsID (4008,0040) SH 1 DICOM/retired
#[rustfmt::skip]
pub const RESULTS_ID: Tag = Tag(0x4008, 0x0040); // (4008,0040)
/// ResultsIDIssuer (4008,0042) LO 1 DICOM/retired
#[rustfmt::skip]
pub const RESULTS_ID_ISSUER: Tag = Tag(0x4008, 0x0042); // (4008,0042)
/// ReferencedInterpretationSequence (4008,0050) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCED_INTERPRETATION_SEQUENCE: Tag = Tag(0x4008, 0x0050); // (4008,0050)
/// ReportProductionStatusTrial (4008,00FF) CS 1 DICOM/retired
#[rustfmt::skip]
pub const REPORT_PRODUCTION_STATUS_TRIAL: Tag = Tag(0x4008, 0x00FF); // (4008,00FF)
/// InterpretationRecordedDate (4008,0100) DA 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_RECORDED_DATE: Tag = Tag(0x4008, 0x0100); // (4008,0100)
/// InterpretationRecordedTime (4008,0101) TM 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_RECORDED_TIME: Tag = Tag(0x4008, 0x0101); // (4008,0101)
/// InterpretationRecorder (4008,0102) PN 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_RECORDER: Tag = Tag(0x4008, 0x0102); // (4008,0102)
/// ReferenceToRecordedSound (4008,0103) LO 1 DICOM/retired
#[rustfmt::skip]
pub const REFERENCE_TO_RECORDED_SOUND: Tag = Tag(0x4008, 0x0103); // (4008,0103)
/// InterpretationTranscriptionDate (4008,0108) DA 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_TRANSCRIPTION_DATE: Tag = Tag(0x4008, 0x0108); // (4008,0108)
/// InterpretationTranscriptionTime (4008,0109) TM 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_TRANSCRIPTION_TIME: Tag = Tag(0x4008, 0x0109); // (4008,0109)
/// InterpretationTranscriber (4008,010A) PN 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_TRANSCRIBER: Tag = Tag(0x4008, 0x010A); // (4008,010A)
/// InterpretationText (4008,010B) ST 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_TEXT: Tag = Tag(0x4008, 0x010B); // (4008,010B)
/// InterpretationAuthor (4008,010C) PN 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_AUTHOR: Tag = Tag(0x4008, 0x010C); // (4008,010C)
/// InterpretationApproverSequence (4008,0111) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_APPROVER_SEQUENCE: Tag = Tag(0x4008, 0x0111); // (4008,0111)
/// InterpretationApprovalDate (4008,0112) DA 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_APPROVAL_DATE: Tag = Tag(0x4008, 0x0112); // (4008,0112)
/// InterpretationApprovalTime (4008,0113) TM 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_APPROVAL_TIME: Tag = Tag(0x4008, 0x0113); // (4008,0113)
/// PhysicianApprovingInterpretation (4008,0114) PN 1 DICOM/retired
#[rustfmt::skip]
pub const PHYSICIAN_APPROVING_INTERPRETATION: Tag = Tag(0x4008, 0x0114); // (4008,0114)
/// InterpretationDiagnosisDescription (4008,0115) LT 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_DIAGNOSIS_DESCRIPTION: Tag = Tag(0x4008, 0x0115); // (4008,0115)
/// InterpretationDiagnosisCodeSequence (4008,0117) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE: Tag = Tag(0x4008, 0x0117); // (4008,0117)
/// ResultsDistributionListSequence (4008,0118) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const RESULTS_DISTRIBUTION_LIST_SEQUENCE: Tag = Tag(0x4008, 0x0118); // (4008,0118)
/// DistributionName (4008,0119) PN 1 DICOM/retired
#[rustfmt::skip]
pub const DISTRIBUTION_NAME: Tag = Tag(0x4008, 0x0119); // (4008,0119)
/// DistributionAddress (4008,011A) LO 1 DICOM/retired
#[rustfmt::skip]
pub const DISTRIBUTION_ADDRESS: Tag = Tag(0x4008, 0x011A); // (4008,011A)
/// InterpretationID (4008,0200) SH 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_ID: Tag = Tag(0x4008, 0x0200); // (4008,0200)
/// InterpretationIDIssuer (4008,0202) LO 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_ID_ISSUER: Tag = Tag(0x4008, 0x0202); // (4008,0202)
/// InterpretationTypeID (4008,0210) CS 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_TYPE_ID: Tag = Tag(0x4008, 0x0210); // (4008,0210)
/// InterpretationStatusID (4008,0212) CS 1 DICOM/retired
#[rustfmt::skip]
pub const INTERPRETATION_STATUS_ID: Tag = Tag(0x4008, 0x0212); // (4008,0212)
/// Impressions (4008,0300) ST 1 DICOM/retired
#[rustfmt::skip]
pub const IMPRESSIONS: Tag = Tag(0x4008, 0x0300); // (4008,0300)
/// ResultsComments (4008,4000) ST 1 DICOM/retired
#[rustfmt::skip]
pub const RESULTS_COMMENTS: Tag = Tag(0x4008, 0x4000); // (4008,4000)
/// CurveDimensions (5000-50FF,0005) US 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_DIMENSIONS: TagRange = Group100(Tag(0x5000, 0x0005)); // (5000-50FF,0005)
/// NumberOfPoints (5000-50FF,0010) US 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_POINTS: TagRange = Group100(Tag(0x5000, 0x0010)); // (5000-50FF,0010)
/// TypeOfData (5000-50FF,0020) CS 1 DICOM/retired
#[rustfmt::skip]
pub const TYPE_OF_DATA: TagRange = Group100(Tag(0x5000, 0x0020)); // (5000-50FF,0020)
/// CurveDescription (5000-50FF,0022) LO 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_DESCRIPTION: TagRange = Group100(Tag(0x5000, 0x0022)); // (5000-50FF,0022)
/// AxisUnits (5000-50FF,0030) SH 1-n DICOM/retired
#[rustfmt::skip]
pub const AXIS_UNITS: TagRange = Group100(Tag(0x5000, 0x0030)); // (5000-50FF,0030)
/// AxisLabels (5000-50FF,0040) SH 1-n DICOM/retired
#[rustfmt::skip]
pub const AXIS_LABELS: TagRange = Group100(Tag(0x5000, 0x0040)); // (5000-50FF,0040)
/// DataValueRepresentation (5000-50FF,0103) US 1 DICOM/retired
#[rustfmt::skip]
pub const DATA_VALUE_REPRESENTATION: TagRange = Group100(Tag(0x5000, 0x0103)); // (5000-50FF,0103)
/// MinimumCoordinateValue (5000-50FF,0104) US 1-n DICOM/retired
#[rustfmt::skip]
pub const MINIMUM_COORDINATE_VALUE: TagRange = Group100(Tag(0x5000, 0x0104)); // (5000-50FF,0104)
/// MaximumCoordinateValue (5000-50FF,0105) US 1-n DICOM/retired
#[rustfmt::skip]
pub const MAXIMUM_COORDINATE_VALUE: TagRange = Group100(Tag(0x5000, 0x0105)); // (5000-50FF,0105)
/// CurveRange (5000-50FF,0106) SH 1-n DICOM/retired
#[rustfmt::skip]
pub const CURVE_RANGE: TagRange = Group100(Tag(0x5000, 0x0106)); // (5000-50FF,0106)
/// CurveDataDescriptor (5000-50FF,0110) US 1-n DICOM/retired
#[rustfmt::skip]
pub const CURVE_DATA_DESCRIPTOR: TagRange = Group100(Tag(0x5000, 0x0110)); // (5000-50FF,0110)
/// CoordinateStartValue (5000-50FF,0112) US 1-n DICOM/retired
#[rustfmt::skip]
pub const COORDINATE_START_VALUE: TagRange = Group100(Tag(0x5000, 0x0112)); // (5000-50FF,0112)
/// CoordinateStepValue (5000-50FF,0114) US 1-n DICOM/retired
#[rustfmt::skip]
pub const COORDINATE_STEP_VALUE: TagRange = Group100(Tag(0x5000, 0x0114)); // (5000-50FF,0114)
/// CurveActivationLayer (5000-50FF,1001) CS 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_ACTIVATION_LAYER: TagRange = Group100(Tag(0x5000, 0x1001)); // (5000-50FF,1001)
/// AudioType (5000-50FF,2000) US 1 DICOM/retired
#[rustfmt::skip]
pub const AUDIO_TYPE: TagRange = Group100(Tag(0x5000, 0x2000)); // (5000-50FF,2000)
/// AudioSampleFormat (5000-50FF,2002) US 1 DICOM/retired
#[rustfmt::skip]
pub const AUDIO_SAMPLE_FORMAT: TagRange = Group100(Tag(0x5000, 0x2002)); // (5000-50FF,2002)
/// NumberOfChannels (5000-50FF,2004) US 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_CHANNELS: TagRange = Group100(Tag(0x5000, 0x2004)); // (5000-50FF,2004)
/// NumberOfSamples (5000-50FF,2006) UL 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_SAMPLES: TagRange = Group100(Tag(0x5000, 0x2006)); // (5000-50FF,2006)
/// SampleRate (5000-50FF,2008) UL 1 DICOM/retired
#[rustfmt::skip]
pub const SAMPLE_RATE: TagRange = Group100(Tag(0x5000, 0x2008)); // (5000-50FF,2008)
/// TotalTime (5000-50FF,200A) UL 1 DICOM/retired
#[rustfmt::skip]
pub const TOTAL_TIME: TagRange = Group100(Tag(0x5000, 0x200A)); // (5000-50FF,200A)
/// AudioSampleData (5000-50FF,200C) OB 1 DICOM/retired
#[rustfmt::skip]
pub const AUDIO_SAMPLE_DATA: TagRange = Group100(Tag(0x5000, 0x200C)); // (5000-50FF,200C)
/// AudioComments (5000-50FF,200E) LT 1 DICOM/retired
#[rustfmt::skip]
pub const AUDIO_COMMENTS: TagRange = Group100(Tag(0x5000, 0x200E)); // (5000-50FF,200E)
/// CurveLabel (5000-50FF,2500) LO 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_LABEL: TagRange = Group100(Tag(0x5000, 0x2500)); // (5000-50FF,2500)
/// CurveReferencedOverlaySequence (5000-50FF,2600) SQ 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_REFERENCED_OVERLAY_SEQUENCE: TagRange = Group100(Tag(0x5000, 0x2600)); // (5000-50FF,2600)
/// CurveReferencedOverlayGroup (5000-50FF,2610) US 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_REFERENCED_OVERLAY_GROUP: TagRange = Group100(Tag(0x5000, 0x2610)); // (5000-50FF,2610)
/// CurveData (5000-50FF,3000) OB 1 DICOM/retired
#[rustfmt::skip]
pub const CURVE_DATA: TagRange = Group100(Tag(0x5000, 0x3000)); // (5000-50FF,3000)
/// OverlayPlanes (6000-60FF,0012) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_PLANES: TagRange = Group100(Tag(0x6000, 0x0012)); // (6000-60FF,0012)
/// OverlayPlaneOrigin (6000-60FF,0052) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_PLANE_ORIGIN: TagRange = Group100(Tag(0x6000, 0x0052)); // (6000-60FF,0052)
/// OverlayCompressionCode (6000-60FF,0060) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_COMPRESSION_CODE: TagRange = Group100(Tag(0x6000, 0x0060)); // (6000-60FF,0060)
/// OverlayCompressionOriginator (6000-60FF,0061) SH 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_COMPRESSION_ORIGINATOR: TagRange = Group100(Tag(0x6000, 0x0061)); // (6000-60FF,0061)
/// OverlayCompressionLabel (6000-60FF,0062) SH 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_COMPRESSION_LABEL: TagRange = Group100(Tag(0x6000, 0x0062)); // (6000-60FF,0062)
/// OverlayCompressionDescription (6000-60FF,0063) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_COMPRESSION_DESCRIPTION: TagRange = Group100(Tag(0x6000, 0x0063)); // (6000-60FF,0063)
/// OverlayCompressionStepPointers (6000-60FF,0066) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_COMPRESSION_STEP_POINTERS: TagRange = Group100(Tag(0x6000, 0x0066)); // (6000-60FF,0066)
/// OverlayRepeatInterval (6000-60FF,0068) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_REPEAT_INTERVAL: TagRange = Group100(Tag(0x6000, 0x0068)); // (6000-60FF,0068)
/// OverlayBitsGrouped (6000-60FF,0069) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_BITS_GROUPED: TagRange = Group100(Tag(0x6000, 0x0069)); // (6000-60FF,0069)
/// OverlayFormat (6000-60FF,0110) CS 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_FORMAT: TagRange = Group100(Tag(0x6000, 0x0110)); // (6000-60FF,0110)
/// OverlayLocation (6000-60FF,0200) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_LOCATION: TagRange = Group100(Tag(0x6000, 0x0200)); // (6000-60FF,0200)
/// OverlayCodeLabel (6000-60FF,0800) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_CODE_LABEL: TagRange = Group100(Tag(0x6000, 0x0800)); // (6000-60FF,0800)
/// OverlayNumberOfTables (6000-60FF,0802) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_NUMBER_OF_TABLES: TagRange = Group100(Tag(0x6000, 0x0802)); // (6000-60FF,0802)
/// OverlayCodeTableLocation (6000-60FF,0803) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_CODE_TABLE_LOCATION: TagRange = Group100(Tag(0x6000, 0x0803)); // (6000-60FF,0803)
/// OverlayBitsForCodeWord (6000-60FF,0804) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_BITS_FOR_CODE_WORD: TagRange = Group100(Tag(0x6000, 0x0804)); // (6000-60FF,0804)
/// OverlayDescriptorGray (6000-60FF,1100) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_DESCRIPTOR_GRAY: TagRange = Group100(Tag(0x6000, 0x1100)); // (6000-60FF,1100)
/// OverlayDescriptorRed (6000-60FF,1101) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_DESCRIPTOR_RED: TagRange = Group100(Tag(0x6000, 0x1101)); // (6000-60FF,1101)
/// OverlayDescriptorGreen (6000-60FF,1102) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_DESCRIPTOR_GREEN: TagRange = Group100(Tag(0x6000, 0x1102)); // (6000-60FF,1102)
/// OverlayDescriptorBlue (6000-60FF,1103) US 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_DESCRIPTOR_BLUE: TagRange = Group100(Tag(0x6000, 0x1103)); // (6000-60FF,1103)
/// OverlaysGray (6000-60FF,1200) US 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAYS_GRAY: TagRange = Group100(Tag(0x6000, 0x1200)); // (6000-60FF,1200)
/// OverlaysRed (6000-60FF,1201) US 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAYS_RED: TagRange = Group100(Tag(0x6000, 0x1201)); // (6000-60FF,1201)
/// OverlaysGreen (6000-60FF,1202) US 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAYS_GREEN: TagRange = Group100(Tag(0x6000, 0x1202)); // (6000-60FF,1202)
/// OverlaysBlue (6000-60FF,1203) US 1-n DICOM/retired
#[rustfmt::skip]
pub const OVERLAYS_BLUE: TagRange = Group100(Tag(0x6000, 0x1203)); // (6000-60FF,1203)
/// OverlayComments (6000-60FF,4000) LT 1 DICOM/retired
#[rustfmt::skip]
pub const OVERLAY_COMMENTS: TagRange = Group100(Tag(0x6000, 0x4000)); // (6000-60FF,4000)
/// CoefficientsSDVN (7FE0,0020) OW 1 DICOM/retired
#[rustfmt::skip]
pub const COEFFICIENTS_SDVN: Tag = Tag(0x7FE0, 0x0020); // (7FE0,0020)
/// CoefficientsSDHN (7FE0,0030) OW 1 DICOM/retired
#[rustfmt::skip]
pub const COEFFICIENTS_SDHN: Tag = Tag(0x7FE0, 0x0030); // (7FE0,0030)
/// CoefficientsSDDN (7FE0,0040) OW 1 DICOM/retired
#[rustfmt::skip]
pub const COEFFICIENTS_SDDN: Tag = Tag(0x7FE0, 0x0040); // (7FE0,0040)
/// VariablePixelData (7F00-7FFF,0010) OB 1 DICOM/retired
#[rustfmt::skip]
pub const VARIABLE_PIXEL_DATA: TagRange = Group100(Tag(0x7F00, 0x0010)); // (7F00-7FFF,0010)
/// VariableNextDataGroup (7F00-7FFF,0011) US 1 DICOM/retired
#[rustfmt::skip]
pub const VARIABLE_NEXT_DATA_GROUP: TagRange = Group100(Tag(0x7F00, 0x0011)); // (7F00-7FFF,0011)
/// VariableCoefficientsSDVN (7F00-7FFF,0020) OW 1 DICOM/retired
#[rustfmt::skip]
pub const VARIABLE_COEFFICIENTS_SDVN: TagRange = Group100(Tag(0x7F00, 0x0020)); // (7F00-7FFF,0020)
/// VariableCoefficientsSDHN (7F00-7FFF,0030) OW 1 DICOM/retired
#[rustfmt::skip]
pub const VARIABLE_COEFFICIENTS_SDHN: TagRange = Group100(Tag(0x7F00, 0x0030)); // (7F00-7FFF,0030)
/// VariableCoefficientsSDDN (7F00-7FFF,0040) OW 1 DICOM/retired
#[rustfmt::skip]
pub const VARIABLE_COEFFICIENTS_SDDN: TagRange = Group100(Tag(0x7F00, 0x0040)); // (7F00-7FFF,0040)
/// RowsForNthOrderCoefficients (0028,0410) US 1 DICOM/retired
#[rustfmt::skip]
pub const ROWS_FOR_NTH_ORDER_COEFFICIENTS: Tag = Tag(0x0028, 0x0410); // (0028,0410)
/// ColumnsForNthOrderCoefficients (0028,0411) US 1 DICOM/retired
#[rustfmt::skip]
pub const COLUMNS_FOR_NTH_ORDER_COEFFICIENTS: Tag = Tag(0x0028, 0x0411); // (0028,0411)
/// CoefficientCoding (0028,0412) LO 1-n DICOM/retired
#[rustfmt::skip]
pub const COEFFICIENT_CODING: Tag = Tag(0x0028, 0x0412); // (0028,0412)
/// CoefficientCodingPointers (0028,0413) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const COEFFICIENT_CODING_POINTERS: Tag = Tag(0x0028, 0x0413); // (0028,0413)
/// CodeLabel (0028,0800) CS 1-n DICOM/retired
#[rustfmt::skip]
pub const CODE_LABEL: Tag = Tag(0x0028, 0x0800); // (0028,0800)
/// NumberOfTables (0028,0802) US 1 DICOM/retired
#[rustfmt::skip]
pub const NUMBER_OF_TABLES: Tag = Tag(0x0028, 0x0802); // (0028,0802)
/// CodeTableLocation (0028,0803) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const CODE_TABLE_LOCATION: Tag = Tag(0x0028, 0x0803); // (0028,0803)
/// BitsForCodeWord (0028,0804) US 1 DICOM/retired
#[rustfmt::skip]
pub const BITS_FOR_CODE_WORD: Tag = Tag(0x0028, 0x0804); // (0028,0804)
/// ImageDataLocation (0028,0808) AT 1-n DICOM/retired
#[rustfmt::skip]
pub const IMAGE_DATA_LOCATION: Tag = Tag(0x0028, 0x0808); // (0028,0808)
/// EscapeTriplet (1000,0010) US 3 DICOM/retired
#[rustfmt::skip]
pub const ESCAPE_TRIPLET: Tag = Tag(0x1000, 0x0010); // (1000,0010)
/// RunLengthTriplet (1000,0011) US 3 DICOM/retired
#[rustfmt::skip]
pub const RUN_LENGTH_TRIPLET: Tag = Tag(0x1000, 0x0011); // (1000,0011)
/// HuffmanTableSize (1000,0012) US 1 DICOM/retired
#[rustfmt::skip]
pub const HUFFMAN_TABLE_SIZE: Tag = Tag(0x1000, 0x0012); // (1000,0012)
/// HuffmanTableTriplet (1000,0013) US 3 DICOM/retired
#[rustfmt::skip]
pub const HUFFMAN_TABLE_TRIPLET: Tag = Tag(0x1000, 0x0013); // (1000,0013)
/// ShiftTableSize (1000,0014) US 1 DICOM/retired
#[rustfmt::skip]
pub const SHIFT_TABLE_SIZE: Tag = Tag(0x1000, 0x0014); // (1000,0014)
/// ShiftTableTriplet (1000,0015) US 3 DICOM/retired
#[rustfmt::skip]
pub const SHIFT_TABLE_TRIPLET: Tag = Tag(0x1000, 0x0015); // (1000,0015)
/// ZonalMap (1010,0004) US 1-n DICOM/retired
#[rustfmt::skip]
pub const ZONAL_MAP: Tag = Tag(0x1010, 0x0004); // (1010,0004)


type E = DictionaryEntryRef<'static>;

#[rustfmt::skip]
pub(crate) const ENTRIES: &[E] = &[
    E { tag: Single(COMMAND_GROUP_LENGTH), alias: "CommandGroupLength", vr: UL }, // DICOM
    E { tag: Single(AFFECTED_SOP_CLASS_UID), alias: "AffectedSOPClassUID", vr: UI }, // DICOM
    E { tag: Single(REQUESTED_SOP_CLASS_UID), alias: "RequestedSOPClassUID", vr: UI }, // DICOM
    E { tag: Single(COMMAND_FIELD), alias: "CommandField", vr: US }, // DICOM
    E { tag: Single(MESSAGE_ID), alias: "MessageID", vr: US }, // DICOM
    E { tag: Single(MESSAGE_ID_BEING_RESPONDED_TO), alias: "MessageIDBeingRespondedTo", vr: US }, // DICOM
    E { tag: Single(MOVE_DESTINATION), alias: "MoveDestination", vr: AE }, // DICOM
    E { tag: Single(PRIORITY), alias: "Priority", vr: US }, // DICOM
    E { tag: Single(COMMAND_DATA_SET_TYPE), alias: "CommandDataSetType", vr: US }, // DICOM
    E { tag: Single(STATUS), alias: "Status", vr: US }, // DICOM
    E { tag: Single(OFFENDING_ELEMENT), alias: "OffendingElement", vr: AT }, // DICOM
    E { tag: Single(ERROR_COMMENT), alias: "ErrorComment", vr: LO }, // DICOM
    E { tag: Single(ERROR_ID), alias: "ErrorID", vr: US }, // DICOM
    E { tag: Single(AFFECTED_SOP_INSTANCE_UID), alias: "AffectedSOPInstanceUID", vr: UI }, // DICOM
    E { tag: Single(REQUESTED_SOP_INSTANCE_UID), alias: "RequestedSOPInstanceUID", vr: UI }, // DICOM
    E { tag: Single(EVENT_TYPE_ID), alias: "EventTypeID", vr: US }, // DICOM
    E { tag: Single(ATTRIBUTE_IDENTIFIER_LIST), alias: "AttributeIdentifierList", vr: AT }, // DICOM
    E { tag: Single(ACTION_TYPE_ID), alias: "ActionTypeID", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_REMAINING_SUBOPERATIONS), alias: "NumberOfRemainingSuboperations", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_COMPLETED_SUBOPERATIONS), alias: "NumberOfCompletedSuboperations", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_FAILED_SUBOPERATIONS), alias: "NumberOfFailedSuboperations", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_WARNING_SUBOPERATIONS), alias: "NumberOfWarningSuboperations", vr: US }, // DICOM
    E { tag: Single(MOVE_ORIGINATOR_APPLICATION_ENTITY_TITLE), alias: "MoveOriginatorApplicationEntityTitle", vr: AE }, // DICOM
    E { tag: Single(MOVE_ORIGINATOR_MESSAGE_ID), alias: "MoveOriginatorMessageID", vr: US }, // DICOM
    E { tag: Single(FILE_META_INFORMATION_GROUP_LENGTH), alias: "FileMetaInformationGroupLength", vr: UL }, // DICOM
    E { tag: Single(FILE_META_INFORMATION_VERSION), alias: "FileMetaInformationVersion", vr: OB }, // DICOM
    E { tag: Single(MEDIA_STORAGE_SOP_CLASS_UID), alias: "MediaStorageSOPClassUID", vr: UI }, // DICOM
    E { tag: Single(MEDIA_STORAGE_SOP_INSTANCE_UID), alias: "MediaStorageSOPInstanceUID", vr: UI }, // DICOM
    E { tag: Single(TRANSFER_SYNTAX_UID), alias: "TransferSyntaxUID", vr: UI }, // DICOM
    E { tag: Single(IMPLEMENTATION_CLASS_UID), alias: "ImplementationClassUID", vr: UI }, // DICOM
    E { tag: Single(IMPLEMENTATION_VERSION_NAME), alias: "ImplementationVersionName", vr: SH }, // DICOM
    E { tag: Single(SOURCE_APPLICATION_ENTITY_TITLE), alias: "SourceApplicationEntityTitle", vr: AE }, // DICOM
    E { tag: Single(SENDING_APPLICATION_ENTITY_TITLE), alias: "SendingApplicationEntityTitle", vr: AE }, // DICOM
    E { tag: Single(RECEIVING_APPLICATION_ENTITY_TITLE), alias: "ReceivingApplicationEntityTitle", vr: AE }, // DICOM
    E { tag: Single(PRIVATE_INFORMATION_CREATOR_UID), alias: "PrivateInformationCreatorUID", vr: UI }, // DICOM
    E { tag: Single(PRIVATE_INFORMATION), alias: "PrivateInformation", vr: OB }, // DICOM
    E { tag: Single(FILE_SET_ID), alias: "FileSetID", vr: CS }, // DICOM
    E { tag: Single(FILE_SET_DESCRIPTOR_FILE_ID), alias: "FileSetDescriptorFileID", vr: CS }, // DICOM
    E { tag: Single(SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE), alias: "SpecificCharacterSetOfFileSetDescriptorFile", vr: CS }, // DICOM
    E { tag: Single(OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY), alias: "OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity", vr: UL }, // DICOM
    E { tag: Single(OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY), alias: "OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity", vr: UL }, // DICOM
    E { tag: Single(FILE_SET_CONSISTENCY_FLAG), alias: "FileSetConsistencyFlag", vr: US }, // DICOM
    E { tag: Single(DIRECTORY_RECORD_SEQUENCE), alias: "DirectoryRecordSequence", vr: SQ }, // DICOM
    E { tag: Single(OFFSET_OF_THE_NEXT_DIRECTORY_RECORD), alias: "OffsetOfTheNextDirectoryRecord", vr: UL }, // DICOM
    E { tag: Single(RECORD_IN_USE_FLAG), alias: "RecordInUseFlag", vr: US }, // DICOM
    E { tag: Single(OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY), alias: "OffsetOfReferencedLowerLevelDirectoryEntity", vr: UL }, // DICOM
    E { tag: Single(DIRECTORY_RECORD_TYPE), alias: "DirectoryRecordType", vr: CS }, // DICOM
    E { tag: Single(PRIVATE_RECORD_UID), alias: "PrivateRecordUID", vr: UI }, // DICOM
    E { tag: Single(REFERENCED_FILE_ID), alias: "ReferencedFileID", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_SOP_CLASS_UID_IN_FILE), alias: "ReferencedSOPClassUIDInFile", vr: UI }, // DICOM
    E { tag: Single(REFERENCED_SOP_INSTANCE_UID_IN_FILE), alias: "ReferencedSOPInstanceUIDInFile", vr: UI }, // DICOM
    E { tag: Single(REFERENCED_TRANSFER_SYNTAX_UID_IN_FILE), alias: "ReferencedTransferSyntaxUIDInFile", vr: UI }, // DICOM
    E { tag: Single(REFERENCED_RELATED_GENERAL_SOP_CLASS_UID_IN_FILE), alias: "ReferencedRelatedGeneralSOPClassUIDInFile", vr: UI }, // DICOM
    E { tag: Single(SPECIFIC_CHARACTER_SET), alias: "SpecificCharacterSet", vr: CS }, // DICOM
    E { tag: Single(LANGUAGE_CODE_SEQUENCE), alias: "LanguageCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_TYPE), alias: "ImageType", vr: CS }, // DICOM
    E { tag: Single(INSTANCE_CREATION_DATE), alias: "InstanceCreationDate", vr: DA }, // DICOM
    E { tag: Single(INSTANCE_CREATION_TIME), alias: "InstanceCreationTime", vr: TM }, // DICOM
    E { tag: Single(INSTANCE_CREATOR_UID), alias: "InstanceCreatorUID", vr: UI }, // DICOM
    E { tag: Single(INSTANCE_COERCION_DATE_TIME), alias: "InstanceCoercionDateTime", vr: DT }, // DICOM
    E { tag: Single(SOP_CLASS_UID), alias: "SOPClassUID", vr: UI }, // DICOM
    E { tag: Single(SOP_INSTANCE_UID), alias: "SOPInstanceUID", vr: UI }, // DICOM
    E { tag: Single(RELATED_GENERAL_SOP_CLASS_UID), alias: "RelatedGeneralSOPClassUID", vr: UI }, // DICOM
    E { tag: Single(ORIGINAL_SPECIALIZED_SOP_CLASS_UID), alias: "OriginalSpecializedSOPClassUID", vr: UI }, // DICOM
    E { tag: Single(STUDY_DATE), alias: "StudyDate", vr: DA }, // DICOM
    E { tag: Single(SERIES_DATE), alias: "SeriesDate", vr: DA }, // DICOM
    E { tag: Single(ACQUISITION_DATE), alias: "AcquisitionDate", vr: DA }, // DICOM
    E { tag: Single(CONTENT_DATE), alias: "ContentDate", vr: DA }, // DICOM
    E { tag: Single(ACQUISITION_DATE_TIME), alias: "AcquisitionDateTime", vr: DT }, // DICOM
    E { tag: Single(STUDY_TIME), alias: "StudyTime", vr: TM }, // DICOM
    E { tag: Single(SERIES_TIME), alias: "SeriesTime", vr: TM }, // DICOM
    E { tag: Single(ACQUISITION_TIME), alias: "AcquisitionTime", vr: TM }, // DICOM
    E { tag: Single(CONTENT_TIME), alias: "ContentTime", vr: TM }, // DICOM
    E { tag: Single(ACCESSION_NUMBER), alias: "AccessionNumber", vr: SH }, // DICOM
    E { tag: Single(ISSUER_OF_ACCESSION_NUMBER_SEQUENCE), alias: "IssuerOfAccessionNumberSequence", vr: SQ }, // DICOM
    E { tag: Single(QUERY_RETRIEVE_LEVEL), alias: "QueryRetrieveLevel", vr: CS }, // DICOM
    E { tag: Single(QUERY_RETRIEVE_VIEW), alias: "QueryRetrieveView", vr: CS }, // DICOM
    E { tag: Single(RETRIEVE_AE_TITLE), alias: "RetrieveAETitle", vr: AE }, // DICOM
    E { tag: Single(STATION_AE_TITLE), alias: "StationAETitle", vr: AE }, // DICOM
    E { tag: Single(INSTANCE_AVAILABILITY), alias: "InstanceAvailability", vr: CS }, // DICOM
    E { tag: Single(FAILED_SOP_INSTANCE_UID_LIST), alias: "FailedSOPInstanceUIDList", vr: UI }, // DICOM
    E { tag: Single(MODALITY), alias: "Modality", vr: CS }, // DICOM
    E { tag: Single(MODALITIES_IN_STUDY), alias: "ModalitiesInStudy", vr: CS }, // DICOM
    E { tag: Single(SOP_CLASSES_IN_STUDY), alias: "SOPClassesInStudy", vr: UI }, // DICOM
    E { tag: Single(ANATOMIC_REGIONS_IN_STUDY_CODE_SEQUENCE), alias: "AnatomicRegionsInStudyCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONVERSION_TYPE), alias: "ConversionType", vr: CS }, // DICOM
    E { tag: Single(PRESENTATION_INTENT_TYPE), alias: "PresentationIntentType", vr: CS }, // DICOM
    E { tag: Single(MANUFACTURER), alias: "Manufacturer", vr: LO }, // DICOM
    E { tag: Single(INSTITUTION_NAME), alias: "InstitutionName", vr: LO }, // DICOM
    E { tag: Single(INSTITUTION_ADDRESS), alias: "InstitutionAddress", vr: ST }, // DICOM
    E { tag: Single(INSTITUTION_CODE_SEQUENCE), alias: "InstitutionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERRING_PHYSICIAN_NAME), alias: "ReferringPhysicianName", vr: PN }, // DICOM
    E { tag: Single(REFERRING_PHYSICIAN_ADDRESS), alias: "ReferringPhysicianAddress", vr: ST }, // DICOM
    E { tag: Single(REFERRING_PHYSICIAN_TELEPHONE_NUMBERS), alias: "ReferringPhysicianTelephoneNumbers", vr: SH }, // DICOM
    E { tag: Single(REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE), alias: "ReferringPhysicianIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(CONSULTING_PHYSICIAN_NAME), alias: "ConsultingPhysicianName", vr: PN }, // DICOM
    E { tag: Single(CONSULTING_PHYSICIAN_IDENTIFICATION_SEQUENCE), alias: "ConsultingPhysicianIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(CODE_VALUE), alias: "CodeValue", vr: SH }, // DICOM
    E { tag: Single(EXTENDED_CODE_VALUE), alias: "ExtendedCodeValue", vr: LO }, // DICOM/DICOS
    E { tag: Single(CODING_SCHEME_DESIGNATOR), alias: "CodingSchemeDesignator", vr: SH }, // DICOM
    E { tag: Single(CODING_SCHEME_VERSION), alias: "CodingSchemeVersion", vr: SH }, // DICOM
    E { tag: Single(CODE_MEANING), alias: "CodeMeaning", vr: LO }, // DICOM
    E { tag: Single(MAPPING_RESOURCE), alias: "MappingResource", vr: CS }, // DICOM
    E { tag: Single(CONTEXT_GROUP_VERSION), alias: "ContextGroupVersion", vr: DT }, // DICOM
    E { tag: Single(CONTEXT_GROUP_LOCAL_VERSION), alias: "ContextGroupLocalVersion", vr: DT }, // DICOM
    E { tag: Single(EXTENDED_CODE_MEANING), alias: "ExtendedCodeMeaning", vr: LT }, // DICOM/DICOS
    E { tag: Single(CODING_SCHEME_RESOURCES_SEQUENCE), alias: "CodingSchemeResourcesSequence", vr: SQ }, // DICOM
    E { tag: Single(CODING_SCHEME_URL_TYPE), alias: "CodingSchemeURLType", vr: CS }, // DICOM
    E { tag: Single(CONTEXT_GROUP_EXTENSION_FLAG), alias: "ContextGroupExtensionFlag", vr: CS }, // DICOM
    E { tag: Single(CODING_SCHEME_UID), alias: "CodingSchemeUID", vr: UI }, // DICOM
    E { tag: Single(CONTEXT_GROUP_EXTENSION_CREATOR_UID), alias: "ContextGroupExtensionCreatorUID", vr: UI }, // DICOM
    E { tag: Single(CODING_SCHEME_URL), alias: "CodingSchemeURL", vr: UR }, // DICOM
    E { tag: Single(CONTEXT_IDENTIFIER), alias: "ContextIdentifier", vr: CS }, // DICOM
    E { tag: Single(CODING_SCHEME_IDENTIFICATION_SEQUENCE), alias: "CodingSchemeIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(CODING_SCHEME_REGISTRY), alias: "CodingSchemeRegistry", vr: LO }, // DICOM
    E { tag: Single(CODING_SCHEME_EXTERNAL_ID), alias: "CodingSchemeExternalID", vr: ST }, // DICOM
    E { tag: Single(CODING_SCHEME_NAME), alias: "CodingSchemeName", vr: ST }, // DICOM
    E { tag: Single(CODING_SCHEME_RESPONSIBLE_ORGANIZATION), alias: "CodingSchemeResponsibleOrganization", vr: ST }, // DICOM
    E { tag: Single(CONTEXT_UID), alias: "ContextUID", vr: UI }, // DICOM
    E { tag: Single(MAPPING_RESOURCE_UID), alias: "MappingResourceUID", vr: UI }, // DICOM
    E { tag: Single(LONG_CODE_VALUE), alias: "LongCodeValue", vr: UC }, // DICOM
    E { tag: Single(URN_CODE_VALUE), alias: "URNCodeValue", vr: UR }, // DICOM
    E { tag: Single(EQUIVALENT_CODE_SEQUENCE), alias: "EquivalentCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MAPPING_RESOURCE_NAME), alias: "MappingResourceName", vr: LO }, // DICOM
    E { tag: Single(CONTEXT_GROUP_IDENTIFICATION_SEQUENCE), alias: "ContextGroupIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(MAPPING_RESOURCE_IDENTIFICATION_SEQUENCE), alias: "MappingResourceIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(TIMEZONE_OFFSET_FROM_UTC), alias: "TimezoneOffsetFromUTC", vr: SH }, // DICOM
    E { tag: Single(RESPONSIBLE_GROUP_CODE_SEQUENCE), alias: "ResponsibleGroupCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(EQUIPMENT_MODALITY), alias: "EquipmentModality", vr: CS }, // DICOM
    E { tag: Single(MANUFACTURER_RELATED_MODEL_GROUP), alias: "ManufacturerRelatedModelGroup", vr: LO }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_CHARACTERISTICS_SEQUENCE), alias: "PrivateDataElementCharacteristicsSequence", vr: SQ }, // DICOM
    E { tag: Single(PRIVATE_GROUP_REFERENCE), alias: "PrivateGroupReference", vr: US }, // DICOM
    E { tag: Single(PRIVATE_CREATOR_REFERENCE), alias: "PrivateCreatorReference", vr: LO }, // DICOM
    E { tag: Single(BLOCK_IDENTIFYING_INFORMATION_STATUS), alias: "BlockIdentifyingInformationStatus", vr: CS }, // DICOM
    E { tag: Single(NONIDENTIFYING_PRIVATE_ELEMENTS), alias: "NonidentifyingPrivateElements", vr: US }, // DICOM
    E { tag: Single(DEIDENTIFICATION_ACTION_SEQUENCE), alias: "DeidentificationActionSequence", vr: SQ }, // DICOM
    E { tag: Single(IDENTIFYING_PRIVATE_ELEMENTS), alias: "IdentifyingPrivateElements", vr: US }, // DICOM
    E { tag: Single(DEIDENTIFICATION_ACTION), alias: "DeidentificationAction", vr: CS }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT), alias: "PrivateDataElement", vr: US }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_VALUE_MULTIPLICITY), alias: "PrivateDataElementValueMultiplicity", vr: UL }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_VALUE_REPRESENTATION), alias: "PrivateDataElementValueRepresentation", vr: CS }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_NUMBER_OF_ITEMS), alias: "PrivateDataElementNumberOfItems", vr: UL }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_NAME), alias: "PrivateDataElementName", vr: UC }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_KEYWORD), alias: "PrivateDataElementKeyword", vr: UC }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_DESCRIPTION), alias: "PrivateDataElementDescription", vr: UT }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_ENCODING), alias: "PrivateDataElementEncoding", vr: UT }, // DICOM
    E { tag: Single(PRIVATE_DATA_ELEMENT_DEFINITION_SEQUENCE), alias: "PrivateDataElementDefinitionSequence", vr: SQ }, // DICOM
    E { tag: Single(STATION_NAME), alias: "StationName", vr: SH }, // DICOM
    E { tag: Single(STUDY_DESCRIPTION), alias: "StudyDescription", vr: LO }, // DICOM
    E { tag: Single(PROCEDURE_CODE_SEQUENCE), alias: "ProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SERIES_DESCRIPTION), alias: "SeriesDescription", vr: LO }, // DICOM
    E { tag: Single(SERIES_DESCRIPTION_CODE_SEQUENCE), alias: "SeriesDescriptionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(INSTITUTIONAL_DEPARTMENT_NAME), alias: "InstitutionalDepartmentName", vr: LO }, // DICOM
    E { tag: Single(PHYSICIANS_OF_RECORD), alias: "PhysiciansOfRecord", vr: PN }, // DICOM
    E { tag: Single(PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE), alias: "PhysiciansOfRecordIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMING_PHYSICIAN_NAME), alias: "PerformingPhysicianName", vr: PN }, // DICOM
    E { tag: Single(PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE), alias: "PerformingPhysicianIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(NAME_OF_PHYSICIANS_READING_STUDY), alias: "NameOfPhysiciansReadingStudy", vr: PN }, // DICOM
    E { tag: Single(PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE), alias: "PhysiciansReadingStudyIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(OPERATORS_NAME), alias: "OperatorsName", vr: PN }, // DICOM
    E { tag: Single(OPERATOR_IDENTIFICATION_SEQUENCE), alias: "OperatorIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ADMITTING_DIAGNOSES_DESCRIPTION), alias: "AdmittingDiagnosesDescription", vr: LO }, // DICOM
    E { tag: Single(ADMITTING_DIAGNOSES_CODE_SEQUENCE), alias: "AdmittingDiagnosesCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MANUFACTURER_MODEL_NAME), alias: "ManufacturerModelName", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_STUDY_SEQUENCE), alias: "ReferencedStudySequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE), alias: "ReferencedPerformedProcedureStepSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SERIES_SEQUENCE), alias: "ReferencedSeriesSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_PATIENT_SEQUENCE), alias: "ReferencedPatientSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_VISIT_SEQUENCE), alias: "ReferencedVisitSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE), alias: "ReferencedStereometricInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_WAVEFORM_SEQUENCE), alias: "ReferencedWaveformSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_IMAGE_SEQUENCE), alias: "ReferencedImageSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_INSTANCE_SEQUENCE), alias: "ReferencedInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE), alias: "ReferencedRealWorldValueMappingInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SOP_CLASS_UID), alias: "ReferencedSOPClassUID", vr: UI }, // DICOM
    E { tag: Single(REFERENCED_SOP_INSTANCE_UID), alias: "ReferencedSOPInstanceUID", vr: UI }, // DICOM
    E { tag: Single(SOP_CLASSES_SUPPORTED), alias: "SOPClassesSupported", vr: UI }, // DICOM
    E { tag: Single(REFERENCED_FRAME_NUMBER), alias: "ReferencedFrameNumber", vr: IS }, // DICOM
    E { tag: Single(SIMPLE_FRAME_LIST), alias: "SimpleFrameList", vr: UL }, // DICOM
    E { tag: Single(CALCULATED_FRAME_LIST), alias: "CalculatedFrameList", vr: UL }, // DICOM
    E { tag: Single(TIME_RANGE), alias: "TimeRange", vr: FD }, // DICOM
    E { tag: Single(FRAME_EXTRACTION_SEQUENCE), alias: "FrameExtractionSequence", vr: SQ }, // DICOM
    E { tag: Single(MULTI_FRAME_SOURCE_SOP_INSTANCE_UID), alias: "MultiFrameSourceSOPInstanceUID", vr: UI }, // DICOM
    E { tag: Single(RETRIEVE_URL), alias: "RetrieveURL", vr: UR }, // DICOM
    E { tag: Single(TRANSACTION_UID), alias: "TransactionUID", vr: UI }, // DICOM
    E { tag: Single(WARNING_REASON), alias: "WarningReason", vr: US }, // DICOM
    E { tag: Single(FAILURE_REASON), alias: "FailureReason", vr: US }, // DICOM
    E { tag: Single(FAILED_SOP_SEQUENCE), alias: "FailedSOPSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SOP_SEQUENCE), alias: "ReferencedSOPSequence", vr: SQ }, // DICOM
    E { tag: Single(OTHER_FAILURES_SEQUENCE), alias: "OtherFailuresSequence", vr: SQ }, // DICOM
    E { tag: Single(STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE), alias: "StudiesContainingOtherReferencedInstancesSequence", vr: SQ }, // DICOM
    E { tag: Single(RELATED_SERIES_SEQUENCE), alias: "RelatedSeriesSequence", vr: SQ }, // DICOM
    E { tag: Single(DERIVATION_DESCRIPTION), alias: "DerivationDescription", vr: ST }, // DICOM
    E { tag: Single(SOURCE_IMAGE_SEQUENCE), alias: "SourceImageSequence", vr: SQ }, // DICOM
    E { tag: Single(STAGE_NAME), alias: "StageName", vr: SH }, // DICOM
    E { tag: Single(STAGE_NUMBER), alias: "StageNumber", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_STAGES), alias: "NumberOfStages", vr: IS }, // DICOM
    E { tag: Single(VIEW_NAME), alias: "ViewName", vr: SH }, // DICOM
    E { tag: Single(VIEW_NUMBER), alias: "ViewNumber", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_EVENT_TIMERS), alias: "NumberOfEventTimers", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_VIEWS_IN_STAGE), alias: "NumberOfViewsInStage", vr: IS }, // DICOM
    E { tag: Single(EVENT_ELAPSED_TIMES), alias: "EventElapsedTimes", vr: DS }, // DICOM
    E { tag: Single(EVENT_TIMER_NAMES), alias: "EventTimerNames", vr: LO }, // DICOM
    E { tag: Single(EVENT_TIMER_SEQUENCE), alias: "EventTimerSequence", vr: SQ }, // DICOM
    E { tag: Single(EVENT_TIME_OFFSET), alias: "EventTimeOffset", vr: FD }, // DICOM
    E { tag: Single(EVENT_CODE_SEQUENCE), alias: "EventCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(START_TRIM), alias: "StartTrim", vr: IS }, // DICOM
    E { tag: Single(STOP_TRIM), alias: "StopTrim", vr: IS }, // DICOM
    E { tag: Single(RECOMMENDED_DISPLAY_FRAME_RATE), alias: "RecommendedDisplayFrameRate", vr: IS }, // DICOM
    E { tag: Single(ANATOMIC_REGION_SEQUENCE), alias: "AnatomicRegionSequence", vr: SQ }, // DICOM
    E { tag: Single(ANATOMIC_REGION_MODIFIER_SEQUENCE), alias: "AnatomicRegionModifierSequence", vr: SQ }, // DICOM
    E { tag: Single(PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE), alias: "PrimaryAnatomicStructureSequence", vr: SQ }, // DICOM
    E { tag: Single(PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE), alias: "PrimaryAnatomicStructureModifierSequence", vr: SQ }, // DICOM
    E { tag: Single(ALTERNATE_REPRESENTATION_SEQUENCE), alias: "AlternateRepresentationSequence", vr: SQ }, // DICOM
    E { tag: Single(IRRADIATION_EVENT_UID), alias: "IrradiationEventUID", vr: UI }, // DICOM
    E { tag: Single(SOURCE_IRRADIATION_EVENT_SEQUENCE), alias: "SourceIrradiationEventSequence", vr: SQ }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_ADMINISTRATION_EVENT_UID), alias: "RadiopharmaceuticalAdministrationEventUID", vr: UI }, // DICOM
    E { tag: Single(FRAME_TYPE), alias: "FrameType", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_IMAGE_EVIDENCE_SEQUENCE), alias: "ReferencedImageEvidenceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_RAW_DATA_SEQUENCE), alias: "ReferencedRawDataSequence", vr: SQ }, // DICOM
    E { tag: Single(CREATOR_VERSION_UID), alias: "CreatorVersionUID", vr: UI }, // DICOM
    E { tag: Single(DERIVATION_IMAGE_SEQUENCE), alias: "DerivationImageSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_IMAGE_EVIDENCE_SEQUENCE), alias: "SourceImageEvidenceSequence", vr: SQ }, // DICOM
    E { tag: Single(PIXEL_PRESENTATION), alias: "PixelPresentation", vr: CS }, // DICOM
    E { tag: Single(VOLUMETRIC_PROPERTIES), alias: "VolumetricProperties", vr: CS }, // DICOM
    E { tag: Single(VOLUME_BASED_CALCULATION_TECHNIQUE), alias: "VolumeBasedCalculationTechnique", vr: CS }, // DICOM
    E { tag: Single(COMPLEX_IMAGE_COMPONENT), alias: "ComplexImageComponent", vr: CS }, // DICOM
    E { tag: Single(ACQUISITION_CONTRAST), alias: "AcquisitionContrast", vr: CS }, // DICOM
    E { tag: Single(DERIVATION_CODE_SEQUENCE), alias: "DerivationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_PRESENTATION_STATE_SEQUENCE), alias: "ReferencedPresentationStateSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_OTHER_PLANE_SEQUENCE), alias: "ReferencedOtherPlaneSequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_DISPLAY_SEQUENCE), alias: "FrameDisplaySequence", vr: SQ }, // DICOM
    E { tag: Single(RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT), alias: "RecommendedDisplayFrameRateInFloat", vr: FL }, // DICOM
    E { tag: Single(SKIP_FRAME_RANGE_FLAG), alias: "SkipFrameRangeFlag", vr: CS }, // DICOM
    E { tag: Single(PATIENT_NAME), alias: "PatientName", vr: PN }, // DICOM
    E { tag: Single(PATIENT_ID), alias: "PatientID", vr: LO }, // DICOM
    E { tag: Single(ISSUER_OF_PATIENT_ID), alias: "IssuerOfPatientID", vr: LO }, // DICOM
    E { tag: Single(TYPE_OF_PATIENT_ID), alias: "TypeOfPatientID", vr: CS }, // DICOM
    E { tag: Single(ISSUER_OF_PATIENT_ID_QUALIFIERS_SEQUENCE), alias: "IssuerOfPatientIDQualifiersSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_PATIENT_GROUP_IDENTIFICATION_SEQUENCE), alias: "SourcePatientGroupIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(GROUP_OF_PATIENTS_IDENTIFICATION_SEQUENCE), alias: "GroupOfPatientsIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(SUBJECT_RELATIVE_POSITION_IN_IMAGE), alias: "SubjectRelativePositionInImage", vr: US }, // DICOM
    E { tag: Single(PATIENT_BIRTH_DATE), alias: "PatientBirthDate", vr: DA }, // DICOM
    E { tag: Single(PATIENT_BIRTH_TIME), alias: "PatientBirthTime", vr: TM }, // DICOM
    E { tag: Single(PATIENT_BIRTH_DATE_IN_ALTERNATIVE_CALENDAR), alias: "PatientBirthDateInAlternativeCalendar", vr: LO }, // DICOM
    E { tag: Single(PATIENT_DEATH_DATE_IN_ALTERNATIVE_CALENDAR), alias: "PatientDeathDateInAlternativeCalendar", vr: LO }, // DICOM
    E { tag: Single(PATIENT_ALTERNATIVE_CALENDAR), alias: "PatientAlternativeCalendar", vr: CS }, // DICOM
    E { tag: Single(PATIENT_SEX), alias: "PatientSex", vr: CS }, // DICOM
    E { tag: Single(PATIENT_INSURANCE_PLAN_CODE_SEQUENCE), alias: "PatientInsurancePlanCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE), alias: "PatientPrimaryLanguageCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE), alias: "PatientPrimaryLanguageModifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(QUALITY_CONTROL_SUBJECT), alias: "QualityControlSubject", vr: CS }, // DICOM
    E { tag: Single(QUALITY_CONTROL_SUBJECT_TYPE_CODE_SEQUENCE), alias: "QualityControlSubjectTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(STRAIN_DESCRIPTION), alias: "StrainDescription", vr: UC }, // DICOM
    E { tag: Single(STRAIN_NOMENCLATURE), alias: "StrainNomenclature", vr: LO }, // DICOM
    E { tag: Single(STRAIN_STOCK_NUMBER), alias: "StrainStockNumber", vr: LO }, // DICOM
    E { tag: Single(STRAIN_SOURCE_REGISTRY_CODE_SEQUENCE), alias: "StrainSourceRegistryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(STRAIN_STOCK_SEQUENCE), alias: "StrainStockSequence", vr: SQ }, // DICOM
    E { tag: Single(STRAIN_SOURCE), alias: "StrainSource", vr: LO }, // DICOM
    E { tag: Single(STRAIN_ADDITIONAL_INFORMATION), alias: "StrainAdditionalInformation", vr: UT }, // DICOM
    E { tag: Single(STRAIN_CODE_SEQUENCE), alias: "StrainCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(GENETIC_MODIFICATIONS_SEQUENCE), alias: "GeneticModificationsSequence", vr: SQ }, // DICOM
    E { tag: Single(GENETIC_MODIFICATIONS_DESCRIPTION), alias: "GeneticModificationsDescription", vr: UC }, // DICOM
    E { tag: Single(GENETIC_MODIFICATIONS_NOMENCLATURE), alias: "GeneticModificationsNomenclature", vr: LO }, // DICOM
    E { tag: Single(GENETIC_MODIFICATIONS_CODE_SEQUENCE), alias: "GeneticModificationsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OTHER_PATIENT_NAMES), alias: "OtherPatientNames", vr: PN }, // DICOM
    E { tag: Single(OTHER_PATIENT_I_DS_SEQUENCE), alias: "OtherPatientIDsSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_BIRTH_NAME), alias: "PatientBirthName", vr: PN }, // DICOM
    E { tag: Single(PATIENT_AGE), alias: "PatientAge", vr: AS }, // DICOM
    E { tag: Single(PATIENT_SIZE), alias: "PatientSize", vr: DS }, // DICOM
    E { tag: Single(PATIENT_SIZE_CODE_SEQUENCE), alias: "PatientSizeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_BODY_MASS_INDEX), alias: "PatientBodyMassIndex", vr: DS }, // DICOM
    E { tag: Single(MEASURED_AP_DIMENSION), alias: "MeasuredAPDimension", vr: DS }, // DICOM
    E { tag: Single(MEASURED_LATERAL_DIMENSION), alias: "MeasuredLateralDimension", vr: DS }, // DICOM
    E { tag: Single(PATIENT_WEIGHT), alias: "PatientWeight", vr: DS }, // DICOM
    E { tag: Single(PATIENT_ADDRESS), alias: "PatientAddress", vr: LO }, // DICOM
    E { tag: Single(PATIENT_MOTHER_BIRTH_NAME), alias: "PatientMotherBirthName", vr: PN }, // DICOM
    E { tag: Single(MILITARY_RANK), alias: "MilitaryRank", vr: LO }, // DICOM
    E { tag: Single(BRANCH_OF_SERVICE), alias: "BranchOfService", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_PATIENT_PHOTO_SEQUENCE), alias: "ReferencedPatientPhotoSequence", vr: SQ }, // DICOM
    E { tag: Single(MEDICAL_ALERTS), alias: "MedicalAlerts", vr: LO }, // DICOM
    E { tag: Single(ALLERGIES), alias: "Allergies", vr: LO }, // DICOM
    E { tag: Single(COUNTRY_OF_RESIDENCE), alias: "CountryOfResidence", vr: LO }, // DICOM
    E { tag: Single(REGION_OF_RESIDENCE), alias: "RegionOfResidence", vr: LO }, // DICOM
    E { tag: Single(PATIENT_TELEPHONE_NUMBERS), alias: "PatientTelephoneNumbers", vr: SH }, // DICOM
    E { tag: Single(PATIENT_TELECOM_INFORMATION), alias: "PatientTelecomInformation", vr: LT }, // DICOM
    E { tag: Single(ETHNIC_GROUP), alias: "EthnicGroup", vr: SH }, // DICOM
    E { tag: Single(OCCUPATION), alias: "Occupation", vr: SH }, // DICOM
    E { tag: Single(SMOKING_STATUS), alias: "SmokingStatus", vr: CS }, // DICOM
    E { tag: Single(ADDITIONAL_PATIENT_HISTORY), alias: "AdditionalPatientHistory", vr: LT }, // DICOM
    E { tag: Single(PREGNANCY_STATUS), alias: "PregnancyStatus", vr: US }, // DICOM
    E { tag: Single(LAST_MENSTRUAL_DATE), alias: "LastMenstrualDate", vr: DA }, // DICOM
    E { tag: Single(PATIENT_RELIGIOUS_PREFERENCE), alias: "PatientReligiousPreference", vr: LO }, // DICOM
    E { tag: Single(PATIENT_SPECIES_DESCRIPTION), alias: "PatientSpeciesDescription", vr: LO }, // DICOM
    E { tag: Single(PATIENT_SPECIES_CODE_SEQUENCE), alias: "PatientSpeciesCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_SEX_NEUTERED), alias: "PatientSexNeutered", vr: CS }, // DICOM
    E { tag: Single(ANATOMICAL_ORIENTATION_TYPE), alias: "AnatomicalOrientationType", vr: CS }, // DICOM
    E { tag: Single(PATIENT_BREED_DESCRIPTION), alias: "PatientBreedDescription", vr: LO }, // DICOM
    E { tag: Single(PATIENT_BREED_CODE_SEQUENCE), alias: "PatientBreedCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(BREED_REGISTRATION_SEQUENCE), alias: "BreedRegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(BREED_REGISTRATION_NUMBER), alias: "BreedRegistrationNumber", vr: LO }, // DICOM
    E { tag: Single(BREED_REGISTRY_CODE_SEQUENCE), alias: "BreedRegistryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(RESPONSIBLE_PERSON), alias: "ResponsiblePerson", vr: PN }, // DICOM
    E { tag: Single(RESPONSIBLE_PERSON_ROLE), alias: "ResponsiblePersonRole", vr: CS }, // DICOM
    E { tag: Single(RESPONSIBLE_ORGANIZATION), alias: "ResponsibleOrganization", vr: LO }, // DICOM
    E { tag: Single(PATIENT_COMMENTS), alias: "PatientComments", vr: LT }, // DICOM
    E { tag: Single(EXAMINED_BODY_THICKNESS), alias: "ExaminedBodyThickness", vr: FL }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SPONSOR_NAME), alias: "ClinicalTrialSponsorName", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_PROTOCOL_ID), alias: "ClinicalTrialProtocolID", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_PROTOCOL_NAME), alias: "ClinicalTrialProtocolName", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SITE_ID), alias: "ClinicalTrialSiteID", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SITE_NAME), alias: "ClinicalTrialSiteName", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SUBJECT_ID), alias: "ClinicalTrialSubjectID", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SUBJECT_READING_ID), alias: "ClinicalTrialSubjectReadingID", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_TIME_POINT_ID), alias: "ClinicalTrialTimePointID", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_TIME_POINT_DESCRIPTION), alias: "ClinicalTrialTimePointDescription", vr: ST }, // DICOM
    E { tag: Single(LONGITUDINAL_TEMPORAL_OFFSET_FROM_EVENT), alias: "LongitudinalTemporalOffsetFromEvent", vr: FD }, // DICOM
    E { tag: Single(LONGITUDINAL_TEMPORAL_EVENT_TYPE), alias: "LongitudinalTemporalEventType", vr: CS }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_COORDINATING_CENTER_NAME), alias: "ClinicalTrialCoordinatingCenterName", vr: LO }, // DICOM
    E { tag: Single(PATIENT_IDENTITY_REMOVED), alias: "PatientIdentityRemoved", vr: CS }, // DICOM
    E { tag: Single(DEIDENTIFICATION_METHOD), alias: "DeidentificationMethod", vr: LO }, // DICOM
    E { tag: Single(DEIDENTIFICATION_METHOD_CODE_SEQUENCE), alias: "DeidentificationMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SERIES_ID), alias: "ClinicalTrialSeriesID", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_SERIES_DESCRIPTION), alias: "ClinicalTrialSeriesDescription", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME), alias: "ClinicalTrialProtocolEthicsCommitteeName", vr: LO }, // DICOM
    E { tag: Single(CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER), alias: "ClinicalTrialProtocolEthicsCommitteeApprovalNumber", vr: LO }, // DICOM
    E { tag: Single(CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE), alias: "ConsentForClinicalTrialUseSequence", vr: SQ }, // DICOM
    E { tag: Single(DISTRIBUTION_TYPE), alias: "DistributionType", vr: CS }, // DICOM
    E { tag: Single(CONSENT_FOR_DISTRIBUTION_FLAG), alias: "ConsentForDistributionFlag", vr: CS }, // DICOM
    E { tag: Single(ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_START_DATE), alias: "EthicsCommitteeApprovalEffectivenessStartDate", vr: DA }, // DICOM
    E { tag: Single(ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_END_DATE), alias: "EthicsCommitteeApprovalEffectivenessEndDate", vr: DA }, // DICOM
    E { tag: Single(COMPONENT_MANUFACTURING_PROCEDURE), alias: "ComponentManufacturingProcedure", vr: ST }, // DICOM/DICONDE
    E { tag: Single(COMPONENT_MANUFACTURER), alias: "ComponentManufacturer", vr: ST }, // DICOM/DICONDE
    E { tag: Single(MATERIAL_THICKNESS), alias: "MaterialThickness", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MATERIAL_PIPE_DIAMETER), alias: "MaterialPipeDiameter", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MATERIAL_ISOLATION_DIAMETER), alias: "MaterialIsolationDiameter", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MATERIAL_GRADE), alias: "MaterialGrade", vr: ST }, // DICOM/DICONDE
    E { tag: Single(MATERIAL_PROPERTIES_DESCRIPTION), alias: "MaterialPropertiesDescription", vr: ST }, // DICOM/DICONDE
    E { tag: Single(MATERIAL_NOTES), alias: "MaterialNotes", vr: LT }, // DICOM/DICONDE
    E { tag: Single(COMPONENT_SHAPE), alias: "ComponentShape", vr: CS }, // DICOM/DICONDE
    E { tag: Single(CURVATURE_TYPE), alias: "CurvatureType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(OUTER_DIAMETER), alias: "OuterDiameter", vr: DS }, // DICOM/DICONDE
    E { tag: Single(INNER_DIAMETER), alias: "InnerDiameter", vr: DS }, // DICOM/DICONDE
    E { tag: Single(COMPONENT_WELDER_I_DS), alias: "ComponentWelderIDs", vr: LO }, // DICOM/DICONDE
    E { tag: Single(SECONDARY_APPROVAL_STATUS), alias: "SecondaryApprovalStatus", vr: CS }, // DICOM/DICONDE
    E { tag: Single(SECONDARY_REVIEW_DATE), alias: "SecondaryReviewDate", vr: DA }, // DICOM/DICONDE
    E { tag: Single(SECONDARY_REVIEW_TIME), alias: "SecondaryReviewTime", vr: TM }, // DICOM/DICONDE
    E { tag: Single(SECONDARY_REVIEWER_NAME), alias: "SecondaryReviewerName", vr: PN }, // DICOM/DICONDE
    E { tag: Single(REPAIR_ID), alias: "RepairID", vr: ST }, // DICOM/DICONDE
    E { tag: Single(MULTIPLE_COMPONENT_APPROVAL_SEQUENCE), alias: "MultipleComponentApprovalSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(OTHER_APPROVAL_STATUS), alias: "OtherApprovalStatus", vr: CS }, // DICOM/DICONDE
    E { tag: Single(OTHER_SECONDARY_APPROVAL_STATUS), alias: "OtherSecondaryApprovalStatus", vr: CS }, // DICOM/DICONDE
    E { tag: Single(ACTUAL_ENVIRONMENTAL_CONDITIONS), alias: "ActualEnvironmentalConditions", vr: ST }, // DICOM/DICONDE
    E { tag: Single(EXPIRY_DATE), alias: "ExpiryDate", vr: DA }, // DICOM/DICONDE
    E { tag: Single(ENVIRONMENTAL_CONDITIONS), alias: "EnvironmentalConditions", vr: ST }, // DICOM/DICONDE
    E { tag: Single(EVALUATOR_SEQUENCE), alias: "EvaluatorSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(EVALUATOR_NUMBER), alias: "EvaluatorNumber", vr: IS }, // DICOM/DICONDE
    E { tag: Single(EVALUATOR_NAME), alias: "EvaluatorName", vr: PN }, // DICOM/DICONDE
    E { tag: Single(EVALUATION_ATTEMPT), alias: "EvaluationAttempt", vr: IS }, // DICOM/DICONDE
    E { tag: Single(INDICATION_SEQUENCE), alias: "IndicationSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(INDICATION_NUMBER), alias: "IndicationNumber", vr: IS }, // DICOM/DICONDE
    E { tag: Single(INDICATION_LABEL), alias: "IndicationLabel", vr: SH }, // DICOM/DICONDE
    E { tag: Single(INDICATION_DESCRIPTION), alias: "IndicationDescription", vr: ST }, // DICOM/DICONDE
    E { tag: Single(INDICATION_TYPE), alias: "IndicationType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(INDICATION_DISPOSITION), alias: "IndicationDisposition", vr: CS }, // DICOM/DICONDE
    E { tag: Single(INDICATION_ROI_SEQUENCE), alias: "IndicationROISequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(INDICATION_PHYSICAL_PROPERTY_SEQUENCE), alias: "IndicationPhysicalPropertySequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(PROPERTY_LABEL), alias: "PropertyLabel", vr: SH }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_NUMBER_OF_AXES), alias: "CoordinateSystemNumberOfAxes", vr: IS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_AXES_SEQUENCE), alias: "CoordinateSystemAxesSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_AXIS_DESCRIPTION), alias: "CoordinateSystemAxisDescription", vr: ST }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_DATA_SET_MAPPING), alias: "CoordinateSystemDataSetMapping", vr: CS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_AXIS_NUMBER), alias: "CoordinateSystemAxisNumber", vr: IS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_AXIS_TYPE), alias: "CoordinateSystemAxisType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_AXIS_UNITS), alias: "CoordinateSystemAxisUnits", vr: CS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_AXIS_VALUES), alias: "CoordinateSystemAxisValues", vr: OB }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_TRANSFORM_SEQUENCE), alias: "CoordinateSystemTransformSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(TRANSFORM_DESCRIPTION), alias: "TransformDescription", vr: ST }, // DICOM/DICONDE
    E { tag: Single(TRANSFORM_NUMBER_OF_AXES), alias: "TransformNumberOfAxes", vr: IS }, // DICOM/DICONDE
    E { tag: Single(TRANSFORM_ORDER_OF_AXES), alias: "TransformOrderOfAxes", vr: IS }, // DICOM/DICONDE
    E { tag: Single(TRANSFORMED_AXIS_UNITS), alias: "TransformedAxisUnits", vr: CS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_TRANSFORM_ROTATION_AND_SCALE_MATRIX), alias: "CoordinateSystemTransformRotationAndScaleMatrix", vr: DS }, // DICOM/DICONDE
    E { tag: Single(COORDINATE_SYSTEM_TRANSFORM_TRANSLATION_MATRIX), alias: "CoordinateSystemTransformTranslationMatrix", vr: DS }, // DICOM/DICONDE
    E { tag: Single(INTERNAL_DETECTOR_FRAME_TIME), alias: "InternalDetectorFrameTime", vr: DS }, // DICOM/DICONDE
    E { tag: Single(NUMBER_OF_FRAMES_INTEGRATED), alias: "NumberOfFramesIntegrated", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DETECTOR_TEMPERATURE_SEQUENCE), alias: "DetectorTemperatureSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(SENSOR_NAME), alias: "SensorName", vr: ST }, // DICOM/DICONDE
    E { tag: Single(HORIZONTAL_OFFSET_OF_SENSOR), alias: "HorizontalOffsetOfSensor", vr: DS }, // DICOM/DICONDE
    E { tag: Single(VERTICAL_OFFSET_OF_SENSOR), alias: "VerticalOffsetOfSensor", vr: DS }, // DICOM/DICONDE
    E { tag: Single(SENSOR_TEMPERATURE), alias: "SensorTemperature", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DARK_CURRENT_SEQUENCE), alias: "DarkCurrentSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(DARK_CURRENT_COUNTS), alias: "DarkCurrentCounts", vr: OB }, // DICOM/DICONDE
    E { tag: Single(GAIN_CORRECTION_REFERENCE_SEQUENCE), alias: "GainCorrectionReferenceSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(AIR_COUNTS), alias: "AirCounts", vr: OB }, // DICOM/DICONDE
    E { tag: Single(KV_USED_IN_GAIN_CALIBRATION), alias: "KVUsedInGainCalibration", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MA_USED_IN_GAIN_CALIBRATION), alias: "MAUsedInGainCalibration", vr: DS }, // DICOM/DICONDE
    E { tag: Single(NUMBER_OF_FRAMES_USED_FOR_INTEGRATION), alias: "NumberOfFramesUsedForIntegration", vr: DS }, // DICOM/DICONDE
    E { tag: Single(FILTER_MATERIAL_USED_IN_GAIN_CALIBRATION), alias: "FilterMaterialUsedInGainCalibration", vr: LO }, // DICOM/DICONDE
    E { tag: Single(FILTER_THICKNESS_USED_IN_GAIN_CALIBRATION), alias: "FilterThicknessUsedInGainCalibration", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DATE_OF_GAIN_CALIBRATION), alias: "DateOfGainCalibration", vr: DA }, // DICOM/DICONDE
    E { tag: Single(TIME_OF_GAIN_CALIBRATION), alias: "TimeOfGainCalibration", vr: TM }, // DICOM/DICONDE
    E { tag: Single(BAD_PIXEL_IMAGE), alias: "BadPixelImage", vr: OB }, // DICOM/DICONDE
    E { tag: Single(CALIBRATION_NOTES), alias: "CalibrationNotes", vr: LT }, // DICOM/DICONDE
    E { tag: Single(PULSER_EQUIPMENT_SEQUENCE), alias: "PulserEquipmentSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(PULSER_TYPE), alias: "PulserType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(PULSER_NOTES), alias: "PulserNotes", vr: LT }, // DICOM/DICONDE
    E { tag: Single(RECEIVER_EQUIPMENT_SEQUENCE), alias: "ReceiverEquipmentSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(AMPLIFIER_TYPE), alias: "AmplifierType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(RECEIVER_NOTES), alias: "ReceiverNotes", vr: LT }, // DICOM/DICONDE
    E { tag: Single(PRE_AMPLIFIER_EQUIPMENT_SEQUENCE), alias: "PreAmplifierEquipmentSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(PRE_AMPLIFIER_NOTES), alias: "PreAmplifierNotes", vr: LT }, // DICOM/DICONDE
    E { tag: Single(TRANSMIT_TRANSDUCER_SEQUENCE), alias: "TransmitTransducerSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(RECEIVE_TRANSDUCER_SEQUENCE), alias: "ReceiveTransducerSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(NUMBER_OF_ELEMENTS), alias: "NumberOfElements", vr: US }, // DICOM/DICONDE
    E { tag: Single(ELEMENT_SHAPE), alias: "ElementShape", vr: CS }, // DICOM/DICONDE
    E { tag: Single(ELEMENT_DIMENSION_A), alias: "ElementDimensionA", vr: DS }, // DICOM/DICONDE
    E { tag: Single(ELEMENT_DIMENSION_B), alias: "ElementDimensionB", vr: DS }, // DICOM/DICONDE
    E { tag: Single(ELEMENT_PITCH_A), alias: "ElementPitchA", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MEASURED_BEAM_DIMENSION_A), alias: "MeasuredBeamDimensionA", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MEASURED_BEAM_DIMENSION_B), alias: "MeasuredBeamDimensionB", vr: DS }, // DICOM/DICONDE
    E { tag: Single(LOCATION_OF_MEASURED_BEAM_DIAMETER), alias: "LocationOfMeasuredBeamDiameter", vr: DS }, // DICOM/DICONDE
    E { tag: Single(NOMINAL_FREQUENCY), alias: "NominalFrequency", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MEASURED_CENTER_FREQUENCY), alias: "MeasuredCenterFrequency", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MEASURED_BANDWIDTH), alias: "MeasuredBandwidth", vr: DS }, // DICOM/DICONDE
    E { tag: Single(ELEMENT_PITCH_B), alias: "ElementPitchB", vr: DS }, // DICOM/DICONDE
    E { tag: Single(PULSER_SETTINGS_SEQUENCE), alias: "PulserSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(PULSE_WIDTH), alias: "PulseWidth", vr: DS }, // DICOM/DICONDE
    E { tag: Single(EXCITATION_FREQUENCY), alias: "ExcitationFrequency", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MODULATION_TYPE), alias: "ModulationType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(DAMPING), alias: "Damping", vr: DS }, // DICOM/DICONDE
    E { tag: Single(RECEIVER_SETTINGS_SEQUENCE), alias: "ReceiverSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(ACQUIRED_SOUNDPATH_LENGTH), alias: "AcquiredSoundpathLength", vr: DS }, // DICOM/DICONDE
    E { tag: Single(ACQUISITION_COMPRESSION_TYPE), alias: "AcquisitionCompressionType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(ACQUISITION_SAMPLE_SIZE), alias: "AcquisitionSampleSize", vr: IS }, // DICOM/DICONDE
    E { tag: Single(RECTIFIER_SMOOTHING), alias: "RectifierSmoothing", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DAC_SEQUENCE), alias: "DACSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(DAC_TYPE), alias: "DACType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(DAC_GAIN_POINTS), alias: "DACGainPoints", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DAC_TIME_POINTS), alias: "DACTimePoints", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DAC_AMPLITUDE), alias: "DACAmplitude", vr: DS }, // DICOM/DICONDE
    E { tag: Single(PRE_AMPLIFIER_SETTINGS_SEQUENCE), alias: "PreAmplifierSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(TRANSMIT_TRANSDUCER_SETTINGS_SEQUENCE), alias: "TransmitTransducerSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(RECEIVE_TRANSDUCER_SETTINGS_SEQUENCE), alias: "ReceiveTransducerSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(INCIDENT_ANGLE), alias: "IncidentAngle", vr: DS }, // DICOM/DICONDE
    E { tag: Single(COUPLING_TECHNIQUE), alias: "CouplingTechnique", vr: ST }, // DICOM/DICONDE
    E { tag: Single(COUPLING_MEDIUM), alias: "CouplingMedium", vr: ST }, // DICOM/DICONDE
    E { tag: Single(COUPLING_VELOCITY), alias: "CouplingVelocity", vr: DS }, // DICOM/DICONDE
    E { tag: Single(PROBE_CENTER_LOCATION_X), alias: "ProbeCenterLocationX", vr: DS }, // DICOM/DICONDE
    E { tag: Single(PROBE_CENTER_LOCATION_Z), alias: "ProbeCenterLocationZ", vr: DS }, // DICOM/DICONDE
    E { tag: Single(SOUND_PATH_LENGTH), alias: "SoundPathLength", vr: DS }, // DICOM/DICONDE
    E { tag: Single(DELAY_LAW_IDENTIFIER), alias: "DelayLawIdentifier", vr: ST }, // DICOM/DICONDE
    E { tag: Single(GATE_SETTINGS_SEQUENCE), alias: "GateSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(GATE_THRESHOLD), alias: "GateThreshold", vr: DS }, // DICOM/DICONDE
    E { tag: Single(VELOCITY_OF_SOUND), alias: "VelocityOfSound", vr: DS }, // DICOM/DICONDE
    E { tag: Single(CALIBRATION_SETTINGS_SEQUENCE), alias: "CalibrationSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(CALIBRATION_PROCEDURE), alias: "CalibrationProcedure", vr: ST }, // DICOM/DICONDE
    E { tag: Single(PROCEDURE_VERSION), alias: "ProcedureVersion", vr: SH }, // DICOM/DICONDE
    E { tag: Single(PROCEDURE_CREATION_DATE), alias: "ProcedureCreationDate", vr: DA }, // DICOM/DICONDE
    E { tag: Single(PROCEDURE_EXPIRATION_DATE), alias: "ProcedureExpirationDate", vr: DA }, // DICOM/DICONDE
    E { tag: Single(PROCEDURE_LAST_MODIFIED_DATE), alias: "ProcedureLastModifiedDate", vr: DA }, // DICOM/DICONDE
    E { tag: Single(CALIBRATION_TIME), alias: "CalibrationTime", vr: TM }, // DICOM/DICONDE
    E { tag: Single(CALIBRATION_DATE), alias: "CalibrationDate", vr: DA }, // DICOM/DICONDE
    E { tag: Single(PROBE_DRIVE_EQUIPMENT_SEQUENCE), alias: "ProbeDriveEquipmentSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(DRIVE_TYPE), alias: "DriveType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(PROBE_DRIVE_NOTES), alias: "ProbeDriveNotes", vr: LT }, // DICOM/DICONDE
    E { tag: Single(DRIVE_PROBE_SEQUENCE), alias: "DriveProbeSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(PROBE_INDUCTANCE), alias: "ProbeInductance", vr: DS }, // DICOM/DICONDE
    E { tag: Single(PROBE_RESISTANCE), alias: "ProbeResistance", vr: DS }, // DICOM/DICONDE
    E { tag: Single(RECEIVE_PROBE_SEQUENCE), alias: "ReceiveProbeSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(PROBE_DRIVE_SETTINGS_SEQUENCE), alias: "ProbeDriveSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(BRIDGE_RESISTORS), alias: "BridgeResistors", vr: DS }, // DICOM/DICONDE
    E { tag: Single(PROBE_ORIENTATION_ANGLE), alias: "ProbeOrientationAngle", vr: DS }, // DICOM/DICONDE
    E { tag: Single(USER_SELECTED_GAIN_Y), alias: "UserSelectedGainY", vr: DS }, // DICOM/DICONDE
    E { tag: Single(USER_SELECTED_PHASE), alias: "UserSelectedPhase", vr: DS }, // DICOM/DICONDE
    E { tag: Single(USER_SELECTED_OFFSET_X), alias: "UserSelectedOffsetX", vr: DS }, // DICOM/DICONDE
    E { tag: Single(USER_SELECTED_OFFSET_Y), alias: "UserSelectedOffsetY", vr: DS }, // DICOM/DICONDE
    E { tag: Single(CHANNEL_SETTINGS_SEQUENCE), alias: "ChannelSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(CHANNEL_THRESHOLD), alias: "ChannelThreshold", vr: DS }, // DICOM/DICONDE
    E { tag: Single(SCANNER_SETTINGS_SEQUENCE), alias: "ScannerSettingsSequence", vr: SQ }, // DICOM/DICONDE
    E { tag: Single(SCAN_PROCEDURE), alias: "ScanProcedure", vr: ST }, // DICOM/DICONDE
    E { tag: Single(TRANSLATION_RATE_X), alias: "TranslationRateX", vr: DS }, // DICOM/DICONDE
    E { tag: Single(TRANSLATION_RATE_Y), alias: "TranslationRateY", vr: DS }, // DICOM/DICONDE
    E { tag: Single(CHANNEL_OVERLAP), alias: "ChannelOverlap", vr: DS }, // DICOM/DICONDE
    E { tag: Single(IMAGE_QUALITY_INDICATOR_TYPE), alias: "ImageQualityIndicatorType", vr: LO }, // DICOM/DICONDE
    E { tag: Single(IMAGE_QUALITY_INDICATOR_MATERIAL), alias: "ImageQualityIndicatorMaterial", vr: LO }, // DICOM/DICONDE
    E { tag: Single(IMAGE_QUALITY_INDICATOR_SIZE), alias: "ImageQualityIndicatorSize", vr: LO }, // DICOM/DICONDE
    E { tag: Single(LINAC_ENERGY), alias: "LINACEnergy", vr: IS }, // DICOM/DICONDE
    E { tag: Single(LINAC_OUTPUT), alias: "LINACOutput", vr: IS }, // DICOM/DICONDE
    E { tag: Single(ACTIVE_APERTURE), alias: "ActiveAperture", vr: US }, // DICOM/DICONDE
    E { tag: Single(TOTAL_APERTURE), alias: "TotalAperture", vr: DS }, // DICOM/DICONDE
    E { tag: Single(APERTURE_ELEVATION), alias: "ApertureElevation", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MAIN_LOBE_ANGLE), alias: "MainLobeAngle", vr: DS }, // DICOM/DICONDE
    E { tag: Single(MAIN_ROOF_ANGLE), alias: "MainRoofAngle", vr: DS }, // DICOM/DICONDE
    E { tag: Single(CONNECTOR_TYPE), alias: "ConnectorType", vr: CS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_MODEL_NUMBER), alias: "WedgeModelNumber", vr: SH }, // DICOM/DICONDE
    E { tag: Single(WEDGE_ANGLE_FLOAT), alias: "WedgeAngleFloat", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_ROOF_ANGLE), alias: "WedgeRoofAngle", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_ELEMENT1_POSITION), alias: "WedgeElement1Position", vr: CS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_MATERIAL_VELOCITY), alias: "WedgeMaterialVelocity", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_MATERIAL), alias: "WedgeMaterial", vr: SH }, // DICOM/DICONDE
    E { tag: Single(WEDGE_OFFSET_Z), alias: "WedgeOffsetZ", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_ORIGIN_OFFSET_X), alias: "WedgeOriginOffsetX", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_TIME_DELAY), alias: "WedgeTimeDelay", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_NAME), alias: "WedgeName", vr: SH }, // DICOM/DICONDE
    E { tag: Single(WEDGE_MANUFACTURER_NAME), alias: "WedgeManufacturerName", vr: SH }, // DICOM/DICONDE
    E { tag: Single(WEDGE_DESCRIPTION), alias: "WedgeDescription", vr: LO }, // DICOM/DICONDE
    E { tag: Single(NOMINAL_BEAM_ANGLE), alias: "NominalBeamAngle", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_OFFSET_X), alias: "WedgeOffsetX", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_OFFSET_Y), alias: "WedgeOffsetY", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_TOTAL_LENGTH), alias: "WedgeTotalLength", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_IN_CONTACT_LENGTH), alias: "WedgeInContactLength", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_FRONT_GAP), alias: "WedgeFrontGap", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_TOTAL_HEIGHT), alias: "WedgeTotalHeight", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_FRONT_HEIGHT), alias: "WedgeFrontHeight", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_REAR_HEIGHT), alias: "WedgeRearHeight", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_TOTAL_WIDTH), alias: "WedgeTotalWidth", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_IN_CONTACT_WIDTH), alias: "WedgeInContactWidth", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_CHAMFER_HEIGHT), alias: "WedgeChamferHeight", vr: DS }, // DICOM/DICONDE
    E { tag: Single(WEDGE_CURVE), alias: "WedgeCurve", vr: CS }, // DICOM/DICONDE
    E { tag: Single(RADIUS_ALONG_WEDGE), alias: "RadiusAlongWedge", vr: DS }, // DICOM/DICONDE
    E { tag: Single(CONTRAST_BOLUS_AGENT), alias: "ContrastBolusAgent", vr: LO }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_AGENT_SEQUENCE), alias: "ContrastBolusAgentSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_T1_RELAXIVITY), alias: "ContrastBolusT1Relaxivity", vr: FL }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE), alias: "ContrastBolusAdministrationRouteSequence", vr: SQ }, // DICOM
    E { tag: Single(BODY_PART_EXAMINED), alias: "BodyPartExamined", vr: CS }, // DICOM
    E { tag: Single(SCANNING_SEQUENCE), alias: "ScanningSequence", vr: CS }, // DICOM
    E { tag: Single(SEQUENCE_VARIANT), alias: "SequenceVariant", vr: CS }, // DICOM
    E { tag: Single(SCAN_OPTIONS), alias: "ScanOptions", vr: CS }, // DICOM
    E { tag: Single(MR_ACQUISITION_TYPE), alias: "MRAcquisitionType", vr: CS }, // DICOM
    E { tag: Single(SEQUENCE_NAME), alias: "SequenceName", vr: SH }, // DICOM
    E { tag: Single(ANGIO_FLAG), alias: "AngioFlag", vr: CS }, // DICOM
    E { tag: Single(INTERVENTION_DRUG_INFORMATION_SEQUENCE), alias: "InterventionDrugInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(INTERVENTION_DRUG_STOP_TIME), alias: "InterventionDrugStopTime", vr: TM }, // DICOM
    E { tag: Single(INTERVENTION_DRUG_DOSE), alias: "InterventionDrugDose", vr: DS }, // DICOM
    E { tag: Single(INTERVENTION_DRUG_CODE_SEQUENCE), alias: "InterventionDrugCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ADDITIONAL_DRUG_SEQUENCE), alias: "AdditionalDrugSequence", vr: SQ }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL), alias: "Radiopharmaceutical", vr: LO }, // DICOM
    E { tag: Single(INTERVENTION_DRUG_NAME), alias: "InterventionDrugName", vr: LO }, // DICOM
    E { tag: Single(INTERVENTION_DRUG_START_TIME), alias: "InterventionDrugStartTime", vr: TM }, // DICOM
    E { tag: Single(INTERVENTION_SEQUENCE), alias: "InterventionSequence", vr: SQ }, // DICOM
    E { tag: Single(INTERVENTION_STATUS), alias: "InterventionStatus", vr: CS }, // DICOM
    E { tag: Single(INTERVENTION_DESCRIPTION), alias: "InterventionDescription", vr: ST }, // DICOM
    E { tag: Single(CINE_RATE), alias: "CineRate", vr: IS }, // DICOM
    E { tag: Single(INITIAL_CINE_RUN_STATE), alias: "InitialCineRunState", vr: CS }, // DICOM
    E { tag: Single(SLICE_THICKNESS), alias: "SliceThickness", vr: DS }, // DICOM
    E { tag: Single(KVP), alias: "KVP", vr: DS }, // DICOM
    E { tag: Single(COUNTS_ACCUMULATED), alias: "CountsAccumulated", vr: IS }, // DICOM
    E { tag: Single(ACQUISITION_TERMINATION_CONDITION), alias: "AcquisitionTerminationCondition", vr: CS }, // DICOM
    E { tag: Single(EFFECTIVE_DURATION), alias: "EffectiveDuration", vr: DS }, // DICOM
    E { tag: Single(ACQUISITION_START_CONDITION), alias: "AcquisitionStartCondition", vr: CS }, // DICOM
    E { tag: Single(ACQUISITION_START_CONDITION_DATA), alias: "AcquisitionStartConditionData", vr: IS }, // DICOM
    E { tag: Single(ACQUISITION_TERMINATION_CONDITION_DATA), alias: "AcquisitionTerminationConditionData", vr: IS }, // DICOM
    E { tag: Single(REPETITION_TIME), alias: "RepetitionTime", vr: DS }, // DICOM
    E { tag: Single(ECHO_TIME), alias: "EchoTime", vr: DS }, // DICOM
    E { tag: Single(INVERSION_TIME), alias: "InversionTime", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_AVERAGES), alias: "NumberOfAverages", vr: DS }, // DICOM
    E { tag: Single(IMAGING_FREQUENCY), alias: "ImagingFrequency", vr: DS }, // DICOM
    E { tag: Single(IMAGED_NUCLEUS), alias: "ImagedNucleus", vr: SH }, // DICOM
    E { tag: Single(ECHO_NUMBERS), alias: "EchoNumbers", vr: IS }, // DICOM
    E { tag: Single(MAGNETIC_FIELD_STRENGTH), alias: "MagneticFieldStrength", vr: DS }, // DICOM
    E { tag: Single(SPACING_BETWEEN_SLICES), alias: "SpacingBetweenSlices", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_PHASE_ENCODING_STEPS), alias: "NumberOfPhaseEncodingSteps", vr: IS }, // DICOM
    E { tag: Single(DATA_COLLECTION_DIAMETER), alias: "DataCollectionDiameter", vr: DS }, // DICOM
    E { tag: Single(ECHO_TRAIN_LENGTH), alias: "EchoTrainLength", vr: IS }, // DICOM
    E { tag: Single(PERCENT_SAMPLING), alias: "PercentSampling", vr: DS }, // DICOM
    E { tag: Single(PERCENT_PHASE_FIELD_OF_VIEW), alias: "PercentPhaseFieldOfView", vr: DS }, // DICOM
    E { tag: Single(PIXEL_BANDWIDTH), alias: "PixelBandwidth", vr: DS }, // DICOM
    E { tag: Single(DEVICE_SERIAL_NUMBER), alias: "DeviceSerialNumber", vr: LO }, // DICOM
    E { tag: Single(DEVICE_UID), alias: "DeviceUID", vr: UI }, // DICOM
    E { tag: Single(DEVICE_ID), alias: "DeviceID", vr: LO }, // DICOM
    E { tag: Single(PLATE_ID), alias: "PlateID", vr: LO }, // DICOM
    E { tag: Single(GENERATOR_ID), alias: "GeneratorID", vr: LO }, // DICOM
    E { tag: Single(GRID_ID), alias: "GridID", vr: LO }, // DICOM
    E { tag: Single(CASSETTE_ID), alias: "CassetteID", vr: LO }, // DICOM
    E { tag: Single(GANTRY_ID), alias: "GantryID", vr: LO }, // DICOM
    E { tag: Single(UNIQUE_DEVICE_IDENTIFIER), alias: "UniqueDeviceIdentifier", vr: UT }, // DICOM
    E { tag: Single(UDI_SEQUENCE), alias: "UDISequence", vr: SQ }, // DICOM
    E { tag: Single(SECONDARY_CAPTURE_DEVICE_ID), alias: "SecondaryCaptureDeviceID", vr: LO }, // DICOM
    E { tag: Single(DATE_OF_SECONDARY_CAPTURE), alias: "DateOfSecondaryCapture", vr: DA }, // DICOM
    E { tag: Single(TIME_OF_SECONDARY_CAPTURE), alias: "TimeOfSecondaryCapture", vr: TM }, // DICOM
    E { tag: Single(SECONDARY_CAPTURE_DEVICE_MANUFACTURER), alias: "SecondaryCaptureDeviceManufacturer", vr: LO }, // DICOM
    E { tag: Single(SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME), alias: "SecondaryCaptureDeviceManufacturerModelName", vr: LO }, // DICOM
    E { tag: Single(SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS), alias: "SecondaryCaptureDeviceSoftwareVersions", vr: LO }, // DICOM
    E { tag: Single(SOFTWARE_VERSIONS), alias: "SoftwareVersions", vr: LO }, // DICOM
    E { tag: Single(VIDEO_IMAGE_FORMAT_ACQUIRED), alias: "VideoImageFormatAcquired", vr: SH }, // DICOM
    E { tag: Single(DIGITAL_IMAGE_FORMAT_ACQUIRED), alias: "DigitalImageFormatAcquired", vr: LO }, // DICOM
    E { tag: Single(PROTOCOL_NAME), alias: "ProtocolName", vr: LO }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_ROUTE), alias: "ContrastBolusRoute", vr: LO }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_VOLUME), alias: "ContrastBolusVolume", vr: DS }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_START_TIME), alias: "ContrastBolusStartTime", vr: TM }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_STOP_TIME), alias: "ContrastBolusStopTime", vr: TM }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_TOTAL_DOSE), alias: "ContrastBolusTotalDose", vr: DS }, // DICOM
    E { tag: Single(SYRINGE_COUNTS), alias: "SyringeCounts", vr: IS }, // DICOM
    E { tag: Single(CONTRAST_FLOW_RATE), alias: "ContrastFlowRate", vr: DS }, // DICOM
    E { tag: Single(CONTRAST_FLOW_DURATION), alias: "ContrastFlowDuration", vr: DS }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_INGREDIENT), alias: "ContrastBolusIngredient", vr: CS }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_INGREDIENT_CONCENTRATION), alias: "ContrastBolusIngredientConcentration", vr: DS }, // DICOM
    E { tag: Single(SPATIAL_RESOLUTION), alias: "SpatialResolution", vr: DS }, // DICOM
    E { tag: Single(TRIGGER_TIME), alias: "TriggerTime", vr: DS }, // DICOM
    E { tag: Single(TRIGGER_SOURCE_OR_TYPE), alias: "TriggerSourceOrType", vr: LO }, // DICOM
    E { tag: Single(NOMINAL_INTERVAL), alias: "NominalInterval", vr: IS }, // DICOM
    E { tag: Single(FRAME_TIME), alias: "FrameTime", vr: DS }, // DICOM
    E { tag: Single(CARDIAC_FRAMING_TYPE), alias: "CardiacFramingType", vr: LO }, // DICOM
    E { tag: Single(FRAME_TIME_VECTOR), alias: "FrameTimeVector", vr: DS }, // DICOM
    E { tag: Single(FRAME_DELAY), alias: "FrameDelay", vr: DS }, // DICOM
    E { tag: Single(IMAGE_TRIGGER_DELAY), alias: "ImageTriggerDelay", vr: DS }, // DICOM
    E { tag: Single(MULTIPLEX_GROUP_TIME_OFFSET), alias: "MultiplexGroupTimeOffset", vr: DS }, // DICOM
    E { tag: Single(TRIGGER_TIME_OFFSET), alias: "TriggerTimeOffset", vr: DS }, // DICOM
    E { tag: Single(SYNCHRONIZATION_TRIGGER), alias: "SynchronizationTrigger", vr: CS }, // DICOM
    E { tag: Single(SYNCHRONIZATION_CHANNEL), alias: "SynchronizationChannel", vr: US }, // DICOM
    E { tag: Single(TRIGGER_SAMPLE_POSITION), alias: "TriggerSamplePosition", vr: UL }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_ROUTE), alias: "RadiopharmaceuticalRoute", vr: LO }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_VOLUME), alias: "RadiopharmaceuticalVolume", vr: DS }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_START_TIME), alias: "RadiopharmaceuticalStartTime", vr: TM }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_STOP_TIME), alias: "RadiopharmaceuticalStopTime", vr: TM }, // DICOM
    E { tag: Single(RADIONUCLIDE_TOTAL_DOSE), alias: "RadionuclideTotalDose", vr: DS }, // DICOM
    E { tag: Single(RADIONUCLIDE_HALF_LIFE), alias: "RadionuclideHalfLife", vr: DS }, // DICOM
    E { tag: Single(RADIONUCLIDE_POSITRON_FRACTION), alias: "RadionuclidePositronFraction", vr: DS }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY), alias: "RadiopharmaceuticalSpecificActivity", vr: DS }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_START_DATE_TIME), alias: "RadiopharmaceuticalStartDateTime", vr: DT }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_STOP_DATE_TIME), alias: "RadiopharmaceuticalStopDateTime", vr: DT }, // DICOM
    E { tag: Single(BEAT_REJECTION_FLAG), alias: "BeatRejectionFlag", vr: CS }, // DICOM
    E { tag: Single(LOW_RR_VALUE), alias: "LowRRValue", vr: IS }, // DICOM
    E { tag: Single(HIGH_RR_VALUE), alias: "HighRRValue", vr: IS }, // DICOM
    E { tag: Single(INTERVALS_ACQUIRED), alias: "IntervalsAcquired", vr: IS }, // DICOM
    E { tag: Single(INTERVALS_REJECTED), alias: "IntervalsRejected", vr: IS }, // DICOM
    E { tag: Single(PVC_REJECTION), alias: "PVCRejection", vr: LO }, // DICOM
    E { tag: Single(SKIP_BEATS), alias: "SkipBeats", vr: IS }, // DICOM
    E { tag: Single(HEART_RATE), alias: "HeartRate", vr: IS }, // DICOM
    E { tag: Single(CARDIAC_NUMBER_OF_IMAGES), alias: "CardiacNumberOfImages", vr: IS }, // DICOM
    E { tag: Single(TRIGGER_WINDOW), alias: "TriggerWindow", vr: IS }, // DICOM
    E { tag: Single(RECONSTRUCTION_DIAMETER), alias: "ReconstructionDiameter", vr: DS }, // DICOM
    E { tag: Single(DISTANCE_SOURCE_TO_DETECTOR), alias: "DistanceSourceToDetector", vr: DS }, // DICOM
    E { tag: Single(DISTANCE_SOURCE_TO_PATIENT), alias: "DistanceSourceToPatient", vr: DS }, // DICOM
    E { tag: Single(ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR), alias: "EstimatedRadiographicMagnificationFactor", vr: DS }, // DICOM
    E { tag: Single(GANTRY_DETECTOR_TILT), alias: "GantryDetectorTilt", vr: DS }, // DICOM
    E { tag: Single(GANTRY_DETECTOR_SLEW), alias: "GantryDetectorSlew", vr: DS }, // DICOM
    E { tag: Single(TABLE_HEIGHT), alias: "TableHeight", vr: DS }, // DICOM
    E { tag: Single(TABLE_TRAVERSE), alias: "TableTraverse", vr: DS }, // DICOM
    E { tag: Single(TABLE_MOTION), alias: "TableMotion", vr: CS }, // DICOM
    E { tag: Single(TABLE_VERTICAL_INCREMENT), alias: "TableVerticalIncrement", vr: DS }, // DICOM
    E { tag: Single(TABLE_LATERAL_INCREMENT), alias: "TableLateralIncrement", vr: DS }, // DICOM
    E { tag: Single(TABLE_LONGITUDINAL_INCREMENT), alias: "TableLongitudinalIncrement", vr: DS }, // DICOM
    E { tag: Single(TABLE_ANGLE), alias: "TableAngle", vr: DS }, // DICOM
    E { tag: Single(TABLE_TYPE), alias: "TableType", vr: CS }, // DICOM
    E { tag: Single(ROTATION_DIRECTION), alias: "RotationDirection", vr: CS }, // DICOM
    E { tag: Single(RADIAL_POSITION), alias: "RadialPosition", vr: DS }, // DICOM
    E { tag: Single(SCAN_ARC), alias: "ScanArc", vr: DS }, // DICOM
    E { tag: Single(ANGULAR_STEP), alias: "AngularStep", vr: DS }, // DICOM
    E { tag: Single(CENTER_OF_ROTATION_OFFSET), alias: "CenterOfRotationOffset", vr: DS }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_SHAPE), alias: "FieldOfViewShape", vr: CS }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_DIMENSIONS), alias: "FieldOfViewDimensions", vr: IS }, // DICOM
    E { tag: Single(EXPOSURE_TIME), alias: "ExposureTime", vr: IS }, // DICOM
    E { tag: Single(X_RAY_TUBE_CURRENT), alias: "XRayTubeCurrent", vr: IS }, // DICOM
    E { tag: Single(EXPOSURE), alias: "Exposure", vr: IS }, // DICOM
    E { tag: Single(EXPOSURE_INU_AS), alias: "ExposureInuAs", vr: IS }, // DICOM
    E { tag: Single(AVERAGE_PULSE_WIDTH), alias: "AveragePulseWidth", vr: DS }, // DICOM
    E { tag: Single(RADIATION_SETTING), alias: "RadiationSetting", vr: CS }, // DICOM
    E { tag: Single(RECTIFICATION_TYPE), alias: "RectificationType", vr: CS }, // DICOM
    E { tag: Single(RADIATION_MODE), alias: "RadiationMode", vr: CS }, // DICOM
    E { tag: Single(IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT), alias: "ImageAndFluoroscopyAreaDoseProduct", vr: DS }, // DICOM
    E { tag: Single(FILTER_TYPE), alias: "FilterType", vr: SH }, // DICOM
    E { tag: Single(TYPE_OF_FILTERS), alias: "TypeOfFilters", vr: LO }, // DICOM
    E { tag: Single(INTENSIFIER_SIZE), alias: "IntensifierSize", vr: DS }, // DICOM
    E { tag: Single(IMAGER_PIXEL_SPACING), alias: "ImagerPixelSpacing", vr: DS }, // DICOM
    E { tag: Single(GRID), alias: "Grid", vr: CS }, // DICOM
    E { tag: Single(GENERATOR_POWER), alias: "GeneratorPower", vr: IS }, // DICOM
    E { tag: Single(COLLIMATOR_GRID_NAME), alias: "CollimatorGridName", vr: SH }, // DICOM
    E { tag: Single(COLLIMATOR_TYPE), alias: "CollimatorType", vr: CS }, // DICOM
    E { tag: Single(FOCAL_DISTANCE), alias: "FocalDistance", vr: IS }, // DICOM
    E { tag: Single(X_FOCUS_CENTER), alias: "XFocusCenter", vr: DS }, // DICOM
    E { tag: Single(Y_FOCUS_CENTER), alias: "YFocusCenter", vr: DS }, // DICOM
    E { tag: Single(FOCAL_SPOTS), alias: "FocalSpots", vr: DS }, // DICOM
    E { tag: Single(ANODE_TARGET_MATERIAL), alias: "AnodeTargetMaterial", vr: CS }, // DICOM
    E { tag: Single(BODY_PART_THICKNESS), alias: "BodyPartThickness", vr: DS }, // DICOM
    E { tag: Single(COMPRESSION_FORCE), alias: "CompressionForce", vr: DS }, // DICOM
    E { tag: Single(COMPRESSION_PRESSURE), alias: "CompressionPressure", vr: DS }, // DICOM
    E { tag: Single(PADDLE_DESCRIPTION), alias: "PaddleDescription", vr: LO }, // DICOM
    E { tag: Single(COMPRESSION_CONTACT_AREA), alias: "CompressionContactArea", vr: DS }, // DICOM
    E { tag: Single(DATE_OF_LAST_CALIBRATION), alias: "DateOfLastCalibration", vr: DA }, // DICOM
    E { tag: Single(TIME_OF_LAST_CALIBRATION), alias: "TimeOfLastCalibration", vr: TM }, // DICOM
    E { tag: Single(DATE_TIME_OF_LAST_CALIBRATION), alias: "DateTimeOfLastCalibration", vr: DT }, // DICOM
    E { tag: Single(CONVOLUTION_KERNEL), alias: "ConvolutionKernel", vr: SH }, // DICOM
    E { tag: Single(ACTUAL_FRAME_DURATION), alias: "ActualFrameDuration", vr: IS }, // DICOM
    E { tag: Single(COUNT_RATE), alias: "CountRate", vr: IS }, // DICOM
    E { tag: Single(PREFERRED_PLAYBACK_SEQUENCING), alias: "PreferredPlaybackSequencing", vr: US }, // DICOM
    E { tag: Single(RECEIVE_COIL_NAME), alias: "ReceiveCoilName", vr: SH }, // DICOM
    E { tag: Single(TRANSMIT_COIL_NAME), alias: "TransmitCoilName", vr: SH }, // DICOM
    E { tag: Single(PLATE_TYPE), alias: "PlateType", vr: SH }, // DICOM
    E { tag: Single(PHOSPHOR_TYPE), alias: "PhosphorType", vr: LO }, // DICOM
    E { tag: Single(WATER_EQUIVALENT_DIAMETER), alias: "WaterEquivalentDiameter", vr: FD }, // DICOM
    E { tag: Single(WATER_EQUIVALENT_DIAMETER_CALCULATION_METHOD_CODE_SEQUENCE), alias: "WaterEquivalentDiameterCalculationMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCAN_VELOCITY), alias: "ScanVelocity", vr: DS }, // DICOM
    E { tag: Single(WHOLE_BODY_TECHNIQUE), alias: "WholeBodyTechnique", vr: CS }, // DICOM
    E { tag: Single(SCAN_LENGTH), alias: "ScanLength", vr: IS }, // DICOM
    E { tag: Single(ACQUISITION_MATRIX), alias: "AcquisitionMatrix", vr: US }, // DICOM
    E { tag: Single(IN_PLANE_PHASE_ENCODING_DIRECTION), alias: "InPlanePhaseEncodingDirection", vr: CS }, // DICOM
    E { tag: Single(FLIP_ANGLE), alias: "FlipAngle", vr: DS }, // DICOM
    E { tag: Single(VARIABLE_FLIP_ANGLE_FLAG), alias: "VariableFlipAngleFlag", vr: CS }, // DICOM
    E { tag: Single(SAR), alias: "SAR", vr: DS }, // DICOM
    E { tag: Single(D_BDT), alias: "dBdt", vr: DS }, // DICOM
    E { tag: Single(B1RMS), alias: "B1rms", vr: FL }, // DICOM
    E { tag: Single(ACQUISITION_DEVICE_PROCESSING_DESCRIPTION), alias: "AcquisitionDeviceProcessingDescription", vr: LO }, // DICOM
    E { tag: Single(ACQUISITION_DEVICE_PROCESSING_CODE), alias: "AcquisitionDeviceProcessingCode", vr: LO }, // DICOM
    E { tag: Single(CASSETTE_ORIENTATION), alias: "CassetteOrientation", vr: CS }, // DICOM
    E { tag: Single(CASSETTE_SIZE), alias: "CassetteSize", vr: CS }, // DICOM
    E { tag: Single(EXPOSURES_ON_PLATE), alias: "ExposuresOnPlate", vr: US }, // DICOM
    E { tag: Single(RELATIVE_X_RAY_EXPOSURE), alias: "RelativeXRayExposure", vr: IS }, // DICOM
    E { tag: Single(EXPOSURE_INDEX), alias: "ExposureIndex", vr: DS }, // DICOM
    E { tag: Single(TARGET_EXPOSURE_INDEX), alias: "TargetExposureIndex", vr: DS }, // DICOM
    E { tag: Single(DEVIATION_INDEX), alias: "DeviationIndex", vr: DS }, // DICOM
    E { tag: Single(COLUMN_ANGULATION), alias: "ColumnAngulation", vr: DS }, // DICOM
    E { tag: Single(TOMO_LAYER_HEIGHT), alias: "TomoLayerHeight", vr: DS }, // DICOM
    E { tag: Single(TOMO_ANGLE), alias: "TomoAngle", vr: DS }, // DICOM
    E { tag: Single(TOMO_TIME), alias: "TomoTime", vr: DS }, // DICOM
    E { tag: Single(TOMO_TYPE), alias: "TomoType", vr: CS }, // DICOM
    E { tag: Single(TOMO_CLASS), alias: "TomoClass", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES), alias: "NumberOfTomosynthesisSourceImages", vr: IS }, // DICOM
    E { tag: Single(POSITIONER_MOTION), alias: "PositionerMotion", vr: CS }, // DICOM
    E { tag: Single(POSITIONER_TYPE), alias: "PositionerType", vr: CS }, // DICOM
    E { tag: Single(POSITIONER_PRIMARY_ANGLE), alias: "PositionerPrimaryAngle", vr: DS }, // DICOM
    E { tag: Single(POSITIONER_SECONDARY_ANGLE), alias: "PositionerSecondaryAngle", vr: DS }, // DICOM
    E { tag: Single(POSITIONER_PRIMARY_ANGLE_INCREMENT), alias: "PositionerPrimaryAngleIncrement", vr: DS }, // DICOM
    E { tag: Single(POSITIONER_SECONDARY_ANGLE_INCREMENT), alias: "PositionerSecondaryAngleIncrement", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_PRIMARY_ANGLE), alias: "DetectorPrimaryAngle", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_SECONDARY_ANGLE), alias: "DetectorSecondaryAngle", vr: DS }, // DICOM
    E { tag: Single(SHUTTER_SHAPE), alias: "ShutterShape", vr: CS }, // DICOM
    E { tag: Single(SHUTTER_LEFT_VERTICAL_EDGE), alias: "ShutterLeftVerticalEdge", vr: IS }, // DICOM
    E { tag: Single(SHUTTER_RIGHT_VERTICAL_EDGE), alias: "ShutterRightVerticalEdge", vr: IS }, // DICOM
    E { tag: Single(SHUTTER_UPPER_HORIZONTAL_EDGE), alias: "ShutterUpperHorizontalEdge", vr: IS }, // DICOM
    E { tag: Single(SHUTTER_LOWER_HORIZONTAL_EDGE), alias: "ShutterLowerHorizontalEdge", vr: IS }, // DICOM
    E { tag: Single(CENTER_OF_CIRCULAR_SHUTTER), alias: "CenterOfCircularShutter", vr: IS }, // DICOM
    E { tag: Single(RADIUS_OF_CIRCULAR_SHUTTER), alias: "RadiusOfCircularShutter", vr: IS }, // DICOM
    E { tag: Single(VERTICES_OF_THE_POLYGONAL_SHUTTER), alias: "VerticesOfThePolygonalShutter", vr: IS }, // DICOM
    E { tag: Single(SHUTTER_PRESENTATION_VALUE), alias: "ShutterPresentationValue", vr: US }, // DICOM
    E { tag: Single(SHUTTER_OVERLAY_GROUP), alias: "ShutterOverlayGroup", vr: US }, // DICOM
    E { tag: Single(SHUTTER_PRESENTATION_COLOR_CIE_LAB_VALUE), alias: "ShutterPresentationColorCIELabValue", vr: US }, // DICOM
    E { tag: Single(COLLIMATOR_SHAPE), alias: "CollimatorShape", vr: CS }, // DICOM
    E { tag: Single(COLLIMATOR_LEFT_VERTICAL_EDGE), alias: "CollimatorLeftVerticalEdge", vr: IS }, // DICOM
    E { tag: Single(COLLIMATOR_RIGHT_VERTICAL_EDGE), alias: "CollimatorRightVerticalEdge", vr: IS }, // DICOM
    E { tag: Single(COLLIMATOR_UPPER_HORIZONTAL_EDGE), alias: "CollimatorUpperHorizontalEdge", vr: IS }, // DICOM
    E { tag: Single(COLLIMATOR_LOWER_HORIZONTAL_EDGE), alias: "CollimatorLowerHorizontalEdge", vr: IS }, // DICOM
    E { tag: Single(CENTER_OF_CIRCULAR_COLLIMATOR), alias: "CenterOfCircularCollimator", vr: IS }, // DICOM
    E { tag: Single(RADIUS_OF_CIRCULAR_COLLIMATOR), alias: "RadiusOfCircularCollimator", vr: IS }, // DICOM
    E { tag: Single(VERTICES_OF_THE_POLYGONAL_COLLIMATOR), alias: "VerticesOfThePolygonalCollimator", vr: IS }, // DICOM
    E { tag: Single(ACQUISITION_TIME_SYNCHRONIZED), alias: "AcquisitionTimeSynchronized", vr: CS }, // DICOM
    E { tag: Single(TIME_SOURCE), alias: "TimeSource", vr: SH }, // DICOM
    E { tag: Single(TIME_DISTRIBUTION_PROTOCOL), alias: "TimeDistributionProtocol", vr: CS }, // DICOM
    E { tag: Single(NTP_SOURCE_ADDRESS), alias: "NTPSourceAddress", vr: LO }, // DICOM
    E { tag: Single(PAGE_NUMBER_VECTOR), alias: "PageNumberVector", vr: IS }, // DICOM
    E { tag: Single(FRAME_LABEL_VECTOR), alias: "FrameLabelVector", vr: SH }, // DICOM
    E { tag: Single(FRAME_PRIMARY_ANGLE_VECTOR), alias: "FramePrimaryAngleVector", vr: DS }, // DICOM
    E { tag: Single(FRAME_SECONDARY_ANGLE_VECTOR), alias: "FrameSecondaryAngleVector", vr: DS }, // DICOM
    E { tag: Single(SLICE_LOCATION_VECTOR), alias: "SliceLocationVector", vr: DS }, // DICOM
    E { tag: Single(DISPLAY_WINDOW_LABEL_VECTOR), alias: "DisplayWindowLabelVector", vr: SH }, // DICOM
    E { tag: Single(NOMINAL_SCANNED_PIXEL_SPACING), alias: "NominalScannedPixelSpacing", vr: DS }, // DICOM
    E { tag: Single(DIGITIZING_DEVICE_TRANSPORT_DIRECTION), alias: "DigitizingDeviceTransportDirection", vr: CS }, // DICOM
    E { tag: Single(ROTATION_OF_SCANNED_FILM), alias: "RotationOfScannedFilm", vr: DS }, // DICOM
    E { tag: Single(BIOPSY_TARGET_SEQUENCE), alias: "BiopsyTargetSequence", vr: SQ }, // DICOM
    E { tag: Single(TARGET_UID), alias: "TargetUID", vr: UI }, // DICOM
    E { tag: Single(LOCALIZING_CURSOR_POSITION), alias: "LocalizingCursorPosition", vr: FL }, // DICOM
    E { tag: Single(CALCULATED_TARGET_POSITION), alias: "CalculatedTargetPosition", vr: FL }, // DICOM
    E { tag: Single(TARGET_LABEL), alias: "TargetLabel", vr: SH }, // DICOM
    E { tag: Single(DISPLAYED_Z_VALUE), alias: "DisplayedZValue", vr: FL }, // DICOM
    E { tag: Single(IVUS_ACQUISITION), alias: "IVUSAcquisition", vr: CS }, // DICOM
    E { tag: Single(IVUS_PULLBACK_RATE), alias: "IVUSPullbackRate", vr: DS }, // DICOM
    E { tag: Single(IVUS_GATED_RATE), alias: "IVUSGatedRate", vr: DS }, // DICOM
    E { tag: Single(IVUS_PULLBACK_START_FRAME_NUMBER), alias: "IVUSPullbackStartFrameNumber", vr: IS }, // DICOM
    E { tag: Single(IVUS_PULLBACK_STOP_FRAME_NUMBER), alias: "IVUSPullbackStopFrameNumber", vr: IS }, // DICOM
    E { tag: Single(LESION_NUMBER), alias: "LesionNumber", vr: IS }, // DICOM
    E { tag: Single(OUTPUT_POWER), alias: "OutputPower", vr: SH }, // DICOM
    E { tag: Single(TRANSDUCER_DATA), alias: "TransducerData", vr: LO }, // DICOM
    E { tag: Single(FOCUS_DEPTH), alias: "FocusDepth", vr: DS }, // DICOM
    E { tag: Single(PROCESSING_FUNCTION), alias: "ProcessingFunction", vr: LO }, // DICOM
    E { tag: Single(MECHANICAL_INDEX), alias: "MechanicalIndex", vr: DS }, // DICOM
    E { tag: Single(BONE_THERMAL_INDEX), alias: "BoneThermalIndex", vr: DS }, // DICOM
    E { tag: Single(CRANIAL_THERMAL_INDEX), alias: "CranialThermalIndex", vr: DS }, // DICOM
    E { tag: Single(SOFT_TISSUE_THERMAL_INDEX), alias: "SoftTissueThermalIndex", vr: DS }, // DICOM
    E { tag: Single(SOFT_TISSUE_FOCUS_THERMAL_INDEX), alias: "SoftTissueFocusThermalIndex", vr: DS }, // DICOM
    E { tag: Single(SOFT_TISSUE_SURFACE_THERMAL_INDEX), alias: "SoftTissueSurfaceThermalIndex", vr: DS }, // DICOM
    E { tag: Single(DEPTH_OF_SCAN_FIELD), alias: "DepthOfScanField", vr: IS }, // DICOM
    E { tag: Single(PATIENT_POSITION), alias: "PatientPosition", vr: CS }, // DICOM
    E { tag: Single(VIEW_POSITION), alias: "ViewPosition", vr: CS }, // DICOM
    E { tag: Single(PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE), alias: "ProjectionEponymousNameCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SENSITIVITY), alias: "Sensitivity", vr: DS }, // DICOM
    E { tag: Single(SEQUENCE_OF_ULTRASOUND_REGIONS), alias: "SequenceOfUltrasoundRegions", vr: SQ }, // DICOM
    E { tag: Single(REGION_SPATIAL_FORMAT), alias: "RegionSpatialFormat", vr: US }, // DICOM
    E { tag: Single(REGION_DATA_TYPE), alias: "RegionDataType", vr: US }, // DICOM
    E { tag: Single(REGION_FLAGS), alias: "RegionFlags", vr: UL }, // DICOM
    E { tag: Single(REGION_LOCATION_MIN_X0), alias: "RegionLocationMinX0", vr: UL }, // DICOM
    E { tag: Single(REGION_LOCATION_MIN_Y0), alias: "RegionLocationMinY0", vr: UL }, // DICOM
    E { tag: Single(REGION_LOCATION_MAX_X1), alias: "RegionLocationMaxX1", vr: UL }, // DICOM
    E { tag: Single(REGION_LOCATION_MAX_Y1), alias: "RegionLocationMaxY1", vr: UL }, // DICOM
    E { tag: Single(REFERENCE_PIXEL_X0), alias: "ReferencePixelX0", vr: SL }, // DICOM
    E { tag: Single(REFERENCE_PIXEL_Y0), alias: "ReferencePixelY0", vr: SL }, // DICOM
    E { tag: Single(PHYSICAL_UNITS_X_DIRECTION), alias: "PhysicalUnitsXDirection", vr: US }, // DICOM
    E { tag: Single(PHYSICAL_UNITS_Y_DIRECTION), alias: "PhysicalUnitsYDirection", vr: US }, // DICOM
    E { tag: Single(REFERENCE_PIXEL_PHYSICAL_VALUE_X), alias: "ReferencePixelPhysicalValueX", vr: FD }, // DICOM
    E { tag: Single(REFERENCE_PIXEL_PHYSICAL_VALUE_Y), alias: "ReferencePixelPhysicalValueY", vr: FD }, // DICOM
    E { tag: Single(PHYSICAL_DELTA_X), alias: "PhysicalDeltaX", vr: FD }, // DICOM
    E { tag: Single(PHYSICAL_DELTA_Y), alias: "PhysicalDeltaY", vr: FD }, // DICOM
    E { tag: Single(TRANSDUCER_FREQUENCY), alias: "TransducerFrequency", vr: UL }, // DICOM
    E { tag: Single(TRANSDUCER_TYPE), alias: "TransducerType", vr: CS }, // DICOM
    E { tag: Single(PULSE_REPETITION_FREQUENCY), alias: "PulseRepetitionFrequency", vr: UL }, // DICOM
    E { tag: Single(DOPPLER_CORRECTION_ANGLE), alias: "DopplerCorrectionAngle", vr: FD }, // DICOM
    E { tag: Single(STEERING_ANGLE), alias: "SteeringAngle", vr: FD }, // DICOM
    E { tag: Single(DOPPLER_SAMPLE_VOLUME_X_POSITION), alias: "DopplerSampleVolumeXPosition", vr: SL }, // DICOM
    E { tag: Single(DOPPLER_SAMPLE_VOLUME_Y_POSITION), alias: "DopplerSampleVolumeYPosition", vr: SL }, // DICOM
    E { tag: Single(TM_LINE_POSITION_X0), alias: "TMLinePositionX0", vr: SL }, // DICOM
    E { tag: Single(TM_LINE_POSITION_Y0), alias: "TMLinePositionY0", vr: SL }, // DICOM
    E { tag: Single(TM_LINE_POSITION_X1), alias: "TMLinePositionX1", vr: SL }, // DICOM
    E { tag: Single(TM_LINE_POSITION_Y1), alias: "TMLinePositionY1", vr: SL }, // DICOM
    E { tag: Single(PIXEL_COMPONENT_ORGANIZATION), alias: "PixelComponentOrganization", vr: US }, // DICOM
    E { tag: Single(PIXEL_COMPONENT_MASK), alias: "PixelComponentMask", vr: UL }, // DICOM
    E { tag: Single(PIXEL_COMPONENT_RANGE_START), alias: "PixelComponentRangeStart", vr: UL }, // DICOM
    E { tag: Single(PIXEL_COMPONENT_RANGE_STOP), alias: "PixelComponentRangeStop", vr: UL }, // DICOM
    E { tag: Single(PIXEL_COMPONENT_PHYSICAL_UNITS), alias: "PixelComponentPhysicalUnits", vr: US }, // DICOM
    E { tag: Single(PIXEL_COMPONENT_DATA_TYPE), alias: "PixelComponentDataType", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_TABLE_BREAK_POINTS), alias: "NumberOfTableBreakPoints", vr: UL }, // DICOM
    E { tag: Single(TABLE_OF_X_BREAK_POINTS), alias: "TableOfXBreakPoints", vr: UL }, // DICOM
    E { tag: Single(TABLE_OF_Y_BREAK_POINTS), alias: "TableOfYBreakPoints", vr: FD }, // DICOM
    E { tag: Single(NUMBER_OF_TABLE_ENTRIES), alias: "NumberOfTableEntries", vr: UL }, // DICOM
    E { tag: Single(TABLE_OF_PIXEL_VALUES), alias: "TableOfPixelValues", vr: UL }, // DICOM
    E { tag: Single(TABLE_OF_PARAMETER_VALUES), alias: "TableOfParameterValues", vr: FL }, // DICOM
    E { tag: Single(R_WAVE_TIME_VECTOR), alias: "RWaveTimeVector", vr: FL }, // DICOM
    E { tag: Single(DETECTOR_CONDITIONS_NOMINAL_FLAG), alias: "DetectorConditionsNominalFlag", vr: CS }, // DICOM
    E { tag: Single(DETECTOR_TEMPERATURE), alias: "DetectorTemperature", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_TYPE), alias: "DetectorType", vr: CS }, // DICOM
    E { tag: Single(DETECTOR_CONFIGURATION), alias: "DetectorConfiguration", vr: CS }, // DICOM
    E { tag: Single(DETECTOR_DESCRIPTION), alias: "DetectorDescription", vr: LT }, // DICOM
    E { tag: Single(DETECTOR_MODE), alias: "DetectorMode", vr: LT }, // DICOM
    E { tag: Single(DETECTOR_ID), alias: "DetectorID", vr: SH }, // DICOM
    E { tag: Single(DATE_OF_LAST_DETECTOR_CALIBRATION), alias: "DateOfLastDetectorCalibration", vr: DA }, // DICOM
    E { tag: Single(TIME_OF_LAST_DETECTOR_CALIBRATION), alias: "TimeOfLastDetectorCalibration", vr: TM }, // DICOM
    E { tag: Single(EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION), alias: "ExposuresOnDetectorSinceLastCalibration", vr: IS }, // DICOM
    E { tag: Single(EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED), alias: "ExposuresOnDetectorSinceManufactured", vr: IS }, // DICOM
    E { tag: Single(DETECTOR_TIME_SINCE_LAST_EXPOSURE), alias: "DetectorTimeSinceLastExposure", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_ACTIVE_TIME), alias: "DetectorActiveTime", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE), alias: "DetectorActivationOffsetFromExposure", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_BINNING), alias: "DetectorBinning", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_ELEMENT_PHYSICAL_SIZE), alias: "DetectorElementPhysicalSize", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_ELEMENT_SPACING), alias: "DetectorElementSpacing", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_ACTIVE_SHAPE), alias: "DetectorActiveShape", vr: CS }, // DICOM
    E { tag: Single(DETECTOR_ACTIVE_DIMENSIONS), alias: "DetectorActiveDimensions", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_ACTIVE_ORIGIN), alias: "DetectorActiveOrigin", vr: DS }, // DICOM
    E { tag: Single(DETECTOR_MANUFACTURER_NAME), alias: "DetectorManufacturerName", vr: LO }, // DICOM
    E { tag: Single(DETECTOR_MANUFACTURER_MODEL_NAME), alias: "DetectorManufacturerModelName", vr: LO }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_ORIGIN), alias: "FieldOfViewOrigin", vr: DS }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_ROTATION), alias: "FieldOfViewRotation", vr: DS }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_HORIZONTAL_FLIP), alias: "FieldOfViewHorizontalFlip", vr: CS }, // DICOM
    E { tag: Single(PIXEL_DATA_AREA_ORIGIN_RELATIVE_TO_FOV), alias: "PixelDataAreaOriginRelativeToFOV", vr: FL }, // DICOM
    E { tag: Single(PIXEL_DATA_AREA_ROTATION_ANGLE_RELATIVE_TO_FOV), alias: "PixelDataAreaRotationAngleRelativeToFOV", vr: FL }, // DICOM
    E { tag: Single(GRID_ABSORBING_MATERIAL), alias: "GridAbsorbingMaterial", vr: LT }, // DICOM
    E { tag: Single(GRID_SPACING_MATERIAL), alias: "GridSpacingMaterial", vr: LT }, // DICOM
    E { tag: Single(GRID_THICKNESS), alias: "GridThickness", vr: DS }, // DICOM
    E { tag: Single(GRID_PITCH), alias: "GridPitch", vr: DS }, // DICOM
    E { tag: Single(GRID_ASPECT_RATIO), alias: "GridAspectRatio", vr: IS }, // DICOM
    E { tag: Single(GRID_PERIOD), alias: "GridPeriod", vr: DS }, // DICOM
    E { tag: Single(GRID_FOCAL_DISTANCE), alias: "GridFocalDistance", vr: DS }, // DICOM
    E { tag: Single(FILTER_MATERIAL), alias: "FilterMaterial", vr: CS }, // DICOM
    E { tag: Single(FILTER_THICKNESS_MINIMUM), alias: "FilterThicknessMinimum", vr: DS }, // DICOM
    E { tag: Single(FILTER_THICKNESS_MAXIMUM), alias: "FilterThicknessMaximum", vr: DS }, // DICOM
    E { tag: Single(FILTER_BEAM_PATH_LENGTH_MINIMUM), alias: "FilterBeamPathLengthMinimum", vr: FL }, // DICOM
    E { tag: Single(FILTER_BEAM_PATH_LENGTH_MAXIMUM), alias: "FilterBeamPathLengthMaximum", vr: FL }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_MODE), alias: "ExposureControlMode", vr: CS }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_MODE_DESCRIPTION), alias: "ExposureControlModeDescription", vr: LT }, // DICOM
    E { tag: Single(EXPOSURE_STATUS), alias: "ExposureStatus", vr: CS }, // DICOM
    E { tag: Single(PHOTOTIMER_SETTING), alias: "PhototimerSetting", vr: DS }, // DICOM
    E { tag: Single(EXPOSURE_TIME_INU_S), alias: "ExposureTimeInuS", vr: DS }, // DICOM
    E { tag: Single(X_RAY_TUBE_CURRENT_INU_A), alias: "XRayTubeCurrentInuA", vr: DS }, // DICOM
    E { tag: Single(CONTENT_QUALIFICATION), alias: "ContentQualification", vr: CS }, // DICOM
    E { tag: Single(PULSE_SEQUENCE_NAME), alias: "PulseSequenceName", vr: SH }, // DICOM
    E { tag: Single(MR_IMAGING_MODIFIER_SEQUENCE), alias: "MRImagingModifierSequence", vr: SQ }, // DICOM
    E { tag: Single(ECHO_PULSE_SEQUENCE), alias: "EchoPulseSequence", vr: CS }, // DICOM
    E { tag: Single(INVERSION_RECOVERY), alias: "InversionRecovery", vr: CS }, // DICOM
    E { tag: Single(FLOW_COMPENSATION), alias: "FlowCompensation", vr: CS }, // DICOM
    E { tag: Single(MULTIPLE_SPIN_ECHO), alias: "MultipleSpinEcho", vr: CS }, // DICOM
    E { tag: Single(MULTI_PLANAR_EXCITATION), alias: "MultiPlanarExcitation", vr: CS }, // DICOM
    E { tag: Single(PHASE_CONTRAST), alias: "PhaseContrast", vr: CS }, // DICOM
    E { tag: Single(TIME_OF_FLIGHT_CONTRAST), alias: "TimeOfFlightContrast", vr: CS }, // DICOM
    E { tag: Single(SPOILING), alias: "Spoiling", vr: CS }, // DICOM
    E { tag: Single(STEADY_STATE_PULSE_SEQUENCE), alias: "SteadyStatePulseSequence", vr: CS }, // DICOM
    E { tag: Single(ECHO_PLANAR_PULSE_SEQUENCE), alias: "EchoPlanarPulseSequence", vr: CS }, // DICOM
    E { tag: Single(TAG_ANGLE_FIRST_AXIS), alias: "TagAngleFirstAxis", vr: FD }, // DICOM
    E { tag: Single(MAGNETIZATION_TRANSFER), alias: "MagnetizationTransfer", vr: CS }, // DICOM
    E { tag: Single(T2_PREPARATION), alias: "T2Preparation", vr: CS }, // DICOM
    E { tag: Single(BLOOD_SIGNAL_NULLING), alias: "BloodSignalNulling", vr: CS }, // DICOM
    E { tag: Single(SATURATION_RECOVERY), alias: "SaturationRecovery", vr: CS }, // DICOM
    E { tag: Single(SPECTRALLY_SELECTED_SUPPRESSION), alias: "SpectrallySelectedSuppression", vr: CS }, // DICOM
    E { tag: Single(SPECTRALLY_SELECTED_EXCITATION), alias: "SpectrallySelectedExcitation", vr: CS }, // DICOM
    E { tag: Single(SPATIAL_PRESATURATION), alias: "SpatialPresaturation", vr: CS }, // DICOM
    E { tag: Single(TAGGING), alias: "Tagging", vr: CS }, // DICOM
    E { tag: Single(OVERSAMPLING_PHASE), alias: "OversamplingPhase", vr: CS }, // DICOM
    E { tag: Single(TAG_SPACING_FIRST_DIMENSION), alias: "TagSpacingFirstDimension", vr: FD }, // DICOM
    E { tag: Single(GEOMETRY_OF_K_SPACE_TRAVERSAL), alias: "GeometryOfKSpaceTraversal", vr: CS }, // DICOM
    E { tag: Single(SEGMENTED_K_SPACE_TRAVERSAL), alias: "SegmentedKSpaceTraversal", vr: CS }, // DICOM
    E { tag: Single(RECTILINEAR_PHASE_ENCODE_REORDERING), alias: "RectilinearPhaseEncodeReordering", vr: CS }, // DICOM
    E { tag: Single(TAG_THICKNESS), alias: "TagThickness", vr: FD }, // DICOM
    E { tag: Single(PARTIAL_FOURIER_DIRECTION), alias: "PartialFourierDirection", vr: CS }, // DICOM
    E { tag: Single(CARDIAC_SYNCHRONIZATION_TECHNIQUE), alias: "CardiacSynchronizationTechnique", vr: CS }, // DICOM
    E { tag: Single(RECEIVE_COIL_MANUFACTURER_NAME), alias: "ReceiveCoilManufacturerName", vr: LO }, // DICOM
    E { tag: Single(MR_RECEIVE_COIL_SEQUENCE), alias: "MRReceiveCoilSequence", vr: SQ }, // DICOM
    E { tag: Single(RECEIVE_COIL_TYPE), alias: "ReceiveCoilType", vr: CS }, // DICOM
    E { tag: Single(QUADRATURE_RECEIVE_COIL), alias: "QuadratureReceiveCoil", vr: CS }, // DICOM
    E { tag: Single(MULTI_COIL_DEFINITION_SEQUENCE), alias: "MultiCoilDefinitionSequence", vr: SQ }, // DICOM
    E { tag: Single(MULTI_COIL_CONFIGURATION), alias: "MultiCoilConfiguration", vr: LO }, // DICOM
    E { tag: Single(MULTI_COIL_ELEMENT_NAME), alias: "MultiCoilElementName", vr: SH }, // DICOM
    E { tag: Single(MULTI_COIL_ELEMENT_USED), alias: "MultiCoilElementUsed", vr: CS }, // DICOM
    E { tag: Single(MR_TRANSMIT_COIL_SEQUENCE), alias: "MRTransmitCoilSequence", vr: SQ }, // DICOM
    E { tag: Single(TRANSMIT_COIL_MANUFACTURER_NAME), alias: "TransmitCoilManufacturerName", vr: LO }, // DICOM
    E { tag: Single(TRANSMIT_COIL_TYPE), alias: "TransmitCoilType", vr: CS }, // DICOM
    E { tag: Single(SPECTRAL_WIDTH), alias: "SpectralWidth", vr: FD }, // DICOM
    E { tag: Single(CHEMICAL_SHIFT_REFERENCE), alias: "ChemicalShiftReference", vr: FD }, // DICOM
    E { tag: Single(VOLUME_LOCALIZATION_TECHNIQUE), alias: "VolumeLocalizationTechnique", vr: CS }, // DICOM
    E { tag: Single(MR_ACQUISITION_FREQUENCY_ENCODING_STEPS), alias: "MRAcquisitionFrequencyEncodingSteps", vr: US }, // DICOM
    E { tag: Single(DECOUPLING), alias: "Decoupling", vr: CS }, // DICOM
    E { tag: Single(DECOUPLED_NUCLEUS), alias: "DecoupledNucleus", vr: CS }, // DICOM
    E { tag: Single(DECOUPLING_FREQUENCY), alias: "DecouplingFrequency", vr: FD }, // DICOM
    E { tag: Single(DECOUPLING_METHOD), alias: "DecouplingMethod", vr: CS }, // DICOM
    E { tag: Single(DECOUPLING_CHEMICAL_SHIFT_REFERENCE), alias: "DecouplingChemicalShiftReference", vr: FD }, // DICOM
    E { tag: Single(K_SPACE_FILTERING), alias: "KSpaceFiltering", vr: CS }, // DICOM
    E { tag: Single(TIME_DOMAIN_FILTERING), alias: "TimeDomainFiltering", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_ZERO_FILLS), alias: "NumberOfZeroFills", vr: US }, // DICOM
    E { tag: Single(BASELINE_CORRECTION), alias: "BaselineCorrection", vr: CS }, // DICOM
    E { tag: Single(PARALLEL_REDUCTION_FACTOR_IN_PLANE), alias: "ParallelReductionFactorInPlane", vr: FD }, // DICOM
    E { tag: Single(CARDIAC_RR_INTERVAL_SPECIFIED), alias: "CardiacRRIntervalSpecified", vr: FD }, // DICOM
    E { tag: Single(ACQUISITION_DURATION), alias: "AcquisitionDuration", vr: FD }, // DICOM
    E { tag: Single(FRAME_ACQUISITION_DATE_TIME), alias: "FrameAcquisitionDateTime", vr: DT }, // DICOM
    E { tag: Single(DIFFUSION_DIRECTIONALITY), alias: "DiffusionDirectionality", vr: CS }, // DICOM
    E { tag: Single(DIFFUSION_GRADIENT_DIRECTION_SEQUENCE), alias: "DiffusionGradientDirectionSequence", vr: SQ }, // DICOM
    E { tag: Single(PARALLEL_ACQUISITION), alias: "ParallelAcquisition", vr: CS }, // DICOM
    E { tag: Single(PARALLEL_ACQUISITION_TECHNIQUE), alias: "ParallelAcquisitionTechnique", vr: CS }, // DICOM
    E { tag: Single(INVERSION_TIMES), alias: "InversionTimes", vr: FD }, // DICOM
    E { tag: Single(METABOLITE_MAP_DESCRIPTION), alias: "MetaboliteMapDescription", vr: ST }, // DICOM
    E { tag: Single(PARTIAL_FOURIER), alias: "PartialFourier", vr: CS }, // DICOM
    E { tag: Single(EFFECTIVE_ECHO_TIME), alias: "EffectiveEchoTime", vr: FD }, // DICOM
    E { tag: Single(METABOLITE_MAP_CODE_SEQUENCE), alias: "MetaboliteMapCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CHEMICAL_SHIFT_SEQUENCE), alias: "ChemicalShiftSequence", vr: SQ }, // DICOM
    E { tag: Single(CARDIAC_SIGNAL_SOURCE), alias: "CardiacSignalSource", vr: CS }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE), alias: "DiffusionBValue", vr: FD }, // DICOM
    E { tag: Single(DIFFUSION_GRADIENT_ORIENTATION), alias: "DiffusionGradientOrientation", vr: FD }, // DICOM
    E { tag: Single(VELOCITY_ENCODING_DIRECTION), alias: "VelocityEncodingDirection", vr: FD }, // DICOM
    E { tag: Single(VELOCITY_ENCODING_MINIMUM_VALUE), alias: "VelocityEncodingMinimumValue", vr: FD }, // DICOM
    E { tag: Single(VELOCITY_ENCODING_ACQUISITION_SEQUENCE), alias: "VelocityEncodingAcquisitionSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_K_SPACE_TRAJECTORIES), alias: "NumberOfKSpaceTrajectories", vr: US }, // DICOM
    E { tag: Single(COVERAGE_OF_K_SPACE), alias: "CoverageOfKSpace", vr: CS }, // DICOM
    E { tag: Single(SPECTROSCOPY_ACQUISITION_PHASE_ROWS), alias: "SpectroscopyAcquisitionPhaseRows", vr: UL }, // DICOM
    E { tag: Single(TRANSMITTER_FREQUENCY), alias: "TransmitterFrequency", vr: FD }, // DICOM
    E { tag: Single(RESONANT_NUCLEUS), alias: "ResonantNucleus", vr: CS }, // DICOM
    E { tag: Single(FREQUENCY_CORRECTION), alias: "FrequencyCorrection", vr: CS }, // DICOM
    E { tag: Single(MR_SPECTROSCOPY_FOV_GEOMETRY_SEQUENCE), alias: "MRSpectroscopyFOVGeometrySequence", vr: SQ }, // DICOM
    E { tag: Single(SLAB_THICKNESS), alias: "SlabThickness", vr: FD }, // DICOM
    E { tag: Single(SLAB_ORIENTATION), alias: "SlabOrientation", vr: FD }, // DICOM
    E { tag: Single(MID_SLAB_POSITION), alias: "MidSlabPosition", vr: FD }, // DICOM
    E { tag: Single(MR_SPATIAL_SATURATION_SEQUENCE), alias: "MRSpatialSaturationSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_TIMING_AND_RELATED_PARAMETERS_SEQUENCE), alias: "MRTimingAndRelatedParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_ECHO_SEQUENCE), alias: "MREchoSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_MODIFIER_SEQUENCE), alias: "MRModifierSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_DIFFUSION_SEQUENCE), alias: "MRDiffusionSequence", vr: SQ }, // DICOM
    E { tag: Single(CARDIAC_SYNCHRONIZATION_SEQUENCE), alias: "CardiacSynchronizationSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_AVERAGES_SEQUENCE), alias: "MRAveragesSequence", vr: SQ }, // DICOM
    E { tag: Single(MRFOV_GEOMETRY_SEQUENCE), alias: "MRFOVGeometrySequence", vr: SQ }, // DICOM
    E { tag: Single(VOLUME_LOCALIZATION_SEQUENCE), alias: "VolumeLocalizationSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECTROSCOPY_ACQUISITION_DATA_COLUMNS), alias: "SpectroscopyAcquisitionDataColumns", vr: UL }, // DICOM
    E { tag: Single(DIFFUSION_ANISOTROPY_TYPE), alias: "DiffusionAnisotropyType", vr: CS }, // DICOM
    E { tag: Single(FRAME_REFERENCE_DATE_TIME), alias: "FrameReferenceDateTime", vr: DT }, // DICOM
    E { tag: Single(MR_METABOLITE_MAP_SEQUENCE), alias: "MRMetaboliteMapSequence", vr: SQ }, // DICOM
    E { tag: Single(PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE), alias: "ParallelReductionFactorOutOfPlane", vr: FD }, // DICOM
    E { tag: Single(SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS), alias: "SpectroscopyAcquisitionOutOfPlanePhaseSteps", vr: UL }, // DICOM
    E { tag: Single(PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE), alias: "ParallelReductionFactorSecondInPlane", vr: FD }, // DICOM
    E { tag: Single(CARDIAC_BEAT_REJECTION_TECHNIQUE), alias: "CardiacBeatRejectionTechnique", vr: CS }, // DICOM
    E { tag: Single(RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE), alias: "RespiratoryMotionCompensationTechnique", vr: CS }, // DICOM
    E { tag: Single(RESPIRATORY_SIGNAL_SOURCE), alias: "RespiratorySignalSource", vr: CS }, // DICOM
    E { tag: Single(BULK_MOTION_COMPENSATION_TECHNIQUE), alias: "BulkMotionCompensationTechnique", vr: CS }, // DICOM
    E { tag: Single(BULK_MOTION_SIGNAL_SOURCE), alias: "BulkMotionSignalSource", vr: CS }, // DICOM
    E { tag: Single(APPLICABLE_SAFETY_STANDARD_AGENCY), alias: "ApplicableSafetyStandardAgency", vr: CS }, // DICOM
    E { tag: Single(APPLICABLE_SAFETY_STANDARD_DESCRIPTION), alias: "ApplicableSafetyStandardDescription", vr: LO }, // DICOM
    E { tag: Single(OPERATING_MODE_SEQUENCE), alias: "OperatingModeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPERATING_MODE_TYPE), alias: "OperatingModeType", vr: CS }, // DICOM
    E { tag: Single(OPERATING_MODE), alias: "OperatingMode", vr: CS }, // DICOM
    E { tag: Single(SPECIFIC_ABSORPTION_RATE_DEFINITION), alias: "SpecificAbsorptionRateDefinition", vr: CS }, // DICOM
    E { tag: Single(GRADIENT_OUTPUT_TYPE), alias: "GradientOutputType", vr: CS }, // DICOM
    E { tag: Single(SPECIFIC_ABSORPTION_RATE_VALUE), alias: "SpecificAbsorptionRateValue", vr: FD }, // DICOM
    E { tag: Single(GRADIENT_OUTPUT), alias: "GradientOutput", vr: FD }, // DICOM
    E { tag: Single(FLOW_COMPENSATION_DIRECTION), alias: "FlowCompensationDirection", vr: CS }, // DICOM
    E { tag: Single(TAGGING_DELAY), alias: "TaggingDelay", vr: FD }, // DICOM
    E { tag: Single(RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION), alias: "RespiratoryMotionCompensationTechniqueDescription", vr: ST }, // DICOM
    E { tag: Single(RESPIRATORY_SIGNAL_SOURCE_ID), alias: "RespiratorySignalSourceID", vr: SH }, // DICOM
    E { tag: Single(MR_VELOCITY_ENCODING_SEQUENCE), alias: "MRVelocityEncodingSequence", vr: SQ }, // DICOM
    E { tag: Single(FIRST_ORDER_PHASE_CORRECTION), alias: "FirstOrderPhaseCorrection", vr: CS }, // DICOM
    E { tag: Single(WATER_REFERENCED_PHASE_CORRECTION), alias: "WaterReferencedPhaseCorrection", vr: CS }, // DICOM
    E { tag: Single(MR_SPECTROSCOPY_ACQUISITION_TYPE), alias: "MRSpectroscopyAcquisitionType", vr: CS }, // DICOM
    E { tag: Single(RESPIRATORY_CYCLE_POSITION), alias: "RespiratoryCyclePosition", vr: CS }, // DICOM
    E { tag: Single(VELOCITY_ENCODING_MAXIMUM_VALUE), alias: "VelocityEncodingMaximumValue", vr: FD }, // DICOM
    E { tag: Single(TAG_SPACING_SECOND_DIMENSION), alias: "TagSpacingSecondDimension", vr: FD }, // DICOM
    E { tag: Single(TAG_ANGLE_SECOND_AXIS), alias: "TagAngleSecondAxis", vr: SS }, // DICOM
    E { tag: Single(FRAME_ACQUISITION_DURATION), alias: "FrameAcquisitionDuration", vr: FD }, // DICOM
    E { tag: Single(MR_IMAGE_FRAME_TYPE_SEQUENCE), alias: "MRImageFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_SPECTROSCOPY_FRAME_TYPE_SEQUENCE), alias: "MRSpectroscopyFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(MR_ACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE), alias: "MRAcquisitionPhaseEncodingStepsInPlane", vr: US }, // DICOM
    E { tag: Single(MR_ACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE), alias: "MRAcquisitionPhaseEncodingStepsOutOfPlane", vr: US }, // DICOM
    E { tag: Single(SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS), alias: "SpectroscopyAcquisitionPhaseColumns", vr: UL }, // DICOM
    E { tag: Single(CARDIAC_CYCLE_POSITION), alias: "CardiacCyclePosition", vr: CS }, // DICOM
    E { tag: Single(SPECIFIC_ABSORPTION_RATE_SEQUENCE), alias: "SpecificAbsorptionRateSequence", vr: SQ }, // DICOM
    E { tag: Single(RF_ECHO_TRAIN_LENGTH), alias: "RFEchoTrainLength", vr: US }, // DICOM
    E { tag: Single(GRADIENT_ECHO_TRAIN_LENGTH), alias: "GradientEchoTrainLength", vr: US }, // DICOM
    E { tag: Single(ARTERIAL_SPIN_LABELING_CONTRAST), alias: "ArterialSpinLabelingContrast", vr: CS }, // DICOM
    E { tag: Single(MR_ARTERIAL_SPIN_LABELING_SEQUENCE), alias: "MRArterialSpinLabelingSequence", vr: SQ }, // DICOM
    E { tag: Single(ASL_TECHNIQUE_DESCRIPTION), alias: "ASLTechniqueDescription", vr: LO }, // DICOM
    E { tag: Single(ASL_SLAB_NUMBER), alias: "ASLSlabNumber", vr: US }, // DICOM
    E { tag: Single(ASL_SLAB_THICKNESS), alias: "ASLSlabThickness", vr: FD }, // DICOM
    E { tag: Single(ASL_SLAB_ORIENTATION), alias: "ASLSlabOrientation", vr: FD }, // DICOM
    E { tag: Single(ASL_MID_SLAB_POSITION), alias: "ASLMidSlabPosition", vr: FD }, // DICOM
    E { tag: Single(ASL_CONTEXT), alias: "ASLContext", vr: CS }, // DICOM
    E { tag: Single(ASL_PULSE_TRAIN_DURATION), alias: "ASLPulseTrainDuration", vr: UL }, // DICOM
    E { tag: Single(ASL_CRUSHER_FLAG), alias: "ASLCrusherFlag", vr: CS }, // DICOM
    E { tag: Single(ASL_CRUSHER_FLOW_LIMIT), alias: "ASLCrusherFlowLimit", vr: FD }, // DICOM
    E { tag: Single(ASL_CRUSHER_DESCRIPTION), alias: "ASLCrusherDescription", vr: LO }, // DICOM
    E { tag: Single(ASL_BOLUS_CUTOFF_FLAG), alias: "ASLBolusCutoffFlag", vr: CS }, // DICOM
    E { tag: Single(ASL_BOLUS_CUTOFF_TIMING_SEQUENCE), alias: "ASLBolusCutoffTimingSequence", vr: SQ }, // DICOM
    E { tag: Single(ASL_BOLUS_CUTOFF_TECHNIQUE), alias: "ASLBolusCutoffTechnique", vr: LO }, // DICOM
    E { tag: Single(ASL_BOLUS_CUTOFF_DELAY_TIME), alias: "ASLBolusCutoffDelayTime", vr: UL }, // DICOM
    E { tag: Single(ASL_SLAB_SEQUENCE), alias: "ASLSlabSequence", vr: SQ }, // DICOM
    E { tag: Single(CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM), alias: "ChemicalShiftMinimumIntegrationLimitInppm", vr: FD }, // DICOM
    E { tag: Single(CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM), alias: "ChemicalShiftMaximumIntegrationLimitInppm", vr: FD }, // DICOM
    E { tag: Single(WATER_REFERENCE_ACQUISITION), alias: "WaterReferenceAcquisition", vr: CS }, // DICOM
    E { tag: Single(ECHO_PEAK_POSITION), alias: "EchoPeakPosition", vr: IS }, // DICOM
    E { tag: Single(CT_ACQUISITION_TYPE_SEQUENCE), alias: "CTAcquisitionTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(ACQUISITION_TYPE), alias: "AcquisitionType", vr: CS }, // DICOM
    E { tag: Single(TUBE_ANGLE), alias: "TubeAngle", vr: FD }, // DICOM
    E { tag: Single(CT_ACQUISITION_DETAILS_SEQUENCE), alias: "CTAcquisitionDetailsSequence", vr: SQ }, // DICOM
    E { tag: Single(REVOLUTION_TIME), alias: "RevolutionTime", vr: FD }, // DICOM
    E { tag: Single(SINGLE_COLLIMATION_WIDTH), alias: "SingleCollimationWidth", vr: FD }, // DICOM
    E { tag: Single(TOTAL_COLLIMATION_WIDTH), alias: "TotalCollimationWidth", vr: FD }, // DICOM
    E { tag: Single(CT_TABLE_DYNAMICS_SEQUENCE), alias: "CTTableDynamicsSequence", vr: SQ }, // DICOM
    E { tag: Single(TABLE_SPEED), alias: "TableSpeed", vr: FD }, // DICOM
    E { tag: Single(TABLE_FEED_PER_ROTATION), alias: "TableFeedPerRotation", vr: FD }, // DICOM
    E { tag: Single(SPIRAL_PITCH_FACTOR), alias: "SpiralPitchFactor", vr: FD }, // DICOM
    E { tag: Single(CT_GEOMETRY_SEQUENCE), alias: "CTGeometrySequence", vr: SQ }, // DICOM
    E { tag: Single(DATA_COLLECTION_CENTER_PATIENT), alias: "DataCollectionCenterPatient", vr: FD }, // DICOM
    E { tag: Single(CT_RECONSTRUCTION_SEQUENCE), alias: "CTReconstructionSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_ALGORITHM), alias: "ReconstructionAlgorithm", vr: CS }, // DICOM
    E { tag: Single(CONVOLUTION_KERNEL_GROUP), alias: "ConvolutionKernelGroup", vr: CS }, // DICOM
    E { tag: Single(RECONSTRUCTION_FIELD_OF_VIEW), alias: "ReconstructionFieldOfView", vr: FD }, // DICOM
    E { tag: Single(RECONSTRUCTION_TARGET_CENTER_PATIENT), alias: "ReconstructionTargetCenterPatient", vr: FD }, // DICOM
    E { tag: Single(RECONSTRUCTION_ANGLE), alias: "ReconstructionAngle", vr: FD }, // DICOM
    E { tag: Single(IMAGE_FILTER), alias: "ImageFilter", vr: SH }, // DICOM
    E { tag: Single(CT_EXPOSURE_SEQUENCE), alias: "CTExposureSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_PIXEL_SPACING), alias: "ReconstructionPixelSpacing", vr: FD }, // DICOM
    E { tag: Single(EXPOSURE_MODULATION_TYPE), alias: "ExposureModulationType", vr: CS }, // DICOM
    E { tag: Single(ESTIMATED_DOSE_SAVING), alias: "EstimatedDoseSaving", vr: FD }, // DICOM
    E { tag: Single(CTX_RAY_DETAILS_SEQUENCE), alias: "CTXRayDetailsSequence", vr: SQ }, // DICOM
    E { tag: Single(CT_POSITION_SEQUENCE), alias: "CTPositionSequence", vr: SQ }, // DICOM
    E { tag: Single(TABLE_POSITION), alias: "TablePosition", vr: FD }, // DICOM
    E { tag: Single(EXPOSURE_TIME_INMS), alias: "ExposureTimeInms", vr: FD }, // DICOM
    E { tag: Single(CT_IMAGE_FRAME_TYPE_SEQUENCE), alias: "CTImageFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY_TUBE_CURRENT_INM_A), alias: "XRayTubeCurrentInmA", vr: FD }, // DICOM
    E { tag: Single(EXPOSURE_INM_AS), alias: "ExposureInmAs", vr: FD }, // DICOM
    E { tag: Single(CONSTANT_VOLUME_FLAG), alias: "ConstantVolumeFlag", vr: CS }, // DICOM
    E { tag: Single(FLUOROSCOPY_FLAG), alias: "FluoroscopyFlag", vr: CS }, // DICOM
    E { tag: Single(DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER), alias: "DistanceSourceToDataCollectionCenter", vr: FD }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_AGENT_NUMBER), alias: "ContrastBolusAgentNumber", vr: US }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE), alias: "ContrastBolusIngredientCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE), alias: "ContrastAdministrationProfileSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_USAGE_SEQUENCE), alias: "ContrastBolusUsageSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_AGENT_ADMINISTERED), alias: "ContrastBolusAgentAdministered", vr: CS }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_AGENT_DETECTED), alias: "ContrastBolusAgentDetected", vr: CS }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_AGENT_PHASE), alias: "ContrastBolusAgentPhase", vr: CS }, // DICOM
    E { tag: Single(CTD_IVOL), alias: "CTDIvol", vr: FD }, // DICOM
    E { tag: Single(CTDI_PHANTOM_TYPE_CODE_SEQUENCE), alias: "CTDIPhantomTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CALCIUM_SCORING_MASS_FACTOR_PATIENT), alias: "CalciumScoringMassFactorPatient", vr: FL }, // DICOM
    E { tag: Single(CALCIUM_SCORING_MASS_FACTOR_DEVICE), alias: "CalciumScoringMassFactorDevice", vr: FL }, // DICOM
    E { tag: Single(ENERGY_WEIGHTING_FACTOR), alias: "EnergyWeightingFactor", vr: FL }, // DICOM
    E { tag: Single(CT_ADDITIONAL_X_RAY_SOURCE_SEQUENCE), alias: "CTAdditionalXRaySourceSequence", vr: SQ }, // DICOM
    E { tag: Single(PROJECTION_PIXEL_CALIBRATION_SEQUENCE), alias: "ProjectionPixelCalibrationSequence", vr: SQ }, // DICOM
    E { tag: Single(DISTANCE_SOURCE_TO_ISOCENTER), alias: "DistanceSourceToIsocenter", vr: FL }, // DICOM
    E { tag: Single(DISTANCE_OBJECT_TO_TABLE_TOP), alias: "DistanceObjectToTableTop", vr: FL }, // DICOM
    E { tag: Single(OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM), alias: "ObjectPixelSpacingInCenterOfBeam", vr: FL }, // DICOM
    E { tag: Single(POSITIONER_POSITION_SEQUENCE), alias: "PositionerPositionSequence", vr: SQ }, // DICOM
    E { tag: Single(TABLE_POSITION_SEQUENCE), alias: "TablePositionSequence", vr: SQ }, // DICOM
    E { tag: Single(COLLIMATOR_SHAPE_SEQUENCE), alias: "CollimatorShapeSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANES_IN_ACQUISITION), alias: "PlanesInAcquisition", vr: CS }, // DICOM
    E { tag: Single(XAXRF_FRAME_CHARACTERISTICS_SEQUENCE), alias: "XAXRFFrameCharacteristicsSequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_ACQUISITION_SEQUENCE), alias: "FrameAcquisitionSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY_RECEPTOR_TYPE), alias: "XRayReceptorType", vr: CS }, // DICOM
    E { tag: Single(ACQUISITION_PROTOCOL_NAME), alias: "AcquisitionProtocolName", vr: LO }, // DICOM
    E { tag: Single(ACQUISITION_PROTOCOL_DESCRIPTION), alias: "AcquisitionProtocolDescription", vr: LT }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_INGREDIENT_OPAQUE), alias: "ContrastBolusIngredientOpaque", vr: CS }, // DICOM
    E { tag: Single(DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING), alias: "DistanceReceptorPlaneToDetectorHousing", vr: FL }, // DICOM
    E { tag: Single(INTENSIFIER_ACTIVE_SHAPE), alias: "IntensifierActiveShape", vr: CS }, // DICOM
    E { tag: Single(INTENSIFIER_ACTIVE_DIMENSIONS), alias: "IntensifierActiveDimensions", vr: FL }, // DICOM
    E { tag: Single(PHYSICAL_DETECTOR_SIZE), alias: "PhysicalDetectorSize", vr: FL }, // DICOM
    E { tag: Single(POSITION_OF_ISOCENTER_PROJECTION), alias: "PositionOfIsocenterProjection", vr: FL }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_SEQUENCE), alias: "FieldOfViewSequence", vr: SQ }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_DESCRIPTION), alias: "FieldOfViewDescription", vr: LO }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE), alias: "ExposureControlSensingRegionsSequence", vr: SQ }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_SENSING_REGION_SHAPE), alias: "ExposureControlSensingRegionShape", vr: CS }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE), alias: "ExposureControlSensingRegionLeftVerticalEdge", vr: SS }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE), alias: "ExposureControlSensingRegionRightVerticalEdge", vr: SS }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE), alias: "ExposureControlSensingRegionUpperHorizontalEdge", vr: SS }, // DICOM
    E { tag: Single(EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE), alias: "ExposureControlSensingRegionLowerHorizontalEdge", vr: SS }, // DICOM
    E { tag: Single(CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION), alias: "CenterOfCircularExposureControlSensingRegion", vr: SS }, // DICOM
    E { tag: Single(RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION), alias: "RadiusOfCircularExposureControlSensingRegion", vr: US }, // DICOM
    E { tag: Single(VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION), alias: "VerticesOfThePolygonalExposureControlSensingRegion", vr: SS }, // DICOM
    E { tag: Single(COLUMN_ANGULATION_PATIENT), alias: "ColumnAngulationPatient", vr: FL }, // DICOM
    E { tag: Single(BEAM_ANGLE), alias: "BeamAngle", vr: FL }, // DICOM
    E { tag: Single(FRAME_DETECTOR_PARAMETERS_SEQUENCE), alias: "FrameDetectorParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(CALCULATED_ANATOMY_THICKNESS), alias: "CalculatedAnatomyThickness", vr: FL }, // DICOM
    E { tag: Single(CALIBRATION_SEQUENCE), alias: "CalibrationSequence", vr: SQ }, // DICOM
    E { tag: Single(OBJECT_THICKNESS_SEQUENCE), alias: "ObjectThicknessSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANE_IDENTIFICATION), alias: "PlaneIdentification", vr: CS }, // DICOM
    E { tag: Single(FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT), alias: "FieldOfViewDimensionsInFloat", vr: FL }, // DICOM
    E { tag: Single(ISOCENTER_REFERENCE_SYSTEM_SEQUENCE), alias: "IsocenterReferenceSystemSequence", vr: SQ }, // DICOM
    E { tag: Single(POSITIONER_ISOCENTER_PRIMARY_ANGLE), alias: "PositionerIsocenterPrimaryAngle", vr: FL }, // DICOM
    E { tag: Single(POSITIONER_ISOCENTER_SECONDARY_ANGLE), alias: "PositionerIsocenterSecondaryAngle", vr: FL }, // DICOM
    E { tag: Single(POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE), alias: "PositionerIsocenterDetectorRotationAngle", vr: FL }, // DICOM
    E { tag: Single(TABLE_X_POSITION_TO_ISOCENTER), alias: "TableXPositionToIsocenter", vr: FL }, // DICOM
    E { tag: Single(TABLE_Y_POSITION_TO_ISOCENTER), alias: "TableYPositionToIsocenter", vr: FL }, // DICOM
    E { tag: Single(TABLE_Z_POSITION_TO_ISOCENTER), alias: "TableZPositionToIsocenter", vr: FL }, // DICOM
    E { tag: Single(TABLE_HORIZONTAL_ROTATION_ANGLE), alias: "TableHorizontalRotationAngle", vr: FL }, // DICOM
    E { tag: Single(TABLE_HEAD_TILT_ANGLE), alias: "TableHeadTiltAngle", vr: FL }, // DICOM
    E { tag: Single(TABLE_CRADLE_TILT_ANGLE), alias: "TableCradleTiltAngle", vr: FL }, // DICOM
    E { tag: Single(FRAME_DISPLAY_SHUTTER_SEQUENCE), alias: "FrameDisplayShutterSequence", vr: SQ }, // DICOM
    E { tag: Single(ACQUIRED_IMAGE_AREA_DOSE_PRODUCT), alias: "AcquiredImageAreaDoseProduct", vr: FL }, // DICOM
    E { tag: Single(C_ARM_POSITIONER_TABLETOP_RELATIONSHIP), alias: "CArmPositionerTabletopRelationship", vr: CS }, // DICOM
    E { tag: Single(X_RAY_GEOMETRY_SEQUENCE), alias: "XRayGeometrySequence", vr: SQ }, // DICOM
    E { tag: Single(IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE), alias: "IrradiationEventIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY3_D_FRAME_TYPE_SEQUENCE), alias: "XRay3DFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTRIBUTING_SOURCES_SEQUENCE), alias: "ContributingSourcesSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY3_D_ACQUISITION_SEQUENCE), alias: "XRay3DAcquisitionSequence", vr: SQ }, // DICOM
    E { tag: Single(PRIMARY_POSITIONER_SCAN_ARC), alias: "PrimaryPositionerScanArc", vr: FL }, // DICOM
    E { tag: Single(SECONDARY_POSITIONER_SCAN_ARC), alias: "SecondaryPositionerScanArc", vr: FL }, // DICOM
    E { tag: Single(PRIMARY_POSITIONER_SCAN_START_ANGLE), alias: "PrimaryPositionerScanStartAngle", vr: FL }, // DICOM
    E { tag: Single(SECONDARY_POSITIONER_SCAN_START_ANGLE), alias: "SecondaryPositionerScanStartAngle", vr: FL }, // DICOM
    E { tag: Single(PRIMARY_POSITIONER_INCREMENT), alias: "PrimaryPositionerIncrement", vr: FL }, // DICOM
    E { tag: Single(SECONDARY_POSITIONER_INCREMENT), alias: "SecondaryPositionerIncrement", vr: FL }, // DICOM
    E { tag: Single(START_ACQUISITION_DATE_TIME), alias: "StartAcquisitionDateTime", vr: DT }, // DICOM
    E { tag: Single(END_ACQUISITION_DATE_TIME), alias: "EndAcquisitionDateTime", vr: DT }, // DICOM
    E { tag: Single(PRIMARY_POSITIONER_INCREMENT_SIGN), alias: "PrimaryPositionerIncrementSign", vr: SS }, // DICOM
    E { tag: Single(SECONDARY_POSITIONER_INCREMENT_SIGN), alias: "SecondaryPositionerIncrementSign", vr: SS }, // DICOM
    E { tag: Single(APPLICATION_NAME), alias: "ApplicationName", vr: LO }, // DICOM
    E { tag: Single(APPLICATION_VERSION), alias: "ApplicationVersion", vr: LO }, // DICOM
    E { tag: Single(APPLICATION_MANUFACTURER), alias: "ApplicationManufacturer", vr: LO }, // DICOM
    E { tag: Single(ALGORITHM_TYPE), alias: "AlgorithmType", vr: CS }, // DICOM
    E { tag: Single(ALGORITHM_DESCRIPTION), alias: "AlgorithmDescription", vr: LO }, // DICOM
    E { tag: Single(X_RAY3_D_RECONSTRUCTION_SEQUENCE), alias: "XRay3DReconstructionSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_DESCRIPTION), alias: "ReconstructionDescription", vr: LO }, // DICOM
    E { tag: Single(PER_PROJECTION_ACQUISITION_SEQUENCE), alias: "PerProjectionAcquisitionSequence", vr: SQ }, // DICOM
    E { tag: Single(DETECTOR_POSITION_SEQUENCE), alias: "DetectorPositionSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY_ACQUISITION_DOSE_SEQUENCE), alias: "XRayAcquisitionDoseSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY_SOURCE_ISOCENTER_PRIMARY_ANGLE), alias: "XRaySourceIsocenterPrimaryAngle", vr: FD }, // DICOM
    E { tag: Single(X_RAY_SOURCE_ISOCENTER_SECONDARY_ANGLE), alias: "XRaySourceIsocenterSecondaryAngle", vr: FD }, // DICOM
    E { tag: Single(BREAST_SUPPORT_ISOCENTER_PRIMARY_ANGLE), alias: "BreastSupportIsocenterPrimaryAngle", vr: FD }, // DICOM
    E { tag: Single(BREAST_SUPPORT_ISOCENTER_SECONDARY_ANGLE), alias: "BreastSupportIsocenterSecondaryAngle", vr: FD }, // DICOM
    E { tag: Single(BREAST_SUPPORT_X_POSITION_TO_ISOCENTER), alias: "BreastSupportXPositionToIsocenter", vr: FD }, // DICOM
    E { tag: Single(BREAST_SUPPORT_Y_POSITION_TO_ISOCENTER), alias: "BreastSupportYPositionToIsocenter", vr: FD }, // DICOM
    E { tag: Single(BREAST_SUPPORT_Z_POSITION_TO_ISOCENTER), alias: "BreastSupportZPositionToIsocenter", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_ISOCENTER_PRIMARY_ANGLE), alias: "DetectorIsocenterPrimaryAngle", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_ISOCENTER_SECONDARY_ANGLE), alias: "DetectorIsocenterSecondaryAngle", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_X_POSITION_TO_ISOCENTER), alias: "DetectorXPositionToIsocenter", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_Y_POSITION_TO_ISOCENTER), alias: "DetectorYPositionToIsocenter", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_Z_POSITION_TO_ISOCENTER), alias: "DetectorZPositionToIsocenter", vr: FD }, // DICOM
    E { tag: Single(X_RAY_GRID_SEQUENCE), alias: "XRayGridSequence", vr: SQ }, // DICOM
    E { tag: Single(X_RAY_FILTER_SEQUENCE), alias: "XRayFilterSequence", vr: SQ }, // DICOM
    E { tag: Single(DETECTOR_ACTIVE_AREA_TLHC_POSITION), alias: "DetectorActiveAreaTLHCPosition", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_ACTIVE_AREA_ORIENTATION), alias: "DetectorActiveAreaOrientation", vr: FD }, // DICOM
    E { tag: Single(POSITIONER_PRIMARY_ANGLE_DIRECTION), alias: "PositionerPrimaryAngleDirection", vr: CS }, // DICOM
    E { tag: Single(DIFFUSION_B_MATRIX_SEQUENCE), alias: "DiffusionBMatrixSequence", vr: SQ }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE_XX), alias: "DiffusionBValueXX", vr: FD }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE_XY), alias: "DiffusionBValueXY", vr: FD }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE_XZ), alias: "DiffusionBValueXZ", vr: FD }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE_YY), alias: "DiffusionBValueYY", vr: FD }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE_YZ), alias: "DiffusionBValueYZ", vr: FD }, // DICOM
    E { tag: Single(DIFFUSION_B_VALUE_ZZ), alias: "DiffusionBValueZZ", vr: FD }, // DICOM
    E { tag: Single(FUNCTIONAL_MR_SEQUENCE), alias: "FunctionalMRSequence", vr: SQ }, // DICOM
    E { tag: Single(FUNCTIONAL_SETTLING_PHASE_FRAMES_PRESENT), alias: "FunctionalSettlingPhaseFramesPresent", vr: CS }, // DICOM
    E { tag: Single(FUNCTIONAL_SYNC_PULSE), alias: "FunctionalSyncPulse", vr: DT }, // DICOM
    E { tag: Single(SETTLING_PHASE_FRAME), alias: "SettlingPhaseFrame", vr: CS }, // DICOM
    E { tag: Single(DECAY_CORRECTION_DATE_TIME), alias: "DecayCorrectionDateTime", vr: DT }, // DICOM
    E { tag: Single(START_DENSITY_THRESHOLD), alias: "StartDensityThreshold", vr: FD }, // DICOM
    E { tag: Single(START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD), alias: "StartRelativeDensityDifferenceThreshold", vr: FD }, // DICOM
    E { tag: Single(START_CARDIAC_TRIGGER_COUNT_THRESHOLD), alias: "StartCardiacTriggerCountThreshold", vr: FD }, // DICOM
    E { tag: Single(START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD), alias: "StartRespiratoryTriggerCountThreshold", vr: FD }, // DICOM
    E { tag: Single(TERMINATION_COUNTS_THRESHOLD), alias: "TerminationCountsThreshold", vr: FD }, // DICOM
    E { tag: Single(TERMINATION_DENSITY_THRESHOLD), alias: "TerminationDensityThreshold", vr: FD }, // DICOM
    E { tag: Single(TERMINATION_RELATIVE_DENSITY_THRESHOLD), alias: "TerminationRelativeDensityThreshold", vr: FD }, // DICOM
    E { tag: Single(TERMINATION_TIME_THRESHOLD), alias: "TerminationTimeThreshold", vr: FD }, // DICOM
    E { tag: Single(TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD), alias: "TerminationCardiacTriggerCountThreshold", vr: FD }, // DICOM
    E { tag: Single(TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD), alias: "TerminationRespiratoryTriggerCountThreshold", vr: FD }, // DICOM
    E { tag: Single(DETECTOR_GEOMETRY), alias: "DetectorGeometry", vr: CS }, // DICOM
    E { tag: Single(TRANSVERSE_DETECTOR_SEPARATION), alias: "TransverseDetectorSeparation", vr: FD }, // DICOM
    E { tag: Single(AXIAL_DETECTOR_DIMENSION), alias: "AxialDetectorDimension", vr: FD }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_AGENT_NUMBER), alias: "RadiopharmaceuticalAgentNumber", vr: US }, // DICOM
    E { tag: Single(PET_FRAME_ACQUISITION_SEQUENCE), alias: "PETFrameAcquisitionSequence", vr: SQ }, // DICOM
    E { tag: Single(PET_DETECTOR_MOTION_DETAILS_SEQUENCE), alias: "PETDetectorMotionDetailsSequence", vr: SQ }, // DICOM
    E { tag: Single(PET_TABLE_DYNAMICS_SEQUENCE), alias: "PETTableDynamicsSequence", vr: SQ }, // DICOM
    E { tag: Single(PET_POSITION_SEQUENCE), alias: "PETPositionSequence", vr: SQ }, // DICOM
    E { tag: Single(PET_FRAME_CORRECTION_FACTORS_SEQUENCE), alias: "PETFrameCorrectionFactorsSequence", vr: SQ }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_USAGE_SEQUENCE), alias: "RadiopharmaceuticalUsageSequence", vr: SQ }, // DICOM
    E { tag: Single(ATTENUATION_CORRECTION_SOURCE), alias: "AttenuationCorrectionSource", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_ITERATIONS), alias: "NumberOfIterations", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_SUBSETS), alias: "NumberOfSubsets", vr: US }, // DICOM
    E { tag: Single(PET_RECONSTRUCTION_SEQUENCE), alias: "PETReconstructionSequence", vr: SQ }, // DICOM
    E { tag: Single(PET_FRAME_TYPE_SEQUENCE), alias: "PETFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(TIME_OF_FLIGHT_INFORMATION_USED), alias: "TimeOfFlightInformationUsed", vr: CS }, // DICOM
    E { tag: Single(RECONSTRUCTION_TYPE), alias: "ReconstructionType", vr: CS }, // DICOM
    E { tag: Single(DECAY_CORRECTED), alias: "DecayCorrected", vr: CS }, // DICOM
    E { tag: Single(ATTENUATION_CORRECTED), alias: "AttenuationCorrected", vr: CS }, // DICOM
    E { tag: Single(SCATTER_CORRECTED), alias: "ScatterCorrected", vr: CS }, // DICOM
    E { tag: Single(DEAD_TIME_CORRECTED), alias: "DeadTimeCorrected", vr: CS }, // DICOM
    E { tag: Single(GANTRY_MOTION_CORRECTED), alias: "GantryMotionCorrected", vr: CS }, // DICOM
    E { tag: Single(PATIENT_MOTION_CORRECTED), alias: "PatientMotionCorrected", vr: CS }, // DICOM
    E { tag: Single(COUNT_LOSS_NORMALIZATION_CORRECTED), alias: "CountLossNormalizationCorrected", vr: CS }, // DICOM
    E { tag: Single(RANDOMS_CORRECTED), alias: "RandomsCorrected", vr: CS }, // DICOM
    E { tag: Single(NON_UNIFORM_RADIAL_SAMPLING_CORRECTED), alias: "NonUniformRadialSamplingCorrected", vr: CS }, // DICOM
    E { tag: Single(SENSITIVITY_CALIBRATED), alias: "SensitivityCalibrated", vr: CS }, // DICOM
    E { tag: Single(DETECTOR_NORMALIZATION_CORRECTION), alias: "DetectorNormalizationCorrection", vr: CS }, // DICOM
    E { tag: Single(ITERATIVE_RECONSTRUCTION_METHOD), alias: "IterativeReconstructionMethod", vr: CS }, // DICOM
    E { tag: Single(ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP), alias: "AttenuationCorrectionTemporalRelationship", vr: CS }, // DICOM
    E { tag: Single(PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE), alias: "PatientPhysiologicalStateSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE), alias: "PatientPhysiologicalStateCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(DEPTHS_OF_FOCUS), alias: "DepthsOfFocus", vr: FD }, // DICOM
    E { tag: Single(EXCLUDED_INTERVALS_SEQUENCE), alias: "ExcludedIntervalsSequence", vr: SQ }, // DICOM
    E { tag: Single(EXCLUSION_START_DATE_TIME), alias: "ExclusionStartDateTime", vr: DT }, // DICOM
    E { tag: Single(EXCLUSION_DURATION), alias: "ExclusionDuration", vr: FD }, // DICOM
    E { tag: Single(US_IMAGE_DESCRIPTION_SEQUENCE), alias: "USImageDescriptionSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_DATA_TYPE_SEQUENCE), alias: "ImageDataTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(DATA_TYPE), alias: "DataType", vr: CS }, // DICOM
    E { tag: Single(TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE), alias: "TransducerScanPatternCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ALIASED_DATA_TYPE), alias: "AliasedDataType", vr: CS }, // DICOM
    E { tag: Single(POSITION_MEASURING_DEVICE_USED), alias: "PositionMeasuringDeviceUsed", vr: CS }, // DICOM
    E { tag: Single(TRANSDUCER_GEOMETRY_CODE_SEQUENCE), alias: "TransducerGeometryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE), alias: "TransducerBeamSteeringCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(TRANSDUCER_APPLICATION_CODE_SEQUENCE), alias: "TransducerApplicationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ZERO_VELOCITY_PIXEL_VALUE), alias: "ZeroVelocityPixelValue", vr: US }, // DICOM
    E { tag: Single(REFERENCE_LOCATION_LABEL), alias: "ReferenceLocationLabel", vr: LO }, // DICOM
    E { tag: Single(REFERENCE_LOCATION_DESCRIPTION), alias: "ReferenceLocationDescription", vr: UT }, // DICOM
    E { tag: Single(REFERENCE_BASIS_CODE_SEQUENCE), alias: "ReferenceBasisCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCE_GEOMETRY_CODE_SEQUENCE), alias: "ReferenceGeometryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OFFSET_DISTANCE), alias: "OffsetDistance", vr: DS }, // DICOM
    E { tag: Single(OFFSET_DIRECTION), alias: "OffsetDirection", vr: CS }, // DICOM
    E { tag: Single(POTENTIAL_SCHEDULED_PROTOCOL_CODE_SEQUENCE), alias: "PotentialScheduledProtocolCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(POTENTIAL_REQUESTED_PROCEDURE_CODE_SEQUENCE), alias: "PotentialRequestedProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(POTENTIAL_REASONS_FOR_PROCEDURE), alias: "PotentialReasonsForProcedure", vr: UC }, // DICOM
    E { tag: Single(POTENTIAL_REASONS_FOR_PROCEDURE_CODE_SEQUENCE), alias: "PotentialReasonsForProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(POTENTIAL_DIAGNOSTIC_TASKS), alias: "PotentialDiagnosticTasks", vr: UC }, // DICOM
    E { tag: Single(CONTRAINDICATIONS_CODE_SEQUENCE), alias: "ContraindicationsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_DEFINED_PROTOCOL_SEQUENCE), alias: "ReferencedDefinedProtocolSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_PERFORMED_PROTOCOL_SEQUENCE), alias: "ReferencedPerformedProtocolSequence", vr: SQ }, // DICOM
    E { tag: Single(PREDECESSOR_PROTOCOL_SEQUENCE), alias: "PredecessorProtocolSequence", vr: SQ }, // DICOM
    E { tag: Single(PROTOCOL_PLANNING_INFORMATION), alias: "ProtocolPlanningInformation", vr: UT }, // DICOM
    E { tag: Single(PROTOCOL_DESIGN_RATIONALE), alias: "ProtocolDesignRationale", vr: UT }, // DICOM
    E { tag: Single(PATIENT_SPECIFICATION_SEQUENCE), alias: "PatientSpecificationSequence", vr: SQ }, // DICOM
    E { tag: Single(MODEL_SPECIFICATION_SEQUENCE), alias: "ModelSpecificationSequence", vr: SQ }, // DICOM
    E { tag: Single(PARAMETERS_SPECIFICATION_SEQUENCE), alias: "ParametersSpecificationSequence", vr: SQ }, // DICOM
    E { tag: Single(INSTRUCTION_SEQUENCE), alias: "InstructionSequence", vr: SQ }, // DICOM
    E { tag: Single(INSTRUCTION_INDEX), alias: "InstructionIndex", vr: US }, // DICOM
    E { tag: Single(INSTRUCTION_TEXT), alias: "InstructionText", vr: LO }, // DICOM
    E { tag: Single(INSTRUCTION_DESCRIPTION), alias: "InstructionDescription", vr: UT }, // DICOM
    E { tag: Single(INSTRUCTION_PERFORMED_FLAG), alias: "InstructionPerformedFlag", vr: CS }, // DICOM
    E { tag: Single(INSTRUCTION_PERFORMED_DATE_TIME), alias: "InstructionPerformedDateTime", vr: DT }, // DICOM
    E { tag: Single(INSTRUCTION_PERFORMANCE_COMMENT), alias: "InstructionPerformanceComment", vr: UT }, // DICOM
    E { tag: Single(PATIENT_POSITIONING_INSTRUCTION_SEQUENCE), alias: "PatientPositioningInstructionSequence", vr: SQ }, // DICOM
    E { tag: Single(POSITIONING_METHOD_CODE_SEQUENCE), alias: "PositioningMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(POSITIONING_LANDMARK_SEQUENCE), alias: "PositioningLandmarkSequence", vr: SQ }, // DICOM
    E { tag: Single(TARGET_FRAME_OF_REFERENCE_UID), alias: "TargetFrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(ACQUISITION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE), alias: "AcquisitionProtocolElementSpecificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ACQUISITION_PROTOCOL_ELEMENT_SEQUENCE), alias: "AcquisitionProtocolElementSequence", vr: SQ }, // DICOM
    E { tag: Single(PROTOCOL_ELEMENT_NUMBER), alias: "ProtocolElementNumber", vr: US }, // DICOM
    E { tag: Single(PROTOCOL_ELEMENT_NAME), alias: "ProtocolElementName", vr: LO }, // DICOM
    E { tag: Single(PROTOCOL_ELEMENT_CHARACTERISTICS_SUMMARY), alias: "ProtocolElementCharacteristicsSummary", vr: UT }, // DICOM
    E { tag: Single(PROTOCOL_ELEMENT_PURPOSE), alias: "ProtocolElementPurpose", vr: UT }, // DICOM
    E { tag: Single(ACQUISITION_MOTION), alias: "AcquisitionMotion", vr: CS }, // DICOM
    E { tag: Single(ACQUISITION_START_LOCATION_SEQUENCE), alias: "AcquisitionStartLocationSequence", vr: SQ }, // DICOM
    E { tag: Single(ACQUISITION_END_LOCATION_SEQUENCE), alias: "AcquisitionEndLocationSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE), alias: "ReconstructionProtocolElementSpecificationSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_PROTOCOL_ELEMENT_SEQUENCE), alias: "ReconstructionProtocolElementSequence", vr: SQ }, // DICOM
    E { tag: Single(STORAGE_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE), alias: "StorageProtocolElementSpecificationSequence", vr: SQ }, // DICOM
    E { tag: Single(STORAGE_PROTOCOL_ELEMENT_SEQUENCE), alias: "StorageProtocolElementSequence", vr: SQ }, // DICOM
    E { tag: Single(REQUESTED_SERIES_DESCRIPTION), alias: "RequestedSeriesDescription", vr: LO }, // DICOM
    E { tag: Single(SOURCE_ACQUISITION_PROTOCOL_ELEMENT_NUMBER), alias: "SourceAcquisitionProtocolElementNumber", vr: US }, // DICOM
    E { tag: Single(SOURCE_ACQUISITION_BEAM_NUMBER), alias: "SourceAcquisitionBeamNumber", vr: US }, // DICOM
    E { tag: Single(SOURCE_RECONSTRUCTION_PROTOCOL_ELEMENT_NUMBER), alias: "SourceReconstructionProtocolElementNumber", vr: US }, // DICOM
    E { tag: Single(RECONSTRUCTION_START_LOCATION_SEQUENCE), alias: "ReconstructionStartLocationSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_END_LOCATION_SEQUENCE), alias: "ReconstructionEndLocationSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_ALGORITHM_SEQUENCE), alias: "ReconstructionAlgorithmSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_TARGET_CENTER_LOCATION_SEQUENCE), alias: "ReconstructionTargetCenterLocationSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_FILTER_DESCRIPTION), alias: "ImageFilterDescription", vr: UT }, // DICOM
    E { tag: Single(CTD_IVOL_NOTIFICATION_TRIGGER), alias: "CTDIvolNotificationTrigger", vr: FD }, // DICOM
    E { tag: Single(DLP_NOTIFICATION_TRIGGER), alias: "DLPNotificationTrigger", vr: FD }, // DICOM
    E { tag: Single(AUTO_KVP_SELECTION_TYPE), alias: "AutoKVPSelectionType", vr: CS }, // DICOM
    E { tag: Single(AUTO_KVP_UPPER_BOUND), alias: "AutoKVPUpperBound", vr: FD }, // DICOM
    E { tag: Single(AUTO_KVP_LOWER_BOUND), alias: "AutoKVPLowerBound", vr: FD }, // DICOM
    E { tag: Single(PROTOCOL_DEFINED_PATIENT_POSITION), alias: "ProtocolDefinedPatientPosition", vr: CS }, // DICOM
    E { tag: Single(CONTRIBUTING_EQUIPMENT_SEQUENCE), alias: "ContributingEquipmentSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTRIBUTION_DATE_TIME), alias: "ContributionDateTime", vr: DT }, // DICOM
    E { tag: Single(CONTRIBUTION_DESCRIPTION), alias: "ContributionDescription", vr: ST }, // DICOM
    E { tag: Single(STUDY_INSTANCE_UID), alias: "StudyInstanceUID", vr: UI }, // DICOM
    E { tag: Single(SERIES_INSTANCE_UID), alias: "SeriesInstanceUID", vr: UI }, // DICOM
    E { tag: Single(STUDY_ID), alias: "StudyID", vr: SH }, // DICOM
    E { tag: Single(SERIES_NUMBER), alias: "SeriesNumber", vr: IS }, // DICOM
    E { tag: Single(ACQUISITION_NUMBER), alias: "AcquisitionNumber", vr: IS }, // DICOM
    E { tag: Single(INSTANCE_NUMBER), alias: "InstanceNumber", vr: IS }, // DICOM
    E { tag: Single(ITEM_NUMBER), alias: "ItemNumber", vr: IS }, // DICOM
    E { tag: Single(PATIENT_ORIENTATION), alias: "PatientOrientation", vr: CS }, // DICOM
    E { tag: Single(IMAGE_POSITION_PATIENT), alias: "ImagePositionPatient", vr: DS }, // DICOM
    E { tag: Single(IMAGE_ORIENTATION_PATIENT), alias: "ImageOrientationPatient", vr: DS }, // DICOM
    E { tag: Single(FRAME_OF_REFERENCE_UID), alias: "FrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(LATERALITY), alias: "Laterality", vr: CS }, // DICOM
    E { tag: Single(IMAGE_LATERALITY), alias: "ImageLaterality", vr: CS }, // DICOM
    E { tag: Single(TEMPORAL_POSITION_IDENTIFIER), alias: "TemporalPositionIdentifier", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_TEMPORAL_POSITIONS), alias: "NumberOfTemporalPositions", vr: IS }, // DICOM
    E { tag: Single(TEMPORAL_RESOLUTION), alias: "TemporalResolution", vr: DS }, // DICOM
    E { tag: Single(SYNCHRONIZATION_FRAME_OF_REFERENCE_UID), alias: "SynchronizationFrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(SOP_INSTANCE_UID_OF_CONCATENATION_SOURCE), alias: "SOPInstanceUIDOfConcatenationSource", vr: UI }, // DICOM
    E { tag: Single(IMAGES_IN_ACQUISITION), alias: "ImagesInAcquisition", vr: IS }, // DICOM
    E { tag: Single(TARGET_POSITION_REFERENCE_INDICATOR), alias: "TargetPositionReferenceIndicator", vr: LO }, // DICOM
    E { tag: Single(POSITION_REFERENCE_INDICATOR), alias: "PositionReferenceIndicator", vr: LO }, // DICOM
    E { tag: Single(SLICE_LOCATION), alias: "SliceLocation", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_PATIENT_RELATED_STUDIES), alias: "NumberOfPatientRelatedStudies", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_PATIENT_RELATED_SERIES), alias: "NumberOfPatientRelatedSeries", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_PATIENT_RELATED_INSTANCES), alias: "NumberOfPatientRelatedInstances", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_STUDY_RELATED_SERIES), alias: "NumberOfStudyRelatedSeries", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_STUDY_RELATED_INSTANCES), alias: "NumberOfStudyRelatedInstances", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_SERIES_RELATED_INSTANCES), alias: "NumberOfSeriesRelatedInstances", vr: IS }, // DICOM
    E { tag: Single(IMAGE_COMMENTS), alias: "ImageComments", vr: LT }, // DICOM
    E { tag: Single(STACK_ID), alias: "StackID", vr: SH }, // DICOM
    E { tag: Single(IN_STACK_POSITION_NUMBER), alias: "InStackPositionNumber", vr: UL }, // DICOM
    E { tag: Single(FRAME_ANATOMY_SEQUENCE), alias: "FrameAnatomySequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_LATERALITY), alias: "FrameLaterality", vr: CS }, // DICOM
    E { tag: Single(FRAME_CONTENT_SEQUENCE), alias: "FrameContentSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANE_POSITION_SEQUENCE), alias: "PlanePositionSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANE_ORIENTATION_SEQUENCE), alias: "PlaneOrientationSequence", vr: SQ }, // DICOM
    E { tag: Single(TEMPORAL_POSITION_INDEX), alias: "TemporalPositionIndex", vr: UL }, // DICOM
    E { tag: Single(NOMINAL_CARDIAC_TRIGGER_DELAY_TIME), alias: "NominalCardiacTriggerDelayTime", vr: FD }, // DICOM
    E { tag: Single(NOMINAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK), alias: "NominalCardiacTriggerTimePriorToRPeak", vr: FL }, // DICOM
    E { tag: Single(ACTUAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK), alias: "ActualCardiacTriggerTimePriorToRPeak", vr: FL }, // DICOM
    E { tag: Single(FRAME_ACQUISITION_NUMBER), alias: "FrameAcquisitionNumber", vr: US }, // DICOM
    E { tag: Single(DIMENSION_INDEX_VALUES), alias: "DimensionIndexValues", vr: UL }, // DICOM
    E { tag: Single(FRAME_COMMENTS), alias: "FrameComments", vr: LT }, // DICOM
    E { tag: Single(CONCATENATION_UID), alias: "ConcatenationUID", vr: UI }, // DICOM
    E { tag: Single(IN_CONCATENATION_NUMBER), alias: "InConcatenationNumber", vr: US }, // DICOM
    E { tag: Single(IN_CONCATENATION_TOTAL_NUMBER), alias: "InConcatenationTotalNumber", vr: US }, // DICOM
    E { tag: Single(DIMENSION_ORGANIZATION_UID), alias: "DimensionOrganizationUID", vr: UI }, // DICOM
    E { tag: Single(DIMENSION_INDEX_POINTER), alias: "DimensionIndexPointer", vr: AT }, // DICOM
    E { tag: Single(FUNCTIONAL_GROUP_POINTER), alias: "FunctionalGroupPointer", vr: AT }, // DICOM
    E { tag: Single(UNASSIGNED_SHARED_CONVERTED_ATTRIBUTES_SEQUENCE), alias: "UnassignedSharedConvertedAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(UNASSIGNED_PER_FRAME_CONVERTED_ATTRIBUTES_SEQUENCE), alias: "UnassignedPerFrameConvertedAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(CONVERSION_SOURCE_ATTRIBUTES_SEQUENCE), alias: "ConversionSourceAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(DIMENSION_INDEX_PRIVATE_CREATOR), alias: "DimensionIndexPrivateCreator", vr: LO }, // DICOM
    E { tag: Single(DIMENSION_ORGANIZATION_SEQUENCE), alias: "DimensionOrganizationSequence", vr: SQ }, // DICOM
    E { tag: Single(DIMENSION_INDEX_SEQUENCE), alias: "DimensionIndexSequence", vr: SQ }, // DICOM
    E { tag: Single(CONCATENATION_FRAME_OFFSET_NUMBER), alias: "ConcatenationFrameOffsetNumber", vr: UL }, // DICOM
    E { tag: Single(FUNCTIONAL_GROUP_PRIVATE_CREATOR), alias: "FunctionalGroupPrivateCreator", vr: LO }, // DICOM
    E { tag: Single(NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE), alias: "NominalPercentageOfCardiacPhase", vr: FL }, // DICOM
    E { tag: Single(NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE), alias: "NominalPercentageOfRespiratoryPhase", vr: FL }, // DICOM
    E { tag: Single(STARTING_RESPIRATORY_AMPLITUDE), alias: "StartingRespiratoryAmplitude", vr: FL }, // DICOM
    E { tag: Single(STARTING_RESPIRATORY_PHASE), alias: "StartingRespiratoryPhase", vr: CS }, // DICOM
    E { tag: Single(ENDING_RESPIRATORY_AMPLITUDE), alias: "EndingRespiratoryAmplitude", vr: FL }, // DICOM
    E { tag: Single(ENDING_RESPIRATORY_PHASE), alias: "EndingRespiratoryPhase", vr: CS }, // DICOM
    E { tag: Single(RESPIRATORY_TRIGGER_TYPE), alias: "RespiratoryTriggerType", vr: CS }, // DICOM
    E { tag: Single(RR_INTERVAL_TIME_NOMINAL), alias: "RRIntervalTimeNominal", vr: FD }, // DICOM
    E { tag: Single(ACTUAL_CARDIAC_TRIGGER_DELAY_TIME), alias: "ActualCardiacTriggerDelayTime", vr: FD }, // DICOM
    E { tag: Single(RESPIRATORY_SYNCHRONIZATION_SEQUENCE), alias: "RespiratorySynchronizationSequence", vr: SQ }, // DICOM
    E { tag: Single(RESPIRATORY_INTERVAL_TIME), alias: "RespiratoryIntervalTime", vr: FD }, // DICOM
    E { tag: Single(NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME), alias: "NominalRespiratoryTriggerDelayTime", vr: FD }, // DICOM
    E { tag: Single(RESPIRATORY_TRIGGER_DELAY_THRESHOLD), alias: "RespiratoryTriggerDelayThreshold", vr: FD }, // DICOM
    E { tag: Single(ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME), alias: "ActualRespiratoryTriggerDelayTime", vr: FD }, // DICOM
    E { tag: Single(IMAGE_POSITION_VOLUME), alias: "ImagePositionVolume", vr: FD }, // DICOM
    E { tag: Single(IMAGE_ORIENTATION_VOLUME), alias: "ImageOrientationVolume", vr: FD }, // DICOM
    E { tag: Single(ULTRASOUND_ACQUISITION_GEOMETRY), alias: "UltrasoundAcquisitionGeometry", vr: CS }, // DICOM
    E { tag: Single(APEX_POSITION), alias: "ApexPosition", vr: FD }, // DICOM
    E { tag: Single(VOLUME_TO_TRANSDUCER_MAPPING_MATRIX), alias: "VolumeToTransducerMappingMatrix", vr: FD }, // DICOM
    E { tag: Single(VOLUME_TO_TABLE_MAPPING_MATRIX), alias: "VolumeToTableMappingMatrix", vr: FD }, // DICOM
    E { tag: Single(VOLUME_TO_TRANSDUCER_RELATIONSHIP), alias: "VolumeToTransducerRelationship", vr: CS }, // DICOM
    E { tag: Single(PATIENT_FRAME_OF_REFERENCE_SOURCE), alias: "PatientFrameOfReferenceSource", vr: CS }, // DICOM
    E { tag: Single(TEMPORAL_POSITION_TIME_OFFSET), alias: "TemporalPositionTimeOffset", vr: FD }, // DICOM
    E { tag: Single(PLANE_POSITION_VOLUME_SEQUENCE), alias: "PlanePositionVolumeSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANE_ORIENTATION_VOLUME_SEQUENCE), alias: "PlaneOrientationVolumeSequence", vr: SQ }, // DICOM
    E { tag: Single(TEMPORAL_POSITION_SEQUENCE), alias: "TemporalPositionSequence", vr: SQ }, // DICOM
    E { tag: Single(DIMENSION_ORGANIZATION_TYPE), alias: "DimensionOrganizationType", vr: CS }, // DICOM
    E { tag: Single(VOLUME_FRAME_OF_REFERENCE_UID), alias: "VolumeFrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(TABLE_FRAME_OF_REFERENCE_UID), alias: "TableFrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(DIMENSION_DESCRIPTION_LABEL), alias: "DimensionDescriptionLabel", vr: LO }, // DICOM
    E { tag: Single(PATIENT_ORIENTATION_IN_FRAME_SEQUENCE), alias: "PatientOrientationInFrameSequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_LABEL), alias: "FrameLabel", vr: LO }, // DICOM
    E { tag: Single(ACQUISITION_INDEX), alias: "AcquisitionIndex", vr: US }, // DICOM
    E { tag: Single(CONTRIBUTING_SOP_INSTANCES_REFERENCE_SEQUENCE), alias: "ContributingSOPInstancesReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(RECONSTRUCTION_INDEX), alias: "ReconstructionIndex", vr: US }, // DICOM
    E { tag: Single(LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH), alias: "LightPathFilterPassThroughWavelength", vr: US }, // DICOM
    E { tag: Single(LIGHT_PATH_FILTER_PASS_BAND), alias: "LightPathFilterPassBand", vr: US }, // DICOM
    E { tag: Single(IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH), alias: "ImagePathFilterPassThroughWavelength", vr: US }, // DICOM
    E { tag: Single(IMAGE_PATH_FILTER_PASS_BAND), alias: "ImagePathFilterPassBand", vr: US }, // DICOM
    E { tag: Single(PATIENT_EYE_MOVEMENT_COMMANDED), alias: "PatientEyeMovementCommanded", vr: CS }, // DICOM
    E { tag: Single(PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE), alias: "PatientEyeMovementCommandCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SPHERICAL_LENS_POWER), alias: "SphericalLensPower", vr: FL }, // DICOM
    E { tag: Single(CYLINDER_LENS_POWER), alias: "CylinderLensPower", vr: FL }, // DICOM
    E { tag: Single(CYLINDER_AXIS), alias: "CylinderAxis", vr: FL }, // DICOM
    E { tag: Single(EMMETROPIC_MAGNIFICATION), alias: "EmmetropicMagnification", vr: FL }, // DICOM
    E { tag: Single(INTRA_OCULAR_PRESSURE), alias: "IntraOcularPressure", vr: FL }, // DICOM
    E { tag: Single(HORIZONTAL_FIELD_OF_VIEW), alias: "HorizontalFieldOfView", vr: FL }, // DICOM
    E { tag: Single(PUPIL_DILATED), alias: "PupilDilated", vr: CS }, // DICOM
    E { tag: Single(DEGREE_OF_DILATION), alias: "DegreeOfDilation", vr: FL }, // DICOM
    E { tag: Single(STEREO_BASELINE_ANGLE), alias: "StereoBaselineAngle", vr: FL }, // DICOM
    E { tag: Single(STEREO_BASELINE_DISPLACEMENT), alias: "StereoBaselineDisplacement", vr: FL }, // DICOM
    E { tag: Single(STEREO_HORIZONTAL_PIXEL_OFFSET), alias: "StereoHorizontalPixelOffset", vr: FL }, // DICOM
    E { tag: Single(STEREO_VERTICAL_PIXEL_OFFSET), alias: "StereoVerticalPixelOffset", vr: FL }, // DICOM
    E { tag: Single(STEREO_ROTATION), alias: "StereoRotation", vr: FL }, // DICOM
    E { tag: Single(ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE), alias: "AcquisitionDeviceTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ILLUMINATION_TYPE_CODE_SEQUENCE), alias: "IlluminationTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE), alias: "LightPathFilterTypeStackCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE), alias: "ImagePathFilterTypeStackCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(LENSES_CODE_SEQUENCE), alias: "LensesCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_DESCRIPTION_CODE_SEQUENCE), alias: "ChannelDescriptionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFRACTIVE_STATE_SEQUENCE), alias: "RefractiveStateSequence", vr: SQ }, // DICOM
    E { tag: Single(MYDRIATIC_AGENT_CODE_SEQUENCE), alias: "MydriaticAgentCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(RELATIVE_IMAGE_POSITION_CODE_SEQUENCE), alias: "RelativeImagePositionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CAMERA_ANGLE_OF_VIEW), alias: "CameraAngleOfView", vr: FL }, // DICOM
    E { tag: Single(STEREO_PAIRS_SEQUENCE), alias: "StereoPairsSequence", vr: SQ }, // DICOM
    E { tag: Single(LEFT_IMAGE_SEQUENCE), alias: "LeftImageSequence", vr: SQ }, // DICOM
    E { tag: Single(RIGHT_IMAGE_SEQUENCE), alias: "RightImageSequence", vr: SQ }, // DICOM
    E { tag: Single(STEREO_PAIRS_PRESENT), alias: "StereoPairsPresent", vr: CS }, // DICOM
    E { tag: Single(AXIAL_LENGTH_OF_THE_EYE), alias: "AxialLengthOfTheEye", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_FRAME_LOCATION_SEQUENCE), alias: "OphthalmicFrameLocationSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCE_COORDINATES), alias: "ReferenceCoordinates", vr: FL }, // DICOM
    E { tag: Single(DEPTH_SPATIAL_RESOLUTION), alias: "DepthSpatialResolution", vr: FL }, // DICOM
    E { tag: Single(MAXIMUM_DEPTH_DISTORTION), alias: "MaximumDepthDistortion", vr: FL }, // DICOM
    E { tag: Single(ALONG_SCAN_SPATIAL_RESOLUTION), alias: "AlongScanSpatialResolution", vr: FL }, // DICOM
    E { tag: Single(MAXIMUM_ALONG_SCAN_DISTORTION), alias: "MaximumAlongScanDistortion", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_IMAGE_ORIENTATION), alias: "OphthalmicImageOrientation", vr: CS }, // DICOM
    E { tag: Single(DEPTH_OF_TRANSVERSE_IMAGE), alias: "DepthOfTransverseImage", vr: FL }, // DICOM
    E { tag: Single(MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE), alias: "MydriaticAgentConcentrationUnitsSequence", vr: SQ }, // DICOM
    E { tag: Single(ACROSS_SCAN_SPATIAL_RESOLUTION), alias: "AcrossScanSpatialResolution", vr: FL }, // DICOM
    E { tag: Single(MAXIMUM_ACROSS_SCAN_DISTORTION), alias: "MaximumAcrossScanDistortion", vr: FL }, // DICOM
    E { tag: Single(MYDRIATIC_AGENT_CONCENTRATION), alias: "MydriaticAgentConcentration", vr: DS }, // DICOM
    E { tag: Single(ILLUMINATION_WAVE_LENGTH), alias: "IlluminationWaveLength", vr: FL }, // DICOM
    E { tag: Single(ILLUMINATION_POWER), alias: "IlluminationPower", vr: FL }, // DICOM
    E { tag: Single(ILLUMINATION_BANDWIDTH), alias: "IlluminationBandwidth", vr: FL }, // DICOM
    E { tag: Single(MYDRIATIC_AGENT_SEQUENCE), alias: "MydriaticAgentSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_MEASUREMENTS_RIGHT_EYE_SEQUENCE), alias: "OphthalmicAxialMeasurementsRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_MEASUREMENTS_LEFT_EYE_SEQUENCE), alias: "OphthalmicAxialMeasurementsLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_MEASUREMENTS_DEVICE_TYPE), alias: "OphthalmicAxialMeasurementsDeviceType", vr: CS }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TYPE), alias: "OphthalmicAxialLengthMeasurementsType", vr: CS }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_SEQUENCE), alias: "OphthalmicAxialLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH), alias: "OphthalmicAxialLength", vr: FL }, // DICOM
    E { tag: Single(LENS_STATUS_CODE_SEQUENCE), alias: "LensStatusCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VITREOUS_STATUS_CODE_SEQUENCE), alias: "VitreousStatusCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IOL_FORMULA_CODE_SEQUENCE), alias: "IOLFormulaCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IOL_FORMULA_DETAIL), alias: "IOLFormulaDetail", vr: LO }, // DICOM
    E { tag: Single(KERATOMETER_INDEX), alias: "KeratometerIndex", vr: FL }, // DICOM
    E { tag: Single(SOURCE_OF_OPHTHALMIC_AXIAL_LENGTH_CODE_SEQUENCE), alias: "SourceOfOphthalmicAxialLengthCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(TARGET_REFRACTION), alias: "TargetRefraction", vr: FL }, // DICOM
    E { tag: Single(REFRACTIVE_PROCEDURE_OCCURRED), alias: "RefractiveProcedureOccurred", vr: CS }, // DICOM
    E { tag: Single(REFRACTIVE_SURGERY_TYPE_CODE_SEQUENCE), alias: "RefractiveSurgeryTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_ULTRASOUND_METHOD_CODE_SEQUENCE), alias: "OphthalmicUltrasoundMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE), alias: "OphthalmicAxialLengthMeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(IOL_POWER), alias: "IOLPower", vr: FL }, // DICOM
    E { tag: Single(PREDICTED_REFRACTIVE_ERROR), alias: "PredictedRefractiveError", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_VELOCITY), alias: "OphthalmicAxialLengthVelocity", vr: FL }, // DICOM
    E { tag: Single(LENS_STATUS_DESCRIPTION), alias: "LensStatusDescription", vr: LO }, // DICOM
    E { tag: Single(VITREOUS_STATUS_DESCRIPTION), alias: "VitreousStatusDescription", vr: LO }, // DICOM
    E { tag: Single(IOL_POWER_SEQUENCE), alias: "IOLPowerSequence", vr: SQ }, // DICOM
    E { tag: Single(LENS_CONSTANT_SEQUENCE), alias: "LensConstantSequence", vr: SQ }, // DICOM
    E { tag: Single(IOL_MANUFACTURER), alias: "IOLManufacturer", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_NAME), alias: "ImplantName", vr: LO }, // DICOM
    E { tag: Single(KERATOMETRY_MEASUREMENT_TYPE_CODE_SEQUENCE), alias: "KeratometryMeasurementTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_PART_NUMBER), alias: "ImplantPartNumber", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_OPHTHALMIC_AXIAL_MEASUREMENTS_SEQUENCE), alias: "ReferencedOphthalmicAxialMeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENT_NAME_CODE_SEQUENCE), alias: "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFRACTIVE_ERROR_BEFORE_REFRACTIVE_SURGERY_CODE_SEQUENCE), alias: "RefractiveErrorBeforeRefractiveSurgeryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IOL_POWER_FOR_EXACT_EMMETROPIA), alias: "IOLPowerForExactEmmetropia", vr: FL }, // DICOM
    E { tag: Single(IOL_POWER_FOR_EXACT_TARGET_REFRACTION), alias: "IOLPowerForExactTargetRefraction", vr: FL }, // DICOM
    E { tag: Single(ANTERIOR_CHAMBER_DEPTH_DEFINITION_CODE_SEQUENCE), alias: "AnteriorChamberDepthDefinitionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(LENS_THICKNESS_SEQUENCE), alias: "LensThicknessSequence", vr: SQ }, // DICOM
    E { tag: Single(ANTERIOR_CHAMBER_DEPTH_SEQUENCE), alias: "AnteriorChamberDepthSequence", vr: SQ }, // DICOM
    E { tag: Single(LENS_THICKNESS), alias: "LensThickness", vr: FL }, // DICOM
    E { tag: Single(ANTERIOR_CHAMBER_DEPTH), alias: "AnteriorChamberDepth", vr: FL }, // DICOM
    E { tag: Single(SOURCE_OF_LENS_THICKNESS_DATA_CODE_SEQUENCE), alias: "SourceOfLensThicknessDataCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_OF_ANTERIOR_CHAMBER_DEPTH_DATA_CODE_SEQUENCE), alias: "SourceOfAnteriorChamberDepthDataCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_OF_REFRACTIVE_MEASUREMENTS_SEQUENCE), alias: "SourceOfRefractiveMeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_OF_REFRACTIVE_MEASUREMENTS_CODE_SEQUENCE), alias: "SourceOfRefractiveMeasurementsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_MODIFIED), alias: "OphthalmicAxialLengthMeasurementModified", vr: CS }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_CODE_SEQUENCE), alias: "OphthalmicAxialLengthDataSourceCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SIGNAL_TO_NOISE_RATIO), alias: "SignalToNoiseRatio", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_DESCRIPTION), alias: "OphthalmicAxialLengthDataSourceDescription", vr: LO }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TOTAL_LENGTH_SEQUENCE), alias: "OphthalmicAxialLengthMeasurementsTotalLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENTAL_LENGTH_SEQUENCE), alias: "OphthalmicAxialLengthMeasurementsSegmentalLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_LENGTH_SUMMATION_SEQUENCE), alias: "OphthalmicAxialLengthMeasurementsLengthSummationSequence", vr: SQ }, // DICOM
    E { tag: Single(ULTRASOUND_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE), alias: "UltrasoundOphthalmicAxialLengthMeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(OPTICAL_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE), alias: "OpticalOphthalmicAxialLengthMeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(ULTRASOUND_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE), alias: "UltrasoundSelectedOphthalmicAxialLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_SELECTION_METHOD_CODE_SEQUENCE), alias: "OphthalmicAxialLengthSelectionMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPTICAL_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE), alias: "OpticalSelectedOphthalmicAxialLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(SELECTED_SEGMENTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE), alias: "SelectedSegmentalOphthalmicAxialLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(SELECTED_TOTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE), alias: "SelectedTotalOphthalmicAxialLengthSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_SEQUENCE), alias: "OphthalmicAxialLengthQualityMetricSequence", vr: SQ }, // DICOM
    E { tag: Single(INTRAOCULAR_LENS_CALCULATIONS_RIGHT_EYE_SEQUENCE), alias: "IntraocularLensCalculationsRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(INTRAOCULAR_LENS_CALCULATIONS_LEFT_EYE_SEQUENCE), alias: "IntraocularLensCalculationsLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_QC_IMAGE_SEQUENCE), alias: "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_MAPPING_DEVICE_TYPE), alias: "OphthalmicMappingDeviceType", vr: CS }, // DICOM
    E { tag: Single(ACQUISITION_METHOD_CODE_SEQUENCE), alias: "AcquisitionMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ACQUISITION_METHOD_ALGORITHM_SEQUENCE), alias: "AcquisitionMethodAlgorithmSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_THICKNESS_MAP_TYPE_CODE_SEQUENCE), alias: "OphthalmicThicknessMapTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_THICKNESS_MAPPING_NORMALS_SEQUENCE), alias: "OphthalmicThicknessMappingNormalsSequence", vr: SQ }, // DICOM
    E { tag: Single(RETINAL_THICKNESS_DEFINITION_CODE_SEQUENCE), alias: "RetinalThicknessDefinitionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PIXEL_VALUE_MAPPING_TO_CODED_CONCEPT_SEQUENCE), alias: "PixelValueMappingToCodedConceptSequence", vr: SQ }, // DICOM
    E { tag: Single(MAPPED_PIXEL_VALUE), alias: "MappedPixelValue", vr: US }, // DICOM
    E { tag: Single(PIXEL_VALUE_MAPPING_EXPLANATION), alias: "PixelValueMappingExplanation", vr: LO }, // DICOM
    E { tag: Single(OPHTHALMIC_THICKNESS_MAP_QUALITY_THRESHOLD_SEQUENCE), alias: "OphthalmicThicknessMapQualityThresholdSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_THICKNESS_MAP_THRESHOLD_QUALITY_RATING), alias: "OphthalmicThicknessMapThresholdQualityRating", vr: FL }, // DICOM
    E { tag: Single(ANATOMIC_STRUCTURE_REFERENCE_POINT), alias: "AnatomicStructureReferencePoint", vr: FL }, // DICOM
    E { tag: Single(REGISTRATION_TO_LOCALIZER_SEQUENCE), alias: "RegistrationToLocalizerSequence", vr: SQ }, // DICOM
    E { tag: Single(REGISTERED_LOCALIZER_UNITS), alias: "RegisteredLocalizerUnits", vr: CS }, // DICOM
    E { tag: Single(REGISTERED_LOCALIZER_TOP_LEFT_HAND_CORNER), alias: "RegisteredLocalizerTopLeftHandCorner", vr: FL }, // DICOM
    E { tag: Single(REGISTERED_LOCALIZER_BOTTOM_RIGHT_HAND_CORNER), alias: "RegisteredLocalizerBottomRightHandCorner", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_THICKNESS_MAP_QUALITY_RATING_SEQUENCE), alias: "OphthalmicThicknessMapQualityRatingSequence", vr: SQ }, // DICOM
    E { tag: Single(RELEVANT_OPT_ATTRIBUTES_SEQUENCE), alias: "RelevantOPTAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(TRANSFORMATION_METHOD_CODE_SEQUENCE), alias: "TransformationMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(TRANSFORMATION_ALGORITHM_SEQUENCE), alias: "TransformationAlgorithmSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_METHOD), alias: "OphthalmicAxialLengthMethod", vr: CS }, // DICOM
    E { tag: Single(OPHTHALMIC_FOV), alias: "OphthalmicFOV", vr: FL }, // DICOM
    E { tag: Single(TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_SEQUENCE), alias: "TwoDimensionalToThreeDimensionalMapSequence", vr: SQ }, // DICOM
    E { tag: Single(WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_RATING_SEQUENCE), alias: "WideFieldOphthalmicPhotographyQualityRatingSequence", vr: SQ }, // DICOM
    E { tag: Single(WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_THRESHOLD_SEQUENCE), alias: "WideFieldOphthalmicPhotographyQualityThresholdSequence", vr: SQ }, // DICOM
    E { tag: Single(WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_THRESHOLD_QUALITY_RATING), alias: "WideFieldOphthalmicPhotographyThresholdQualityRating", vr: FL }, // DICOM
    E { tag: Single(X_COORDINATES_CENTER_PIXEL_VIEW_ANGLE), alias: "XCoordinatesCenterPixelViewAngle", vr: FL }, // DICOM
    E { tag: Single(Y_COORDINATES_CENTER_PIXEL_VIEW_ANGLE), alias: "YCoordinatesCenterPixelViewAngle", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_MAP_POINTS), alias: "NumberOfMapPoints", vr: UL }, // DICOM
    E { tag: Single(TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_DATA), alias: "TwoDimensionalToThreeDimensionalMapData", vr: OF }, // DICOM
    E { tag: Single(DERIVATION_ALGORITHM_SEQUENCE), alias: "DerivationAlgorithmSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_IMAGE_TYPE_CODE_SEQUENCE), alias: "OphthalmicImageTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_IMAGE_TYPE_DESCRIPTION), alias: "OphthalmicImageTypeDescription", vr: LO }, // DICOM
    E { tag: Single(SCAN_PATTERN_TYPE_CODE_SEQUENCE), alias: "ScanPatternTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SURFACE_MESH_IDENTIFICATION_SEQUENCE), alias: "ReferencedSurfaceMeshIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_VOLUMETRIC_PROPERTIES_FLAG), alias: "OphthalmicVolumetricPropertiesFlag", vr: CS }, // DICOM
    E { tag: Single(OPHTHALMIC_ANATOMIC_REFERENCE_POINT_X_COORDINATE), alias: "OphthalmicAnatomicReferencePointXCoordinate", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_ANATOMIC_REFERENCE_POINT_Y_COORDINATE), alias: "OphthalmicAnatomicReferencePointYCoordinate", vr: FL }, // DICOM
    E { tag: Single(OPHTHALMIC_EN_FACE_IMAGE_QUALITY_RATING_SEQUENCE), alias: "OphthalmicEnFaceImageQualityRatingSequence", vr: SQ }, // DICOM
    E { tag: Single(QUALITY_THRESHOLD), alias: "QualityThreshold", vr: DS }, // DICOM
    E { tag: Single(OCT_BSCAN_ANALYSIS_ACQUISITION_PARAMETERS_SEQUENCE), alias: "OCTBscanAnalysisAcquisitionParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBEROF_BSCANS_PER_FRAME), alias: "NumberofBscansPerFrame", vr: UL }, // DICOM
    E { tag: Single(BSCAN_SLAB_THICKNESS), alias: "BscanSlabThickness", vr: FL }, // DICOM
    E { tag: Single(DISTANCE_BETWEEN_BSCAN_SLABS), alias: "DistanceBetweenBscanSlabs", vr: FL }, // DICOM
    E { tag: Single(BSCAN_CYCLE_TIME), alias: "BscanCycleTime", vr: FL }, // DICOM
    E { tag: Single(BSCAN_CYCLE_TIME_VECTOR), alias: "BscanCycleTimeVector", vr: FL }, // DICOM
    E { tag: Single(ASCAN_RATE), alias: "AscanRate", vr: FL }, // DICOM
    E { tag: Single(BSCAN_RATE), alias: "BscanRate", vr: FL }, // DICOM
    E { tag: Single(SURFACE_MESH_Z_PIXEL_OFFSET), alias: "SurfaceMeshZPixelOffset", vr: UL }, // DICOM
    E { tag: Single(VISUAL_FIELD_HORIZONTAL_EXTENT), alias: "VisualFieldHorizontalExtent", vr: FL }, // DICOM
    E { tag: Single(VISUAL_FIELD_VERTICAL_EXTENT), alias: "VisualFieldVerticalExtent", vr: FL }, // DICOM
    E { tag: Single(VISUAL_FIELD_SHAPE), alias: "VisualFieldShape", vr: CS }, // DICOM
    E { tag: Single(SCREENING_TEST_MODE_CODE_SEQUENCE), alias: "ScreeningTestModeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MAXIMUM_STIMULUS_LUMINANCE), alias: "MaximumStimulusLuminance", vr: FL }, // DICOM
    E { tag: Single(BACKGROUND_LUMINANCE), alias: "BackgroundLuminance", vr: FL }, // DICOM
    E { tag: Single(STIMULUS_COLOR_CODE_SEQUENCE), alias: "StimulusColorCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(BACKGROUND_ILLUMINATION_COLOR_CODE_SEQUENCE), alias: "BackgroundIlluminationColorCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(STIMULUS_AREA), alias: "StimulusArea", vr: FL }, // DICOM
    E { tag: Single(STIMULUS_PRESENTATION_TIME), alias: "StimulusPresentationTime", vr: FL }, // DICOM
    E { tag: Single(FIXATION_SEQUENCE), alias: "FixationSequence", vr: SQ }, // DICOM
    E { tag: Single(FIXATION_MONITORING_CODE_SEQUENCE), alias: "FixationMonitoringCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_FIELD_CATCH_TRIAL_SEQUENCE), alias: "VisualFieldCatchTrialSequence", vr: SQ }, // DICOM
    E { tag: Single(FIXATION_CHECKED_QUANTITY), alias: "FixationCheckedQuantity", vr: US }, // DICOM
    E { tag: Single(PATIENT_NOT_PROPERLY_FIXATED_QUANTITY), alias: "PatientNotProperlyFixatedQuantity", vr: US }, // DICOM
    E { tag: Single(PRESENTED_VISUAL_STIMULI_DATA_FLAG), alias: "PresentedVisualStimuliDataFlag", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_VISUAL_STIMULI), alias: "NumberOfVisualStimuli", vr: US }, // DICOM
    E { tag: Single(EXCESSIVE_FIXATION_LOSSES_DATA_FLAG), alias: "ExcessiveFixationLossesDataFlag", vr: CS }, // DICOM
    E { tag: Single(EXCESSIVE_FIXATION_LOSSES), alias: "ExcessiveFixationLosses", vr: CS }, // DICOM
    E { tag: Single(STIMULI_RETESTING_QUANTITY), alias: "StimuliRetestingQuantity", vr: US }, // DICOM
    E { tag: Single(COMMENTS_ON_PATIENT_PERFORMANCE_OF_VISUAL_FIELD), alias: "CommentsOnPatientPerformanceOfVisualField", vr: LT }, // DICOM
    E { tag: Single(FALSE_NEGATIVES_ESTIMATE_FLAG), alias: "FalseNegativesEstimateFlag", vr: CS }, // DICOM
    E { tag: Single(FALSE_NEGATIVES_ESTIMATE), alias: "FalseNegativesEstimate", vr: FL }, // DICOM
    E { tag: Single(NEGATIVE_CATCH_TRIALS_QUANTITY), alias: "NegativeCatchTrialsQuantity", vr: US }, // DICOM
    E { tag: Single(FALSE_NEGATIVES_QUANTITY), alias: "FalseNegativesQuantity", vr: US }, // DICOM
    E { tag: Single(EXCESSIVE_FALSE_NEGATIVES_DATA_FLAG), alias: "ExcessiveFalseNegativesDataFlag", vr: CS }, // DICOM
    E { tag: Single(EXCESSIVE_FALSE_NEGATIVES), alias: "ExcessiveFalseNegatives", vr: CS }, // DICOM
    E { tag: Single(FALSE_POSITIVES_ESTIMATE_FLAG), alias: "FalsePositivesEstimateFlag", vr: CS }, // DICOM
    E { tag: Single(FALSE_POSITIVES_ESTIMATE), alias: "FalsePositivesEstimate", vr: FL }, // DICOM
    E { tag: Single(CATCH_TRIALS_DATA_FLAG), alias: "CatchTrialsDataFlag", vr: CS }, // DICOM
    E { tag: Single(POSITIVE_CATCH_TRIALS_QUANTITY), alias: "PositiveCatchTrialsQuantity", vr: US }, // DICOM
    E { tag: Single(TEST_POINT_NORMALS_DATA_FLAG), alias: "TestPointNormalsDataFlag", vr: CS }, // DICOM
    E { tag: Single(TEST_POINT_NORMALS_SEQUENCE), alias: "TestPointNormalsSequence", vr: SQ }, // DICOM
    E { tag: Single(GLOBAL_DEVIATION_PROBABILITY_NORMALS_FLAG), alias: "GlobalDeviationProbabilityNormalsFlag", vr: CS }, // DICOM
    E { tag: Single(FALSE_POSITIVES_QUANTITY), alias: "FalsePositivesQuantity", vr: US }, // DICOM
    E { tag: Single(EXCESSIVE_FALSE_POSITIVES_DATA_FLAG), alias: "ExcessiveFalsePositivesDataFlag", vr: CS }, // DICOM
    E { tag: Single(EXCESSIVE_FALSE_POSITIVES), alias: "ExcessiveFalsePositives", vr: CS }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_NORMALS_FLAG), alias: "VisualFieldTestNormalsFlag", vr: CS }, // DICOM
    E { tag: Single(RESULTS_NORMALS_SEQUENCE), alias: "ResultsNormalsSequence", vr: SQ }, // DICOM
    E { tag: Single(AGE_CORRECTED_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE), alias: "AgeCorrectedSensitivityDeviationAlgorithmSequence", vr: SQ }, // DICOM
    E { tag: Single(GLOBAL_DEVIATION_FROM_NORMAL), alias: "GlobalDeviationFromNormal", vr: FL }, // DICOM
    E { tag: Single(GENERALIZED_DEFECT_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE), alias: "GeneralizedDefectSensitivityDeviationAlgorithmSequence", vr: SQ }, // DICOM
    E { tag: Single(LOCALIZED_DEVIATION_FROM_NORMAL), alias: "LocalizedDeviationFromNormal", vr: FL }, // DICOM
    E { tag: Single(PATIENT_RELIABILITY_INDICATOR), alias: "PatientReliabilityIndicator", vr: LO }, // DICOM
    E { tag: Single(VISUAL_FIELD_MEAN_SENSITIVITY), alias: "VisualFieldMeanSensitivity", vr: FL }, // DICOM
    E { tag: Single(GLOBAL_DEVIATION_PROBABILITY), alias: "GlobalDeviationProbability", vr: FL }, // DICOM
    E { tag: Single(LOCAL_DEVIATION_PROBABILITY_NORMALS_FLAG), alias: "LocalDeviationProbabilityNormalsFlag", vr: CS }, // DICOM
    E { tag: Single(LOCALIZED_DEVIATION_PROBABILITY), alias: "LocalizedDeviationProbability", vr: FL }, // DICOM
    E { tag: Single(SHORT_TERM_FLUCTUATION_CALCULATED), alias: "ShortTermFluctuationCalculated", vr: CS }, // DICOM
    E { tag: Single(SHORT_TERM_FLUCTUATION), alias: "ShortTermFluctuation", vr: FL }, // DICOM
    E { tag: Single(SHORT_TERM_FLUCTUATION_PROBABILITY_CALCULATED), alias: "ShortTermFluctuationProbabilityCalculated", vr: CS }, // DICOM
    E { tag: Single(SHORT_TERM_FLUCTUATION_PROBABILITY), alias: "ShortTermFluctuationProbability", vr: FL }, // DICOM
    E { tag: Single(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_CALCULATED), alias: "CorrectedLocalizedDeviationFromNormalCalculated", vr: CS }, // DICOM
    E { tag: Single(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL), alias: "CorrectedLocalizedDeviationFromNormal", vr: FL }, // DICOM
    E { tag: Single(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY_CALCULATED), alias: "CorrectedLocalizedDeviationFromNormalProbabilityCalculated", vr: CS }, // DICOM
    E { tag: Single(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY), alias: "CorrectedLocalizedDeviationFromNormalProbability", vr: FL }, // DICOM
    E { tag: Single(GLOBAL_DEVIATION_PROBABILITY_SEQUENCE), alias: "GlobalDeviationProbabilitySequence", vr: SQ }, // DICOM
    E { tag: Single(LOCALIZED_DEVIATION_PROBABILITY_SEQUENCE), alias: "LocalizedDeviationProbabilitySequence", vr: SQ }, // DICOM
    E { tag: Single(FOVEAL_SENSITIVITY_MEASURED), alias: "FovealSensitivityMeasured", vr: CS }, // DICOM
    E { tag: Single(FOVEAL_SENSITIVITY), alias: "FovealSensitivity", vr: FL }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_DURATION), alias: "VisualFieldTestDuration", vr: FL }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_POINT_SEQUENCE), alias: "VisualFieldTestPointSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_POINT_X_COORDINATE), alias: "VisualFieldTestPointXCoordinate", vr: FL }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_POINT_Y_COORDINATE), alias: "VisualFieldTestPointYCoordinate", vr: FL }, // DICOM
    E { tag: Single(AGE_CORRECTED_SENSITIVITY_DEVIATION_VALUE), alias: "AgeCorrectedSensitivityDeviationValue", vr: FL }, // DICOM
    E { tag: Single(STIMULUS_RESULTS), alias: "StimulusResults", vr: CS }, // DICOM
    E { tag: Single(SENSITIVITY_VALUE), alias: "SensitivityValue", vr: FL }, // DICOM
    E { tag: Single(RETEST_STIMULUS_SEEN), alias: "RetestStimulusSeen", vr: CS }, // DICOM
    E { tag: Single(RETEST_SENSITIVITY_VALUE), alias: "RetestSensitivityValue", vr: FL }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_POINT_NORMALS_SEQUENCE), alias: "VisualFieldTestPointNormalsSequence", vr: SQ }, // DICOM
    E { tag: Single(QUANTIFIED_DEFECT), alias: "QuantifiedDefect", vr: FL }, // DICOM
    E { tag: Single(AGE_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE), alias: "AgeCorrectedSensitivityDeviationProbabilityValue", vr: FL }, // DICOM
    E { tag: Single(GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_FLAG), alias: "GeneralizedDefectCorrectedSensitivityDeviationFlag", vr: CS }, // DICOM
    E { tag: Single(GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_VALUE), alias: "GeneralizedDefectCorrectedSensitivityDeviationValue", vr: FL }, // DICOM
    E { tag: Single(GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE), alias: "GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue", vr: FL }, // DICOM
    E { tag: Single(MINIMUM_SENSITIVITY_VALUE), alias: "MinimumSensitivityValue", vr: FL }, // DICOM
    E { tag: Single(BLIND_SPOT_LOCALIZED), alias: "BlindSpotLocalized", vr: CS }, // DICOM
    E { tag: Single(BLIND_SPOT_X_COORDINATE), alias: "BlindSpotXCoordinate", vr: FL }, // DICOM
    E { tag: Single(BLIND_SPOT_Y_COORDINATE), alias: "BlindSpotYCoordinate", vr: FL }, // DICOM
    E { tag: Single(VISUAL_ACUITY_MEASUREMENT_SEQUENCE), alias: "VisualAcuityMeasurementSequence", vr: SQ }, // DICOM
    E { tag: Single(REFRACTIVE_PARAMETERS_USED_ON_PATIENT_SEQUENCE), alias: "RefractiveParametersUsedOnPatientSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASUREMENT_LATERALITY), alias: "MeasurementLaterality", vr: CS }, // DICOM
    E { tag: Single(OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_LEFT_EYE_SEQUENCE), alias: "OphthalmicPatientClinicalInformationLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_RIGHT_EYE_SEQUENCE), alias: "OphthalmicPatientClinicalInformationRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(FOVEAL_POINT_NORMATIVE_DATA_FLAG), alias: "FovealPointNormativeDataFlag", vr: CS }, // DICOM
    E { tag: Single(FOVEAL_POINT_PROBABILITY_VALUE), alias: "FovealPointProbabilityValue", vr: FL }, // DICOM
    E { tag: Single(SCREENING_BASELINE_MEASURED), alias: "ScreeningBaselineMeasured", vr: CS }, // DICOM
    E { tag: Single(SCREENING_BASELINE_MEASURED_SEQUENCE), alias: "ScreeningBaselineMeasuredSequence", vr: SQ }, // DICOM
    E { tag: Single(SCREENING_BASELINE_TYPE), alias: "ScreeningBaselineType", vr: CS }, // DICOM
    E { tag: Single(SCREENING_BASELINE_VALUE), alias: "ScreeningBaselineValue", vr: FL }, // DICOM
    E { tag: Single(ALGORITHM_SOURCE), alias: "AlgorithmSource", vr: LO }, // DICOM
    E { tag: Single(DATA_SET_NAME), alias: "DataSetName", vr: LO }, // DICOM
    E { tag: Single(DATA_SET_VERSION), alias: "DataSetVersion", vr: LO }, // DICOM
    E { tag: Single(DATA_SET_SOURCE), alias: "DataSetSource", vr: LO }, // DICOM
    E { tag: Single(DATA_SET_DESCRIPTION), alias: "DataSetDescription", vr: LO }, // DICOM
    E { tag: Single(VISUAL_FIELD_TEST_RELIABILITY_GLOBAL_INDEX_SEQUENCE), alias: "VisualFieldTestReliabilityGlobalIndexSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_FIELD_GLOBAL_RESULTS_INDEX_SEQUENCE), alias: "VisualFieldGlobalResultsIndexSequence", vr: SQ }, // DICOM
    E { tag: Single(DATA_OBSERVATION_SEQUENCE), alias: "DataObservationSequence", vr: SQ }, // DICOM
    E { tag: Single(INDEX_NORMALS_FLAG), alias: "IndexNormalsFlag", vr: CS }, // DICOM
    E { tag: Single(INDEX_PROBABILITY), alias: "IndexProbability", vr: FL }, // DICOM
    E { tag: Single(INDEX_PROBABILITY_SEQUENCE), alias: "IndexProbabilitySequence", vr: SQ }, // DICOM
    E { tag: Single(SAMPLES_PER_PIXEL), alias: "SamplesPerPixel", vr: US }, // DICOM
    E { tag: Single(SAMPLES_PER_PIXEL_USED), alias: "SamplesPerPixelUsed", vr: US }, // DICOM
    E { tag: Single(PHOTOMETRIC_INTERPRETATION), alias: "PhotometricInterpretation", vr: CS }, // DICOM
    E { tag: Single(PLANAR_CONFIGURATION), alias: "PlanarConfiguration", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_FRAMES), alias: "NumberOfFrames", vr: IS }, // DICOM
    E { tag: Single(FRAME_INCREMENT_POINTER), alias: "FrameIncrementPointer", vr: AT }, // DICOM
    E { tag: Single(FRAME_DIMENSION_POINTER), alias: "FrameDimensionPointer", vr: AT }, // DICOM
    E { tag: Single(ROWS), alias: "Rows", vr: US }, // DICOM
    E { tag: Single(COLUMNS), alias: "Columns", vr: US }, // DICOM
    E { tag: Single(ULTRASOUND_COLOR_DATA_PRESENT), alias: "UltrasoundColorDataPresent", vr: US }, // DICOM
    E { tag: Single(PIXEL_SPACING), alias: "PixelSpacing", vr: DS }, // DICOM
    E { tag: Single(ZOOM_FACTOR), alias: "ZoomFactor", vr: DS }, // DICOM
    E { tag: Single(ZOOM_CENTER), alias: "ZoomCenter", vr: DS }, // DICOM
    E { tag: Single(PIXEL_ASPECT_RATIO), alias: "PixelAspectRatio", vr: IS }, // DICOM
    E { tag: Single(CORRECTED_IMAGE), alias: "CorrectedImage", vr: CS }, // DICOM
    E { tag: Single(BITS_ALLOCATED), alias: "BitsAllocated", vr: US }, // DICOM
    E { tag: Single(BITS_STORED), alias: "BitsStored", vr: US }, // DICOM
    E { tag: Single(HIGH_BIT), alias: "HighBit", vr: US }, // DICOM
    E { tag: Single(PIXEL_REPRESENTATION), alias: "PixelRepresentation", vr: US }, // DICOM
    E { tag: Single(SMALLEST_IMAGE_PIXEL_VALUE), alias: "SmallestImagePixelValue", vr: US }, // DICOM
    E { tag: Single(LARGEST_IMAGE_PIXEL_VALUE), alias: "LargestImagePixelValue", vr: US }, // DICOM
    E { tag: Single(SMALLEST_PIXEL_VALUE_IN_SERIES), alias: "SmallestPixelValueInSeries", vr: US }, // DICOM
    E { tag: Single(LARGEST_PIXEL_VALUE_IN_SERIES), alias: "LargestPixelValueInSeries", vr: US }, // DICOM
    E { tag: Single(PIXEL_PADDING_VALUE), alias: "PixelPaddingValue", vr: US }, // DICOM
    E { tag: Single(PIXEL_PADDING_RANGE_LIMIT), alias: "PixelPaddingRangeLimit", vr: US }, // DICOM
    E { tag: Single(FLOAT_PIXEL_PADDING_VALUE), alias: "FloatPixelPaddingValue", vr: FL }, // DICOM
    E { tag: Single(DOUBLE_FLOAT_PIXEL_PADDING_VALUE), alias: "DoubleFloatPixelPaddingValue", vr: FD }, // DICOM
    E { tag: Single(FLOAT_PIXEL_PADDING_RANGE_LIMIT), alias: "FloatPixelPaddingRangeLimit", vr: FL }, // DICOM
    E { tag: Single(DOUBLE_FLOAT_PIXEL_PADDING_RANGE_LIMIT), alias: "DoubleFloatPixelPaddingRangeLimit", vr: FD }, // DICOM
    E { tag: Single(QUALITY_CONTROL_IMAGE), alias: "QualityControlImage", vr: CS }, // DICOM
    E { tag: Single(BURNED_IN_ANNOTATION), alias: "BurnedInAnnotation", vr: CS }, // DICOM
    E { tag: Single(RECOGNIZABLE_VISUAL_FEATURES), alias: "RecognizableVisualFeatures", vr: CS }, // DICOM
    E { tag: Single(LONGITUDINAL_TEMPORAL_INFORMATION_MODIFIED), alias: "LongitudinalTemporalInformationModified", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_COLOR_PALETTE_INSTANCE_UID), alias: "ReferencedColorPaletteInstanceUID", vr: UI }, // DICOM
    E { tag: Single(PIXEL_SPACING_CALIBRATION_TYPE), alias: "PixelSpacingCalibrationType", vr: CS }, // DICOM
    E { tag: Single(PIXEL_SPACING_CALIBRATION_DESCRIPTION), alias: "PixelSpacingCalibrationDescription", vr: LO }, // DICOM
    E { tag: Single(PIXEL_INTENSITY_RELATIONSHIP), alias: "PixelIntensityRelationship", vr: CS }, // DICOM
    E { tag: Single(PIXEL_INTENSITY_RELATIONSHIP_SIGN), alias: "PixelIntensityRelationshipSign", vr: SS }, // DICOM
    E { tag: Single(WINDOW_CENTER), alias: "WindowCenter", vr: DS }, // DICOM
    E { tag: Single(WINDOW_WIDTH), alias: "WindowWidth", vr: DS }, // DICOM
    E { tag: Single(RESCALE_INTERCEPT), alias: "RescaleIntercept", vr: DS }, // DICOM
    E { tag: Single(RESCALE_SLOPE), alias: "RescaleSlope", vr: DS }, // DICOM
    E { tag: Single(RESCALE_TYPE), alias: "RescaleType", vr: LO }, // DICOM
    E { tag: Single(WINDOW_CENTER_WIDTH_EXPLANATION), alias: "WindowCenterWidthExplanation", vr: LO }, // DICOM
    E { tag: Single(VOILUT_FUNCTION), alias: "VOILUTFunction", vr: CS }, // DICOM
    E { tag: Single(RECOMMENDED_VIEWING_MODE), alias: "RecommendedViewingMode", vr: CS }, // DICOM
    E { tag: Single(RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "RedPaletteColorLookupTableDescriptor", vr: US }, // DICOM
    E { tag: Single(GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "GreenPaletteColorLookupTableDescriptor", vr: US }, // DICOM
    E { tag: Single(BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "BluePaletteColorLookupTableDescriptor", vr: US }, // DICOM
    E { tag: Single(ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "AlphaPaletteColorLookupTableDescriptor", vr: US }, // DICOM
    E { tag: Single(PALETTE_COLOR_LOOKUP_TABLE_UID), alias: "PaletteColorLookupTableUID", vr: UI }, // DICOM
    E { tag: Single(RED_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "RedPaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "GreenPaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "BluePaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "AlphaPaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "SegmentedRedPaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "SegmentedGreenPaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "SegmentedBluePaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(SEGMENTED_ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "SegmentedAlphaPaletteColorLookupTableData", vr: OW }, // DICOM
    E { tag: Single(STORED_VALUE_COLOR_RANGE_SEQUENCE), alias: "StoredValueColorRangeSequence", vr: SQ }, // DICOM
    E { tag: Single(MINIMUM_STORED_VALUE_MAPPED), alias: "MinimumStoredValueMapped", vr: FD }, // DICOM
    E { tag: Single(MAXIMUM_STORED_VALUE_MAPPED), alias: "MaximumStoredValueMapped", vr: FD }, // DICOM
    E { tag: Single(BREAST_IMPLANT_PRESENT), alias: "BreastImplantPresent", vr: CS }, // DICOM
    E { tag: Single(PARTIAL_VIEW), alias: "PartialView", vr: CS }, // DICOM
    E { tag: Single(PARTIAL_VIEW_DESCRIPTION), alias: "PartialViewDescription", vr: ST }, // DICOM
    E { tag: Single(PARTIAL_VIEW_CODE_SEQUENCE), alias: "PartialViewCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SPATIAL_LOCATIONS_PRESERVED), alias: "SpatialLocationsPreserved", vr: CS }, // DICOM
    E { tag: Single(DATA_FRAME_ASSIGNMENT_SEQUENCE), alias: "DataFrameAssignmentSequence", vr: SQ }, // DICOM
    E { tag: Single(DATA_PATH_ASSIGNMENT), alias: "DataPathAssignment", vr: CS }, // DICOM
    E { tag: Single(BITS_MAPPED_TO_COLOR_LOOKUP_TABLE), alias: "BitsMappedToColorLookupTable", vr: US }, // DICOM
    E { tag: Single(BLENDING_LUT1_SEQUENCE), alias: "BlendingLUT1Sequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_LUT1_TRANSFER_FUNCTION), alias: "BlendingLUT1TransferFunction", vr: CS }, // DICOM
    E { tag: Single(BLENDING_WEIGHT_CONSTANT), alias: "BlendingWeightConstant", vr: FD }, // DICOM
    E { tag: Single(BLENDING_LOOKUP_TABLE_DESCRIPTOR), alias: "BlendingLookupTableDescriptor", vr: US }, // DICOM
    E { tag: Single(BLENDING_LOOKUP_TABLE_DATA), alias: "BlendingLookupTableData", vr: OW }, // DICOM
    E { tag: Single(ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE), alias: "EnhancedPaletteColorLookupTableSequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_LUT2_SEQUENCE), alias: "BlendingLUT2Sequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_LUT2_TRANSFER_FUNCTION), alias: "BlendingLUT2TransferFunction", vr: CS }, // DICOM
    E { tag: Single(DATA_PATH_ID), alias: "DataPathID", vr: CS }, // DICOM
    E { tag: Single(RGBLUT_TRANSFER_FUNCTION), alias: "RGBLUTTransferFunction", vr: CS }, // DICOM
    E { tag: Single(ALPHA_LUT_TRANSFER_FUNCTION), alias: "AlphaLUTTransferFunction", vr: CS }, // DICOM
    E { tag: Single(ICC_PROFILE), alias: "ICCProfile", vr: OB }, // DICOM
    E { tag: Single(COLOR_SPACE), alias: "ColorSpace", vr: CS }, // DICOM
    E { tag: Single(LOSSY_IMAGE_COMPRESSION), alias: "LossyImageCompression", vr: CS }, // DICOM
    E { tag: Single(LOSSY_IMAGE_COMPRESSION_RATIO), alias: "LossyImageCompressionRatio", vr: DS }, // DICOM
    E { tag: Single(LOSSY_IMAGE_COMPRESSION_METHOD), alias: "LossyImageCompressionMethod", vr: CS }, // DICOM
    E { tag: Single(MODALITY_LUT_SEQUENCE), alias: "ModalityLUTSequence", vr: SQ }, // DICOM
    E { tag: Single(LUT_DESCRIPTOR), alias: "LUTDescriptor", vr: US }, // DICOM
    E { tag: Single(LUT_EXPLANATION), alias: "LUTExplanation", vr: LO }, // DICOM
    E { tag: Single(MODALITY_LUT_TYPE), alias: "ModalityLUTType", vr: LO }, // DICOM
    E { tag: Single(LUT_DATA), alias: "LUTData", vr: OW }, // DICOM
    E { tag: Single(VOILUT_SEQUENCE), alias: "VOILUTSequence", vr: SQ }, // DICOM
    E { tag: Single(SOFTCOPY_VOILUT_SEQUENCE), alias: "SoftcopyVOILUTSequence", vr: SQ }, // DICOM
    E { tag: Single(REPRESENTATIVE_FRAME_NUMBER), alias: "RepresentativeFrameNumber", vr: US }, // DICOM
    E { tag: Single(FRAME_NUMBERS_OF_INTEREST), alias: "FrameNumbersOfInterest", vr: US }, // DICOM
    E { tag: Single(FRAME_OF_INTEREST_DESCRIPTION), alias: "FrameOfInterestDescription", vr: LO }, // DICOM
    E { tag: Single(FRAME_OF_INTEREST_TYPE), alias: "FrameOfInterestType", vr: CS }, // DICOM
    E { tag: Single(R_WAVE_POINTER), alias: "RWavePointer", vr: US }, // DICOM
    E { tag: Single(MASK_SUBTRACTION_SEQUENCE), alias: "MaskSubtractionSequence", vr: SQ }, // DICOM
    E { tag: Single(MASK_OPERATION), alias: "MaskOperation", vr: CS }, // DICOM
    E { tag: Single(APPLICABLE_FRAME_RANGE), alias: "ApplicableFrameRange", vr: US }, // DICOM
    E { tag: Single(MASK_FRAME_NUMBERS), alias: "MaskFrameNumbers", vr: US }, // DICOM
    E { tag: Single(CONTRAST_FRAME_AVERAGING), alias: "ContrastFrameAveraging", vr: US }, // DICOM
    E { tag: Single(MASK_SUB_PIXEL_SHIFT), alias: "MaskSubPixelShift", vr: FL }, // DICOM
    E { tag: Single(TID_OFFSET), alias: "TIDOffset", vr: SS }, // DICOM
    E { tag: Single(MASK_OPERATION_EXPLANATION), alias: "MaskOperationExplanation", vr: ST }, // DICOM
    E { tag: Single(EQUIPMENT_ADMINISTRATOR_SEQUENCE), alias: "EquipmentAdministratorSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_DISPLAY_SUBSYSTEMS), alias: "NumberOfDisplaySubsystems", vr: US }, // DICOM
    E { tag: Single(CURRENT_CONFIGURATION_ID), alias: "CurrentConfigurationID", vr: US }, // DICOM
    E { tag: Single(DISPLAY_SUBSYSTEM_ID), alias: "DisplaySubsystemID", vr: US }, // DICOM
    E { tag: Single(DISPLAY_SUBSYSTEM_NAME), alias: "DisplaySubsystemName", vr: SH }, // DICOM
    E { tag: Single(DISPLAY_SUBSYSTEM_DESCRIPTION), alias: "DisplaySubsystemDescription", vr: LO }, // DICOM
    E { tag: Single(SYSTEM_STATUS), alias: "SystemStatus", vr: CS }, // DICOM
    E { tag: Single(SYSTEM_STATUS_COMMENT), alias: "SystemStatusComment", vr: LO }, // DICOM
    E { tag: Single(TARGET_LUMINANCE_CHARACTERISTICS_SEQUENCE), alias: "TargetLuminanceCharacteristicsSequence", vr: SQ }, // DICOM
    E { tag: Single(LUMINANCE_CHARACTERISTICS_ID), alias: "LuminanceCharacteristicsID", vr: US }, // DICOM
    E { tag: Single(DISPLAY_SUBSYSTEM_CONFIGURATION_SEQUENCE), alias: "DisplaySubsystemConfigurationSequence", vr: SQ }, // DICOM
    E { tag: Single(CONFIGURATION_ID), alias: "ConfigurationID", vr: US }, // DICOM
    E { tag: Single(CONFIGURATION_NAME), alias: "ConfigurationName", vr: SH }, // DICOM
    E { tag: Single(CONFIGURATION_DESCRIPTION), alias: "ConfigurationDescription", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_TARGET_LUMINANCE_CHARACTERISTICS_ID), alias: "ReferencedTargetLuminanceCharacteristicsID", vr: US }, // DICOM
    E { tag: Single(QA_RESULTS_SEQUENCE), alias: "QAResultsSequence", vr: SQ }, // DICOM
    E { tag: Single(DISPLAY_SUBSYSTEM_QA_RESULTS_SEQUENCE), alias: "DisplaySubsystemQAResultsSequence", vr: SQ }, // DICOM
    E { tag: Single(CONFIGURATION_QA_RESULTS_SEQUENCE), alias: "ConfigurationQAResultsSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASUREMENT_EQUIPMENT_SEQUENCE), alias: "MeasurementEquipmentSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASUREMENT_FUNCTIONS), alias: "MeasurementFunctions", vr: CS }, // DICOM
    E { tag: Single(MEASUREMENT_EQUIPMENT_TYPE), alias: "MeasurementEquipmentType", vr: CS }, // DICOM
    E { tag: Single(VISUAL_EVALUATION_RESULT_SEQUENCE), alias: "VisualEvaluationResultSequence", vr: SQ }, // DICOM
    E { tag: Single(DISPLAY_CALIBRATION_RESULT_SEQUENCE), alias: "DisplayCalibrationResultSequence", vr: SQ }, // DICOM
    E { tag: Single(DDL_VALUE), alias: "DDLValue", vr: US }, // DICOM
    E { tag: Single(CI_EXY_WHITE_POINT), alias: "CIExyWhitePoint", vr: FL }, // DICOM
    E { tag: Single(DISPLAY_FUNCTION_TYPE), alias: "DisplayFunctionType", vr: CS }, // DICOM
    E { tag: Single(GAMMA_VALUE), alias: "GammaValue", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_LUMINANCE_POINTS), alias: "NumberOfLuminancePoints", vr: US }, // DICOM
    E { tag: Single(LUMINANCE_RESPONSE_SEQUENCE), alias: "LuminanceResponseSequence", vr: SQ }, // DICOM
    E { tag: Single(TARGET_MINIMUM_LUMINANCE), alias: "TargetMinimumLuminance", vr: FL }, // DICOM
    E { tag: Single(TARGET_MAXIMUM_LUMINANCE), alias: "TargetMaximumLuminance", vr: FL }, // DICOM
    E { tag: Single(LUMINANCE_VALUE), alias: "LuminanceValue", vr: FL }, // DICOM
    E { tag: Single(LUMINANCE_RESPONSE_DESCRIPTION), alias: "LuminanceResponseDescription", vr: LO }, // DICOM
    E { tag: Single(WHITE_POINT_FLAG), alias: "WhitePointFlag", vr: CS }, // DICOM
    E { tag: Single(DISPLAY_DEVICE_TYPE_CODE_SEQUENCE), alias: "DisplayDeviceTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(DISPLAY_SUBSYSTEM_SEQUENCE), alias: "DisplaySubsystemSequence", vr: SQ }, // DICOM
    E { tag: Single(LUMINANCE_RESULT_SEQUENCE), alias: "LuminanceResultSequence", vr: SQ }, // DICOM
    E { tag: Single(AMBIENT_LIGHT_VALUE_SOURCE), alias: "AmbientLightValueSource", vr: CS }, // DICOM
    E { tag: Single(MEASURED_CHARACTERISTICS), alias: "MeasuredCharacteristics", vr: CS }, // DICOM
    E { tag: Single(LUMINANCE_UNIFORMITY_RESULT_SEQUENCE), alias: "LuminanceUniformityResultSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_EVALUATION_TEST_SEQUENCE), alias: "VisualEvaluationTestSequence", vr: SQ }, // DICOM
    E { tag: Single(TEST_RESULT), alias: "TestResult", vr: CS }, // DICOM
    E { tag: Single(TEST_RESULT_COMMENT), alias: "TestResultComment", vr: LO }, // DICOM
    E { tag: Single(TEST_IMAGE_VALIDATION), alias: "TestImageValidation", vr: CS }, // DICOM
    E { tag: Single(TEST_PATTERN_CODE_SEQUENCE), alias: "TestPatternCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASUREMENT_PATTERN_CODE_SEQUENCE), alias: "MeasurementPatternCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_EVALUATION_METHOD_CODE_SEQUENCE), alias: "VisualEvaluationMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PIXEL_DATA_PROVIDER_URL), alias: "PixelDataProviderURL", vr: UR }, // DICOM
    E { tag: Single(DATA_POINT_ROWS), alias: "DataPointRows", vr: UL }, // DICOM
    E { tag: Single(DATA_POINT_COLUMNS), alias: "DataPointColumns", vr: UL }, // DICOM
    E { tag: Single(SIGNAL_DOMAIN_COLUMNS), alias: "SignalDomainColumns", vr: CS }, // DICOM
    E { tag: Single(DATA_REPRESENTATION), alias: "DataRepresentation", vr: CS }, // DICOM
    E { tag: Single(PIXEL_MEASURES_SEQUENCE), alias: "PixelMeasuresSequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_VOILUT_SEQUENCE), alias: "FrameVOILUTSequence", vr: SQ }, // DICOM
    E { tag: Single(PIXEL_VALUE_TRANSFORMATION_SEQUENCE), alias: "PixelValueTransformationSequence", vr: SQ }, // DICOM
    E { tag: Single(SIGNAL_DOMAIN_ROWS), alias: "SignalDomainRows", vr: CS }, // DICOM
    E { tag: Single(DISPLAY_FILTER_PERCENTAGE), alias: "DisplayFilterPercentage", vr: FL }, // DICOM
    E { tag: Single(FRAME_PIXEL_SHIFT_SEQUENCE), alias: "FramePixelShiftSequence", vr: SQ }, // DICOM
    E { tag: Single(SUBTRACTION_ITEM_ID), alias: "SubtractionItemID", vr: US }, // DICOM
    E { tag: Single(PIXEL_INTENSITY_RELATIONSHIP_LUT_SEQUENCE), alias: "PixelIntensityRelationshipLUTSequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE), alias: "FramePixelDataPropertiesSequence", vr: SQ }, // DICOM
    E { tag: Single(GEOMETRICAL_PROPERTIES), alias: "GeometricalProperties", vr: CS }, // DICOM
    E { tag: Single(GEOMETRIC_MAXIMUM_DISTORTION), alias: "GeometricMaximumDistortion", vr: FL }, // DICOM
    E { tag: Single(IMAGE_PROCESSING_APPLIED), alias: "ImageProcessingApplied", vr: CS }, // DICOM
    E { tag: Single(MASK_SELECTION_MODE), alias: "MaskSelectionMode", vr: CS }, // DICOM
    E { tag: Single(LUT_FUNCTION), alias: "LUTFunction", vr: CS }, // DICOM
    E { tag: Single(MASK_VISIBILITY_PERCENTAGE), alias: "MaskVisibilityPercentage", vr: FL }, // DICOM
    E { tag: Single(PIXEL_SHIFT_SEQUENCE), alias: "PixelShiftSequence", vr: SQ }, // DICOM
    E { tag: Single(REGION_PIXEL_SHIFT_SEQUENCE), alias: "RegionPixelShiftSequence", vr: SQ }, // DICOM
    E { tag: Single(VERTICES_OF_THE_REGION), alias: "VerticesOfTheRegion", vr: SS }, // DICOM
    E { tag: Single(MULTI_FRAME_PRESENTATION_SEQUENCE), alias: "MultiFramePresentationSequence", vr: SQ }, // DICOM
    E { tag: Single(PIXEL_SHIFT_FRAME_RANGE), alias: "PixelShiftFrameRange", vr: US }, // DICOM
    E { tag: Single(LUT_FRAME_RANGE), alias: "LUTFrameRange", vr: US }, // DICOM
    E { tag: Single(IMAGE_TO_EQUIPMENT_MAPPING_MATRIX), alias: "ImageToEquipmentMappingMatrix", vr: DS }, // DICOM
    E { tag: Single(EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION), alias: "EquipmentCoordinateSystemIdentification", vr: CS }, // DICOM
    E { tag: Single(REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE), alias: "RequestingPhysicianIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(REQUESTING_PHYSICIAN), alias: "RequestingPhysician", vr: PN }, // DICOM
    E { tag: Single(REQUESTING_SERVICE), alias: "RequestingService", vr: LO }, // DICOM
    E { tag: Single(REQUESTING_SERVICE_CODE_SEQUENCE), alias: "RequestingServiceCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REQUESTED_PROCEDURE_DESCRIPTION), alias: "RequestedProcedureDescription", vr: LO }, // DICOM
    E { tag: Single(REQUESTED_PROCEDURE_CODE_SEQUENCE), alias: "RequestedProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REQUESTED_CONTRAST_AGENT), alias: "RequestedContrastAgent", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_PATIENT_ALIAS_SEQUENCE), alias: "ReferencedPatientAliasSequence", vr: SQ }, // DICOM
    E { tag: Single(VISIT_STATUS_ID), alias: "VisitStatusID", vr: CS }, // DICOM
    E { tag: Single(ADMISSION_ID), alias: "AdmissionID", vr: LO }, // DICOM
    E { tag: Single(ISSUER_OF_ADMISSION_ID_SEQUENCE), alias: "IssuerOfAdmissionIDSequence", vr: SQ }, // DICOM
    E { tag: Single(ROUTE_OF_ADMISSIONS), alias: "RouteOfAdmissions", vr: LO }, // DICOM
    E { tag: Single(ADMITTING_DATE), alias: "AdmittingDate", vr: DA }, // DICOM
    E { tag: Single(ADMITTING_TIME), alias: "AdmittingTime", vr: TM }, // DICOM
    E { tag: Single(SPECIAL_NEEDS), alias: "SpecialNeeds", vr: LO }, // DICOM
    E { tag: Single(SERVICE_EPISODE_ID), alias: "ServiceEpisodeID", vr: LO }, // DICOM
    E { tag: Single(SERVICE_EPISODE_DESCRIPTION), alias: "ServiceEpisodeDescription", vr: LO }, // DICOM
    E { tag: Single(ISSUER_OF_SERVICE_EPISODE_ID_SEQUENCE), alias: "IssuerOfServiceEpisodeIDSequence", vr: SQ }, // DICOM
    E { tag: Single(PERTINENT_DOCUMENTS_SEQUENCE), alias: "PertinentDocumentsSequence", vr: SQ }, // DICOM
    E { tag: Single(PERTINENT_RESOURCES_SEQUENCE), alias: "PertinentResourcesSequence", vr: SQ }, // DICOM
    E { tag: Single(RESOURCE_DESCRIPTION), alias: "ResourceDescription", vr: LO }, // DICOM
    E { tag: Single(CURRENT_PATIENT_LOCATION), alias: "CurrentPatientLocation", vr: LO }, // DICOM
    E { tag: Single(PATIENT_INSTITUTION_RESIDENCE), alias: "PatientInstitutionResidence", vr: LO }, // DICOM
    E { tag: Single(PATIENT_STATE), alias: "PatientState", vr: LO }, // DICOM
    E { tag: Single(PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE), alias: "PatientClinicalTrialParticipationSequence", vr: SQ }, // DICOM
    E { tag: Single(VISIT_COMMENTS), alias: "VisitComments", vr: LT }, // DICOM
    E { tag: Single(WAVEFORM_ORIGINALITY), alias: "WaveformOriginality", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_WAVEFORM_CHANNELS), alias: "NumberOfWaveformChannels", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_WAVEFORM_SAMPLES), alias: "NumberOfWaveformSamples", vr: UL }, // DICOM
    E { tag: Single(SAMPLING_FREQUENCY), alias: "SamplingFrequency", vr: DS }, // DICOM
    E { tag: Single(MULTIPLEX_GROUP_LABEL), alias: "MultiplexGroupLabel", vr: SH }, // DICOM
    E { tag: Single(CHANNEL_DEFINITION_SEQUENCE), alias: "ChannelDefinitionSequence", vr: SQ }, // DICOM
    E { tag: Single(WAVEFORM_CHANNEL_NUMBER), alias: "WaveformChannelNumber", vr: IS }, // DICOM
    E { tag: Single(CHANNEL_LABEL), alias: "ChannelLabel", vr: SH }, // DICOM
    E { tag: Single(CHANNEL_STATUS), alias: "ChannelStatus", vr: CS }, // DICOM
    E { tag: Single(CHANNEL_SOURCE_SEQUENCE), alias: "ChannelSourceSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_SOURCE_MODIFIERS_SEQUENCE), alias: "ChannelSourceModifiersSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_WAVEFORM_SEQUENCE), alias: "SourceWaveformSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_DERIVATION_DESCRIPTION), alias: "ChannelDerivationDescription", vr: LO }, // DICOM
    E { tag: Single(CHANNEL_SENSITIVITY), alias: "ChannelSensitivity", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_SENSITIVITY_UNITS_SEQUENCE), alias: "ChannelSensitivityUnitsSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_SENSITIVITY_CORRECTION_FACTOR), alias: "ChannelSensitivityCorrectionFactor", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_BASELINE), alias: "ChannelBaseline", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_TIME_SKEW), alias: "ChannelTimeSkew", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_SAMPLE_SKEW), alias: "ChannelSampleSkew", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_OFFSET), alias: "ChannelOffset", vr: DS }, // DICOM
    E { tag: Single(WAVEFORM_BITS_STORED), alias: "WaveformBitsStored", vr: US }, // DICOM
    E { tag: Single(FILTER_LOW_FREQUENCY), alias: "FilterLowFrequency", vr: DS }, // DICOM
    E { tag: Single(FILTER_HIGH_FREQUENCY), alias: "FilterHighFrequency", vr: DS }, // DICOM
    E { tag: Single(NOTCH_FILTER_FREQUENCY), alias: "NotchFilterFrequency", vr: DS }, // DICOM
    E { tag: Single(NOTCH_FILTER_BANDWIDTH), alias: "NotchFilterBandwidth", vr: DS }, // DICOM
    E { tag: Single(WAVEFORM_DATA_DISPLAY_SCALE), alias: "WaveformDataDisplayScale", vr: FL }, // DICOM
    E { tag: Single(WAVEFORM_DISPLAY_BACKGROUND_CIE_LAB_VALUE), alias: "WaveformDisplayBackgroundCIELabValue", vr: US }, // DICOM
    E { tag: Single(WAVEFORM_PRESENTATION_GROUP_SEQUENCE), alias: "WaveformPresentationGroupSequence", vr: SQ }, // DICOM
    E { tag: Single(PRESENTATION_GROUP_NUMBER), alias: "PresentationGroupNumber", vr: US }, // DICOM
    E { tag: Single(CHANNEL_DISPLAY_SEQUENCE), alias: "ChannelDisplaySequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_RECOMMENDED_DISPLAY_CIE_LAB_VALUE), alias: "ChannelRecommendedDisplayCIELabValue", vr: US }, // DICOM
    E { tag: Single(CHANNEL_POSITION), alias: "ChannelPosition", vr: FL }, // DICOM
    E { tag: Single(DISPLAY_SHADING_FLAG), alias: "DisplayShadingFlag", vr: CS }, // DICOM
    E { tag: Single(FRACTIONAL_CHANNEL_DISPLAY_SCALE), alias: "FractionalChannelDisplayScale", vr: FL }, // DICOM
    E { tag: Single(ABSOLUTE_CHANNEL_DISPLAY_SCALE), alias: "AbsoluteChannelDisplayScale", vr: FL }, // DICOM
    E { tag: Single(MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE), alias: "MultiplexedAudioChannelsDescriptionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_IDENTIFICATION_CODE), alias: "ChannelIdentificationCode", vr: IS }, // DICOM
    E { tag: Single(CHANNEL_MODE), alias: "ChannelMode", vr: CS }, // DICOM
    E { tag: Single(SCHEDULED_STATION_AE_TITLE), alias: "ScheduledStationAETitle", vr: AE }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_START_DATE), alias: "ScheduledProcedureStepStartDate", vr: DA }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_START_TIME), alias: "ScheduledProcedureStepStartTime", vr: TM }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_END_DATE), alias: "ScheduledProcedureStepEndDate", vr: DA }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_END_TIME), alias: "ScheduledProcedureStepEndTime", vr: TM }, // DICOM
    E { tag: Single(SCHEDULED_PERFORMING_PHYSICIAN_NAME), alias: "ScheduledPerformingPhysicianName", vr: PN }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_DESCRIPTION), alias: "ScheduledProcedureStepDescription", vr: LO }, // DICOM
    E { tag: Single(SCHEDULED_PROTOCOL_CODE_SEQUENCE), alias: "ScheduledProtocolCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_ID), alias: "ScheduledProcedureStepID", vr: SH }, // DICOM
    E { tag: Single(STAGE_CODE_SEQUENCE), alias: "StageCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE), alias: "ScheduledPerformingPhysicianIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_STATION_NAME), alias: "ScheduledStationName", vr: SH }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_LOCATION), alias: "ScheduledProcedureStepLocation", vr: SH }, // DICOM
    E { tag: Single(PRE_MEDICATION), alias: "PreMedication", vr: LO }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_STATUS), alias: "ScheduledProcedureStepStatus", vr: CS }, // DICOM
    E { tag: Single(ORDER_PLACER_IDENTIFIER_SEQUENCE), alias: "OrderPlacerIdentifierSequence", vr: SQ }, // DICOM
    E { tag: Single(ORDER_FILLER_IDENTIFIER_SEQUENCE), alias: "OrderFillerIdentifierSequence", vr: SQ }, // DICOM
    E { tag: Single(LOCAL_NAMESPACE_ENTITY_ID), alias: "LocalNamespaceEntityID", vr: UT }, // DICOM
    E { tag: Single(UNIVERSAL_ENTITY_ID), alias: "UniversalEntityID", vr: UT }, // DICOM
    E { tag: Single(UNIVERSAL_ENTITY_ID_TYPE), alias: "UniversalEntityIDType", vr: CS }, // DICOM
    E { tag: Single(IDENTIFIER_TYPE_CODE), alias: "IdentifierTypeCode", vr: CS }, // DICOM
    E { tag: Single(ASSIGNING_FACILITY_SEQUENCE), alias: "AssigningFacilitySequence", vr: SQ }, // DICOM
    E { tag: Single(ASSIGNING_JURISDICTION_CODE_SEQUENCE), alias: "AssigningJurisdictionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE), alias: "AssigningAgencyOrDepartmentCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_SEQUENCE), alias: "ScheduledProcedureStepSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_NON_IMAGE_COMPOSITE_SOP_INSTANCE_SEQUENCE), alias: "ReferencedNonImageCompositeSOPInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_STATION_AE_TITLE), alias: "PerformedStationAETitle", vr: AE }, // DICOM
    E { tag: Single(PERFORMED_STATION_NAME), alias: "PerformedStationName", vr: SH }, // DICOM
    E { tag: Single(PERFORMED_LOCATION), alias: "PerformedLocation", vr: SH }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_START_DATE), alias: "PerformedProcedureStepStartDate", vr: DA }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_START_TIME), alias: "PerformedProcedureStepStartTime", vr: TM }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_END_DATE), alias: "PerformedProcedureStepEndDate", vr: DA }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_END_TIME), alias: "PerformedProcedureStepEndTime", vr: TM }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_STATUS), alias: "PerformedProcedureStepStatus", vr: CS }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_ID), alias: "PerformedProcedureStepID", vr: SH }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_DESCRIPTION), alias: "PerformedProcedureStepDescription", vr: LO }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_TYPE_DESCRIPTION), alias: "PerformedProcedureTypeDescription", vr: LO }, // DICOM
    E { tag: Single(PERFORMED_PROTOCOL_CODE_SEQUENCE), alias: "PerformedProtocolCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_PROTOCOL_TYPE), alias: "PerformedProtocolType", vr: CS }, // DICOM
    E { tag: Single(SCHEDULED_STEP_ATTRIBUTES_SEQUENCE), alias: "ScheduledStepAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(REQUEST_ATTRIBUTES_SEQUENCE), alias: "RequestAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP), alias: "CommentsOnThePerformedProcedureStep", vr: ST }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE), alias: "PerformedProcedureStepDiscontinuationReasonCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(QUANTITY_SEQUENCE), alias: "QuantitySequence", vr: SQ }, // DICOM
    E { tag: Single(QUANTITY), alias: "Quantity", vr: DS }, // DICOM
    E { tag: Single(MEASURING_UNITS_SEQUENCE), alias: "MeasuringUnitsSequence", vr: SQ }, // DICOM
    E { tag: Single(BILLING_ITEM_SEQUENCE), alias: "BillingItemSequence", vr: SQ }, // DICOM
    E { tag: Single(ENTRANCE_DOSE), alias: "EntranceDose", vr: US }, // DICOM
    E { tag: Single(EXPOSED_AREA), alias: "ExposedArea", vr: US }, // DICOM
    E { tag: Single(DISTANCE_SOURCE_TO_ENTRANCE), alias: "DistanceSourceToEntrance", vr: DS }, // DICOM
    E { tag: Single(COMMENTS_ON_RADIATION_DOSE), alias: "CommentsOnRadiationDose", vr: ST }, // DICOM
    E { tag: Single(X_RAY_OUTPUT), alias: "XRayOutput", vr: DS }, // DICOM
    E { tag: Single(HALF_VALUE_LAYER), alias: "HalfValueLayer", vr: DS }, // DICOM
    E { tag: Single(ORGAN_DOSE), alias: "OrganDose", vr: DS }, // DICOM
    E { tag: Single(ORGAN_EXPOSED), alias: "OrganExposed", vr: CS }, // DICOM
    E { tag: Single(BILLING_PROCEDURE_STEP_SEQUENCE), alias: "BillingProcedureStepSequence", vr: SQ }, // DICOM
    E { tag: Single(FILM_CONSUMPTION_SEQUENCE), alias: "FilmConsumptionSequence", vr: SQ }, // DICOM
    E { tag: Single(BILLING_SUPPLIES_AND_DEVICES_SEQUENCE), alias: "BillingSuppliesAndDevicesSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_SERIES_SEQUENCE), alias: "PerformedSeriesSequence", vr: SQ }, // DICOM
    E { tag: Single(COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP), alias: "CommentsOnTheScheduledProcedureStep", vr: LT }, // DICOM
    E { tag: Single(PROTOCOL_CONTEXT_SEQUENCE), alias: "ProtocolContextSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTENT_ITEM_MODIFIER_SEQUENCE), alias: "ContentItemModifierSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_SPECIMEN_SEQUENCE), alias: "ScheduledSpecimenSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTAINER_IDENTIFIER), alias: "ContainerIdentifier", vr: LO }, // DICOM
    E { tag: Single(ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE), alias: "IssuerOfTheContainerIdentifierSequence", vr: SQ }, // DICOM
    E { tag: Single(ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE), alias: "AlternateContainerIdentifierSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTAINER_TYPE_CODE_SEQUENCE), alias: "ContainerTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTAINER_DESCRIPTION), alias: "ContainerDescription", vr: LO }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_SEQUENCE), alias: "ContainerComponentSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_IDENTIFIER), alias: "SpecimenIdentifier", vr: LO }, // DICOM
    E { tag: Single(SPECIMEN_UID), alias: "SpecimenUID", vr: UI }, // DICOM
    E { tag: Single(ACQUISITION_CONTEXT_SEQUENCE), alias: "AcquisitionContextSequence", vr: SQ }, // DICOM
    E { tag: Single(ACQUISITION_CONTEXT_DESCRIPTION), alias: "AcquisitionContextDescription", vr: ST }, // DICOM
    E { tag: Single(SPECIMEN_DESCRIPTION_SEQUENCE), alias: "SpecimenDescriptionSequence", vr: SQ }, // DICOM
    E { tag: Single(ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE), alias: "IssuerOfTheSpecimenIdentifierSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_TYPE_CODE_SEQUENCE), alias: "SpecimenTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_SHORT_DESCRIPTION), alias: "SpecimenShortDescription", vr: LO }, // DICOM
    E { tag: Single(SPECIMEN_DETAILED_DESCRIPTION), alias: "SpecimenDetailedDescription", vr: UT }, // DICOM
    E { tag: Single(SPECIMEN_PREPARATION_SEQUENCE), alias: "SpecimenPreparationSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE), alias: "SpecimenPreparationStepContentItemSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE), alias: "SpecimenLocalizationContentItemSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_CENTER_POINT_COORDINATES_SEQUENCE), alias: "ImageCenterPointCoordinatesSequence", vr: SQ }, // DICOM
    E { tag: Single(X_OFFSET_IN_SLIDE_COORDINATE_SYSTEM), alias: "XOffsetInSlideCoordinateSystem", vr: DS }, // DICOM
    E { tag: Single(Y_OFFSET_IN_SLIDE_COORDINATE_SYSTEM), alias: "YOffsetInSlideCoordinateSystem", vr: DS }, // DICOM
    E { tag: Single(Z_OFFSET_IN_SLIDE_COORDINATE_SYSTEM), alias: "ZOffsetInSlideCoordinateSystem", vr: DS }, // DICOM
    E { tag: Single(MEASUREMENT_UNITS_CODE_SEQUENCE), alias: "MeasurementUnitsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REQUESTED_PROCEDURE_ID), alias: "RequestedProcedureID", vr: SH }, // DICOM
    E { tag: Single(REASON_FOR_THE_REQUESTED_PROCEDURE), alias: "ReasonForTheRequestedProcedure", vr: LO }, // DICOM
    E { tag: Single(REQUESTED_PROCEDURE_PRIORITY), alias: "RequestedProcedurePriority", vr: SH }, // DICOM
    E { tag: Single(PATIENT_TRANSPORT_ARRANGEMENTS), alias: "PatientTransportArrangements", vr: LO }, // DICOM
    E { tag: Single(REQUESTED_PROCEDURE_LOCATION), alias: "RequestedProcedureLocation", vr: LO }, // DICOM
    E { tag: Single(CONFIDENTIALITY_CODE), alias: "ConfidentialityCode", vr: LO }, // DICOM
    E { tag: Single(REPORTING_PRIORITY), alias: "ReportingPriority", vr: SH }, // DICOM
    E { tag: Single(REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE), alias: "ReasonForRequestedProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS), alias: "NamesOfIntendedRecipientsOfResults", vr: PN }, // DICOM
    E { tag: Single(INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE), alias: "IntendedRecipientsOfResultsIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE), alias: "ReasonForPerformedProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERSON_IDENTIFICATION_CODE_SEQUENCE), alias: "PersonIdentificationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERSON_ADDRESS), alias: "PersonAddress", vr: ST }, // DICOM
    E { tag: Single(PERSON_TELEPHONE_NUMBERS), alias: "PersonTelephoneNumbers", vr: LO }, // DICOM
    E { tag: Single(PERSON_TELECOM_INFORMATION), alias: "PersonTelecomInformation", vr: LT }, // DICOM
    E { tag: Single(REQUESTED_PROCEDURE_COMMENTS), alias: "RequestedProcedureComments", vr: LT }, // DICOM
    E { tag: Single(ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST), alias: "IssueDateOfImagingServiceRequest", vr: DA }, // DICOM
    E { tag: Single(ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST), alias: "IssueTimeOfImagingServiceRequest", vr: TM }, // DICOM
    E { tag: Single(ORDER_ENTERED_BY), alias: "OrderEnteredBy", vr: PN }, // DICOM
    E { tag: Single(ORDER_ENTERER_LOCATION), alias: "OrderEntererLocation", vr: SH }, // DICOM
    E { tag: Single(ORDER_CALLBACK_PHONE_NUMBER), alias: "OrderCallbackPhoneNumber", vr: SH }, // DICOM
    E { tag: Single(ORDER_CALLBACK_TELECOM_INFORMATION), alias: "OrderCallbackTelecomInformation", vr: LT }, // DICOM
    E { tag: Single(PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST), alias: "PlacerOrderNumberImagingServiceRequest", vr: LO }, // DICOM
    E { tag: Single(FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST), alias: "FillerOrderNumberImagingServiceRequest", vr: LO }, // DICOM
    E { tag: Single(IMAGING_SERVICE_REQUEST_COMMENTS), alias: "ImagingServiceRequestComments", vr: LT }, // DICOM
    E { tag: Single(CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION), alias: "ConfidentialityConstraintOnPatientDataDescription", vr: LO }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_START_DATE_TIME), alias: "ScheduledProcedureStepStartDateTime", vr: DT }, // DICOM
    E { tag: Single(PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE), alias: "PerformedProcessingApplicationsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(HUMAN_PERFORMER_CODE_SEQUENCE), alias: "HumanPerformerCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME), alias: "ScheduledProcedureStepModificationDateTime", vr: DT }, // DICOM
    E { tag: Single(EXPECTED_COMPLETION_DATE_TIME), alias: "ExpectedCompletionDateTime", vr: DT }, // DICOM
    E { tag: Single(SCHEDULED_WORKITEM_CODE_SEQUENCE), alias: "ScheduledWorkitemCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_WORKITEM_CODE_SEQUENCE), alias: "PerformedWorkitemCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(INPUT_INFORMATION_SEQUENCE), alias: "InputInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_STATION_NAME_CODE_SEQUENCE), alias: "ScheduledStationNameCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_STATION_CLASS_CODE_SEQUENCE), alias: "ScheduledStationClassCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE), alias: "ScheduledStationGeographicLocationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_STATION_NAME_CODE_SEQUENCE), alias: "PerformedStationNameCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_STATION_CLASS_CODE_SEQUENCE), alias: "PerformedStationClassCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE), alias: "PerformedStationGeographicLocationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OUTPUT_INFORMATION_SEQUENCE), alias: "OutputInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(SCHEDULED_HUMAN_PERFORMERS_SEQUENCE), alias: "ScheduledHumanPerformersSequence", vr: SQ }, // DICOM
    E { tag: Single(ACTUAL_HUMAN_PERFORMERS_SEQUENCE), alias: "ActualHumanPerformersSequence", vr: SQ }, // DICOM
    E { tag: Single(HUMAN_PERFORMER_ORGANIZATION), alias: "HumanPerformerOrganization", vr: LO }, // DICOM
    E { tag: Single(HUMAN_PERFORMER_NAME), alias: "HumanPerformerName", vr: PN }, // DICOM
    E { tag: Single(RAW_DATA_HANDLING), alias: "RawDataHandling", vr: CS }, // DICOM
    E { tag: Single(INPUT_READINESS_STATE), alias: "InputReadinessState", vr: CS }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_START_DATE_TIME), alias: "PerformedProcedureStepStartDateTime", vr: DT }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_STEP_END_DATE_TIME), alias: "PerformedProcedureStepEndDateTime", vr: DT }, // DICOM
    E { tag: Single(PROCEDURE_STEP_CANCELLATION_DATE_TIME), alias: "ProcedureStepCancellationDateTime", vr: DT }, // DICOM
    E { tag: Single(OUTPUT_DESTINATION_SEQUENCE), alias: "OutputDestinationSequence", vr: SQ }, // DICOM
    E { tag: Single(DICOM_STORAGE_SEQUENCE), alias: "DICOMStorageSequence", vr: SQ }, // DICOM
    E { tag: Single(STOWRS_STORAGE_SEQUENCE), alias: "STOWRSStorageSequence", vr: SQ }, // DICOM
    E { tag: Single(STORAGE_URL), alias: "StorageURL", vr: UR }, // DICOM
    E { tag: Single(XDS_STORAGE_SEQUENCE), alias: "XDSStorageSequence", vr: SQ }, // DICOM
    E { tag: Single(ENTRANCE_DOSE_INM_GY), alias: "EntranceDoseInmGy", vr: DS }, // DICOM
    E { tag: Single(ENTRANCE_DOSE_DERIVATION), alias: "EntranceDoseDerivation", vr: CS }, // DICOM
    E { tag: Single(PARAMETRIC_MAP_FRAME_TYPE_SEQUENCE), alias: "ParametricMapFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE), alias: "ReferencedImageRealWorldValueMappingSequence", vr: SQ }, // DICOM
    E { tag: Single(REAL_WORLD_VALUE_MAPPING_SEQUENCE), alias: "RealWorldValueMappingSequence", vr: SQ }, // DICOM
    E { tag: Single(PIXEL_VALUE_MAPPING_CODE_SEQUENCE), alias: "PixelValueMappingCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(LUT_LABEL), alias: "LUTLabel", vr: SH }, // DICOM
    E { tag: Single(REAL_WORLD_VALUE_LAST_VALUE_MAPPED), alias: "RealWorldValueLastValueMapped", vr: US }, // DICOM
    E { tag: Single(REAL_WORLD_VALUE_LUT_DATA), alias: "RealWorldValueLUTData", vr: FD }, // DICOM
    E { tag: Single(DOUBLE_FLOAT_REAL_WORLD_VALUE_LAST_VALUE_MAPPED), alias: "DoubleFloatRealWorldValueLastValueMapped", vr: FD }, // DICOM
    E { tag: Single(DOUBLE_FLOAT_REAL_WORLD_VALUE_FIRST_VALUE_MAPPED), alias: "DoubleFloatRealWorldValueFirstValueMapped", vr: FD }, // DICOM
    E { tag: Single(REAL_WORLD_VALUE_FIRST_VALUE_MAPPED), alias: "RealWorldValueFirstValueMapped", vr: US }, // DICOM
    E { tag: Single(QUANTITY_DEFINITION_SEQUENCE), alias: "QuantityDefinitionSequence", vr: SQ }, // DICOM
    E { tag: Single(REAL_WORLD_VALUE_INTERCEPT), alias: "RealWorldValueIntercept", vr: FD }, // DICOM
    E { tag: Single(REAL_WORLD_VALUE_SLOPE), alias: "RealWorldValueSlope", vr: FD }, // DICOM
    E { tag: Single(RELATIONSHIP_TYPE), alias: "RelationshipType", vr: CS }, // DICOM
    E { tag: Single(VERIFYING_ORGANIZATION), alias: "VerifyingOrganization", vr: LO }, // DICOM
    E { tag: Single(VERIFICATION_DATE_TIME), alias: "VerificationDateTime", vr: DT }, // DICOM
    E { tag: Single(OBSERVATION_DATE_TIME), alias: "ObservationDateTime", vr: DT }, // DICOM
    E { tag: Single(VALUE_TYPE), alias: "ValueType", vr: CS }, // DICOM
    E { tag: Single(CONCEPT_NAME_CODE_SEQUENCE), alias: "ConceptNameCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTINUITY_OF_CONTENT), alias: "ContinuityOfContent", vr: CS }, // DICOM
    E { tag: Single(VERIFYING_OBSERVER_SEQUENCE), alias: "VerifyingObserverSequence", vr: SQ }, // DICOM
    E { tag: Single(VERIFYING_OBSERVER_NAME), alias: "VerifyingObserverName", vr: PN }, // DICOM
    E { tag: Single(AUTHOR_OBSERVER_SEQUENCE), alias: "AuthorObserverSequence", vr: SQ }, // DICOM
    E { tag: Single(PARTICIPANT_SEQUENCE), alias: "ParticipantSequence", vr: SQ }, // DICOM
    E { tag: Single(CUSTODIAL_ORGANIZATION_SEQUENCE), alias: "CustodialOrganizationSequence", vr: SQ }, // DICOM
    E { tag: Single(PARTICIPATION_TYPE), alias: "ParticipationType", vr: CS }, // DICOM
    E { tag: Single(PARTICIPATION_DATE_TIME), alias: "ParticipationDateTime", vr: DT }, // DICOM
    E { tag: Single(OBSERVER_TYPE), alias: "ObserverType", vr: CS }, // DICOM
    E { tag: Single(VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE), alias: "VerifyingObserverIdentificationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_WAVEFORM_CHANNELS), alias: "ReferencedWaveformChannels", vr: US }, // DICOM
    E { tag: Single(DATE_TIME), alias: "DateTime", vr: DT }, // DICOM
    E { tag: Single(DATE), alias: "Date", vr: DA }, // DICOM
    E { tag: Single(TIME), alias: "Time", vr: TM }, // DICOM
    E { tag: Single(PERSON_NAME), alias: "PersonName", vr: PN }, // DICOM
    E { tag: Single(UID), alias: "UID", vr: UI }, // DICOM
    E { tag: Single(TEMPORAL_RANGE_TYPE), alias: "TemporalRangeType", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_SAMPLE_POSITIONS), alias: "ReferencedSamplePositions", vr: UL }, // DICOM
    E { tag: Single(REFERENCED_FRAME_NUMBERS), alias: "ReferencedFrameNumbers", vr: US }, // DICOM
    E { tag: Single(REFERENCED_TIME_OFFSETS), alias: "ReferencedTimeOffsets", vr: DS }, // DICOM
    E { tag: Single(REFERENCED_DATE_TIME), alias: "ReferencedDateTime", vr: DT }, // DICOM
    E { tag: Single(TEXT_VALUE), alias: "TextValue", vr: UT }, // DICOM
    E { tag: Single(FLOATING_POINT_VALUE), alias: "FloatingPointValue", vr: FD }, // DICOM
    E { tag: Single(RATIONAL_NUMERATOR_VALUE), alias: "RationalNumeratorValue", vr: SL }, // DICOM
    E { tag: Single(RATIONAL_DENOMINATOR_VALUE), alias: "RationalDenominatorValue", vr: UL }, // DICOM
    E { tag: Single(CONCEPT_CODE_SEQUENCE), alias: "ConceptCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PURPOSE_OF_REFERENCE_CODE_SEQUENCE), alias: "PurposeOfReferenceCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OBSERVATION_UID), alias: "ObservationUID", vr: UI }, // DICOM
    E { tag: Single(ANNOTATION_GROUP_NUMBER), alias: "AnnotationGroupNumber", vr: US }, // DICOM
    E { tag: Single(MODIFIER_CODE_SEQUENCE), alias: "ModifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASURED_VALUE_SEQUENCE), alias: "MeasuredValueSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE), alias: "NumericValueQualifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMERIC_VALUE), alias: "NumericValue", vr: DS }, // DICOM
    E { tag: Single(PREDECESSOR_DOCUMENTS_SEQUENCE), alias: "PredecessorDocumentsSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_REQUEST_SEQUENCE), alias: "ReferencedRequestSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_PROCEDURE_CODE_SEQUENCE), alias: "PerformedProcedureCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE), alias: "CurrentRequestedProcedureEvidenceSequence", vr: SQ }, // DICOM
    E { tag: Single(PERTINENT_OTHER_EVIDENCE_SEQUENCE), alias: "PertinentOtherEvidenceSequence", vr: SQ }, // DICOM
    E { tag: Single(HL7_STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE), alias: "HL7StructuredDocumentReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPLETION_FLAG), alias: "CompletionFlag", vr: CS }, // DICOM
    E { tag: Single(COMPLETION_FLAG_DESCRIPTION), alias: "CompletionFlagDescription", vr: LO }, // DICOM
    E { tag: Single(VERIFICATION_FLAG), alias: "VerificationFlag", vr: CS }, // DICOM
    E { tag: Single(ARCHIVE_REQUESTED), alias: "ArchiveRequested", vr: CS }, // DICOM
    E { tag: Single(PRELIMINARY_FLAG), alias: "PreliminaryFlag", vr: CS }, // DICOM
    E { tag: Single(CONTENT_TEMPLATE_SEQUENCE), alias: "ContentTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(IDENTICAL_DOCUMENTS_SEQUENCE), alias: "IdenticalDocumentsSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTENT_SEQUENCE), alias: "ContentSequence", vr: SQ }, // DICOM
    E { tag: Single(WAVEFORM_ANNOTATION_SEQUENCE), alias: "WaveformAnnotationSequence", vr: SQ }, // DICOM
    E { tag: Single(TEMPLATE_IDENTIFIER), alias: "TemplateIdentifier", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_CONTENT_ITEM_IDENTIFIER), alias: "ReferencedContentItemIdentifier", vr: UL }, // DICOM
    E { tag: Single(HL7_INSTANCE_IDENTIFIER), alias: "HL7InstanceIdentifier", vr: ST }, // DICOM
    E { tag: Single(HL7_DOCUMENT_EFFECTIVE_TIME), alias: "HL7DocumentEffectiveTime", vr: DT }, // DICOM
    E { tag: Single(HL7_DOCUMENT_TYPE_CODE_SEQUENCE), alias: "HL7DocumentTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(DOCUMENT_CLASS_CODE_SEQUENCE), alias: "DocumentClassCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(RETRIEVE_URI), alias: "RetrieveURI", vr: UR }, // DICOM
    E { tag: Single(RETRIEVE_LOCATION_UID), alias: "RetrieveLocationUID", vr: UI }, // DICOM
    E { tag: Single(TYPE_OF_INSTANCES), alias: "TypeOfInstances", vr: CS }, // DICOM
    E { tag: Single(DICOM_RETRIEVAL_SEQUENCE), alias: "DICOMRetrievalSequence", vr: SQ }, // DICOM
    E { tag: Single(DICOM_MEDIA_RETRIEVAL_SEQUENCE), alias: "DICOMMediaRetrievalSequence", vr: SQ }, // DICOM
    E { tag: Single(WADO_RETRIEVAL_SEQUENCE), alias: "WADORetrievalSequence", vr: SQ }, // DICOM
    E { tag: Single(XDS_RETRIEVAL_SEQUENCE), alias: "XDSRetrievalSequence", vr: SQ }, // DICOM
    E { tag: Single(WADORS_RETRIEVAL_SEQUENCE), alias: "WADORSRetrievalSequence", vr: SQ }, // DICOM
    E { tag: Single(REPOSITORY_UNIQUE_ID), alias: "RepositoryUniqueID", vr: UI }, // DICOM
    E { tag: Single(HOME_COMMUNITY_ID), alias: "HomeCommunityID", vr: UI }, // DICOM
    E { tag: Single(DOCUMENT_TITLE), alias: "DocumentTitle", vr: ST }, // DICOM
    E { tag: Single(ENCAPSULATED_DOCUMENT), alias: "EncapsulatedDocument", vr: OB }, // DICOM
    E { tag: Single(MIME_TYPE_OF_ENCAPSULATED_DOCUMENT), alias: "MIMETypeOfEncapsulatedDocument", vr: LO }, // DICOM
    E { tag: Single(SOURCE_INSTANCE_SEQUENCE), alias: "SourceInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(LIST_OF_MIME_TYPES), alias: "ListOfMIMETypes", vr: LO }, // DICOM
    E { tag: Single(PRODUCT_PACKAGE_IDENTIFIER), alias: "ProductPackageIdentifier", vr: ST }, // DICOM
    E { tag: Single(SUBSTANCE_ADMINISTRATION_APPROVAL), alias: "SubstanceAdministrationApproval", vr: CS }, // DICOM
    E { tag: Single(APPROVAL_STATUS_FURTHER_DESCRIPTION), alias: "ApprovalStatusFurtherDescription", vr: LT }, // DICOM
    E { tag: Single(APPROVAL_STATUS_DATE_TIME), alias: "ApprovalStatusDateTime", vr: DT }, // DICOM
    E { tag: Single(PRODUCT_TYPE_CODE_SEQUENCE), alias: "ProductTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PRODUCT_NAME), alias: "ProductName", vr: LO }, // DICOM
    E { tag: Single(PRODUCT_DESCRIPTION), alias: "ProductDescription", vr: LT }, // DICOM
    E { tag: Single(PRODUCT_LOT_IDENTIFIER), alias: "ProductLotIdentifier", vr: LO }, // DICOM
    E { tag: Single(PRODUCT_EXPIRATION_DATE_TIME), alias: "ProductExpirationDateTime", vr: DT }, // DICOM
    E { tag: Single(SUBSTANCE_ADMINISTRATION_DATE_TIME), alias: "SubstanceAdministrationDateTime", vr: DT }, // DICOM
    E { tag: Single(SUBSTANCE_ADMINISTRATION_NOTES), alias: "SubstanceAdministrationNotes", vr: LO }, // DICOM
    E { tag: Single(SUBSTANCE_ADMINISTRATION_DEVICE_ID), alias: "SubstanceAdministrationDeviceID", vr: LO }, // DICOM
    E { tag: Single(PRODUCT_PARAMETER_SEQUENCE), alias: "ProductParameterSequence", vr: SQ }, // DICOM
    E { tag: Single(SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE), alias: "SubstanceAdministrationParameterSequence", vr: SQ }, // DICOM
    E { tag: Single(APPROVAL_SEQUENCE), alias: "ApprovalSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSERTION_CODE_SEQUENCE), alias: "AssertionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSERTION_UID), alias: "AssertionUID", vr: UI }, // DICOM
    E { tag: Single(ASSERTER_IDENTIFICATION_SEQUENCE), alias: "AsserterIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSERTION_DATE_TIME), alias: "AssertionDateTime", vr: DT }, // DICOM
    E { tag: Single(ASSERTION_EXPIRATION_DATE_TIME), alias: "AssertionExpirationDateTime", vr: DT }, // DICOM
    E { tag: Single(ASSERTION_COMMENTS), alias: "AssertionComments", vr: UT }, // DICOM
    E { tag: Single(RELATED_ASSERTION_SEQUENCE), alias: "RelatedAssertionSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_ASSERTION_UID), alias: "ReferencedAssertionUID", vr: UI }, // DICOM
    E { tag: Single(APPROVAL_SUBJECT_SEQUENCE), alias: "ApprovalSubjectSequence", vr: SQ }, // DICOM
    E { tag: Single(ORGANIZATIONAL_ROLE_CODE_SEQUENCE), alias: "OrganizationalRoleCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(LENS_DESCRIPTION), alias: "LensDescription", vr: LO }, // DICOM
    E { tag: Single(RIGHT_LENS_SEQUENCE), alias: "RightLensSequence", vr: SQ }, // DICOM
    E { tag: Single(LEFT_LENS_SEQUENCE), alias: "LeftLensSequence", vr: SQ }, // DICOM
    E { tag: Single(UNSPECIFIED_LATERALITY_LENS_SEQUENCE), alias: "UnspecifiedLateralityLensSequence", vr: SQ }, // DICOM
    E { tag: Single(CYLINDER_SEQUENCE), alias: "CylinderSequence", vr: SQ }, // DICOM
    E { tag: Single(PRISM_SEQUENCE), alias: "PrismSequence", vr: SQ }, // DICOM
    E { tag: Single(HORIZONTAL_PRISM_POWER), alias: "HorizontalPrismPower", vr: FD }, // DICOM
    E { tag: Single(HORIZONTAL_PRISM_BASE), alias: "HorizontalPrismBase", vr: CS }, // DICOM
    E { tag: Single(VERTICAL_PRISM_POWER), alias: "VerticalPrismPower", vr: FD }, // DICOM
    E { tag: Single(VERTICAL_PRISM_BASE), alias: "VerticalPrismBase", vr: CS }, // DICOM
    E { tag: Single(LENS_SEGMENT_TYPE), alias: "LensSegmentType", vr: CS }, // DICOM
    E { tag: Single(OPTICAL_TRANSMITTANCE), alias: "OpticalTransmittance", vr: FD }, // DICOM
    E { tag: Single(CHANNEL_WIDTH), alias: "ChannelWidth", vr: FD }, // DICOM
    E { tag: Single(PUPIL_SIZE), alias: "PupilSize", vr: FD }, // DICOM
    E { tag: Single(CORNEAL_SIZE), alias: "CornealSize", vr: FD }, // DICOM
    E { tag: Single(AUTOREFRACTION_RIGHT_EYE_SEQUENCE), alias: "AutorefractionRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(AUTOREFRACTION_LEFT_EYE_SEQUENCE), alias: "AutorefractionLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(DISTANCE_PUPILLARY_DISTANCE), alias: "DistancePupillaryDistance", vr: FD }, // DICOM
    E { tag: Single(NEAR_PUPILLARY_DISTANCE), alias: "NearPupillaryDistance", vr: FD }, // DICOM
    E { tag: Single(INTERMEDIATE_PUPILLARY_DISTANCE), alias: "IntermediatePupillaryDistance", vr: FD }, // DICOM
    E { tag: Single(OTHER_PUPILLARY_DISTANCE), alias: "OtherPupillaryDistance", vr: FD }, // DICOM
    E { tag: Single(KERATOMETRY_RIGHT_EYE_SEQUENCE), alias: "KeratometryRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(KERATOMETRY_LEFT_EYE_SEQUENCE), alias: "KeratometryLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(STEEP_KERATOMETRIC_AXIS_SEQUENCE), alias: "SteepKeratometricAxisSequence", vr: SQ }, // DICOM
    E { tag: Single(RADIUS_OF_CURVATURE), alias: "RadiusOfCurvature", vr: FD }, // DICOM
    E { tag: Single(KERATOMETRIC_POWER), alias: "KeratometricPower", vr: FD }, // DICOM
    E { tag: Single(KERATOMETRIC_AXIS), alias: "KeratometricAxis", vr: FD }, // DICOM
    E { tag: Single(FLAT_KERATOMETRIC_AXIS_SEQUENCE), alias: "FlatKeratometricAxisSequence", vr: SQ }, // DICOM
    E { tag: Single(BACKGROUND_COLOR), alias: "BackgroundColor", vr: CS }, // DICOM
    E { tag: Single(OPTOTYPE), alias: "Optotype", vr: CS }, // DICOM
    E { tag: Single(OPTOTYPE_PRESENTATION), alias: "OptotypePresentation", vr: CS }, // DICOM
    E { tag: Single(SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE), alias: "SubjectiveRefractionRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE), alias: "SubjectiveRefractionLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(ADD_NEAR_SEQUENCE), alias: "AddNearSequence", vr: SQ }, // DICOM
    E { tag: Single(ADD_INTERMEDIATE_SEQUENCE), alias: "AddIntermediateSequence", vr: SQ }, // DICOM
    E { tag: Single(ADD_OTHER_SEQUENCE), alias: "AddOtherSequence", vr: SQ }, // DICOM
    E { tag: Single(ADD_POWER), alias: "AddPower", vr: FD }, // DICOM
    E { tag: Single(VIEWING_DISTANCE), alias: "ViewingDistance", vr: FD }, // DICOM
    E { tag: Single(VISUAL_ACUITY_TYPE_CODE_SEQUENCE), alias: "VisualAcuityTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_ACUITY_RIGHT_EYE_SEQUENCE), alias: "VisualAcuityRightEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_ACUITY_LEFT_EYE_SEQUENCE), alias: "VisualAcuityLeftEyeSequence", vr: SQ }, // DICOM
    E { tag: Single(VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE), alias: "VisualAcuityBothEyesOpenSequence", vr: SQ }, // DICOM
    E { tag: Single(VIEWING_DISTANCE_TYPE), alias: "ViewingDistanceType", vr: CS }, // DICOM
    E { tag: Single(VISUAL_ACUITY_MODIFIERS), alias: "VisualAcuityModifiers", vr: SS }, // DICOM
    E { tag: Single(DECIMAL_VISUAL_ACUITY), alias: "DecimalVisualAcuity", vr: FD }, // DICOM
    E { tag: Single(OPTOTYPE_DETAILED_DEFINITION), alias: "OptotypeDetailedDefinition", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE), alias: "ReferencedRefractiveMeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(SPHERE_POWER), alias: "SpherePower", vr: FD }, // DICOM
    E { tag: Single(CYLINDER_POWER), alias: "CylinderPower", vr: FD }, // DICOM
    E { tag: Single(CORNEAL_TOPOGRAPHY_SURFACE), alias: "CornealTopographySurface", vr: CS }, // DICOM
    E { tag: Single(CORNEAL_VERTEX_LOCATION), alias: "CornealVertexLocation", vr: FL }, // DICOM
    E { tag: Single(PUPIL_CENTROID_X_COORDINATE), alias: "PupilCentroidXCoordinate", vr: FL }, // DICOM
    E { tag: Single(PUPIL_CENTROID_Y_COORDINATE), alias: "PupilCentroidYCoordinate", vr: FL }, // DICOM
    E { tag: Single(EQUIVALENT_PUPIL_RADIUS), alias: "EquivalentPupilRadius", vr: FL }, // DICOM
    E { tag: Single(CORNEAL_TOPOGRAPHY_MAP_TYPE_CODE_SEQUENCE), alias: "CornealTopographyMapTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VERTICES_OF_THE_OUTLINE_OF_PUPIL), alias: "VerticesOfTheOutlineOfPupil", vr: IS }, // DICOM
    E { tag: Single(CORNEAL_TOPOGRAPHY_MAPPING_NORMALS_SEQUENCE), alias: "CornealTopographyMappingNormalsSequence", vr: SQ }, // DICOM
    E { tag: Single(MAXIMUM_CORNEAL_CURVATURE_SEQUENCE), alias: "MaximumCornealCurvatureSequence", vr: SQ }, // DICOM
    E { tag: Single(MAXIMUM_CORNEAL_CURVATURE), alias: "MaximumCornealCurvature", vr: FL }, // DICOM
    E { tag: Single(MAXIMUM_CORNEAL_CURVATURE_LOCATION), alias: "MaximumCornealCurvatureLocation", vr: FL }, // DICOM
    E { tag: Single(MINIMUM_KERATOMETRIC_SEQUENCE), alias: "MinimumKeratometricSequence", vr: SQ }, // DICOM
    E { tag: Single(SIMULATED_KERATOMETRIC_CYLINDER_SEQUENCE), alias: "SimulatedKeratometricCylinderSequence", vr: SQ }, // DICOM
    E { tag: Single(AVERAGE_CORNEAL_POWER), alias: "AverageCornealPower", vr: FL }, // DICOM
    E { tag: Single(CORNEAL_IS_VALUE), alias: "CornealISValue", vr: FL }, // DICOM
    E { tag: Single(ANALYZED_AREA), alias: "AnalyzedArea", vr: FL }, // DICOM
    E { tag: Single(SURFACE_REGULARITY_INDEX), alias: "SurfaceRegularityIndex", vr: FL }, // DICOM
    E { tag: Single(SURFACE_ASYMMETRY_INDEX), alias: "SurfaceAsymmetryIndex", vr: FL }, // DICOM
    E { tag: Single(CORNEAL_ECCENTRICITY_INDEX), alias: "CornealEccentricityIndex", vr: FL }, // DICOM
    E { tag: Single(KERATOCONUS_PREDICTION_INDEX), alias: "KeratoconusPredictionIndex", vr: FL }, // DICOM
    E { tag: Single(DECIMAL_POTENTIAL_VISUAL_ACUITY), alias: "DecimalPotentialVisualAcuity", vr: FL }, // DICOM
    E { tag: Single(CORNEAL_TOPOGRAPHY_MAP_QUALITY_EVALUATION), alias: "CornealTopographyMapQualityEvaluation", vr: CS }, // DICOM
    E { tag: Single(SOURCE_IMAGE_CORNEAL_PROCESSED_DATA_SEQUENCE), alias: "SourceImageCornealProcessedDataSequence", vr: SQ }, // DICOM
    E { tag: Single(CORNEAL_POINT_LOCATION), alias: "CornealPointLocation", vr: FL }, // DICOM
    E { tag: Single(CORNEAL_POINT_ESTIMATED), alias: "CornealPointEstimated", vr: CS }, // DICOM
    E { tag: Single(AXIAL_POWER), alias: "AxialPower", vr: FL }, // DICOM
    E { tag: Single(TANGENTIAL_POWER), alias: "TangentialPower", vr: FL }, // DICOM
    E { tag: Single(REFRACTIVE_POWER), alias: "RefractivePower", vr: FL }, // DICOM
    E { tag: Single(RELATIVE_ELEVATION), alias: "RelativeElevation", vr: FL }, // DICOM
    E { tag: Single(CORNEAL_WAVEFRONT), alias: "CornealWavefront", vr: FL }, // DICOM
    E { tag: Single(IMAGED_VOLUME_WIDTH), alias: "ImagedVolumeWidth", vr: FL }, // DICOM
    E { tag: Single(IMAGED_VOLUME_HEIGHT), alias: "ImagedVolumeHeight", vr: FL }, // DICOM
    E { tag: Single(IMAGED_VOLUME_DEPTH), alias: "ImagedVolumeDepth", vr: FL }, // DICOM
    E { tag: Single(TOTAL_PIXEL_MATRIX_COLUMNS), alias: "TotalPixelMatrixColumns", vr: UL }, // DICOM
    E { tag: Single(TOTAL_PIXEL_MATRIX_ROWS), alias: "TotalPixelMatrixRows", vr: UL }, // DICOM
    E { tag: Single(TOTAL_PIXEL_MATRIX_ORIGIN_SEQUENCE), alias: "TotalPixelMatrixOriginSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_LABEL_IN_IMAGE), alias: "SpecimenLabelInImage", vr: CS }, // DICOM
    E { tag: Single(FOCUS_METHOD), alias: "FocusMethod", vr: CS }, // DICOM
    E { tag: Single(EXTENDED_DEPTH_OF_FIELD), alias: "ExtendedDepthOfField", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_FOCAL_PLANES), alias: "NumberOfFocalPlanes", vr: US }, // DICOM
    E { tag: Single(DISTANCE_BETWEEN_FOCAL_PLANES), alias: "DistanceBetweenFocalPlanes", vr: FL }, // DICOM
    E { tag: Single(RECOMMENDED_ABSENT_PIXEL_CIE_LAB_VALUE), alias: "RecommendedAbsentPixelCIELabValue", vr: US }, // DICOM
    E { tag: Single(ILLUMINATOR_TYPE_CODE_SEQUENCE), alias: "IlluminatorTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_ORIENTATION_SLIDE), alias: "ImageOrientationSlide", vr: DS }, // DICOM
    E { tag: Single(OPTICAL_PATH_SEQUENCE), alias: "OpticalPathSequence", vr: SQ }, // DICOM
    E { tag: Single(OPTICAL_PATH_IDENTIFIER), alias: "OpticalPathIdentifier", vr: SH }, // DICOM
    E { tag: Single(OPTICAL_PATH_DESCRIPTION), alias: "OpticalPathDescription", vr: ST }, // DICOM
    E { tag: Single(ILLUMINATION_COLOR_CODE_SEQUENCE), alias: "IlluminationColorCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIMEN_REFERENCE_SEQUENCE), alias: "SpecimenReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(CONDENSER_LENS_POWER), alias: "CondenserLensPower", vr: DS }, // DICOM
    E { tag: Single(OBJECTIVE_LENS_POWER), alias: "ObjectiveLensPower", vr: DS }, // DICOM
    E { tag: Single(OBJECTIVE_LENS_NUMERICAL_APERTURE), alias: "ObjectiveLensNumericalAperture", vr: DS }, // DICOM
    E { tag: Single(PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE), alias: "PaletteColorLookupTableSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_IMAGE_NAVIGATION_SEQUENCE), alias: "ReferencedImageNavigationSequence", vr: SQ }, // DICOM
    E { tag: Single(TOP_LEFT_HAND_CORNER_OF_LOCALIZER_AREA), alias: "TopLeftHandCornerOfLocalizerArea", vr: US }, // DICOM
    E { tag: Single(BOTTOM_RIGHT_HAND_CORNER_OF_LOCALIZER_AREA), alias: "BottomRightHandCornerOfLocalizerArea", vr: US }, // DICOM
    E { tag: Single(OPTICAL_PATH_IDENTIFICATION_SEQUENCE), alias: "OpticalPathIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANE_POSITION_SLIDE_SEQUENCE), alias: "PlanePositionSlideSequence", vr: SQ }, // DICOM
    E { tag: Single(COLUMN_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX), alias: "ColumnPositionInTotalImagePixelMatrix", vr: SL }, // DICOM
    E { tag: Single(ROW_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX), alias: "RowPositionInTotalImagePixelMatrix", vr: SL }, // DICOM
    E { tag: Single(PIXEL_ORIGIN_INTERPRETATION), alias: "PixelOriginInterpretation", vr: CS }, // DICOM
    E { tag: Single(CALIBRATION_IMAGE), alias: "CalibrationImage", vr: CS }, // DICOM
    E { tag: Single(DEVICE_SEQUENCE), alias: "DeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE), alias: "ContainerComponentTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_THICKNESS), alias: "ContainerComponentThickness", vr: FD }, // DICOM
    E { tag: Single(DEVICE_LENGTH), alias: "DeviceLength", vr: DS }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_WIDTH), alias: "ContainerComponentWidth", vr: FD }, // DICOM
    E { tag: Single(DEVICE_DIAMETER), alias: "DeviceDiameter", vr: DS }, // DICOM
    E { tag: Single(DEVICE_DIAMETER_UNITS), alias: "DeviceDiameterUnits", vr: CS }, // DICOM
    E { tag: Single(DEVICE_VOLUME), alias: "DeviceVolume", vr: DS }, // DICOM
    E { tag: Single(INTER_MARKER_DISTANCE), alias: "InterMarkerDistance", vr: DS }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_MATERIAL), alias: "ContainerComponentMaterial", vr: CS }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_ID), alias: "ContainerComponentID", vr: LO }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_LENGTH), alias: "ContainerComponentLength", vr: FD }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_DIAMETER), alias: "ContainerComponentDiameter", vr: FD }, // DICOM
    E { tag: Single(CONTAINER_COMPONENT_DESCRIPTION), alias: "ContainerComponentDescription", vr: LO }, // DICOM
    E { tag: Single(DEVICE_DESCRIPTION), alias: "DeviceDescription", vr: LO }, // DICOM
    E { tag: Single(CONTRAST_BOLUS_INGREDIENT_PERCENT_BY_VOLUME), alias: "ContrastBolusIngredientPercentByVolume", vr: FL }, // DICOM
    E { tag: Single(OCT_FOCAL_DISTANCE), alias: "OCTFocalDistance", vr: FD }, // DICOM
    E { tag: Single(BEAM_SPOT_SIZE), alias: "BeamSpotSize", vr: FD }, // DICOM
    E { tag: Single(EFFECTIVE_REFRACTIVE_INDEX), alias: "EffectiveRefractiveIndex", vr: FD }, // DICOM
    E { tag: Single(OCT_ACQUISITION_DOMAIN), alias: "OCTAcquisitionDomain", vr: CS }, // DICOM
    E { tag: Single(OCT_OPTICAL_CENTER_WAVELENGTH), alias: "OCTOpticalCenterWavelength", vr: FD }, // DICOM
    E { tag: Single(AXIAL_RESOLUTION), alias: "AxialResolution", vr: FD }, // DICOM
    E { tag: Single(RANGING_DEPTH), alias: "RangingDepth", vr: FD }, // DICOM
    E { tag: Single(A_LINE_RATE), alias: "ALineRate", vr: FD }, // DICOM
    E { tag: Single(A_LINES_PER_FRAME), alias: "ALinesPerFrame", vr: US }, // DICOM
    E { tag: Single(CATHETER_ROTATIONAL_RATE), alias: "CatheterRotationalRate", vr: FD }, // DICOM
    E { tag: Single(A_LINE_PIXEL_SPACING), alias: "ALinePixelSpacing", vr: FD }, // DICOM
    E { tag: Single(MODE_OF_PERCUTANEOUS_ACCESS_SEQUENCE), alias: "ModeOfPercutaneousAccessSequence", vr: SQ }, // DICOM
    E { tag: Single(INTRAVASCULAR_OCT_FRAME_TYPE_SEQUENCE), alias: "IntravascularOCTFrameTypeSequence", vr: SQ }, // DICOM
    E { tag: Single(OCTZ_OFFSET_APPLIED), alias: "OCTZOffsetApplied", vr: CS }, // DICOM
    E { tag: Single(INTRAVASCULAR_FRAME_CONTENT_SEQUENCE), alias: "IntravascularFrameContentSequence", vr: SQ }, // DICOM
    E { tag: Single(INTRAVASCULAR_LONGITUDINAL_DISTANCE), alias: "IntravascularLongitudinalDistance", vr: FD }, // DICOM
    E { tag: Single(INTRAVASCULAR_OCT_FRAME_CONTENT_SEQUENCE), alias: "IntravascularOCTFrameContentSequence", vr: SQ }, // DICOM
    E { tag: Single(OCTZ_OFFSET_CORRECTION), alias: "OCTZOffsetCorrection", vr: SS }, // DICOM
    E { tag: Single(CATHETER_DIRECTION_OF_ROTATION), alias: "CatheterDirectionOfRotation", vr: CS }, // DICOM
    E { tag: Single(SEAM_LINE_LOCATION), alias: "SeamLineLocation", vr: FD }, // DICOM
    E { tag: Single(FIRST_A_LINE_LOCATION), alias: "FirstALineLocation", vr: FD }, // DICOM
    E { tag: Single(SEAM_LINE_INDEX), alias: "SeamLineIndex", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_PADDED_A_LINES), alias: "NumberOfPaddedALines", vr: US }, // DICOM
    E { tag: Single(INTERPOLATION_TYPE), alias: "InterpolationType", vr: CS }, // DICOM
    E { tag: Single(REFRACTIVE_INDEX_APPLIED), alias: "RefractiveIndexApplied", vr: CS }, // DICOM
    E { tag: Single(ENERGY_WINDOW_VECTOR), alias: "EnergyWindowVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_ENERGY_WINDOWS), alias: "NumberOfEnergyWindows", vr: US }, // DICOM
    E { tag: Single(ENERGY_WINDOW_INFORMATION_SEQUENCE), alias: "EnergyWindowInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(ENERGY_WINDOW_RANGE_SEQUENCE), alias: "EnergyWindowRangeSequence", vr: SQ }, // DICOM
    E { tag: Single(ENERGY_WINDOW_LOWER_LIMIT), alias: "EnergyWindowLowerLimit", vr: DS }, // DICOM
    E { tag: Single(ENERGY_WINDOW_UPPER_LIMIT), alias: "EnergyWindowUpperLimit", vr: DS }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE), alias: "RadiopharmaceuticalInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(RESIDUAL_SYRINGE_COUNTS), alias: "ResidualSyringeCounts", vr: IS }, // DICOM
    E { tag: Single(ENERGY_WINDOW_NAME), alias: "EnergyWindowName", vr: SH }, // DICOM
    E { tag: Single(DETECTOR_VECTOR), alias: "DetectorVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_DETECTORS), alias: "NumberOfDetectors", vr: US }, // DICOM
    E { tag: Single(DETECTOR_INFORMATION_SEQUENCE), alias: "DetectorInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(PHASE_VECTOR), alias: "PhaseVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_PHASES), alias: "NumberOfPhases", vr: US }, // DICOM
    E { tag: Single(PHASE_INFORMATION_SEQUENCE), alias: "PhaseInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_FRAMES_IN_PHASE), alias: "NumberOfFramesInPhase", vr: US }, // DICOM
    E { tag: Single(PHASE_DELAY), alias: "PhaseDelay", vr: IS }, // DICOM
    E { tag: Single(PAUSE_BETWEEN_FRAMES), alias: "PauseBetweenFrames", vr: IS }, // DICOM
    E { tag: Single(PHASE_DESCRIPTION), alias: "PhaseDescription", vr: CS }, // DICOM
    E { tag: Single(ROTATION_VECTOR), alias: "RotationVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_ROTATIONS), alias: "NumberOfRotations", vr: US }, // DICOM
    E { tag: Single(ROTATION_INFORMATION_SEQUENCE), alias: "RotationInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_FRAMES_IN_ROTATION), alias: "NumberOfFramesInRotation", vr: US }, // DICOM
    E { tag: Single(RR_INTERVAL_VECTOR), alias: "RRIntervalVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_RR_INTERVALS), alias: "NumberOfRRIntervals", vr: US }, // DICOM
    E { tag: Single(GATED_INFORMATION_SEQUENCE), alias: "GatedInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(DATA_INFORMATION_SEQUENCE), alias: "DataInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(TIME_SLOT_VECTOR), alias: "TimeSlotVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_TIME_SLOTS), alias: "NumberOfTimeSlots", vr: US }, // DICOM
    E { tag: Single(TIME_SLOT_INFORMATION_SEQUENCE), alias: "TimeSlotInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(TIME_SLOT_TIME), alias: "TimeSlotTime", vr: DS }, // DICOM
    E { tag: Single(SLICE_VECTOR), alias: "SliceVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_SLICES), alias: "NumberOfSlices", vr: US }, // DICOM
    E { tag: Single(ANGULAR_VIEW_VECTOR), alias: "AngularViewVector", vr: US }, // DICOM
    E { tag: Single(TIME_SLICE_VECTOR), alias: "TimeSliceVector", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_TIME_SLICES), alias: "NumberOfTimeSlices", vr: US }, // DICOM
    E { tag: Single(START_ANGLE), alias: "StartAngle", vr: DS }, // DICOM
    E { tag: Single(TYPE_OF_DETECTOR_MOTION), alias: "TypeOfDetectorMotion", vr: CS }, // DICOM
    E { tag: Single(TRIGGER_VECTOR), alias: "TriggerVector", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_TRIGGERS_IN_PHASE), alias: "NumberOfTriggersInPhase", vr: US }, // DICOM
    E { tag: Single(VIEW_CODE_SEQUENCE), alias: "ViewCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VIEW_MODIFIER_CODE_SEQUENCE), alias: "ViewModifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(RADIONUCLIDE_CODE_SEQUENCE), alias: "RadionuclideCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ADMINISTRATION_ROUTE_CODE_SEQUENCE), alias: "AdministrationRouteCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(RADIOPHARMACEUTICAL_CODE_SEQUENCE), alias: "RadiopharmaceuticalCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CALIBRATION_DATA_SEQUENCE), alias: "CalibrationDataSequence", vr: SQ }, // DICOM
    E { tag: Single(ENERGY_WINDOW_NUMBER), alias: "EnergyWindowNumber", vr: US }, // DICOM
    E { tag: Single(IMAGE_ID), alias: "ImageID", vr: SH }, // DICOM
    E { tag: Single(PATIENT_ORIENTATION_CODE_SEQUENCE), alias: "PatientOrientationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE), alias: "PatientOrientationModifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE), alias: "PatientGantryRelationshipCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SLICE_PROGRESSION_DIRECTION), alias: "SliceProgressionDirection", vr: CS }, // DICOM
    E { tag: Single(SCAN_PROGRESSION_DIRECTION), alias: "ScanProgressionDirection", vr: CS }, // DICOM
    E { tag: Single(SERIES_TYPE), alias: "SeriesType", vr: CS }, // DICOM
    E { tag: Single(UNITS), alias: "Units", vr: CS }, // DICOM
    E { tag: Single(COUNTS_SOURCE), alias: "CountsSource", vr: CS }, // DICOM
    E { tag: Single(REPROJECTION_METHOD), alias: "ReprojectionMethod", vr: CS }, // DICOM
    E { tag: Single(SUV_TYPE), alias: "SUVType", vr: CS }, // DICOM
    E { tag: Single(RANDOMS_CORRECTION_METHOD), alias: "RandomsCorrectionMethod", vr: CS }, // DICOM
    E { tag: Single(ATTENUATION_CORRECTION_METHOD), alias: "AttenuationCorrectionMethod", vr: LO }, // DICOM
    E { tag: Single(DECAY_CORRECTION), alias: "DecayCorrection", vr: CS }, // DICOM
    E { tag: Single(RECONSTRUCTION_METHOD), alias: "ReconstructionMethod", vr: LO }, // DICOM
    E { tag: Single(DETECTOR_LINES_OF_RESPONSE_USED), alias: "DetectorLinesOfResponseUsed", vr: LO }, // DICOM
    E { tag: Single(SCATTER_CORRECTION_METHOD), alias: "ScatterCorrectionMethod", vr: LO }, // DICOM
    E { tag: Single(AXIAL_ACCEPTANCE), alias: "AxialAcceptance", vr: DS }, // DICOM
    E { tag: Single(AXIAL_MASH), alias: "AxialMash", vr: IS }, // DICOM
    E { tag: Single(TRANSVERSE_MASH), alias: "TransverseMash", vr: IS }, // DICOM
    E { tag: Single(DETECTOR_ELEMENT_SIZE), alias: "DetectorElementSize", vr: DS }, // DICOM
    E { tag: Single(COINCIDENCE_WINDOW_WIDTH), alias: "CoincidenceWindowWidth", vr: DS }, // DICOM
    E { tag: Single(SECONDARY_COUNTS_TYPE), alias: "SecondaryCountsType", vr: CS }, // DICOM
    E { tag: Single(FRAME_REFERENCE_TIME), alias: "FrameReferenceTime", vr: DS }, // DICOM
    E { tag: Single(PRIMARY_PROMPTS_COUNTS_ACCUMULATED), alias: "PrimaryPromptsCountsAccumulated", vr: IS }, // DICOM
    E { tag: Single(SECONDARY_COUNTS_ACCUMULATED), alias: "SecondaryCountsAccumulated", vr: IS }, // DICOM
    E { tag: Single(SLICE_SENSITIVITY_FACTOR), alias: "SliceSensitivityFactor", vr: DS }, // DICOM
    E { tag: Single(DECAY_FACTOR), alias: "DecayFactor", vr: DS }, // DICOM
    E { tag: Single(DOSE_CALIBRATION_FACTOR), alias: "DoseCalibrationFactor", vr: DS }, // DICOM
    E { tag: Single(SCATTER_FRACTION_FACTOR), alias: "ScatterFractionFactor", vr: DS }, // DICOM
    E { tag: Single(DEAD_TIME_FACTOR), alias: "DeadTimeFactor", vr: DS }, // DICOM
    E { tag: Single(IMAGE_INDEX), alias: "ImageIndex", vr: US }, // DICOM
    E { tag: Single(HISTOGRAM_SEQUENCE), alias: "HistogramSequence", vr: SQ }, // DICOM
    E { tag: Single(HISTOGRAM_NUMBER_OF_BINS), alias: "HistogramNumberOfBins", vr: US }, // DICOM
    E { tag: Single(HISTOGRAM_FIRST_BIN_VALUE), alias: "HistogramFirstBinValue", vr: US }, // DICOM
    E { tag: Single(HISTOGRAM_LAST_BIN_VALUE), alias: "HistogramLastBinValue", vr: US }, // DICOM
    E { tag: Single(HISTOGRAM_BIN_WIDTH), alias: "HistogramBinWidth", vr: US }, // DICOM
    E { tag: Single(HISTOGRAM_EXPLANATION), alias: "HistogramExplanation", vr: LO }, // DICOM
    E { tag: Single(HISTOGRAM_DATA), alias: "HistogramData", vr: UL }, // DICOM
    E { tag: Single(SEGMENTATION_TYPE), alias: "SegmentationType", vr: CS }, // DICOM
    E { tag: Single(SEGMENT_SEQUENCE), alias: "SegmentSequence", vr: SQ }, // DICOM
    E { tag: Single(SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE), alias: "SegmentedPropertyCategoryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SEGMENT_NUMBER), alias: "SegmentNumber", vr: US }, // DICOM
    E { tag: Single(SEGMENT_LABEL), alias: "SegmentLabel", vr: LO }, // DICOM
    E { tag: Single(SEGMENT_DESCRIPTION), alias: "SegmentDescription", vr: ST }, // DICOM
    E { tag: Single(SEGMENTATION_ALGORITHM_IDENTIFICATION_SEQUENCE), alias: "SegmentationAlgorithmIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(SEGMENT_ALGORITHM_TYPE), alias: "SegmentAlgorithmType", vr: CS }, // DICOM
    E { tag: Single(SEGMENT_ALGORITHM_NAME), alias: "SegmentAlgorithmName", vr: LO }, // DICOM
    E { tag: Single(SEGMENT_IDENTIFICATION_SEQUENCE), alias: "SegmentIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SEGMENT_NUMBER), alias: "ReferencedSegmentNumber", vr: US }, // DICOM
    E { tag: Single(RECOMMENDED_DISPLAY_GRAYSCALE_VALUE), alias: "RecommendedDisplayGrayscaleValue", vr: US }, // DICOM
    E { tag: Single(RECOMMENDED_DISPLAY_CIE_LAB_VALUE), alias: "RecommendedDisplayCIELabValue", vr: US }, // DICOM
    E { tag: Single(MAXIMUM_FRACTIONAL_VALUE), alias: "MaximumFractionalValue", vr: US }, // DICOM
    E { tag: Single(SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE), alias: "SegmentedPropertyTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SEGMENTATION_FRACTIONAL_TYPE), alias: "SegmentationFractionalType", vr: CS }, // DICOM
    E { tag: Single(SEGMENTED_PROPERTY_TYPE_MODIFIER_CODE_SEQUENCE), alias: "SegmentedPropertyTypeModifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(USED_SEGMENTS_SEQUENCE), alias: "UsedSegmentsSequence", vr: SQ }, // DICOM
    E { tag: Single(TRACKING_ID), alias: "TrackingID", vr: UT }, // DICOM
    E { tag: Single(TRACKING_UID), alias: "TrackingUID", vr: UI }, // DICOM
    E { tag: Single(DEFORMABLE_REGISTRATION_SEQUENCE), alias: "DeformableRegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_FRAME_OF_REFERENCE_UID), alias: "SourceFrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(DEFORMABLE_REGISTRATION_GRID_SEQUENCE), alias: "DeformableRegistrationGridSequence", vr: SQ }, // DICOM
    E { tag: Single(GRID_DIMENSIONS), alias: "GridDimensions", vr: UL }, // DICOM
    E { tag: Single(GRID_RESOLUTION), alias: "GridResolution", vr: FD }, // DICOM
    E { tag: Single(VECTOR_GRID_DATA), alias: "VectorGridData", vr: OF }, // DICOM
    E { tag: Single(PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE), alias: "PreDeformationMatrixRegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE), alias: "PostDeformationMatrixRegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_SURFACES), alias: "NumberOfSurfaces", vr: UL }, // DICOM
    E { tag: Single(SURFACE_SEQUENCE), alias: "SurfaceSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_NUMBER), alias: "SurfaceNumber", vr: UL }, // DICOM
    E { tag: Single(SURFACE_COMMENTS), alias: "SurfaceComments", vr: LT }, // DICOM
    E { tag: Single(SURFACE_PROCESSING), alias: "SurfaceProcessing", vr: CS }, // DICOM
    E { tag: Single(SURFACE_PROCESSING_RATIO), alias: "SurfaceProcessingRatio", vr: FL }, // DICOM
    E { tag: Single(SURFACE_PROCESSING_DESCRIPTION), alias: "SurfaceProcessingDescription", vr: LO }, // DICOM
    E { tag: Single(RECOMMENDED_PRESENTATION_OPACITY), alias: "RecommendedPresentationOpacity", vr: FL }, // DICOM
    E { tag: Single(RECOMMENDED_PRESENTATION_TYPE), alias: "RecommendedPresentationType", vr: CS }, // DICOM
    E { tag: Single(FINITE_VOLUME), alias: "FiniteVolume", vr: CS }, // DICOM
    E { tag: Single(MANIFOLD), alias: "Manifold", vr: CS }, // DICOM
    E { tag: Single(SURFACE_POINTS_SEQUENCE), alias: "SurfacePointsSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_POINTS_NORMALS_SEQUENCE), alias: "SurfacePointsNormalsSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_MESH_PRIMITIVES_SEQUENCE), alias: "SurfaceMeshPrimitivesSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_SURFACE_POINTS), alias: "NumberOfSurfacePoints", vr: UL }, // DICOM
    E { tag: Single(POINT_COORDINATES_DATA), alias: "PointCoordinatesData", vr: OF }, // DICOM
    E { tag: Single(POINT_POSITION_ACCURACY), alias: "PointPositionAccuracy", vr: FL }, // DICOM
    E { tag: Single(MEAN_POINT_DISTANCE), alias: "MeanPointDistance", vr: FL }, // DICOM
    E { tag: Single(MAXIMUM_POINT_DISTANCE), alias: "MaximumPointDistance", vr: FL }, // DICOM
    E { tag: Single(POINTS_BOUNDING_BOX_COORDINATES), alias: "PointsBoundingBoxCoordinates", vr: FL }, // DICOM
    E { tag: Single(AXIS_OF_ROTATION), alias: "AxisOfRotation", vr: FL }, // DICOM
    E { tag: Single(CENTER_OF_ROTATION), alias: "CenterOfRotation", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_VECTORS), alias: "NumberOfVectors", vr: UL }, // DICOM
    E { tag: Single(VECTOR_DIMENSIONALITY), alias: "VectorDimensionality", vr: US }, // DICOM
    E { tag: Single(VECTOR_ACCURACY), alias: "VectorAccuracy", vr: FL }, // DICOM
    E { tag: Single(VECTOR_COORDINATE_DATA), alias: "VectorCoordinateData", vr: OF }, // DICOM
    E { tag: Single(TRIANGLE_STRIP_SEQUENCE), alias: "TriangleStripSequence", vr: SQ }, // DICOM
    E { tag: Single(TRIANGLE_FAN_SEQUENCE), alias: "TriangleFanSequence", vr: SQ }, // DICOM
    E { tag: Single(LINE_SEQUENCE), alias: "LineSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_COUNT), alias: "SurfaceCount", vr: UL }, // DICOM
    E { tag: Single(REFERENCED_SURFACE_SEQUENCE), alias: "ReferencedSurfaceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SURFACE_NUMBER), alias: "ReferencedSurfaceNumber", vr: UL }, // DICOM
    E { tag: Single(SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE), alias: "SegmentSurfaceGenerationAlgorithmIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE), alias: "SegmentSurfaceSourceInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(ALGORITHM_FAMILY_CODE_SEQUENCE), alias: "AlgorithmFamilyCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ALGORITHM_NAME_CODE_SEQUENCE), alias: "AlgorithmNameCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ALGORITHM_VERSION), alias: "AlgorithmVersion", vr: LO }, // DICOM
    E { tag: Single(ALGORITHM_PARAMETERS), alias: "AlgorithmParameters", vr: LT }, // DICOM
    E { tag: Single(FACET_SEQUENCE), alias: "FacetSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE), alias: "SurfaceProcessingAlgorithmIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ALGORITHM_NAME), alias: "AlgorithmName", vr: LO }, // DICOM
    E { tag: Single(RECOMMENDED_POINT_RADIUS), alias: "RecommendedPointRadius", vr: FL }, // DICOM
    E { tag: Single(RECOMMENDED_LINE_THICKNESS), alias: "RecommendedLineThickness", vr: FL }, // DICOM
    E { tag: Single(LONG_PRIMITIVE_POINT_INDEX_LIST), alias: "LongPrimitivePointIndexList", vr: OL }, // DICOM
    E { tag: Single(LONG_TRIANGLE_POINT_INDEX_LIST), alias: "LongTrianglePointIndexList", vr: OL }, // DICOM
    E { tag: Single(LONG_EDGE_POINT_INDEX_LIST), alias: "LongEdgePointIndexList", vr: OL }, // DICOM
    E { tag: Single(LONG_VERTEX_POINT_INDEX_LIST), alias: "LongVertexPointIndexList", vr: OL }, // DICOM
    E { tag: Single(TRACK_SET_SEQUENCE), alias: "TrackSetSequence", vr: SQ }, // DICOM
    E { tag: Single(TRACK_SEQUENCE), alias: "TrackSequence", vr: SQ }, // DICOM
    E { tag: Single(RECOMMENDED_DISPLAY_CIE_LAB_VALUE_LIST), alias: "RecommendedDisplayCIELabValueList", vr: OW }, // DICOM
    E { tag: Single(TRACKING_ALGORITHM_IDENTIFICATION_SEQUENCE), alias: "TrackingAlgorithmIdentificationSequence", vr: SQ }, // DICOM
    E { tag: Single(TRACK_SET_NUMBER), alias: "TrackSetNumber", vr: UL }, // DICOM
    E { tag: Single(TRACK_SET_LABEL), alias: "TrackSetLabel", vr: LO }, // DICOM
    E { tag: Single(TRACK_SET_DESCRIPTION), alias: "TrackSetDescription", vr: UT }, // DICOM
    E { tag: Single(TRACK_SET_ANATOMICAL_TYPE_CODE_SEQUENCE), alias: "TrackSetAnatomicalTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASUREMENTS_SEQUENCE), alias: "MeasurementsSequence", vr: SQ }, // DICOM
    E { tag: Single(TRACK_SET_STATISTICS_SEQUENCE), alias: "TrackSetStatisticsSequence", vr: SQ }, // DICOM
    E { tag: Single(FLOATING_POINT_VALUES), alias: "FloatingPointValues", vr: OF }, // DICOM
    E { tag: Single(TRACK_POINT_INDEX_LIST), alias: "TrackPointIndexList", vr: OL }, // DICOM
    E { tag: Single(TRACK_STATISTICS_SEQUENCE), alias: "TrackStatisticsSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASUREMENT_VALUES_SEQUENCE), alias: "MeasurementValuesSequence", vr: SQ }, // DICOM
    E { tag: Single(DIFFUSION_ACQUISITION_CODE_SEQUENCE), alias: "DiffusionAcquisitionCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(DIFFUSION_MODEL_CODE_SEQUENCE), alias: "DiffusionModelCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_SIZE), alias: "ImplantSize", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_VERSION), alias: "ImplantTemplateVersion", vr: LO }, // DICOM
    E { tag: Single(REPLACED_IMPLANT_TEMPLATE_SEQUENCE), alias: "ReplacedImplantTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_TYPE), alias: "ImplantType", vr: CS }, // DICOM
    E { tag: Single(DERIVATION_IMPLANT_TEMPLATE_SEQUENCE), alias: "DerivationImplantTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(ORIGINAL_IMPLANT_TEMPLATE_SEQUENCE), alias: "OriginalImplantTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(EFFECTIVE_DATE_TIME), alias: "EffectiveDateTime", vr: DT }, // DICOM
    E { tag: Single(IMPLANT_TARGET_ANATOMY_SEQUENCE), alias: "ImplantTargetAnatomySequence", vr: SQ }, // DICOM
    E { tag: Single(INFORMATION_FROM_MANUFACTURER_SEQUENCE), alias: "InformationFromManufacturerSequence", vr: SQ }, // DICOM
    E { tag: Single(NOTIFICATION_FROM_MANUFACTURER_SEQUENCE), alias: "NotificationFromManufacturerSequence", vr: SQ }, // DICOM
    E { tag: Single(INFORMATION_ISSUE_DATE_TIME), alias: "InformationIssueDateTime", vr: DT }, // DICOM
    E { tag: Single(INFORMATION_SUMMARY), alias: "InformationSummary", vr: ST }, // DICOM
    E { tag: Single(IMPLANT_REGULATORY_DISAPPROVAL_CODE_SEQUENCE), alias: "ImplantRegulatoryDisapprovalCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OVERALL_TEMPLATE_SPATIAL_TOLERANCE), alias: "OverallTemplateSpatialTolerance", vr: FD }, // DICOM
    E { tag: Single(HPGL_DOCUMENT_SEQUENCE), alias: "HPGLDocumentSequence", vr: SQ }, // DICOM
    E { tag: Single(HPGL_DOCUMENT_ID), alias: "HPGLDocumentID", vr: US }, // DICOM
    E { tag: Single(HPGL_DOCUMENT_LABEL), alias: "HPGLDocumentLabel", vr: LO }, // DICOM
    E { tag: Single(VIEW_ORIENTATION_CODE_SEQUENCE), alias: "ViewOrientationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(VIEW_ORIENTATION_MODIFIER_CODE_SEQUENCE), alias: "ViewOrientationModifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(HPGL_DOCUMENT_SCALING), alias: "HPGLDocumentScaling", vr: FD }, // DICOM
    E { tag: Single(HPGL_DOCUMENT), alias: "HPGLDocument", vr: OB }, // DICOM
    E { tag: Single(HPGL_CONTOUR_PEN_NUMBER), alias: "HPGLContourPenNumber", vr: US }, // DICOM
    E { tag: Single(HPGL_PEN_SEQUENCE), alias: "HPGLPenSequence", vr: SQ }, // DICOM
    E { tag: Single(HPGL_PEN_NUMBER), alias: "HPGLPenNumber", vr: US }, // DICOM
    E { tag: Single(HPGL_PEN_LABEL), alias: "HPGLPenLabel", vr: LO }, // DICOM
    E { tag: Single(HPGL_PEN_DESCRIPTION), alias: "HPGLPenDescription", vr: ST }, // DICOM
    E { tag: Single(RECOMMENDED_ROTATION_POINT), alias: "RecommendedRotationPoint", vr: FD }, // DICOM
    E { tag: Single(BOUNDING_RECTANGLE), alias: "BoundingRectangle", vr: FD }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE3_D_MODEL_SURFACE_NUMBER), alias: "ImplantTemplate3DModelSurfaceNumber", vr: US }, // DICOM
    E { tag: Single(SURFACE_MODEL_DESCRIPTION_SEQUENCE), alias: "SurfaceModelDescriptionSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_MODEL_LABEL), alias: "SurfaceModelLabel", vr: LO }, // DICOM
    E { tag: Single(SURFACE_MODEL_SCALING_FACTOR), alias: "SurfaceModelScalingFactor", vr: FD }, // DICOM
    E { tag: Single(MATERIALS_CODE_SEQUENCE), alias: "MaterialsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(COATING_MATERIALS_CODE_SEQUENCE), alias: "CoatingMaterialsCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_TYPE_CODE_SEQUENCE), alias: "ImplantTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(FIXATION_METHOD_CODE_SEQUENCE), alias: "FixationMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(MATING_FEATURE_SETS_SEQUENCE), alias: "MatingFeatureSetsSequence", vr: SQ }, // DICOM
    E { tag: Single(MATING_FEATURE_SET_ID), alias: "MatingFeatureSetID", vr: US }, // DICOM
    E { tag: Single(MATING_FEATURE_SET_LABEL), alias: "MatingFeatureSetLabel", vr: LO }, // DICOM
    E { tag: Single(MATING_FEATURE_SEQUENCE), alias: "MatingFeatureSequence", vr: SQ }, // DICOM
    E { tag: Single(MATING_FEATURE_ID), alias: "MatingFeatureID", vr: US }, // DICOM
    E { tag: Single(MATING_FEATURE_DEGREE_OF_FREEDOM_SEQUENCE), alias: "MatingFeatureDegreeOfFreedomSequence", vr: SQ }, // DICOM
    E { tag: Single(DEGREE_OF_FREEDOM_ID), alias: "DegreeOfFreedomID", vr: US }, // DICOM
    E { tag: Single(DEGREE_OF_FREEDOM_TYPE), alias: "DegreeOfFreedomType", vr: CS }, // DICOM
    E { tag: Single(TWO_D_MATING_FEATURE_COORDINATES_SEQUENCE), alias: "TwoDMatingFeatureCoordinatesSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_HPGL_DOCUMENT_ID), alias: "ReferencedHPGLDocumentID", vr: US }, // DICOM
    E { tag: Single(TWO_D_MATING_POINT), alias: "TwoDMatingPoint", vr: FD }, // DICOM
    E { tag: Single(TWO_D_MATING_AXES), alias: "TwoDMatingAxes", vr: FD }, // DICOM
    E { tag: Single(TWO_D_DEGREE_OF_FREEDOM_SEQUENCE), alias: "TwoDDegreeOfFreedomSequence", vr: SQ }, // DICOM
    E { tag: Single(THREE_D_DEGREE_OF_FREEDOM_AXIS), alias: "ThreeDDegreeOfFreedomAxis", vr: FD }, // DICOM
    E { tag: Single(RANGE_OF_FREEDOM), alias: "RangeOfFreedom", vr: FD }, // DICOM
    E { tag: Single(THREE_D_MATING_POINT), alias: "ThreeDMatingPoint", vr: FD }, // DICOM
    E { tag: Single(THREE_D_MATING_AXES), alias: "ThreeDMatingAxes", vr: FD }, // DICOM
    E { tag: Single(TWO_D_DEGREE_OF_FREEDOM_AXIS), alias: "TwoDDegreeOfFreedomAxis", vr: FD }, // DICOM
    E { tag: Single(PLANNING_LANDMARK_POINT_SEQUENCE), alias: "PlanningLandmarkPointSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANNING_LANDMARK_LINE_SEQUENCE), alias: "PlanningLandmarkLineSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANNING_LANDMARK_PLANE_SEQUENCE), alias: "PlanningLandmarkPlaneSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANNING_LANDMARK_ID), alias: "PlanningLandmarkID", vr: US }, // DICOM
    E { tag: Single(PLANNING_LANDMARK_DESCRIPTION), alias: "PlanningLandmarkDescription", vr: LO }, // DICOM
    E { tag: Single(PLANNING_LANDMARK_IDENTIFICATION_CODE_SEQUENCE), alias: "PlanningLandmarkIdentificationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(TWO_D_POINT_COORDINATES_SEQUENCE), alias: "TwoDPointCoordinatesSequence", vr: SQ }, // DICOM
    E { tag: Single(TWO_D_POINT_COORDINATES), alias: "TwoDPointCoordinates", vr: FD }, // DICOM
    E { tag: Single(THREE_D_POINT_COORDINATES), alias: "ThreeDPointCoordinates", vr: FD }, // DICOM
    E { tag: Single(TWO_D_LINE_COORDINATES_SEQUENCE), alias: "TwoDLineCoordinatesSequence", vr: SQ }, // DICOM
    E { tag: Single(TWO_D_LINE_COORDINATES), alias: "TwoDLineCoordinates", vr: FD }, // DICOM
    E { tag: Single(THREE_D_LINE_COORDINATES), alias: "ThreeDLineCoordinates", vr: FD }, // DICOM
    E { tag: Single(TWO_D_PLANE_COORDINATES_SEQUENCE), alias: "TwoDPlaneCoordinatesSequence", vr: SQ }, // DICOM
    E { tag: Single(TWO_D_PLANE_INTERSECTION), alias: "TwoDPlaneIntersection", vr: FD }, // DICOM
    E { tag: Single(THREE_D_PLANE_ORIGIN), alias: "ThreeDPlaneOrigin", vr: FD }, // DICOM
    E { tag: Single(THREE_D_PLANE_NORMAL), alias: "ThreeDPlaneNormal", vr: FD }, // DICOM
    E { tag: Single(GRAPHIC_ANNOTATION_SEQUENCE), alias: "GraphicAnnotationSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_LAYER), alias: "GraphicLayer", vr: CS }, // DICOM
    E { tag: Single(BOUNDING_BOX_ANNOTATION_UNITS), alias: "BoundingBoxAnnotationUnits", vr: CS }, // DICOM
    E { tag: Single(ANCHOR_POINT_ANNOTATION_UNITS), alias: "AnchorPointAnnotationUnits", vr: CS }, // DICOM
    E { tag: Single(GRAPHIC_ANNOTATION_UNITS), alias: "GraphicAnnotationUnits", vr: CS }, // DICOM
    E { tag: Single(UNFORMATTED_TEXT_VALUE), alias: "UnformattedTextValue", vr: ST }, // DICOM
    E { tag: Single(TEXT_OBJECT_SEQUENCE), alias: "TextObjectSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_OBJECT_SEQUENCE), alias: "GraphicObjectSequence", vr: SQ }, // DICOM
    E { tag: Single(BOUNDING_BOX_TOP_LEFT_HAND_CORNER), alias: "BoundingBoxTopLeftHandCorner", vr: FL }, // DICOM
    E { tag: Single(BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER), alias: "BoundingBoxBottomRightHandCorner", vr: FL }, // DICOM
    E { tag: Single(BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION), alias: "BoundingBoxTextHorizontalJustification", vr: CS }, // DICOM
    E { tag: Single(ANCHOR_POINT), alias: "AnchorPoint", vr: FL }, // DICOM
    E { tag: Single(ANCHOR_POINT_VISIBILITY), alias: "AnchorPointVisibility", vr: CS }, // DICOM
    E { tag: Single(GRAPHIC_DIMENSIONS), alias: "GraphicDimensions", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_GRAPHIC_POINTS), alias: "NumberOfGraphicPoints", vr: US }, // DICOM
    E { tag: Single(GRAPHIC_DATA), alias: "GraphicData", vr: FL }, // DICOM
    E { tag: Single(GRAPHIC_TYPE), alias: "GraphicType", vr: CS }, // DICOM
    E { tag: Single(GRAPHIC_FILLED), alias: "GraphicFilled", vr: CS }, // DICOM
    E { tag: Single(IMAGE_HORIZONTAL_FLIP), alias: "ImageHorizontalFlip", vr: CS }, // DICOM
    E { tag: Single(IMAGE_ROTATION), alias: "ImageRotation", vr: US }, // DICOM
    E { tag: Single(DISPLAYED_AREA_TOP_LEFT_HAND_CORNER), alias: "DisplayedAreaTopLeftHandCorner", vr: SL }, // DICOM
    E { tag: Single(DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER), alias: "DisplayedAreaBottomRightHandCorner", vr: SL }, // DICOM
    E { tag: Single(DISPLAYED_AREA_SELECTION_SEQUENCE), alias: "DisplayedAreaSelectionSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_LAYER_SEQUENCE), alias: "GraphicLayerSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_LAYER_ORDER), alias: "GraphicLayerOrder", vr: IS }, // DICOM
    E { tag: Single(GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE), alias: "GraphicLayerRecommendedDisplayGrayscaleValue", vr: US }, // DICOM
    E { tag: Single(GRAPHIC_LAYER_DESCRIPTION), alias: "GraphicLayerDescription", vr: LO }, // DICOM
    E { tag: Single(CONTENT_LABEL), alias: "ContentLabel", vr: CS }, // DICOM
    E { tag: Single(CONTENT_DESCRIPTION), alias: "ContentDescription", vr: LO }, // DICOM
    E { tag: Single(PRESENTATION_CREATION_DATE), alias: "PresentationCreationDate", vr: DA }, // DICOM
    E { tag: Single(PRESENTATION_CREATION_TIME), alias: "PresentationCreationTime", vr: TM }, // DICOM
    E { tag: Single(CONTENT_CREATOR_NAME), alias: "ContentCreatorName", vr: PN }, // DICOM
    E { tag: Single(CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE), alias: "ContentCreatorIdentificationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE), alias: "AlternateContentDescriptionSequence", vr: SQ }, // DICOM
    E { tag: Single(PRESENTATION_SIZE_MODE), alias: "PresentationSizeMode", vr: CS }, // DICOM
    E { tag: Single(PRESENTATION_PIXEL_SPACING), alias: "PresentationPixelSpacing", vr: DS }, // DICOM
    E { tag: Single(PRESENTATION_PIXEL_ASPECT_RATIO), alias: "PresentationPixelAspectRatio", vr: IS }, // DICOM
    E { tag: Single(PRESENTATION_PIXEL_MAGNIFICATION_RATIO), alias: "PresentationPixelMagnificationRatio", vr: FL }, // DICOM
    E { tag: Single(GRAPHIC_GROUP_LABEL), alias: "GraphicGroupLabel", vr: LO }, // DICOM
    E { tag: Single(GRAPHIC_GROUP_DESCRIPTION), alias: "GraphicGroupDescription", vr: ST }, // DICOM
    E { tag: Single(COMPOUND_GRAPHIC_SEQUENCE), alias: "CompoundGraphicSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPOUND_GRAPHIC_INSTANCE_ID), alias: "CompoundGraphicInstanceID", vr: UL }, // DICOM
    E { tag: Single(FONT_NAME), alias: "FontName", vr: LO }, // DICOM
    E { tag: Single(FONT_NAME_TYPE), alias: "FontNameType", vr: CS }, // DICOM
    E { tag: Single(CSS_FONT_NAME), alias: "CSSFontName", vr: LO }, // DICOM
    E { tag: Single(ROTATION_ANGLE), alias: "RotationAngle", vr: FD }, // DICOM
    E { tag: Single(TEXT_STYLE_SEQUENCE), alias: "TextStyleSequence", vr: SQ }, // DICOM
    E { tag: Single(LINE_STYLE_SEQUENCE), alias: "LineStyleSequence", vr: SQ }, // DICOM
    E { tag: Single(FILL_STYLE_SEQUENCE), alias: "FillStyleSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_GROUP_SEQUENCE), alias: "GraphicGroupSequence", vr: SQ }, // DICOM
    E { tag: Single(TEXT_COLOR_CIE_LAB_VALUE), alias: "TextColorCIELabValue", vr: US }, // DICOM
    E { tag: Single(HORIZONTAL_ALIGNMENT), alias: "HorizontalAlignment", vr: CS }, // DICOM
    E { tag: Single(VERTICAL_ALIGNMENT), alias: "VerticalAlignment", vr: CS }, // DICOM
    E { tag: Single(SHADOW_STYLE), alias: "ShadowStyle", vr: CS }, // DICOM
    E { tag: Single(SHADOW_OFFSET_X), alias: "ShadowOffsetX", vr: FL }, // DICOM
    E { tag: Single(SHADOW_OFFSET_Y), alias: "ShadowOffsetY", vr: FL }, // DICOM
    E { tag: Single(SHADOW_COLOR_CIE_LAB_VALUE), alias: "ShadowColorCIELabValue", vr: US }, // DICOM
    E { tag: Single(UNDERLINED), alias: "Underlined", vr: CS }, // DICOM
    E { tag: Single(BOLD), alias: "Bold", vr: CS }, // DICOM
    E { tag: Single(ITALIC), alias: "Italic", vr: CS }, // DICOM
    E { tag: Single(PATTERN_ON_COLOR_CIE_LAB_VALUE), alias: "PatternOnColorCIELabValue", vr: US }, // DICOM
    E { tag: Single(PATTERN_OFF_COLOR_CIE_LAB_VALUE), alias: "PatternOffColorCIELabValue", vr: US }, // DICOM
    E { tag: Single(LINE_THICKNESS), alias: "LineThickness", vr: FL }, // DICOM
    E { tag: Single(LINE_DASHING_STYLE), alias: "LineDashingStyle", vr: CS }, // DICOM
    E { tag: Single(LINE_PATTERN), alias: "LinePattern", vr: UL }, // DICOM
    E { tag: Single(FILL_PATTERN), alias: "FillPattern", vr: OB }, // DICOM
    E { tag: Single(FILL_MODE), alias: "FillMode", vr: CS }, // DICOM
    E { tag: Single(SHADOW_OPACITY), alias: "ShadowOpacity", vr: FL }, // DICOM
    E { tag: Single(GAP_LENGTH), alias: "GapLength", vr: FL }, // DICOM
    E { tag: Single(DIAMETER_OF_VISIBILITY), alias: "DiameterOfVisibility", vr: FL }, // DICOM
    E { tag: Single(ROTATION_POINT), alias: "RotationPoint", vr: FL }, // DICOM
    E { tag: Single(TICK_ALIGNMENT), alias: "TickAlignment", vr: CS }, // DICOM
    E { tag: Single(SHOW_TICK_LABEL), alias: "ShowTickLabel", vr: CS }, // DICOM
    E { tag: Single(TICK_LABEL_ALIGNMENT), alias: "TickLabelAlignment", vr: CS }, // DICOM
    E { tag: Single(COMPOUND_GRAPHIC_UNITS), alias: "CompoundGraphicUnits", vr: CS }, // DICOM
    E { tag: Single(PATTERN_ON_OPACITY), alias: "PatternOnOpacity", vr: FL }, // DICOM
    E { tag: Single(PATTERN_OFF_OPACITY), alias: "PatternOffOpacity", vr: FL }, // DICOM
    E { tag: Single(MAJOR_TICKS_SEQUENCE), alias: "MajorTicksSequence", vr: SQ }, // DICOM
    E { tag: Single(TICK_POSITION), alias: "TickPosition", vr: FL }, // DICOM
    E { tag: Single(TICK_LABEL), alias: "TickLabel", vr: SH }, // DICOM
    E { tag: Single(COMPOUND_GRAPHIC_TYPE), alias: "CompoundGraphicType", vr: CS }, // DICOM
    E { tag: Single(GRAPHIC_GROUP_ID), alias: "GraphicGroupID", vr: UL }, // DICOM
    E { tag: Single(SHAPE_TYPE), alias: "ShapeType", vr: CS }, // DICOM
    E { tag: Single(REGISTRATION_SEQUENCE), alias: "RegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(MATRIX_REGISTRATION_SEQUENCE), alias: "MatrixRegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(MATRIX_SEQUENCE), alias: "MatrixSequence", vr: SQ }, // DICOM
    E { tag: Single(FRAME_OF_REFERENCE_TO_DISPLAYED_COORDINATE_SYSTEM_TRANSFORMATION_MATRIX), alias: "FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix", vr: FD }, // DICOM
    E { tag: Single(FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE), alias: "FrameOfReferenceTransformationMatrixType", vr: CS }, // DICOM
    E { tag: Single(REGISTRATION_TYPE_CODE_SEQUENCE), alias: "RegistrationTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(FIDUCIAL_DESCRIPTION), alias: "FiducialDescription", vr: ST }, // DICOM
    E { tag: Single(FIDUCIAL_IDENTIFIER), alias: "FiducialIdentifier", vr: SH }, // DICOM
    E { tag: Single(FIDUCIAL_IDENTIFIER_CODE_SEQUENCE), alias: "FiducialIdentifierCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTOUR_UNCERTAINTY_RADIUS), alias: "ContourUncertaintyRadius", vr: FD }, // DICOM
    E { tag: Single(USED_FIDUCIALS_SEQUENCE), alias: "UsedFiducialsSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_COORDINATES_DATA_SEQUENCE), alias: "GraphicCoordinatesDataSequence", vr: SQ }, // DICOM
    E { tag: Single(FIDUCIAL_UID), alias: "FiducialUID", vr: UI }, // DICOM
    E { tag: Single(FIDUCIAL_SET_SEQUENCE), alias: "FiducialSetSequence", vr: SQ }, // DICOM
    E { tag: Single(FIDUCIAL_SEQUENCE), alias: "FiducialSequence", vr: SQ }, // DICOM
    E { tag: Single(FIDUCIALS_PROPERTY_CATEGORY_CODE_SEQUENCE), alias: "FiducialsPropertyCategoryCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIE_LAB_VALUE), alias: "GraphicLayerRecommendedDisplayCIELabValue", vr: US }, // DICOM
    E { tag: Single(BLENDING_SEQUENCE), alias: "BlendingSequence", vr: SQ }, // DICOM
    E { tag: Single(RELATIVE_OPACITY), alias: "RelativeOpacity", vr: FL }, // DICOM
    E { tag: Single(REFERENCED_SPATIAL_REGISTRATION_SEQUENCE), alias: "ReferencedSpatialRegistrationSequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_POSITION), alias: "BlendingPosition", vr: CS }, // DICOM
    E { tag: Single(PRESENTATION_DISPLAY_COLLECTION_UID), alias: "PresentationDisplayCollectionUID", vr: UI }, // DICOM
    E { tag: Single(PRESENTATION_SEQUENCE_COLLECTION_UID), alias: "PresentationSequenceCollectionUID", vr: UI }, // DICOM
    E { tag: Single(PRESENTATION_SEQUENCE_POSITION_INDEX), alias: "PresentationSequencePositionIndex", vr: US }, // DICOM
    E { tag: Single(RENDERED_IMAGE_REFERENCE_SEQUENCE), alias: "RenderedImageReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(VOLUMETRIC_PRESENTATION_STATE_INPUT_SEQUENCE), alias: "VolumetricPresentationStateInputSequence", vr: SQ }, // DICOM
    E { tag: Single(PRESENTATION_INPUT_TYPE), alias: "PresentationInputType", vr: CS }, // DICOM
    E { tag: Single(INPUT_SEQUENCE_POSITION_INDEX), alias: "InputSequencePositionIndex", vr: US }, // DICOM
    E { tag: Single(CROP), alias: "Crop", vr: CS }, // DICOM
    E { tag: Single(CROPPING_SPECIFICATION_INDEX), alias: "CroppingSpecificationIndex", vr: US }, // DICOM
    E { tag: Single(VOLUMETRIC_PRESENTATION_INPUT_NUMBER), alias: "VolumetricPresentationInputNumber", vr: US }, // DICOM
    E { tag: Single(IMAGE_VOLUME_GEOMETRY), alias: "ImageVolumeGeometry", vr: CS }, // DICOM
    E { tag: Single(VOLUMETRIC_PRESENTATION_INPUT_SET_UID), alias: "VolumetricPresentationInputSetUID", vr: UI }, // DICOM
    E { tag: Single(VOLUMETRIC_PRESENTATION_INPUT_SET_SEQUENCE), alias: "VolumetricPresentationInputSetSequence", vr: SQ }, // DICOM
    E { tag: Single(GLOBAL_CROP), alias: "GlobalCrop", vr: CS }, // DICOM
    E { tag: Single(GLOBAL_CROPPING_SPECIFICATION_INDEX), alias: "GlobalCroppingSpecificationIndex", vr: US }, // DICOM
    E { tag: Single(RENDERING_METHOD), alias: "RenderingMethod", vr: CS }, // DICOM
    E { tag: Single(VOLUME_CROPPING_SEQUENCE), alias: "VolumeCroppingSequence", vr: SQ }, // DICOM
    E { tag: Single(VOLUME_CROPPING_METHOD), alias: "VolumeCroppingMethod", vr: CS }, // DICOM
    E { tag: Single(BOUNDING_BOX_CROP), alias: "BoundingBoxCrop", vr: FD }, // DICOM
    E { tag: Single(OBLIQUE_CROPPING_PLANE_SEQUENCE), alias: "ObliqueCroppingPlaneSequence", vr: SQ }, // DICOM
    E { tag: Single(PLANE), alias: "Plane", vr: FD }, // DICOM
    E { tag: Single(PLANE_NORMAL), alias: "PlaneNormal", vr: FD }, // DICOM
    E { tag: Single(CROPPING_SPECIFICATION_NUMBER), alias: "CroppingSpecificationNumber", vr: US }, // DICOM
    E { tag: Single(MULTI_PLANAR_RECONSTRUCTION_STYLE), alias: "MultiPlanarReconstructionStyle", vr: CS }, // DICOM
    E { tag: Single(MPR_THICKNESS_TYPE), alias: "MPRThicknessType", vr: CS }, // DICOM
    E { tag: Single(MPR_SLAB_THICKNESS), alias: "MPRSlabThickness", vr: FD }, // DICOM
    E { tag: Single(MPR_TOP_LEFT_HAND_CORNER), alias: "MPRTopLeftHandCorner", vr: FD }, // DICOM
    E { tag: Single(MPR_VIEW_WIDTH_DIRECTION), alias: "MPRViewWidthDirection", vr: FD }, // DICOM
    E { tag: Single(MPR_VIEW_WIDTH), alias: "MPRViewWidth", vr: FD }, // DICOM
    E { tag: Single(NUMBER_OF_VOLUMETRIC_CURVE_POINTS), alias: "NumberOfVolumetricCurvePoints", vr: UL }, // DICOM
    E { tag: Single(VOLUMETRIC_CURVE_POINTS), alias: "VolumetricCurvePoints", vr: OD }, // DICOM
    E { tag: Single(MPR_VIEW_HEIGHT_DIRECTION), alias: "MPRViewHeightDirection", vr: FD }, // DICOM
    E { tag: Single(MPR_VIEW_HEIGHT), alias: "MPRViewHeight", vr: FD }, // DICOM
    E { tag: Single(RENDER_PROJECTION), alias: "RenderProjection", vr: CS }, // DICOM
    E { tag: Single(VIEWPOINT_POSITION), alias: "ViewpointPosition", vr: FD }, // DICOM
    E { tag: Single(VIEWPOINT_LOOK_AT_POINT), alias: "ViewpointLookAtPoint", vr: FD }, // DICOM
    E { tag: Single(VIEWPOINT_UP_DIRECTION), alias: "ViewpointUpDirection", vr: FD }, // DICOM
    E { tag: Single(RENDER_FIELD_OF_VIEW), alias: "RenderFieldOfView", vr: FD }, // DICOM
    E { tag: Single(SAMPLING_STEP_SIZE), alias: "SamplingStepSize", vr: FD }, // DICOM
    E { tag: Single(SHADING_STYLE), alias: "ShadingStyle", vr: CS }, // DICOM
    E { tag: Single(AMBIENT_REFLECTION_INTENSITY), alias: "AmbientReflectionIntensity", vr: FD }, // DICOM
    E { tag: Single(LIGHT_DIRECTION), alias: "LightDirection", vr: FD }, // DICOM
    E { tag: Single(DIFFUSE_REFLECTION_INTENSITY), alias: "DiffuseReflectionIntensity", vr: FD }, // DICOM
    E { tag: Single(SPECULAR_REFLECTION_INTENSITY), alias: "SpecularReflectionIntensity", vr: FD }, // DICOM
    E { tag: Single(SHININESS), alias: "Shininess", vr: FD }, // DICOM
    E { tag: Single(PRESENTATION_STATE_CLASSIFICATION_COMPONENT_SEQUENCE), alias: "PresentationStateClassificationComponentSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPONENT_TYPE), alias: "ComponentType", vr: CS }, // DICOM
    E { tag: Single(COMPONENT_INPUT_SEQUENCE), alias: "ComponentInputSequence", vr: SQ }, // DICOM
    E { tag: Single(VOLUMETRIC_PRESENTATION_INPUT_INDEX), alias: "VolumetricPresentationInputIndex", vr: US }, // DICOM
    E { tag: Single(PRESENTATION_STATE_COMPOSITOR_COMPONENT_SEQUENCE), alias: "PresentationStateCompositorComponentSequence", vr: SQ }, // DICOM
    E { tag: Single(WEIGHTING_TRANSFER_FUNCTION_SEQUENCE), alias: "WeightingTransferFunctionSequence", vr: SQ }, // DICOM
    E { tag: Single(WEIGHTING_LOOKUP_TABLE_DESCRIPTOR), alias: "WeightingLookupTableDescriptor", vr: US }, // DICOM
    E { tag: Single(WEIGHTING_LOOKUP_TABLE_DATA), alias: "WeightingLookupTableData", vr: OB }, // DICOM
    E { tag: Single(VOLUMETRIC_ANNOTATION_SEQUENCE), alias: "VolumetricAnnotationSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_STRUCTURED_CONTEXT_SEQUENCE), alias: "ReferencedStructuredContextSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_CONTENT_ITEM), alias: "ReferencedContentItem", vr: UI }, // DICOM
    E { tag: Single(VOLUMETRIC_PRESENTATION_INPUT_ANNOTATION_SEQUENCE), alias: "VolumetricPresentationInputAnnotationSequence", vr: SQ }, // DICOM
    E { tag: Single(ANNOTATION_CLIPPING), alias: "AnnotationClipping", vr: CS }, // DICOM
    E { tag: Single(PRESENTATION_ANIMATION_STYLE), alias: "PresentationAnimationStyle", vr: CS }, // DICOM
    E { tag: Single(RECOMMENDED_ANIMATION_RATE), alias: "RecommendedAnimationRate", vr: FD }, // DICOM
    E { tag: Single(ANIMATION_CURVE_SEQUENCE), alias: "AnimationCurveSequence", vr: SQ }, // DICOM
    E { tag: Single(ANIMATION_STEP_SIZE), alias: "AnimationStepSize", vr: FD }, // DICOM
    E { tag: Single(SWIVEL_RANGE), alias: "SwivelRange", vr: FD }, // DICOM
    E { tag: Single(VOLUMETRIC_CURVE_UP_DIRECTIONS), alias: "VolumetricCurveUpDirections", vr: OD }, // DICOM
    E { tag: Single(VOLUME_STREAM_SEQUENCE), alias: "VolumeStreamSequence", vr: SQ }, // DICOM
    E { tag: Single(RGBA_TRANSFER_FUNCTION_DESCRIPTION), alias: "RGBATransferFunctionDescription", vr: LO }, // DICOM
    E { tag: Single(ADVANCED_BLENDING_SEQUENCE), alias: "AdvancedBlendingSequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_INPUT_NUMBER), alias: "BlendingInputNumber", vr: US }, // DICOM
    E { tag: Single(BLENDING_DISPLAY_INPUT_SEQUENCE), alias: "BlendingDisplayInputSequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_DISPLAY_SEQUENCE), alias: "BlendingDisplaySequence", vr: SQ }, // DICOM
    E { tag: Single(BLENDING_MODE), alias: "BlendingMode", vr: CS }, // DICOM
    E { tag: Single(TIME_SERIES_BLENDING), alias: "TimeSeriesBlending", vr: CS }, // DICOM
    E { tag: Single(GEOMETRY_FOR_DISPLAY), alias: "GeometryForDisplay", vr: CS }, // DICOM
    E { tag: Single(THRESHOLD_SEQUENCE), alias: "ThresholdSequence", vr: SQ }, // DICOM
    E { tag: Single(THRESHOLD_VALUE_SEQUENCE), alias: "ThresholdValueSequence", vr: SQ }, // DICOM
    E { tag: Single(THRESHOLD_TYPE), alias: "ThresholdType", vr: CS }, // DICOM
    E { tag: Single(THRESHOLD_VALUE), alias: "ThresholdValue", vr: FD }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_NAME), alias: "HangingProtocolName", vr: SH }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_DESCRIPTION), alias: "HangingProtocolDescription", vr: LO }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_LEVEL), alias: "HangingProtocolLevel", vr: CS }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_CREATOR), alias: "HangingProtocolCreator", vr: LO }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_CREATION_DATE_TIME), alias: "HangingProtocolCreationDateTime", vr: DT }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_DEFINITION_SEQUENCE), alias: "HangingProtocolDefinitionSequence", vr: SQ }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE), alias: "HangingProtocolUserIdentificationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(HANGING_PROTOCOL_USER_GROUP_NAME), alias: "HangingProtocolUserGroupName", vr: LO }, // DICOM
    E { tag: Single(SOURCE_HANGING_PROTOCOL_SEQUENCE), alias: "SourceHangingProtocolSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_PRIORS_REFERENCED), alias: "NumberOfPriorsReferenced", vr: US }, // DICOM
    E { tag: Single(IMAGE_SETS_SEQUENCE), alias: "ImageSetsSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_SET_SELECTOR_SEQUENCE), alias: "ImageSetSelectorSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_SET_SELECTOR_USAGE_FLAG), alias: "ImageSetSelectorUsageFlag", vr: CS }, // DICOM
    E { tag: Single(SELECTOR_ATTRIBUTE), alias: "SelectorAttribute", vr: AT }, // DICOM
    E { tag: Single(SELECTOR_VALUE_NUMBER), alias: "SelectorValueNumber", vr: US }, // DICOM
    E { tag: Single(TIME_BASED_IMAGE_SETS_SEQUENCE), alias: "TimeBasedImageSetsSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_SET_NUMBER), alias: "ImageSetNumber", vr: US }, // DICOM
    E { tag: Single(IMAGE_SET_SELECTOR_CATEGORY), alias: "ImageSetSelectorCategory", vr: CS }, // DICOM
    E { tag: Single(RELATIVE_TIME), alias: "RelativeTime", vr: US }, // DICOM
    E { tag: Single(RELATIVE_TIME_UNITS), alias: "RelativeTimeUnits", vr: CS }, // DICOM
    E { tag: Single(ABSTRACT_PRIOR_VALUE), alias: "AbstractPriorValue", vr: SS }, // DICOM
    E { tag: Single(ABSTRACT_PRIOR_CODE_SEQUENCE), alias: "AbstractPriorCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_SET_LABEL), alias: "ImageSetLabel", vr: LO }, // DICOM
    E { tag: Single(SELECTOR_ATTRIBUTE_VR), alias: "SelectorAttributeVR", vr: CS }, // DICOM
    E { tag: Single(SELECTOR_SEQUENCE_POINTER), alias: "SelectorSequencePointer", vr: AT }, // DICOM
    E { tag: Single(SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR), alias: "SelectorSequencePointerPrivateCreator", vr: LO }, // DICOM
    E { tag: Single(SELECTOR_ATTRIBUTE_PRIVATE_CREATOR), alias: "SelectorAttributePrivateCreator", vr: LO }, // DICOM
    E { tag: Single(SELECTOR_AE_VALUE), alias: "SelectorAEValue", vr: AE }, // DICOM
    E { tag: Single(SELECTOR_AS_VALUE), alias: "SelectorASValue", vr: AS }, // DICOM
    E { tag: Single(SELECTOR_AT_VALUE), alias: "SelectorATValue", vr: AT }, // DICOM
    E { tag: Single(SELECTOR_DA_VALUE), alias: "SelectorDAValue", vr: DA }, // DICOM
    E { tag: Single(SELECTOR_CS_VALUE), alias: "SelectorCSValue", vr: CS }, // DICOM
    E { tag: Single(SELECTOR_DT_VALUE), alias: "SelectorDTValue", vr: DT }, // DICOM
    E { tag: Single(SELECTOR_IS_VALUE), alias: "SelectorISValue", vr: IS }, // DICOM
    E { tag: Single(SELECTOR_OB_VALUE), alias: "SelectorOBValue", vr: OB }, // DICOM
    E { tag: Single(SELECTOR_LO_VALUE), alias: "SelectorLOValue", vr: LO }, // DICOM
    E { tag: Single(SELECTOR_OF_VALUE), alias: "SelectorOFValue", vr: OF }, // DICOM
    E { tag: Single(SELECTOR_LT_VALUE), alias: "SelectorLTValue", vr: LT }, // DICOM
    E { tag: Single(SELECTOR_OW_VALUE), alias: "SelectorOWValue", vr: OW }, // DICOM
    E { tag: Single(SELECTOR_PN_VALUE), alias: "SelectorPNValue", vr: PN }, // DICOM
    E { tag: Single(SELECTOR_TM_VALUE), alias: "SelectorTMValue", vr: TM }, // DICOM
    E { tag: Single(SELECTOR_SH_VALUE), alias: "SelectorSHValue", vr: SH }, // DICOM
    E { tag: Single(SELECTOR_UN_VALUE), alias: "SelectorUNValue", vr: UN }, // DICOM
    E { tag: Single(SELECTOR_ST_VALUE), alias: "SelectorSTValue", vr: ST }, // DICOM
    E { tag: Single(SELECTOR_UC_VALUE), alias: "SelectorUCValue", vr: UC }, // DICOM
    E { tag: Single(SELECTOR_UT_VALUE), alias: "SelectorUTValue", vr: UT }, // DICOM
    E { tag: Single(SELECTOR_UR_VALUE), alias: "SelectorURValue", vr: UR }, // DICOM
    E { tag: Single(SELECTOR_DS_VALUE), alias: "SelectorDSValue", vr: DS }, // DICOM
    E { tag: Single(SELECTOR_OD_VALUE), alias: "SelectorODValue", vr: OD }, // DICOM
    E { tag: Single(SELECTOR_FD_VALUE), alias: "SelectorFDValue", vr: FD }, // DICOM
    E { tag: Single(SELECTOR_OL_VALUE), alias: "SelectorOLValue", vr: OL }, // DICOM
    E { tag: Single(SELECTOR_FL_VALUE), alias: "SelectorFLValue", vr: FL }, // DICOM
    E { tag: Single(SELECTOR_UL_VALUE), alias: "SelectorULValue", vr: UL }, // DICOM
    E { tag: Single(SELECTOR_US_VALUE), alias: "SelectorUSValue", vr: US }, // DICOM
    E { tag: Single(SELECTOR_SL_VALUE), alias: "SelectorSLValue", vr: SL }, // DICOM
    E { tag: Single(SELECTOR_SS_VALUE), alias: "SelectorSSValue", vr: SS }, // DICOM
    E { tag: Single(SELECTOR_UI_VALUE), alias: "SelectorUIValue", vr: UI }, // DICOM
    E { tag: Single(SELECTOR_CODE_SEQUENCE_VALUE), alias: "SelectorCodeSequenceValue", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_SCREENS), alias: "NumberOfScreens", vr: US }, // DICOM
    E { tag: Single(NOMINAL_SCREEN_DEFINITION_SEQUENCE), alias: "NominalScreenDefinitionSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_VERTICAL_PIXELS), alias: "NumberOfVerticalPixels", vr: US }, // DICOM
    E { tag: Single(NUMBER_OF_HORIZONTAL_PIXELS), alias: "NumberOfHorizontalPixels", vr: US }, // DICOM
    E { tag: Single(DISPLAY_ENVIRONMENT_SPATIAL_POSITION), alias: "DisplayEnvironmentSpatialPosition", vr: FD }, // DICOM
    E { tag: Single(SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH), alias: "ScreenMinimumGrayscaleBitDepth", vr: US }, // DICOM
    E { tag: Single(SCREEN_MINIMUM_COLOR_BIT_DEPTH), alias: "ScreenMinimumColorBitDepth", vr: US }, // DICOM
    E { tag: Single(APPLICATION_MAXIMUM_REPAINT_TIME), alias: "ApplicationMaximumRepaintTime", vr: US }, // DICOM
    E { tag: Single(DISPLAY_SETS_SEQUENCE), alias: "DisplaySetsSequence", vr: SQ }, // DICOM
    E { tag: Single(DISPLAY_SET_NUMBER), alias: "DisplaySetNumber", vr: US }, // DICOM
    E { tag: Single(DISPLAY_SET_LABEL), alias: "DisplaySetLabel", vr: LO }, // DICOM
    E { tag: Single(DISPLAY_SET_PRESENTATION_GROUP), alias: "DisplaySetPresentationGroup", vr: US }, // DICOM
    E { tag: Single(DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION), alias: "DisplaySetPresentationGroupDescription", vr: LO }, // DICOM
    E { tag: Single(PARTIAL_DATA_DISPLAY_HANDLING), alias: "PartialDataDisplayHandling", vr: CS }, // DICOM
    E { tag: Single(SYNCHRONIZED_SCROLLING_SEQUENCE), alias: "SynchronizedScrollingSequence", vr: SQ }, // DICOM
    E { tag: Single(DISPLAY_SET_SCROLLING_GROUP), alias: "DisplaySetScrollingGroup", vr: US }, // DICOM
    E { tag: Single(NAVIGATION_INDICATOR_SEQUENCE), alias: "NavigationIndicatorSequence", vr: SQ }, // DICOM
    E { tag: Single(NAVIGATION_DISPLAY_SET), alias: "NavigationDisplaySet", vr: US }, // DICOM
    E { tag: Single(REFERENCE_DISPLAY_SETS), alias: "ReferenceDisplaySets", vr: US }, // DICOM
    E { tag: Single(IMAGE_BOXES_SEQUENCE), alias: "ImageBoxesSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_BOX_NUMBER), alias: "ImageBoxNumber", vr: US }, // DICOM
    E { tag: Single(IMAGE_BOX_LAYOUT_TYPE), alias: "ImageBoxLayoutType", vr: CS }, // DICOM
    E { tag: Single(IMAGE_BOX_TILE_HORIZONTAL_DIMENSION), alias: "ImageBoxTileHorizontalDimension", vr: US }, // DICOM
    E { tag: Single(IMAGE_BOX_TILE_VERTICAL_DIMENSION), alias: "ImageBoxTileVerticalDimension", vr: US }, // DICOM
    E { tag: Single(IMAGE_BOX_SCROLL_DIRECTION), alias: "ImageBoxScrollDirection", vr: CS }, // DICOM
    E { tag: Single(IMAGE_BOX_SMALL_SCROLL_TYPE), alias: "ImageBoxSmallScrollType", vr: CS }, // DICOM
    E { tag: Single(IMAGE_BOX_SMALL_SCROLL_AMOUNT), alias: "ImageBoxSmallScrollAmount", vr: US }, // DICOM
    E { tag: Single(IMAGE_BOX_LARGE_SCROLL_TYPE), alias: "ImageBoxLargeScrollType", vr: CS }, // DICOM
    E { tag: Single(IMAGE_BOX_LARGE_SCROLL_AMOUNT), alias: "ImageBoxLargeScrollAmount", vr: US }, // DICOM
    E { tag: Single(IMAGE_BOX_OVERLAP_PRIORITY), alias: "ImageBoxOverlapPriority", vr: US }, // DICOM
    E { tag: Single(CINE_RELATIVE_TO_REAL_TIME), alias: "CineRelativeToRealTime", vr: FD }, // DICOM
    E { tag: Single(FILTER_OPERATIONS_SEQUENCE), alias: "FilterOperationsSequence", vr: SQ }, // DICOM
    E { tag: Single(FILTER_BY_CATEGORY), alias: "FilterByCategory", vr: CS }, // DICOM
    E { tag: Single(FILTER_BY_ATTRIBUTE_PRESENCE), alias: "FilterByAttributePresence", vr: CS }, // DICOM
    E { tag: Single(FILTER_BY_OPERATOR), alias: "FilterByOperator", vr: CS }, // DICOM
    E { tag: Single(STRUCTURED_DISPLAY_BACKGROUND_CIE_LAB_VALUE), alias: "StructuredDisplayBackgroundCIELabValue", vr: US }, // DICOM
    E { tag: Single(EMPTY_IMAGE_BOX_CIE_LAB_VALUE), alias: "EmptyImageBoxCIELabValue", vr: US }, // DICOM
    E { tag: Single(STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE), alias: "StructuredDisplayImageBoxSequence", vr: SQ }, // DICOM
    E { tag: Single(STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE), alias: "StructuredDisplayTextBoxSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_FIRST_FRAME_SEQUENCE), alias: "ReferencedFirstFrameSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_BOX_SYNCHRONIZATION_SEQUENCE), alias: "ImageBoxSynchronizationSequence", vr: SQ }, // DICOM
    E { tag: Single(SYNCHRONIZED_IMAGE_BOX_LIST), alias: "SynchronizedImageBoxList", vr: US }, // DICOM
    E { tag: Single(TYPE_OF_SYNCHRONIZATION), alias: "TypeOfSynchronization", vr: CS }, // DICOM
    E { tag: Single(BLENDING_OPERATION_TYPE), alias: "BlendingOperationType", vr: CS }, // DICOM
    E { tag: Single(REFORMATTING_OPERATION_TYPE), alias: "ReformattingOperationType", vr: CS }, // DICOM
    E { tag: Single(REFORMATTING_THICKNESS), alias: "ReformattingThickness", vr: FD }, // DICOM
    E { tag: Single(REFORMATTING_INTERVAL), alias: "ReformattingInterval", vr: FD }, // DICOM
    E { tag: Single(REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION), alias: "ReformattingOperationInitialViewDirection", vr: CS }, // DICOM
    E { tag: Single(THREE_D_RENDERING_TYPE), alias: "ThreeDRenderingType", vr: CS }, // DICOM
    E { tag: Single(SORTING_OPERATIONS_SEQUENCE), alias: "SortingOperationsSequence", vr: SQ }, // DICOM
    E { tag: Single(SORT_BY_CATEGORY), alias: "SortByCategory", vr: CS }, // DICOM
    E { tag: Single(SORTING_DIRECTION), alias: "SortingDirection", vr: CS }, // DICOM
    E { tag: Single(DISPLAY_SET_PATIENT_ORIENTATION), alias: "DisplaySetPatientOrientation", vr: CS }, // DICOM
    E { tag: Single(VOI_TYPE), alias: "VOIType", vr: CS }, // DICOM
    E { tag: Single(PSEUDO_COLOR_TYPE), alias: "PseudoColorType", vr: CS }, // DICOM
    E { tag: Single(PSEUDO_COLOR_PALETTE_INSTANCE_REFERENCE_SEQUENCE), alias: "PseudoColorPaletteInstanceReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(SHOW_GRAYSCALE_INVERTED), alias: "ShowGrayscaleInverted", vr: CS }, // DICOM
    E { tag: Single(SHOW_IMAGE_TRUE_SIZE_FLAG), alias: "ShowImageTrueSizeFlag", vr: CS }, // DICOM
    E { tag: Single(SHOW_GRAPHIC_ANNOTATION_FLAG), alias: "ShowGraphicAnnotationFlag", vr: CS }, // DICOM
    E { tag: Single(SHOW_PATIENT_DEMOGRAPHICS_FLAG), alias: "ShowPatientDemographicsFlag", vr: CS }, // DICOM
    E { tag: Single(SHOW_ACQUISITION_TECHNIQUES_FLAG), alias: "ShowAcquisitionTechniquesFlag", vr: CS }, // DICOM
    E { tag: Single(DISPLAY_SET_HORIZONTAL_JUSTIFICATION), alias: "DisplaySetHorizontalJustification", vr: CS }, // DICOM
    E { tag: Single(DISPLAY_SET_VERTICAL_JUSTIFICATION), alias: "DisplaySetVerticalJustification", vr: CS }, // DICOM
    E { tag: Single(CONTINUATION_START_METERSET), alias: "ContinuationStartMeterset", vr: FD }, // DICOM
    E { tag: Single(CONTINUATION_END_METERSET), alias: "ContinuationEndMeterset", vr: FD }, // DICOM
    E { tag: Single(PROCEDURE_STEP_STATE), alias: "ProcedureStepState", vr: CS }, // DICOM
    E { tag: Single(PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE), alias: "ProcedureStepProgressInformationSequence", vr: SQ }, // DICOM
    E { tag: Single(PROCEDURE_STEP_PROGRESS), alias: "ProcedureStepProgress", vr: DS }, // DICOM
    E { tag: Single(PROCEDURE_STEP_PROGRESS_DESCRIPTION), alias: "ProcedureStepProgressDescription", vr: ST }, // DICOM
    E { tag: Single(PROCEDURE_STEP_PROGRESS_PARAMETERS_SEQUENCE), alias: "ProcedureStepProgressParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(PROCEDURE_STEP_COMMUNICATIONS_URI_SEQUENCE), alias: "ProcedureStepCommunicationsURISequence", vr: SQ }, // DICOM
    E { tag: Single(CONTACT_URI), alias: "ContactURI", vr: UR }, // DICOM
    E { tag: Single(CONTACT_DISPLAY_NAME), alias: "ContactDisplayName", vr: LO }, // DICOM
    E { tag: Single(PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE), alias: "ProcedureStepDiscontinuationReasonCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(BEAM_TASK_SEQUENCE), alias: "BeamTaskSequence", vr: SQ }, // DICOM
    E { tag: Single(BEAM_TASK_TYPE), alias: "BeamTaskType", vr: CS }, // DICOM
    E { tag: Single(AUTOSEQUENCE_FLAG), alias: "AutosequenceFlag", vr: CS }, // DICOM
    E { tag: Single(TABLE_TOP_VERTICAL_ADJUSTED_POSITION), alias: "TableTopVerticalAdjustedPosition", vr: FD }, // DICOM
    E { tag: Single(TABLE_TOP_LONGITUDINAL_ADJUSTED_POSITION), alias: "TableTopLongitudinalAdjustedPosition", vr: FD }, // DICOM
    E { tag: Single(TABLE_TOP_LATERAL_ADJUSTED_POSITION), alias: "TableTopLateralAdjustedPosition", vr: FD }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_ADJUSTED_ANGLE), alias: "PatientSupportAdjustedAngle", vr: FD }, // DICOM
    E { tag: Single(TABLE_TOP_ECCENTRIC_ADJUSTED_ANGLE), alias: "TableTopEccentricAdjustedAngle", vr: FD }, // DICOM
    E { tag: Single(TABLE_TOP_PITCH_ADJUSTED_ANGLE), alias: "TableTopPitchAdjustedAngle", vr: FD }, // DICOM
    E { tag: Single(TABLE_TOP_ROLL_ADJUSTED_ANGLE), alias: "TableTopRollAdjustedAngle", vr: FD }, // DICOM
    E { tag: Single(DELIVERY_VERIFICATION_IMAGE_SEQUENCE), alias: "DeliveryVerificationImageSequence", vr: SQ }, // DICOM
    E { tag: Single(VERIFICATION_IMAGE_TIMING), alias: "VerificationImageTiming", vr: CS }, // DICOM
    E { tag: Single(DOUBLE_EXPOSURE_FLAG), alias: "DoubleExposureFlag", vr: CS }, // DICOM
    E { tag: Single(DOUBLE_EXPOSURE_ORDERING), alias: "DoubleExposureOrdering", vr: CS }, // DICOM
    E { tag: Single(RELATED_REFERENCE_RT_IMAGE_SEQUENCE), alias: "RelatedReferenceRTImageSequence", vr: SQ }, // DICOM
    E { tag: Single(GENERAL_MACHINE_VERIFICATION_SEQUENCE), alias: "GeneralMachineVerificationSequence", vr: SQ }, // DICOM
    E { tag: Single(CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE), alias: "ConventionalMachineVerificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_MACHINE_VERIFICATION_SEQUENCE), alias: "IonMachineVerificationSequence", vr: SQ }, // DICOM
    E { tag: Single(FAILED_ATTRIBUTES_SEQUENCE), alias: "FailedAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(OVERRIDDEN_ATTRIBUTES_SEQUENCE), alias: "OverriddenAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE), alias: "ConventionalControlPointVerificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_CONTROL_POINT_VERIFICATION_SEQUENCE), alias: "IonControlPointVerificationSequence", vr: SQ }, // DICOM
    E { tag: Single(ATTRIBUTE_OCCURRENCE_SEQUENCE), alias: "AttributeOccurrenceSequence", vr: SQ }, // DICOM
    E { tag: Single(ATTRIBUTE_OCCURRENCE_POINTER), alias: "AttributeOccurrencePointer", vr: AT }, // DICOM
    E { tag: Single(ATTRIBUTE_ITEM_SELECTOR), alias: "AttributeItemSelector", vr: UL }, // DICOM
    E { tag: Single(ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR), alias: "AttributeOccurrencePrivateCreator", vr: LO }, // DICOM
    E { tag: Single(SELECTOR_SEQUENCE_POINTER_ITEMS), alias: "SelectorSequencePointerItems", vr: IS }, // DICOM
    E { tag: Single(SCHEDULED_PROCEDURE_STEP_PRIORITY), alias: "ScheduledProcedureStepPriority", vr: CS }, // DICOM
    E { tag: Single(WORKLIST_LABEL), alias: "WorklistLabel", vr: LO }, // DICOM
    E { tag: Single(PROCEDURE_STEP_LABEL), alias: "ProcedureStepLabel", vr: LO }, // DICOM
    E { tag: Single(SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE), alias: "ScheduledProcessingParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(PERFORMED_PROCESSING_PARAMETERS_SEQUENCE), alias: "PerformedProcessingParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE), alias: "UnifiedProcedureStepPerformedProcedureSequence", vr: SQ }, // DICOM
    E { tag: Single(REPLACED_PROCEDURE_STEP_SEQUENCE), alias: "ReplacedProcedureStepSequence", vr: SQ }, // DICOM
    E { tag: Single(DELETION_LOCK), alias: "DeletionLock", vr: LO }, // DICOM
    E { tag: Single(RECEIVING_AE), alias: "ReceivingAE", vr: AE }, // DICOM
    E { tag: Single(REQUESTING_AE), alias: "RequestingAE", vr: AE }, // DICOM
    E { tag: Single(REASON_FOR_CANCELLATION), alias: "ReasonForCancellation", vr: LT }, // DICOM
    E { tag: Single(SCP_STATUS), alias: "SCPStatus", vr: CS }, // DICOM
    E { tag: Single(SUBSCRIPTION_LIST_STATUS), alias: "SubscriptionListStatus", vr: CS }, // DICOM
    E { tag: Single(UNIFIED_PROCEDURE_STEP_LIST_STATUS), alias: "UnifiedProcedureStepListStatus", vr: CS }, // DICOM
    E { tag: Single(BEAM_ORDER_INDEX), alias: "BeamOrderIndex", vr: UL }, // DICOM
    E { tag: Single(DOUBLE_EXPOSURE_METERSET), alias: "DoubleExposureMeterset", vr: FD }, // DICOM
    E { tag: Single(DOUBLE_EXPOSURE_FIELD_DELTA), alias: "DoubleExposureFieldDelta", vr: FD }, // DICOM
    E { tag: Single(BRACHY_TASK_SEQUENCE), alias: "BrachyTaskSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTINUATION_START_TOTAL_REFERENCE_AIR_KERMA), alias: "ContinuationStartTotalReferenceAirKerma", vr: DS }, // DICOM
    E { tag: Single(CONTINUATION_END_TOTAL_REFERENCE_AIR_KERMA), alias: "ContinuationEndTotalReferenceAirKerma", vr: DS }, // DICOM
    E { tag: Single(CONTINUATION_PULSE_NUMBER), alias: "ContinuationPulseNumber", vr: IS }, // DICOM
    E { tag: Single(CHANNEL_DELIVERY_ORDER_SEQUENCE), alias: "ChannelDeliveryOrderSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_CHANNEL_NUMBER), alias: "ReferencedChannelNumber", vr: IS }, // DICOM
    E { tag: Single(START_CUMULATIVE_TIME_WEIGHT), alias: "StartCumulativeTimeWeight", vr: DS }, // DICOM
    E { tag: Single(END_CUMULATIVE_TIME_WEIGHT), alias: "EndCumulativeTimeWeight", vr: DS }, // DICOM
    E { tag: Single(OMITTED_CHANNEL_SEQUENCE), alias: "OmittedChannelSequence", vr: SQ }, // DICOM
    E { tag: Single(REASON_FOR_CHANNEL_OMISSION), alias: "ReasonForChannelOmission", vr: CS }, // DICOM
    E { tag: Single(REASON_FOR_CHANNEL_OMISSION_DESCRIPTION), alias: "ReasonForChannelOmissionDescription", vr: LO }, // DICOM
    E { tag: Single(CHANNEL_DELIVERY_ORDER_INDEX), alias: "ChannelDeliveryOrderIndex", vr: IS }, // DICOM
    E { tag: Single(CHANNEL_DELIVERY_CONTINUATION_SEQUENCE), alias: "ChannelDeliveryContinuationSequence", vr: SQ }, // DICOM
    E { tag: Single(OMITTED_APPLICATION_SETUP_SEQUENCE), alias: "OmittedApplicationSetupSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_ASSEMBLY_TEMPLATE_NAME), alias: "ImplantAssemblyTemplateName", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_ASSEMBLY_TEMPLATE_ISSUER), alias: "ImplantAssemblyTemplateIssuer", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_ASSEMBLY_TEMPLATE_VERSION), alias: "ImplantAssemblyTemplateVersion", vr: LO }, // DICOM
    E { tag: Single(REPLACED_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE), alias: "ReplacedImplantAssemblyTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_ASSEMBLY_TEMPLATE_TYPE), alias: "ImplantAssemblyTemplateType", vr: CS }, // DICOM
    E { tag: Single(ORIGINAL_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE), alias: "OriginalImplantAssemblyTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(DERIVATION_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE), alias: "DerivationImplantAssemblyTemplateSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_ASSEMBLY_TEMPLATE_TARGET_ANATOMY_SEQUENCE), alias: "ImplantAssemblyTemplateTargetAnatomySequence", vr: SQ }, // DICOM
    E { tag: Single(PROCEDURE_TYPE_CODE_SEQUENCE), alias: "ProcedureTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SURGICAL_TECHNIQUE), alias: "SurgicalTechnique", vr: LO }, // DICOM
    E { tag: Single(COMPONENT_TYPES_SEQUENCE), alias: "ComponentTypesSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPONENT_TYPE_CODE_SEQUENCE), alias: "ComponentTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(EXCLUSIVE_COMPONENT_TYPE), alias: "ExclusiveComponentType", vr: CS }, // DICOM
    E { tag: Single(MANDATORY_COMPONENT_TYPE), alias: "MandatoryComponentType", vr: CS }, // DICOM
    E { tag: Single(COMPONENT_SEQUENCE), alias: "ComponentSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPONENT_ID), alias: "ComponentID", vr: US }, // DICOM
    E { tag: Single(COMPONENT_ASSEMBLY_SEQUENCE), alias: "ComponentAssemblySequence", vr: SQ }, // DICOM
    E { tag: Single(COMPONENT1_REFERENCED_ID), alias: "Component1ReferencedID", vr: US }, // DICOM
    E { tag: Single(COMPONENT1_REFERENCED_MATING_FEATURE_SET_ID), alias: "Component1ReferencedMatingFeatureSetID", vr: US }, // DICOM
    E { tag: Single(COMPONENT1_REFERENCED_MATING_FEATURE_ID), alias: "Component1ReferencedMatingFeatureID", vr: US }, // DICOM
    E { tag: Single(COMPONENT2_REFERENCED_ID), alias: "Component2ReferencedID", vr: US }, // DICOM
    E { tag: Single(COMPONENT2_REFERENCED_MATING_FEATURE_SET_ID), alias: "Component2ReferencedMatingFeatureSetID", vr: US }, // DICOM
    E { tag: Single(COMPONENT2_REFERENCED_MATING_FEATURE_ID), alias: "Component2ReferencedMatingFeatureID", vr: US }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_NAME), alias: "ImplantTemplateGroupName", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_DESCRIPTION), alias: "ImplantTemplateGroupDescription", vr: ST }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_ISSUER), alias: "ImplantTemplateGroupIssuer", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_VERSION), alias: "ImplantTemplateGroupVersion", vr: LO }, // DICOM
    E { tag: Single(REPLACED_IMPLANT_TEMPLATE_GROUP_SEQUENCE), alias: "ReplacedImplantTemplateGroupSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_TARGET_ANATOMY_SEQUENCE), alias: "ImplantTemplateGroupTargetAnatomySequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_MEMBERS_SEQUENCE), alias: "ImplantTemplateGroupMembersSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_MEMBER_ID), alias: "ImplantTemplateGroupMemberID", vr: US }, // DICOM
    E { tag: Single(THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT), alias: "ThreeDImplantTemplateGroupMemberMatchingPoint", vr: FD }, // DICOM
    E { tag: Single(THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES), alias: "ThreeDImplantTemplateGroupMemberMatchingAxes", vr: FD }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING2_D_COORDINATES_SEQUENCE), alias: "ImplantTemplateGroupMemberMatching2DCoordinatesSequence", vr: SQ }, // DICOM
    E { tag: Single(TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT), alias: "TwoDImplantTemplateGroupMemberMatchingPoint", vr: FD }, // DICOM
    E { tag: Single(TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES), alias: "TwoDImplantTemplateGroupMemberMatchingAxes", vr: FD }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_SEQUENCE), alias: "ImplantTemplateGroupVariationDimensionSequence", vr: SQ }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_NAME), alias: "ImplantTemplateGroupVariationDimensionName", vr: LO }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK_SEQUENCE), alias: "ImplantTemplateGroupVariationDimensionRankSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_IMPLANT_TEMPLATE_GROUP_MEMBER_ID), alias: "ReferencedImplantTemplateGroupMemberID", vr: US }, // DICOM
    E { tag: Single(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK), alias: "ImplantTemplateGroupVariationDimensionRank", vr: US }, // DICOM
    E { tag: Single(SURFACE_SCAN_ACQUISITION_TYPE_CODE_SEQUENCE), alias: "SurfaceScanAcquisitionTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SURFACE_SCAN_MODE_CODE_SEQUENCE), alias: "SurfaceScanModeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REGISTRATION_METHOD_CODE_SEQUENCE), alias: "RegistrationMethodCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(SHOT_DURATION_TIME), alias: "ShotDurationTime", vr: FD }, // DICOM
    E { tag: Single(SHOT_OFFSET_TIME), alias: "ShotOffsetTime", vr: FD }, // DICOM
    E { tag: Single(SURFACE_POINT_PRESENTATION_VALUE_DATA), alias: "SurfacePointPresentationValueData", vr: US }, // DICOM
    E { tag: Single(SURFACE_POINT_COLOR_CIE_LAB_VALUE_DATA), alias: "SurfacePointColorCIELabValueData", vr: US }, // DICOM
    E { tag: Single(UV_MAPPING_SEQUENCE), alias: "UVMappingSequence", vr: SQ }, // DICOM
    E { tag: Single(TEXTURE_LABEL), alias: "TextureLabel", vr: SH }, // DICOM
    E { tag: Single(U_VALUE_DATA), alias: "UValueData", vr: OF }, // DICOM
    E { tag: Single(V_VALUE_DATA), alias: "VValueData", vr: OF }, // DICOM
    E { tag: Single(REFERENCED_TEXTURE_SEQUENCE), alias: "ReferencedTextureSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SURFACE_DATA_SEQUENCE), alias: "ReferencedSurfaceDataSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSESSMENT_SUMMARY), alias: "AssessmentSummary", vr: CS }, // DICOM
    E { tag: Single(ASSESSMENT_SUMMARY_DESCRIPTION), alias: "AssessmentSummaryDescription", vr: UT }, // DICOM
    E { tag: Single(ASSESSED_SOP_INSTANCE_SEQUENCE), alias: "AssessedSOPInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_COMPARISON_SOP_INSTANCE_SEQUENCE), alias: "ReferencedComparisonSOPInstanceSequence", vr: SQ }, // DICOM
    E { tag: Single(NUMBER_OF_ASSESSMENT_OBSERVATIONS), alias: "NumberOfAssessmentObservations", vr: UL }, // DICOM
    E { tag: Single(ASSESSMENT_OBSERVATIONS_SEQUENCE), alias: "AssessmentObservationsSequence", vr: SQ }, // DICOM
    E { tag: Single(OBSERVATION_SIGNIFICANCE), alias: "ObservationSignificance", vr: CS }, // DICOM
    E { tag: Single(OBSERVATION_DESCRIPTION), alias: "ObservationDescription", vr: UT }, // DICOM
    E { tag: Single(STRUCTURED_CONSTRAINT_OBSERVATION_SEQUENCE), alias: "StructuredConstraintObservationSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSESSED_ATTRIBUTE_VALUE_SEQUENCE), alias: "AssessedAttributeValueSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSESSMENT_SET_ID), alias: "AssessmentSetID", vr: LO }, // DICOM
    E { tag: Single(ASSESSMENT_REQUESTER_SEQUENCE), alias: "AssessmentRequesterSequence", vr: SQ }, // DICOM
    E { tag: Single(SELECTOR_ATTRIBUTE_NAME), alias: "SelectorAttributeName", vr: LO }, // DICOM
    E { tag: Single(SELECTOR_ATTRIBUTE_KEYWORD), alias: "SelectorAttributeKeyword", vr: LO }, // DICOM
    E { tag: Single(ASSESSMENT_TYPE_CODE_SEQUENCE), alias: "AssessmentTypeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(OBSERVATION_BASIS_CODE_SEQUENCE), alias: "ObservationBasisCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ASSESSMENT_LABEL), alias: "AssessmentLabel", vr: LO }, // DICOM
    E { tag: Single(CONSTRAINT_TYPE), alias: "ConstraintType", vr: CS }, // DICOM
    E { tag: Single(SPECIFICATION_SELECTION_GUIDANCE), alias: "SpecificationSelectionGuidance", vr: UT }, // DICOM
    E { tag: Single(CONSTRAINT_VALUE_SEQUENCE), alias: "ConstraintValueSequence", vr: SQ }, // DICOM
    E { tag: Single(RECOMMENDED_DEFAULT_VALUE_SEQUENCE), alias: "RecommendedDefaultValueSequence", vr: SQ }, // DICOM
    E { tag: Single(CONSTRAINT_VIOLATION_SIGNIFICANCE), alias: "ConstraintViolationSignificance", vr: CS }, // DICOM
    E { tag: Single(CONSTRAINT_VIOLATION_CONDITION), alias: "ConstraintViolationCondition", vr: UT }, // DICOM
    E { tag: Single(MODIFIABLE_CONSTRAINT_FLAG), alias: "ModifiableConstraintFlag", vr: CS }, // DICOM
    E { tag: Single(STORAGE_MEDIA_FILE_SET_ID), alias: "StorageMediaFileSetID", vr: SH }, // DICOM
    E { tag: Single(STORAGE_MEDIA_FILE_SET_UID), alias: "StorageMediaFileSetUID", vr: UI }, // DICOM
    E { tag: Single(ICON_IMAGE_SEQUENCE), alias: "IconImageSequence", vr: SQ }, // DICOM
    E { tag: Single(SOP_INSTANCE_STATUS), alias: "SOPInstanceStatus", vr: CS }, // DICOM
    E { tag: Single(SOP_AUTHORIZATION_DATE_TIME), alias: "SOPAuthorizationDateTime", vr: DT }, // DICOM
    E { tag: Single(SOP_AUTHORIZATION_COMMENT), alias: "SOPAuthorizationComment", vr: LT }, // DICOM
    E { tag: Single(AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER), alias: "AuthorizationEquipmentCertificationNumber", vr: LO }, // DICOM
    E { tag: Single(MACID_NUMBER), alias: "MACIDNumber", vr: US }, // DICOM
    E { tag: Single(MAC_CALCULATION_TRANSFER_SYNTAX_UID), alias: "MACCalculationTransferSyntaxUID", vr: UI }, // DICOM
    E { tag: Single(MAC_ALGORITHM), alias: "MACAlgorithm", vr: CS }, // DICOM
    E { tag: Single(DATA_ELEMENTS_SIGNED), alias: "DataElementsSigned", vr: AT }, // DICOM
    E { tag: Single(DIGITAL_SIGNATURE_UID), alias: "DigitalSignatureUID", vr: UI }, // DICOM
    E { tag: Single(DIGITAL_SIGNATURE_DATE_TIME), alias: "DigitalSignatureDateTime", vr: DT }, // DICOM
    E { tag: Single(CERTIFICATE_TYPE), alias: "CertificateType", vr: CS }, // DICOM
    E { tag: Single(CERTIFICATE_OF_SIGNER), alias: "CertificateOfSigner", vr: OB }, // DICOM
    E { tag: Single(SIGNATURE), alias: "Signature", vr: OB }, // DICOM
    E { tag: Single(CERTIFIED_TIMESTAMP_TYPE), alias: "CertifiedTimestampType", vr: CS }, // DICOM
    E { tag: Single(CERTIFIED_TIMESTAMP), alias: "CertifiedTimestamp", vr: OB }, // DICOM
    E { tag: Single(DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE), alias: "DigitalSignaturePurposeCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_DIGITAL_SIGNATURE_SEQUENCE), alias: "ReferencedDigitalSignatureSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SOP_INSTANCE_MAC_SEQUENCE), alias: "ReferencedSOPInstanceMACSequence", vr: SQ }, // DICOM
    E { tag: Single(MAC), alias: "MAC", vr: OB }, // DICOM
    E { tag: Single(ENCRYPTED_ATTRIBUTES_SEQUENCE), alias: "EncryptedAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID), alias: "EncryptedContentTransferSyntaxUID", vr: UI }, // DICOM
    E { tag: Single(ENCRYPTED_CONTENT), alias: "EncryptedContent", vr: OB }, // DICOM
    E { tag: Single(MODIFIED_ATTRIBUTES_SEQUENCE), alias: "ModifiedAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(ORIGINAL_ATTRIBUTES_SEQUENCE), alias: "OriginalAttributesSequence", vr: SQ }, // DICOM
    E { tag: Single(ATTRIBUTE_MODIFICATION_DATE_TIME), alias: "AttributeModificationDateTime", vr: DT }, // DICOM
    E { tag: Single(MODIFYING_SYSTEM), alias: "ModifyingSystem", vr: LO }, // DICOM
    E { tag: Single(SOURCE_OF_PREVIOUS_VALUES), alias: "SourceOfPreviousValues", vr: LO }, // DICOM
    E { tag: Single(REASON_FOR_THE_ATTRIBUTE_MODIFICATION), alias: "ReasonForTheAttributeModification", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_COPIES), alias: "NumberOfCopies", vr: IS }, // DICOM
    E { tag: Single(PRINTER_CONFIGURATION_SEQUENCE), alias: "PrinterConfigurationSequence", vr: SQ }, // DICOM
    E { tag: Single(PRINT_PRIORITY), alias: "PrintPriority", vr: CS }, // DICOM
    E { tag: Single(MEDIUM_TYPE), alias: "MediumType", vr: CS }, // DICOM
    E { tag: Single(FILM_DESTINATION), alias: "FilmDestination", vr: CS }, // DICOM
    E { tag: Single(FILM_SESSION_LABEL), alias: "FilmSessionLabel", vr: LO }, // DICOM
    E { tag: Single(MEMORY_ALLOCATION), alias: "MemoryAllocation", vr: IS }, // DICOM
    E { tag: Single(MAXIMUM_MEMORY_ALLOCATION), alias: "MaximumMemoryAllocation", vr: IS }, // DICOM
    E { tag: Single(MEMORY_BIT_DEPTH), alias: "MemoryBitDepth", vr: US }, // DICOM
    E { tag: Single(PRINTING_BIT_DEPTH), alias: "PrintingBitDepth", vr: US }, // DICOM
    E { tag: Single(MEDIA_INSTALLED_SEQUENCE), alias: "MediaInstalledSequence", vr: SQ }, // DICOM
    E { tag: Single(OTHER_MEDIA_AVAILABLE_SEQUENCE), alias: "OtherMediaAvailableSequence", vr: SQ }, // DICOM
    E { tag: Single(SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE), alias: "SupportedImageDisplayFormatsSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_FILM_BOX_SEQUENCE), alias: "ReferencedFilmBoxSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_DISPLAY_FORMAT), alias: "ImageDisplayFormat", vr: ST }, // DICOM
    E { tag: Single(ANNOTATION_DISPLAY_FORMAT_ID), alias: "AnnotationDisplayFormatID", vr: CS }, // DICOM
    E { tag: Single(FILM_ORIENTATION), alias: "FilmOrientation", vr: CS }, // DICOM
    E { tag: Single(FILM_SIZE_ID), alias: "FilmSizeID", vr: CS }, // DICOM
    E { tag: Single(PRINTER_RESOLUTION_ID), alias: "PrinterResolutionID", vr: CS }, // DICOM
    E { tag: Single(DEFAULT_PRINTER_RESOLUTION_ID), alias: "DefaultPrinterResolutionID", vr: CS }, // DICOM
    E { tag: Single(MAGNIFICATION_TYPE), alias: "MagnificationType", vr: CS }, // DICOM
    E { tag: Single(SMOOTHING_TYPE), alias: "SmoothingType", vr: CS }, // DICOM
    E { tag: Single(DEFAULT_MAGNIFICATION_TYPE), alias: "DefaultMagnificationType", vr: CS }, // DICOM
    E { tag: Single(OTHER_MAGNIFICATION_TYPES_AVAILABLE), alias: "OtherMagnificationTypesAvailable", vr: CS }, // DICOM
    E { tag: Single(DEFAULT_SMOOTHING_TYPE), alias: "DefaultSmoothingType", vr: CS }, // DICOM
    E { tag: Single(OTHER_SMOOTHING_TYPES_AVAILABLE), alias: "OtherSmoothingTypesAvailable", vr: CS }, // DICOM
    E { tag: Single(BORDER_DENSITY), alias: "BorderDensity", vr: CS }, // DICOM
    E { tag: Single(EMPTY_IMAGE_DENSITY), alias: "EmptyImageDensity", vr: CS }, // DICOM
    E { tag: Single(MIN_DENSITY), alias: "MinDensity", vr: US }, // DICOM
    E { tag: Single(MAX_DENSITY), alias: "MaxDensity", vr: US }, // DICOM
    E { tag: Single(TRIM), alias: "Trim", vr: CS }, // DICOM
    E { tag: Single(CONFIGURATION_INFORMATION), alias: "ConfigurationInformation", vr: ST }, // DICOM
    E { tag: Single(CONFIGURATION_INFORMATION_DESCRIPTION), alias: "ConfigurationInformationDescription", vr: LT }, // DICOM
    E { tag: Single(MAXIMUM_COLLATED_FILMS), alias: "MaximumCollatedFilms", vr: IS }, // DICOM
    E { tag: Single(ILLUMINATION), alias: "Illumination", vr: US }, // DICOM
    E { tag: Single(REFLECTED_AMBIENT_LIGHT), alias: "ReflectedAmbientLight", vr: US }, // DICOM
    E { tag: Single(PRINTER_PIXEL_SPACING), alias: "PrinterPixelSpacing", vr: DS }, // DICOM
    E { tag: Single(REFERENCED_FILM_SESSION_SEQUENCE), alias: "ReferencedFilmSessionSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_IMAGE_BOX_SEQUENCE), alias: "ReferencedImageBoxSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE), alias: "ReferencedBasicAnnotationBoxSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGE_BOX_POSITION), alias: "ImageBoxPosition", vr: US }, // DICOM
    E { tag: Single(POLARITY), alias: "Polarity", vr: CS }, // DICOM
    E { tag: Single(REQUESTED_IMAGE_SIZE), alias: "RequestedImageSize", vr: DS }, // DICOM
    E { tag: Single(REQUESTED_DECIMATE_CROP_BEHAVIOR), alias: "RequestedDecimateCropBehavior", vr: CS }, // DICOM
    E { tag: Single(REQUESTED_RESOLUTION_ID), alias: "RequestedResolutionID", vr: CS }, // DICOM
    E { tag: Single(REQUESTED_IMAGE_SIZE_FLAG), alias: "RequestedImageSizeFlag", vr: CS }, // DICOM
    E { tag: Single(DECIMATE_CROP_RESULT), alias: "DecimateCropResult", vr: CS }, // DICOM
    E { tag: Single(BASIC_GRAYSCALE_IMAGE_SEQUENCE), alias: "BasicGrayscaleImageSequence", vr: SQ }, // DICOM
    E { tag: Single(BASIC_COLOR_IMAGE_SEQUENCE), alias: "BasicColorImageSequence", vr: SQ }, // DICOM
    E { tag: Single(ANNOTATION_POSITION), alias: "AnnotationPosition", vr: US }, // DICOM
    E { tag: Single(TEXT_STRING), alias: "TextString", vr: LO }, // DICOM
    E { tag: Single(PRESENTATION_LUT_SEQUENCE), alias: "PresentationLUTSequence", vr: SQ }, // DICOM
    E { tag: Single(PRESENTATION_LUT_SHAPE), alias: "PresentationLUTShape", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_PRESENTATION_LUT_SEQUENCE), alias: "ReferencedPresentationLUTSequence", vr: SQ }, // DICOM
    E { tag: Single(EXECUTION_STATUS), alias: "ExecutionStatus", vr: CS }, // DICOM
    E { tag: Single(EXECUTION_STATUS_INFO), alias: "ExecutionStatusInfo", vr: CS }, // DICOM
    E { tag: Single(CREATION_DATE), alias: "CreationDate", vr: DA }, // DICOM
    E { tag: Single(CREATION_TIME), alias: "CreationTime", vr: TM }, // DICOM
    E { tag: Single(ORIGINATOR), alias: "Originator", vr: AE }, // DICOM
    E { tag: Single(DESTINATION_AE), alias: "DestinationAE", vr: AE }, // DICOM
    E { tag: Single(OWNER_ID), alias: "OwnerID", vr: SH }, // DICOM
    E { tag: Single(NUMBER_OF_FILMS), alias: "NumberOfFilms", vr: IS }, // DICOM
    E { tag: Single(PRINTER_STATUS), alias: "PrinterStatus", vr: CS }, // DICOM
    E { tag: Single(PRINTER_STATUS_INFO), alias: "PrinterStatusInfo", vr: CS }, // DICOM
    E { tag: Single(PRINTER_NAME), alias: "PrinterName", vr: LO }, // DICOM
    E { tag: Single(LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES), alias: "LabelUsingInformationExtractedFromInstances", vr: CS }, // DICOM
    E { tag: Single(LABEL_TEXT), alias: "LabelText", vr: UT }, // DICOM
    E { tag: Single(LABEL_STYLE_SELECTION), alias: "LabelStyleSelection", vr: CS }, // DICOM
    E { tag: Single(MEDIA_DISPOSITION), alias: "MediaDisposition", vr: LT }, // DICOM
    E { tag: Single(BARCODE_VALUE), alias: "BarcodeValue", vr: LT }, // DICOM
    E { tag: Single(BARCODE_SYMBOLOGY), alias: "BarcodeSymbology", vr: CS }, // DICOM
    E { tag: Single(ALLOW_MEDIA_SPLITTING), alias: "AllowMediaSplitting", vr: CS }, // DICOM
    E { tag: Single(INCLUDE_NON_DICOM_OBJECTS), alias: "IncludeNonDICOMObjects", vr: CS }, // DICOM
    E { tag: Single(INCLUDE_DISPLAY_APPLICATION), alias: "IncludeDisplayApplication", vr: CS }, // DICOM
    E { tag: Single(PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION), alias: "PreserveCompositeInstancesAfterMediaCreation", vr: CS }, // DICOM
    E { tag: Single(TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED), alias: "TotalNumberOfPiecesOfMediaCreated", vr: US }, // DICOM
    E { tag: Single(REQUESTED_MEDIA_APPLICATION_PROFILE), alias: "RequestedMediaApplicationProfile", vr: LO }, // DICOM
    E { tag: Single(REFERENCED_STORAGE_MEDIA_SEQUENCE), alias: "ReferencedStorageMediaSequence", vr: SQ }, // DICOM
    E { tag: Single(FAILURE_ATTRIBUTES), alias: "FailureAttributes", vr: AT }, // DICOM
    E { tag: Single(ALLOW_LOSSY_COMPRESSION), alias: "AllowLossyCompression", vr: CS }, // DICOM
    E { tag: Single(REQUEST_PRIORITY), alias: "RequestPriority", vr: CS }, // DICOM
    E { tag: Single(RT_IMAGE_LABEL), alias: "RTImageLabel", vr: SH }, // DICOM
    E { tag: Single(RT_IMAGE_NAME), alias: "RTImageName", vr: LO }, // DICOM
    E { tag: Single(RT_IMAGE_DESCRIPTION), alias: "RTImageDescription", vr: ST }, // DICOM
    E { tag: Single(REPORTED_VALUES_ORIGIN), alias: "ReportedValuesOrigin", vr: CS }, // DICOM
    E { tag: Single(RT_IMAGE_PLANE), alias: "RTImagePlane", vr: CS }, // DICOM
    E { tag: Single(X_RAY_IMAGE_RECEPTOR_TRANSLATION), alias: "XRayImageReceptorTranslation", vr: DS }, // DICOM
    E { tag: Single(X_RAY_IMAGE_RECEPTOR_ANGLE), alias: "XRayImageReceptorAngle", vr: DS }, // DICOM
    E { tag: Single(RT_IMAGE_ORIENTATION), alias: "RTImageOrientation", vr: DS }, // DICOM
    E { tag: Single(IMAGE_PLANE_PIXEL_SPACING), alias: "ImagePlanePixelSpacing", vr: DS }, // DICOM
    E { tag: Single(RT_IMAGE_POSITION), alias: "RTImagePosition", vr: DS }, // DICOM
    E { tag: Single(RADIATION_MACHINE_NAME), alias: "RadiationMachineName", vr: SH }, // DICOM
    E { tag: Single(RADIATION_MACHINE_SAD), alias: "RadiationMachineSAD", vr: DS }, // DICOM
    E { tag: Single(RADIATION_MACHINE_SSD), alias: "RadiationMachineSSD", vr: DS }, // DICOM
    E { tag: Single(RT_IMAGE_SID), alias: "RTImageSID", vr: DS }, // DICOM
    E { tag: Single(SOURCE_TO_REFERENCE_OBJECT_DISTANCE), alias: "SourceToReferenceObjectDistance", vr: DS }, // DICOM
    E { tag: Single(FRACTION_NUMBER), alias: "FractionNumber", vr: IS }, // DICOM
    E { tag: Single(EXPOSURE_SEQUENCE), alias: "ExposureSequence", vr: SQ }, // DICOM
    E { tag: Single(METERSET_EXPOSURE), alias: "MetersetExposure", vr: DS }, // DICOM
    E { tag: Single(DIAPHRAGM_POSITION), alias: "DiaphragmPosition", vr: DS }, // DICOM
    E { tag: Single(FLUENCE_MAP_SEQUENCE), alias: "FluenceMapSequence", vr: SQ }, // DICOM
    E { tag: Single(FLUENCE_DATA_SOURCE), alias: "FluenceDataSource", vr: CS }, // DICOM
    E { tag: Single(FLUENCE_DATA_SCALE), alias: "FluenceDataScale", vr: DS }, // DICOM
    E { tag: Single(PRIMARY_FLUENCE_MODE_SEQUENCE), alias: "PrimaryFluenceModeSequence", vr: SQ }, // DICOM
    E { tag: Single(FLUENCE_MODE), alias: "FluenceMode", vr: CS }, // DICOM
    E { tag: Single(FLUENCE_MODE_ID), alias: "FluenceModeID", vr: SH }, // DICOM
    E { tag: Single(DVH_TYPE), alias: "DVHType", vr: CS }, // DICOM
    E { tag: Single(DOSE_UNITS), alias: "DoseUnits", vr: CS }, // DICOM
    E { tag: Single(DOSE_TYPE), alias: "DoseType", vr: CS }, // DICOM
    E { tag: Single(SPATIAL_TRANSFORM_OF_DOSE), alias: "SpatialTransformOfDose", vr: CS }, // DICOM
    E { tag: Single(DOSE_COMMENT), alias: "DoseComment", vr: LO }, // DICOM
    E { tag: Single(NORMALIZATION_POINT), alias: "NormalizationPoint", vr: DS }, // DICOM
    E { tag: Single(DOSE_SUMMATION_TYPE), alias: "DoseSummationType", vr: CS }, // DICOM
    E { tag: Single(GRID_FRAME_OFFSET_VECTOR), alias: "GridFrameOffsetVector", vr: DS }, // DICOM
    E { tag: Single(DOSE_GRID_SCALING), alias: "DoseGridScaling", vr: DS }, // DICOM
    E { tag: Single(RT_DOSE_ROI_SEQUENCE), alias: "RTDoseROISequence", vr: SQ }, // DICOM
    E { tag: Single(DOSE_VALUE), alias: "DoseValue", vr: DS }, // DICOM
    E { tag: Single(TISSUE_HETEROGENEITY_CORRECTION), alias: "TissueHeterogeneityCorrection", vr: CS }, // DICOM
    E { tag: Single(DVH_NORMALIZATION_POINT), alias: "DVHNormalizationPoint", vr: DS }, // DICOM
    E { tag: Single(DVH_NORMALIZATION_DOSE_VALUE), alias: "DVHNormalizationDoseValue", vr: DS }, // DICOM
    E { tag: Single(DVH_SEQUENCE), alias: "DVHSequence", vr: SQ }, // DICOM
    E { tag: Single(DVH_DOSE_SCALING), alias: "DVHDoseScaling", vr: DS }, // DICOM
    E { tag: Single(DVH_VOLUME_UNITS), alias: "DVHVolumeUnits", vr: CS }, // DICOM
    E { tag: Single(DVH_NUMBER_OF_BINS), alias: "DVHNumberOfBins", vr: IS }, // DICOM
    E { tag: Single(DVH_DATA), alias: "DVHData", vr: DS }, // DICOM
    E { tag: Single(DVH_REFERENCED_ROI_SEQUENCE), alias: "DVHReferencedROISequence", vr: SQ }, // DICOM
    E { tag: Single(DVHROI_CONTRIBUTION_TYPE), alias: "DVHROIContributionType", vr: CS }, // DICOM
    E { tag: Single(DVH_MINIMUM_DOSE), alias: "DVHMinimumDose", vr: DS }, // DICOM
    E { tag: Single(DVH_MAXIMUM_DOSE), alias: "DVHMaximumDose", vr: DS }, // DICOM
    E { tag: Single(DVH_MEAN_DOSE), alias: "DVHMeanDose", vr: DS }, // DICOM
    E { tag: Single(STRUCTURE_SET_LABEL), alias: "StructureSetLabel", vr: SH }, // DICOM
    E { tag: Single(STRUCTURE_SET_NAME), alias: "StructureSetName", vr: LO }, // DICOM
    E { tag: Single(STRUCTURE_SET_DESCRIPTION), alias: "StructureSetDescription", vr: ST }, // DICOM
    E { tag: Single(STRUCTURE_SET_DATE), alias: "StructureSetDate", vr: DA }, // DICOM
    E { tag: Single(STRUCTURE_SET_TIME), alias: "StructureSetTime", vr: TM }, // DICOM
    E { tag: Single(REFERENCED_FRAME_OF_REFERENCE_SEQUENCE), alias: "ReferencedFrameOfReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(RT_REFERENCED_STUDY_SEQUENCE), alias: "RTReferencedStudySequence", vr: SQ }, // DICOM
    E { tag: Single(RT_REFERENCED_SERIES_SEQUENCE), alias: "RTReferencedSeriesSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTOUR_IMAGE_SEQUENCE), alias: "ContourImageSequence", vr: SQ }, // DICOM
    E { tag: Single(PREDECESSOR_STRUCTURE_SET_SEQUENCE), alias: "PredecessorStructureSetSequence", vr: SQ }, // DICOM
    E { tag: Single(STRUCTURE_SET_ROI_SEQUENCE), alias: "StructureSetROISequence", vr: SQ }, // DICOM
    E { tag: Single(ROI_NUMBER), alias: "ROINumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_FRAME_OF_REFERENCE_UID), alias: "ReferencedFrameOfReferenceUID", vr: UI }, // DICOM
    E { tag: Single(ROI_NAME), alias: "ROIName", vr: LO }, // DICOM
    E { tag: Single(ROI_DESCRIPTION), alias: "ROIDescription", vr: ST }, // DICOM
    E { tag: Single(ROI_DISPLAY_COLOR), alias: "ROIDisplayColor", vr: IS }, // DICOM
    E { tag: Single(ROI_VOLUME), alias: "ROIVolume", vr: DS }, // DICOM
    E { tag: Single(RT_RELATED_ROI_SEQUENCE), alias: "RTRelatedROISequence", vr: SQ }, // DICOM
    E { tag: Single(RTROI_RELATIONSHIP), alias: "RTROIRelationship", vr: CS }, // DICOM
    E { tag: Single(ROI_GENERATION_ALGORITHM), alias: "ROIGenerationAlgorithm", vr: CS }, // DICOM
    E { tag: Single(ROI_GENERATION_DESCRIPTION), alias: "ROIGenerationDescription", vr: LO }, // DICOM
    E { tag: Single(ROI_CONTOUR_SEQUENCE), alias: "ROIContourSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTOUR_SEQUENCE), alias: "ContourSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTOUR_GEOMETRIC_TYPE), alias: "ContourGeometricType", vr: CS }, // DICOM
    E { tag: Single(CONTOUR_SLAB_THICKNESS), alias: "ContourSlabThickness", vr: DS }, // DICOM
    E { tag: Single(CONTOUR_OFFSET_VECTOR), alias: "ContourOffsetVector", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_CONTOUR_POINTS), alias: "NumberOfContourPoints", vr: IS }, // DICOM
    E { tag: Single(CONTOUR_NUMBER), alias: "ContourNumber", vr: IS }, // DICOM
    E { tag: Single(ATTACHED_CONTOURS), alias: "AttachedContours", vr: IS }, // DICOM
    E { tag: Single(CONTOUR_DATA), alias: "ContourData", vr: DS }, // DICOM
    E { tag: Single(RTROI_OBSERVATIONS_SEQUENCE), alias: "RTROIObservationsSequence", vr: SQ }, // DICOM
    E { tag: Single(OBSERVATION_NUMBER), alias: "ObservationNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_ROI_NUMBER), alias: "ReferencedROINumber", vr: IS }, // DICOM
    E { tag: Single(ROI_OBSERVATION_LABEL), alias: "ROIObservationLabel", vr: SH }, // DICOM
    E { tag: Single(RTROI_IDENTIFICATION_CODE_SEQUENCE), alias: "RTROIIdentificationCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(ROI_OBSERVATION_DESCRIPTION), alias: "ROIObservationDescription", vr: ST }, // DICOM
    E { tag: Single(RELATED_RTROI_OBSERVATIONS_SEQUENCE), alias: "RelatedRTROIObservationsSequence", vr: SQ }, // DICOM
    E { tag: Single(RTROI_INTERPRETED_TYPE), alias: "RTROIInterpretedType", vr: CS }, // DICOM
    E { tag: Single(ROI_INTERPRETER), alias: "ROIInterpreter", vr: PN }, // DICOM
    E { tag: Single(ROI_PHYSICAL_PROPERTIES_SEQUENCE), alias: "ROIPhysicalPropertiesSequence", vr: SQ }, // DICOM
    E { tag: Single(ROI_PHYSICAL_PROPERTY), alias: "ROIPhysicalProperty", vr: CS }, // DICOM
    E { tag: Single(ROI_PHYSICAL_PROPERTY_VALUE), alias: "ROIPhysicalPropertyValue", vr: DS }, // DICOM
    E { tag: Single(ROI_ELEMENTAL_COMPOSITION_SEQUENCE), alias: "ROIElementalCompositionSequence", vr: SQ }, // DICOM
    E { tag: Single(ROI_ELEMENTAL_COMPOSITION_ATOMIC_NUMBER), alias: "ROIElementalCompositionAtomicNumber", vr: US }, // DICOM
    E { tag: Single(ROI_ELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION), alias: "ROIElementalCompositionAtomicMassFraction", vr: FL }, // DICOM
    E { tag: Single(FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX), alias: "FrameOfReferenceTransformationMatrix", vr: DS }, // DICOM
    E { tag: Single(FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT), alias: "FrameOfReferenceTransformationComment", vr: LO }, // DICOM
    E { tag: Single(MEASURED_DOSE_REFERENCE_SEQUENCE), alias: "MeasuredDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(MEASURED_DOSE_DESCRIPTION), alias: "MeasuredDoseDescription", vr: ST }, // DICOM
    E { tag: Single(MEASURED_DOSE_TYPE), alias: "MeasuredDoseType", vr: CS }, // DICOM
    E { tag: Single(MEASURED_DOSE_VALUE), alias: "MeasuredDoseValue", vr: DS }, // DICOM
    E { tag: Single(TREATMENT_SESSION_BEAM_SEQUENCE), alias: "TreatmentSessionBeamSequence", vr: SQ }, // DICOM
    E { tag: Single(TREATMENT_SESSION_ION_BEAM_SEQUENCE), alias: "TreatmentSessionIonBeamSequence", vr: SQ }, // DICOM
    E { tag: Single(CURRENT_FRACTION_NUMBER), alias: "CurrentFractionNumber", vr: IS }, // DICOM
    E { tag: Single(TREATMENT_CONTROL_POINT_DATE), alias: "TreatmentControlPointDate", vr: DA }, // DICOM
    E { tag: Single(TREATMENT_CONTROL_POINT_TIME), alias: "TreatmentControlPointTime", vr: TM }, // DICOM
    E { tag: Single(TREATMENT_TERMINATION_STATUS), alias: "TreatmentTerminationStatus", vr: CS }, // DICOM
    E { tag: Single(TREATMENT_TERMINATION_CODE), alias: "TreatmentTerminationCode", vr: SH }, // DICOM
    E { tag: Single(TREATMENT_VERIFICATION_STATUS), alias: "TreatmentVerificationStatus", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_TREATMENT_RECORD_SEQUENCE), alias: "ReferencedTreatmentRecordSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIFIED_PRIMARY_METERSET), alias: "SpecifiedPrimaryMeterset", vr: DS }, // DICOM
    E { tag: Single(SPECIFIED_SECONDARY_METERSET), alias: "SpecifiedSecondaryMeterset", vr: DS }, // DICOM
    E { tag: Single(DELIVERED_PRIMARY_METERSET), alias: "DeliveredPrimaryMeterset", vr: DS }, // DICOM
    E { tag: Single(DELIVERED_SECONDARY_METERSET), alias: "DeliveredSecondaryMeterset", vr: DS }, // DICOM
    E { tag: Single(SPECIFIED_TREATMENT_TIME), alias: "SpecifiedTreatmentTime", vr: DS }, // DICOM
    E { tag: Single(DELIVERED_TREATMENT_TIME), alias: "DeliveredTreatmentTime", vr: DS }, // DICOM
    E { tag: Single(CONTROL_POINT_DELIVERY_SEQUENCE), alias: "ControlPointDeliverySequence", vr: SQ }, // DICOM
    E { tag: Single(ION_CONTROL_POINT_DELIVERY_SEQUENCE), alias: "IonControlPointDeliverySequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIFIED_METERSET), alias: "SpecifiedMeterset", vr: DS }, // DICOM
    E { tag: Single(DELIVERED_METERSET), alias: "DeliveredMeterset", vr: DS }, // DICOM
    E { tag: Single(METERSET_RATE_SET), alias: "MetersetRateSet", vr: FL }, // DICOM
    E { tag: Single(METERSET_RATE_DELIVERED), alias: "MetersetRateDelivered", vr: FL }, // DICOM
    E { tag: Single(SCAN_SPOT_METERSETS_DELIVERED), alias: "ScanSpotMetersetsDelivered", vr: FL }, // DICOM
    E { tag: Single(DOSE_RATE_DELIVERED), alias: "DoseRateDelivered", vr: DS }, // DICOM
    E { tag: Single(TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE), alias: "TreatmentSummaryCalculatedDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(CUMULATIVE_DOSE_TO_DOSE_REFERENCE), alias: "CumulativeDoseToDoseReference", vr: DS }, // DICOM
    E { tag: Single(FIRST_TREATMENT_DATE), alias: "FirstTreatmentDate", vr: DA }, // DICOM
    E { tag: Single(MOST_RECENT_TREATMENT_DATE), alias: "MostRecentTreatmentDate", vr: DA }, // DICOM
    E { tag: Single(NUMBER_OF_FRACTIONS_DELIVERED), alias: "NumberOfFractionsDelivered", vr: IS }, // DICOM
    E { tag: Single(OVERRIDE_SEQUENCE), alias: "OverrideSequence", vr: SQ }, // DICOM
    E { tag: Single(PARAMETER_SEQUENCE_POINTER), alias: "ParameterSequencePointer", vr: AT }, // DICOM
    E { tag: Single(OVERRIDE_PARAMETER_POINTER), alias: "OverrideParameterPointer", vr: AT }, // DICOM
    E { tag: Single(PARAMETER_ITEM_INDEX), alias: "ParameterItemIndex", vr: IS }, // DICOM
    E { tag: Single(MEASURED_DOSE_REFERENCE_NUMBER), alias: "MeasuredDoseReferenceNumber", vr: IS }, // DICOM
    E { tag: Single(PARAMETER_POINTER), alias: "ParameterPointer", vr: AT }, // DICOM
    E { tag: Single(OVERRIDE_REASON), alias: "OverrideReason", vr: ST }, // DICOM
    E { tag: Single(PARAMETER_VALUE_NUMBER), alias: "ParameterValueNumber", vr: US }, // DICOM
    E { tag: Single(CORRECTED_PARAMETER_SEQUENCE), alias: "CorrectedParameterSequence", vr: SQ }, // DICOM
    E { tag: Single(CORRECTION_VALUE), alias: "CorrectionValue", vr: FL }, // DICOM
    E { tag: Single(CALCULATED_DOSE_REFERENCE_SEQUENCE), alias: "CalculatedDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(CALCULATED_DOSE_REFERENCE_NUMBER), alias: "CalculatedDoseReferenceNumber", vr: IS }, // DICOM
    E { tag: Single(CALCULATED_DOSE_REFERENCE_DESCRIPTION), alias: "CalculatedDoseReferenceDescription", vr: ST }, // DICOM
    E { tag: Single(CALCULATED_DOSE_REFERENCE_DOSE_VALUE), alias: "CalculatedDoseReferenceDoseValue", vr: DS }, // DICOM
    E { tag: Single(START_METERSET), alias: "StartMeterset", vr: DS }, // DICOM
    E { tag: Single(END_METERSET), alias: "EndMeterset", vr: DS }, // DICOM
    E { tag: Single(REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE), alias: "ReferencedMeasuredDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER), alias: "ReferencedMeasuredDoseReferenceNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE), alias: "ReferencedCalculatedDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER), alias: "ReferencedCalculatedDoseReferenceNumber", vr: IS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE), alias: "BeamLimitingDeviceLeafPairsSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_WEDGE_SEQUENCE), alias: "RecordedWedgeSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_COMPENSATOR_SEQUENCE), alias: "RecordedCompensatorSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_BLOCK_SEQUENCE), alias: "RecordedBlockSequence", vr: SQ }, // DICOM
    E { tag: Single(TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE), alias: "TreatmentSummaryMeasuredDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_SNOUT_SEQUENCE), alias: "RecordedSnoutSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_RANGE_SHIFTER_SEQUENCE), alias: "RecordedRangeShifterSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE), alias: "RecordedLateralSpreadingDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_RANGE_MODULATOR_SEQUENCE), alias: "RecordedRangeModulatorSequence", vr: SQ }, // DICOM
    E { tag: Single(RECORDED_SOURCE_SEQUENCE), alias: "RecordedSourceSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_SERIAL_NUMBER), alias: "SourceSerialNumber", vr: LO }, // DICOM
    E { tag: Single(TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE), alias: "TreatmentSessionApplicationSetupSequence", vr: SQ }, // DICOM
    E { tag: Single(APPLICATION_SETUP_CHECK), alias: "ApplicationSetupCheck", vr: CS }, // DICOM
    E { tag: Single(RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE), alias: "RecordedBrachyAccessoryDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER), alias: "ReferencedBrachyAccessoryDeviceNumber", vr: IS }, // DICOM
    E { tag: Single(RECORDED_CHANNEL_SEQUENCE), alias: "RecordedChannelSequence", vr: SQ }, // DICOM
    E { tag: Single(SPECIFIED_CHANNEL_TOTAL_TIME), alias: "SpecifiedChannelTotalTime", vr: DS }, // DICOM
    E { tag: Single(DELIVERED_CHANNEL_TOTAL_TIME), alias: "DeliveredChannelTotalTime", vr: DS }, // DICOM
    E { tag: Single(SPECIFIED_NUMBER_OF_PULSES), alias: "SpecifiedNumberOfPulses", vr: IS }, // DICOM
    E { tag: Single(DELIVERED_NUMBER_OF_PULSES), alias: "DeliveredNumberOfPulses", vr: IS }, // DICOM
    E { tag: Single(SPECIFIED_PULSE_REPETITION_INTERVAL), alias: "SpecifiedPulseRepetitionInterval", vr: DS }, // DICOM
    E { tag: Single(DELIVERED_PULSE_REPETITION_INTERVAL), alias: "DeliveredPulseRepetitionInterval", vr: DS }, // DICOM
    E { tag: Single(RECORDED_SOURCE_APPLICATOR_SEQUENCE), alias: "RecordedSourceApplicatorSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SOURCE_APPLICATOR_NUMBER), alias: "ReferencedSourceApplicatorNumber", vr: IS }, // DICOM
    E { tag: Single(RECORDED_CHANNEL_SHIELD_SEQUENCE), alias: "RecordedChannelShieldSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_CHANNEL_SHIELD_NUMBER), alias: "ReferencedChannelShieldNumber", vr: IS }, // DICOM
    E { tag: Single(BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE), alias: "BrachyControlPointDeliveredSequence", vr: SQ }, // DICOM
    E { tag: Single(SAFE_POSITION_EXIT_DATE), alias: "SafePositionExitDate", vr: DA }, // DICOM
    E { tag: Single(SAFE_POSITION_EXIT_TIME), alias: "SafePositionExitTime", vr: TM }, // DICOM
    E { tag: Single(SAFE_POSITION_RETURN_DATE), alias: "SafePositionReturnDate", vr: DA }, // DICOM
    E { tag: Single(SAFE_POSITION_RETURN_TIME), alias: "SafePositionReturnTime", vr: TM }, // DICOM
    E { tag: Single(PULSE_SPECIFIC_BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE), alias: "PulseSpecificBrachyControlPointDeliveredSequence", vr: SQ }, // DICOM
    E { tag: Single(PULSE_NUMBER), alias: "PulseNumber", vr: US }, // DICOM
    E { tag: Single(BRACHY_PULSE_CONTROL_POINT_DELIVERED_SEQUENCE), alias: "BrachyPulseControlPointDeliveredSequence", vr: SQ }, // DICOM
    E { tag: Single(CURRENT_TREATMENT_STATUS), alias: "CurrentTreatmentStatus", vr: CS }, // DICOM
    E { tag: Single(TREATMENT_STATUS_COMMENT), alias: "TreatmentStatusComment", vr: ST }, // DICOM
    E { tag: Single(FRACTION_GROUP_SUMMARY_SEQUENCE), alias: "FractionGroupSummarySequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_FRACTION_NUMBER), alias: "ReferencedFractionNumber", vr: IS }, // DICOM
    E { tag: Single(FRACTION_GROUP_TYPE), alias: "FractionGroupType", vr: CS }, // DICOM
    E { tag: Single(BEAM_STOPPER_POSITION), alias: "BeamStopperPosition", vr: CS }, // DICOM
    E { tag: Single(FRACTION_STATUS_SUMMARY_SEQUENCE), alias: "FractionStatusSummarySequence", vr: SQ }, // DICOM
    E { tag: Single(TREATMENT_DATE), alias: "TreatmentDate", vr: DA }, // DICOM
    E { tag: Single(TREATMENT_TIME), alias: "TreatmentTime", vr: TM }, // DICOM
    E { tag: Single(RT_PLAN_LABEL), alias: "RTPlanLabel", vr: SH }, // DICOM
    E { tag: Single(RT_PLAN_NAME), alias: "RTPlanName", vr: LO }, // DICOM
    E { tag: Single(RT_PLAN_DESCRIPTION), alias: "RTPlanDescription", vr: ST }, // DICOM
    E { tag: Single(RT_PLAN_DATE), alias: "RTPlanDate", vr: DA }, // DICOM
    E { tag: Single(RT_PLAN_TIME), alias: "RTPlanTime", vr: TM }, // DICOM
    E { tag: Single(TREATMENT_PROTOCOLS), alias: "TreatmentProtocols", vr: LO }, // DICOM
    E { tag: Single(PLAN_INTENT), alias: "PlanIntent", vr: CS }, // DICOM
    E { tag: Single(TREATMENT_SITES), alias: "TreatmentSites", vr: LO }, // DICOM
    E { tag: Single(RT_PLAN_GEOMETRY), alias: "RTPlanGeometry", vr: CS }, // DICOM
    E { tag: Single(PRESCRIPTION_DESCRIPTION), alias: "PrescriptionDescription", vr: ST }, // DICOM
    E { tag: Single(DOSE_REFERENCE_SEQUENCE), alias: "DoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(DOSE_REFERENCE_NUMBER), alias: "DoseReferenceNumber", vr: IS }, // DICOM
    E { tag: Single(DOSE_REFERENCE_UID), alias: "DoseReferenceUID", vr: UI }, // DICOM
    E { tag: Single(DOSE_REFERENCE_STRUCTURE_TYPE), alias: "DoseReferenceStructureType", vr: CS }, // DICOM
    E { tag: Single(NOMINAL_BEAM_ENERGY_UNIT), alias: "NominalBeamEnergyUnit", vr: CS }, // DICOM
    E { tag: Single(DOSE_REFERENCE_DESCRIPTION), alias: "DoseReferenceDescription", vr: LO }, // DICOM
    E { tag: Single(DOSE_REFERENCE_POINT_COORDINATES), alias: "DoseReferencePointCoordinates", vr: DS }, // DICOM
    E { tag: Single(NOMINAL_PRIOR_DOSE), alias: "NominalPriorDose", vr: DS }, // DICOM
    E { tag: Single(DOSE_REFERENCE_TYPE), alias: "DoseReferenceType", vr: CS }, // DICOM
    E { tag: Single(CONSTRAINT_WEIGHT), alias: "ConstraintWeight", vr: DS }, // DICOM
    E { tag: Single(DELIVERY_WARNING_DOSE), alias: "DeliveryWarningDose", vr: DS }, // DICOM
    E { tag: Single(DELIVERY_MAXIMUM_DOSE), alias: "DeliveryMaximumDose", vr: DS }, // DICOM
    E { tag: Single(TARGET_MINIMUM_DOSE), alias: "TargetMinimumDose", vr: DS }, // DICOM
    E { tag: Single(TARGET_PRESCRIPTION_DOSE), alias: "TargetPrescriptionDose", vr: DS }, // DICOM
    E { tag: Single(TARGET_MAXIMUM_DOSE), alias: "TargetMaximumDose", vr: DS }, // DICOM
    E { tag: Single(TARGET_UNDERDOSE_VOLUME_FRACTION), alias: "TargetUnderdoseVolumeFraction", vr: DS }, // DICOM
    E { tag: Single(ORGAN_AT_RISK_FULL_VOLUME_DOSE), alias: "OrganAtRiskFullVolumeDose", vr: DS }, // DICOM
    E { tag: Single(ORGAN_AT_RISK_LIMIT_DOSE), alias: "OrganAtRiskLimitDose", vr: DS }, // DICOM
    E { tag: Single(ORGAN_AT_RISK_MAXIMUM_DOSE), alias: "OrganAtRiskMaximumDose", vr: DS }, // DICOM
    E { tag: Single(ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION), alias: "OrganAtRiskOverdoseVolumeFraction", vr: DS }, // DICOM
    E { tag: Single(TOLERANCE_TABLE_SEQUENCE), alias: "ToleranceTableSequence", vr: SQ }, // DICOM
    E { tag: Single(TOLERANCE_TABLE_NUMBER), alias: "ToleranceTableNumber", vr: IS }, // DICOM
    E { tag: Single(TOLERANCE_TABLE_LABEL), alias: "ToleranceTableLabel", vr: SH }, // DICOM
    E { tag: Single(GANTRY_ANGLE_TOLERANCE), alias: "GantryAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE), alias: "BeamLimitingDeviceAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE), alias: "BeamLimitingDeviceToleranceSequence", vr: SQ }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_POSITION_TOLERANCE), alias: "BeamLimitingDevicePositionTolerance", vr: DS }, // DICOM
    E { tag: Single(SNOUT_POSITION_TOLERANCE), alias: "SnoutPositionTolerance", vr: FL }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_ANGLE_TOLERANCE), alias: "PatientSupportAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE), alias: "TableTopEccentricAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_PITCH_ANGLE_TOLERANCE), alias: "TableTopPitchAngleTolerance", vr: FL }, // DICOM
    E { tag: Single(TABLE_TOP_ROLL_ANGLE_TOLERANCE), alias: "TableTopRollAngleTolerance", vr: FL }, // DICOM
    E { tag: Single(TABLE_TOP_VERTICAL_POSITION_TOLERANCE), alias: "TableTopVerticalPositionTolerance", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE), alias: "TableTopLongitudinalPositionTolerance", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_LATERAL_POSITION_TOLERANCE), alias: "TableTopLateralPositionTolerance", vr: DS }, // DICOM
    E { tag: Single(RT_PLAN_RELATIONSHIP), alias: "RTPlanRelationship", vr: CS }, // DICOM
    E { tag: Single(FRACTION_GROUP_SEQUENCE), alias: "FractionGroupSequence", vr: SQ }, // DICOM
    E { tag: Single(FRACTION_GROUP_NUMBER), alias: "FractionGroupNumber", vr: IS }, // DICOM
    E { tag: Single(FRACTION_GROUP_DESCRIPTION), alias: "FractionGroupDescription", vr: LO }, // DICOM
    E { tag: Single(NUMBER_OF_FRACTIONS_PLANNED), alias: "NumberOfFractionsPlanned", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY), alias: "NumberOfFractionPatternDigitsPerDay", vr: IS }, // DICOM
    E { tag: Single(REPEAT_FRACTION_CYCLE_LENGTH), alias: "RepeatFractionCycleLength", vr: IS }, // DICOM
    E { tag: Single(FRACTION_PATTERN), alias: "FractionPattern", vr: LT }, // DICOM
    E { tag: Single(NUMBER_OF_BEAMS), alias: "NumberOfBeams", vr: IS }, // DICOM
    E { tag: Single(BEAM_DOSE_SPECIFICATION_POINT), alias: "BeamDoseSpecificationPoint", vr: DS }, // DICOM
    E { tag: Single(REFERENCED_DOSE_REFERENCE_UID), alias: "ReferencedDoseReferenceUID", vr: UI }, // DICOM
    E { tag: Single(BEAM_DOSE), alias: "BeamDose", vr: DS }, // DICOM
    E { tag: Single(BEAM_METERSET), alias: "BeamMeterset", vr: DS }, // DICOM
    E { tag: Single(BEAM_DOSE_POINT_DEPTH), alias: "BeamDosePointDepth", vr: FL }, // DICOM
    E { tag: Single(BEAM_DOSE_POINT_EQUIVALENT_DEPTH), alias: "BeamDosePointEquivalentDepth", vr: FL }, // DICOM
    E { tag: Single(BEAM_DOSE_POINT_SSD), alias: "BeamDosePointSSD", vr: FL }, // DICOM
    E { tag: Single(BEAM_DOSE_MEANING), alias: "BeamDoseMeaning", vr: CS }, // DICOM
    E { tag: Single(BEAM_DOSE_VERIFICATION_CONTROL_POINT_SEQUENCE), alias: "BeamDoseVerificationControlPointSequence", vr: SQ }, // DICOM
    E { tag: Single(BEAM_DOSE_TYPE), alias: "BeamDoseType", vr: CS }, // DICOM
    E { tag: Single(ALTERNATE_BEAM_DOSE), alias: "AlternateBeamDose", vr: DS }, // DICOM
    E { tag: Single(ALTERNATE_BEAM_DOSE_TYPE), alias: "AlternateBeamDoseType", vr: CS }, // DICOM
    E { tag: Single(DEPTH_VALUE_AVERAGING_FLAG), alias: "DepthValueAveragingFlag", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_BRACHY_APPLICATION_SETUPS), alias: "NumberOfBrachyApplicationSetups", vr: IS }, // DICOM
    E { tag: Single(BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT), alias: "BrachyApplicationSetupDoseSpecificationPoint", vr: DS }, // DICOM
    E { tag: Single(BRACHY_APPLICATION_SETUP_DOSE), alias: "BrachyApplicationSetupDose", vr: DS }, // DICOM
    E { tag: Single(BEAM_SEQUENCE), alias: "BeamSequence", vr: SQ }, // DICOM
    E { tag: Single(TREATMENT_MACHINE_NAME), alias: "TreatmentMachineName", vr: SH }, // DICOM
    E { tag: Single(PRIMARY_DOSIMETER_UNIT), alias: "PrimaryDosimeterUnit", vr: CS }, // DICOM
    E { tag: Single(SOURCE_AXIS_DISTANCE), alias: "SourceAxisDistance", vr: DS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_SEQUENCE), alias: "BeamLimitingDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(RT_BEAM_LIMITING_DEVICE_TYPE), alias: "RTBeamLimitingDeviceType", vr: CS }, // DICOM
    E { tag: Single(SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE), alias: "SourceToBeamLimitingDeviceDistance", vr: DS }, // DICOM
    E { tag: Single(ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE), alias: "IsocenterToBeamLimitingDeviceDistance", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_LEAF_JAW_PAIRS), alias: "NumberOfLeafJawPairs", vr: IS }, // DICOM
    E { tag: Single(LEAF_POSITION_BOUNDARIES), alias: "LeafPositionBoundaries", vr: DS }, // DICOM
    E { tag: Single(BEAM_NUMBER), alias: "BeamNumber", vr: IS }, // DICOM
    E { tag: Single(BEAM_NAME), alias: "BeamName", vr: LO }, // DICOM
    E { tag: Single(BEAM_DESCRIPTION), alias: "BeamDescription", vr: ST }, // DICOM
    E { tag: Single(BEAM_TYPE), alias: "BeamType", vr: CS }, // DICOM
    E { tag: Single(BEAM_DELIVERY_DURATION_LIMIT), alias: "BeamDeliveryDurationLimit", vr: FD }, // DICOM
    E { tag: Single(RADIATION_TYPE), alias: "RadiationType", vr: CS }, // DICOM
    E { tag: Single(HIGH_DOSE_TECHNIQUE_TYPE), alias: "HighDoseTechniqueType", vr: CS }, // DICOM
    E { tag: Single(REFERENCE_IMAGE_NUMBER), alias: "ReferenceImageNumber", vr: IS }, // DICOM
    E { tag: Single(PLANNED_VERIFICATION_IMAGE_SEQUENCE), alias: "PlannedVerificationImageSequence", vr: SQ }, // DICOM
    E { tag: Single(IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS), alias: "ImagingDeviceSpecificAcquisitionParameters", vr: LO }, // DICOM
    E { tag: Single(TREATMENT_DELIVERY_TYPE), alias: "TreatmentDeliveryType", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_WEDGES), alias: "NumberOfWedges", vr: IS }, // DICOM
    E { tag: Single(WEDGE_SEQUENCE), alias: "WedgeSequence", vr: SQ }, // DICOM
    E { tag: Single(WEDGE_NUMBER), alias: "WedgeNumber", vr: IS }, // DICOM
    E { tag: Single(WEDGE_TYPE), alias: "WedgeType", vr: CS }, // DICOM
    E { tag: Single(WEDGE_ID), alias: "WedgeID", vr: SH }, // DICOM
    E { tag: Single(WEDGE_ANGLE), alias: "WedgeAngle", vr: IS }, // DICOM
    E { tag: Single(WEDGE_FACTOR), alias: "WedgeFactor", vr: DS }, // DICOM
    E { tag: Single(TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS), alias: "TotalWedgeTrayWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(WEDGE_ORIENTATION), alias: "WedgeOrientation", vr: DS }, // DICOM
    E { tag: Single(ISOCENTER_TO_WEDGE_TRAY_DISTANCE), alias: "IsocenterToWedgeTrayDistance", vr: FL }, // DICOM
    E { tag: Single(SOURCE_TO_WEDGE_TRAY_DISTANCE), alias: "SourceToWedgeTrayDistance", vr: DS }, // DICOM
    E { tag: Single(WEDGE_THIN_EDGE_POSITION), alias: "WedgeThinEdgePosition", vr: FL }, // DICOM
    E { tag: Single(BOLUS_ID), alias: "BolusID", vr: SH }, // DICOM
    E { tag: Single(BOLUS_DESCRIPTION), alias: "BolusDescription", vr: ST }, // DICOM
    E { tag: Single(EFFECTIVE_WEDGE_ANGLE), alias: "EffectiveWedgeAngle", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_COMPENSATORS), alias: "NumberOfCompensators", vr: IS }, // DICOM
    E { tag: Single(MATERIAL_ID), alias: "MaterialID", vr: SH }, // DICOM
    E { tag: Single(TOTAL_COMPENSATOR_TRAY_FACTOR), alias: "TotalCompensatorTrayFactor", vr: DS }, // DICOM
    E { tag: Single(COMPENSATOR_SEQUENCE), alias: "CompensatorSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPENSATOR_NUMBER), alias: "CompensatorNumber", vr: IS }, // DICOM
    E { tag: Single(COMPENSATOR_ID), alias: "CompensatorID", vr: SH }, // DICOM
    E { tag: Single(SOURCE_TO_COMPENSATOR_TRAY_DISTANCE), alias: "SourceToCompensatorTrayDistance", vr: DS }, // DICOM
    E { tag: Single(COMPENSATOR_ROWS), alias: "CompensatorRows", vr: IS }, // DICOM
    E { tag: Single(COMPENSATOR_COLUMNS), alias: "CompensatorColumns", vr: IS }, // DICOM
    E { tag: Single(COMPENSATOR_PIXEL_SPACING), alias: "CompensatorPixelSpacing", vr: DS }, // DICOM
    E { tag: Single(COMPENSATOR_POSITION), alias: "CompensatorPosition", vr: DS }, // DICOM
    E { tag: Single(COMPENSATOR_TRANSMISSION_DATA), alias: "CompensatorTransmissionData", vr: DS }, // DICOM
    E { tag: Single(COMPENSATOR_THICKNESS_DATA), alias: "CompensatorThicknessData", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_BOLI), alias: "NumberOfBoli", vr: IS }, // DICOM
    E { tag: Single(COMPENSATOR_TYPE), alias: "CompensatorType", vr: CS }, // DICOM
    E { tag: Single(COMPENSATOR_TRAY_ID), alias: "CompensatorTrayID", vr: SH }, // DICOM
    E { tag: Single(NUMBER_OF_BLOCKS), alias: "NumberOfBlocks", vr: IS }, // DICOM
    E { tag: Single(TOTAL_BLOCK_TRAY_FACTOR), alias: "TotalBlockTrayFactor", vr: DS }, // DICOM
    E { tag: Single(TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS), alias: "TotalBlockTrayWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(BLOCK_SEQUENCE), alias: "BlockSequence", vr: SQ }, // DICOM
    E { tag: Single(BLOCK_TRAY_ID), alias: "BlockTrayID", vr: SH }, // DICOM
    E { tag: Single(SOURCE_TO_BLOCK_TRAY_DISTANCE), alias: "SourceToBlockTrayDistance", vr: DS }, // DICOM
    E { tag: Single(ISOCENTER_TO_BLOCK_TRAY_DISTANCE), alias: "IsocenterToBlockTrayDistance", vr: FL }, // DICOM
    E { tag: Single(BLOCK_TYPE), alias: "BlockType", vr: CS }, // DICOM
    E { tag: Single(ACCESSORY_CODE), alias: "AccessoryCode", vr: LO }, // DICOM
    E { tag: Single(BLOCK_DIVERGENCE), alias: "BlockDivergence", vr: CS }, // DICOM
    E { tag: Single(BLOCK_MOUNTING_POSITION), alias: "BlockMountingPosition", vr: CS }, // DICOM
    E { tag: Single(BLOCK_NUMBER), alias: "BlockNumber", vr: IS }, // DICOM
    E { tag: Single(BLOCK_NAME), alias: "BlockName", vr: LO }, // DICOM
    E { tag: Single(BLOCK_THICKNESS), alias: "BlockThickness", vr: DS }, // DICOM
    E { tag: Single(BLOCK_TRANSMISSION), alias: "BlockTransmission", vr: DS }, // DICOM
    E { tag: Single(BLOCK_NUMBER_OF_POINTS), alias: "BlockNumberOfPoints", vr: IS }, // DICOM
    E { tag: Single(BLOCK_DATA), alias: "BlockData", vr: DS }, // DICOM
    E { tag: Single(APPLICATOR_SEQUENCE), alias: "ApplicatorSequence", vr: SQ }, // DICOM
    E { tag: Single(APPLICATOR_ID), alias: "ApplicatorID", vr: SH }, // DICOM
    E { tag: Single(APPLICATOR_TYPE), alias: "ApplicatorType", vr: CS }, // DICOM
    E { tag: Single(APPLICATOR_DESCRIPTION), alias: "ApplicatorDescription", vr: LO }, // DICOM
    E { tag: Single(CUMULATIVE_DOSE_REFERENCE_COEFFICIENT), alias: "CumulativeDoseReferenceCoefficient", vr: DS }, // DICOM
    E { tag: Single(FINAL_CUMULATIVE_METERSET_WEIGHT), alias: "FinalCumulativeMetersetWeight", vr: DS }, // DICOM
    E { tag: Single(NUMBER_OF_CONTROL_POINTS), alias: "NumberOfControlPoints", vr: IS }, // DICOM
    E { tag: Single(CONTROL_POINT_SEQUENCE), alias: "ControlPointSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTROL_POINT_INDEX), alias: "ControlPointIndex", vr: IS }, // DICOM
    E { tag: Single(NOMINAL_BEAM_ENERGY), alias: "NominalBeamEnergy", vr: DS }, // DICOM
    E { tag: Single(DOSE_RATE_SET), alias: "DoseRateSet", vr: DS }, // DICOM
    E { tag: Single(WEDGE_POSITION_SEQUENCE), alias: "WedgePositionSequence", vr: SQ }, // DICOM
    E { tag: Single(WEDGE_POSITION), alias: "WedgePosition", vr: CS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_POSITION_SEQUENCE), alias: "BeamLimitingDevicePositionSequence", vr: SQ }, // DICOM
    E { tag: Single(LEAF_JAW_POSITIONS), alias: "LeafJawPositions", vr: DS }, // DICOM
    E { tag: Single(GANTRY_ANGLE), alias: "GantryAngle", vr: DS }, // DICOM
    E { tag: Single(GANTRY_ROTATION_DIRECTION), alias: "GantryRotationDirection", vr: CS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_ANGLE), alias: "BeamLimitingDeviceAngle", vr: DS }, // DICOM
    E { tag: Single(BEAM_LIMITING_DEVICE_ROTATION_DIRECTION), alias: "BeamLimitingDeviceRotationDirection", vr: CS }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_ANGLE), alias: "PatientSupportAngle", vr: DS }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_ROTATION_DIRECTION), alias: "PatientSupportRotationDirection", vr: CS }, // DICOM
    E { tag: Single(TABLE_TOP_ECCENTRIC_AXIS_DISTANCE), alias: "TableTopEccentricAxisDistance", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_ECCENTRIC_ANGLE), alias: "TableTopEccentricAngle", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION), alias: "TableTopEccentricRotationDirection", vr: CS }, // DICOM
    E { tag: Single(TABLE_TOP_VERTICAL_POSITION), alias: "TableTopVerticalPosition", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_LONGITUDINAL_POSITION), alias: "TableTopLongitudinalPosition", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_LATERAL_POSITION), alias: "TableTopLateralPosition", vr: DS }, // DICOM
    E { tag: Single(ISOCENTER_POSITION), alias: "IsocenterPosition", vr: DS }, // DICOM
    E { tag: Single(SURFACE_ENTRY_POINT), alias: "SurfaceEntryPoint", vr: DS }, // DICOM
    E { tag: Single(SOURCE_TO_SURFACE_DISTANCE), alias: "SourceToSurfaceDistance", vr: DS }, // DICOM
    E { tag: Single(AVERAGE_BEAM_DOSE_POINT_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE), alias: "AverageBeamDosePointSourceToExternalContourDistance", vr: FL }, // DICOM
    E { tag: Single(SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE), alias: "SourceToExternalContourDistance", vr: FL }, // DICOM
    E { tag: Single(EXTERNAL_CONTOUR_ENTRY_POINT), alias: "ExternalContourEntryPoint", vr: FL }, // DICOM
    E { tag: Single(CUMULATIVE_METERSET_WEIGHT), alias: "CumulativeMetersetWeight", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_PITCH_ANGLE), alias: "TableTopPitchAngle", vr: FL }, // DICOM
    E { tag: Single(TABLE_TOP_PITCH_ROTATION_DIRECTION), alias: "TableTopPitchRotationDirection", vr: CS }, // DICOM
    E { tag: Single(TABLE_TOP_ROLL_ANGLE), alias: "TableTopRollAngle", vr: FL }, // DICOM
    E { tag: Single(TABLE_TOP_ROLL_ROTATION_DIRECTION), alias: "TableTopRollRotationDirection", vr: CS }, // DICOM
    E { tag: Single(HEAD_FIXATION_ANGLE), alias: "HeadFixationAngle", vr: FL }, // DICOM
    E { tag: Single(GANTRY_PITCH_ANGLE), alias: "GantryPitchAngle", vr: FL }, // DICOM
    E { tag: Single(GANTRY_PITCH_ROTATION_DIRECTION), alias: "GantryPitchRotationDirection", vr: CS }, // DICOM
    E { tag: Single(GANTRY_PITCH_ANGLE_TOLERANCE), alias: "GantryPitchAngleTolerance", vr: FL }, // DICOM
    E { tag: Single(FIXATION_EYE), alias: "FixationEye", vr: CS }, // DICOM
    E { tag: Single(CHAIR_HEAD_FRAME_POSITION), alias: "ChairHeadFramePosition", vr: DS }, // DICOM
    E { tag: Single(HEAD_FIXATION_ANGLE_TOLERANCE), alias: "HeadFixationAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(CHAIR_HEAD_FRAME_POSITION_TOLERANCE), alias: "ChairHeadFramePositionTolerance", vr: DS }, // DICOM
    E { tag: Single(FIXATION_LIGHT_AZIMUTHAL_ANGLE_TOLERANCE), alias: "FixationLightAzimuthalAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(FIXATION_LIGHT_POLAR_ANGLE_TOLERANCE), alias: "FixationLightPolarAngleTolerance", vr: DS }, // DICOM
    E { tag: Single(PATIENT_SETUP_SEQUENCE), alias: "PatientSetupSequence", vr: SQ }, // DICOM
    E { tag: Single(PATIENT_SETUP_NUMBER), alias: "PatientSetupNumber", vr: IS }, // DICOM
    E { tag: Single(PATIENT_SETUP_LABEL), alias: "PatientSetupLabel", vr: LO }, // DICOM
    E { tag: Single(PATIENT_ADDITIONAL_POSITION), alias: "PatientAdditionalPosition", vr: LO }, // DICOM
    E { tag: Single(FIXATION_DEVICE_SEQUENCE), alias: "FixationDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(FIXATION_DEVICE_TYPE), alias: "FixationDeviceType", vr: CS }, // DICOM
    E { tag: Single(FIXATION_DEVICE_LABEL), alias: "FixationDeviceLabel", vr: SH }, // DICOM
    E { tag: Single(FIXATION_DEVICE_DESCRIPTION), alias: "FixationDeviceDescription", vr: ST }, // DICOM
    E { tag: Single(FIXATION_DEVICE_POSITION), alias: "FixationDevicePosition", vr: SH }, // DICOM
    E { tag: Single(FIXATION_DEVICE_PITCH_ANGLE), alias: "FixationDevicePitchAngle", vr: FL }, // DICOM
    E { tag: Single(FIXATION_DEVICE_ROLL_ANGLE), alias: "FixationDeviceRollAngle", vr: FL }, // DICOM
    E { tag: Single(SHIELDING_DEVICE_SEQUENCE), alias: "ShieldingDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(SHIELDING_DEVICE_TYPE), alias: "ShieldingDeviceType", vr: CS }, // DICOM
    E { tag: Single(SHIELDING_DEVICE_LABEL), alias: "ShieldingDeviceLabel", vr: SH }, // DICOM
    E { tag: Single(SHIELDING_DEVICE_DESCRIPTION), alias: "ShieldingDeviceDescription", vr: ST }, // DICOM
    E { tag: Single(SHIELDING_DEVICE_POSITION), alias: "ShieldingDevicePosition", vr: SH }, // DICOM
    E { tag: Single(SETUP_TECHNIQUE), alias: "SetupTechnique", vr: CS }, // DICOM
    E { tag: Single(SETUP_TECHNIQUE_DESCRIPTION), alias: "SetupTechniqueDescription", vr: ST }, // DICOM
    E { tag: Single(SETUP_DEVICE_SEQUENCE), alias: "SetupDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(SETUP_DEVICE_TYPE), alias: "SetupDeviceType", vr: CS }, // DICOM
    E { tag: Single(SETUP_DEVICE_LABEL), alias: "SetupDeviceLabel", vr: SH }, // DICOM
    E { tag: Single(SETUP_DEVICE_DESCRIPTION), alias: "SetupDeviceDescription", vr: ST }, // DICOM
    E { tag: Single(SETUP_DEVICE_PARAMETER), alias: "SetupDeviceParameter", vr: DS }, // DICOM
    E { tag: Single(SETUP_REFERENCE_DESCRIPTION), alias: "SetupReferenceDescription", vr: ST }, // DICOM
    E { tag: Single(TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT), alias: "TableTopVerticalSetupDisplacement", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT), alias: "TableTopLongitudinalSetupDisplacement", vr: DS }, // DICOM
    E { tag: Single(TABLE_TOP_LATERAL_SETUP_DISPLACEMENT), alias: "TableTopLateralSetupDisplacement", vr: DS }, // DICOM
    E { tag: Single(BRACHY_TREATMENT_TECHNIQUE), alias: "BrachyTreatmentTechnique", vr: CS }, // DICOM
    E { tag: Single(BRACHY_TREATMENT_TYPE), alias: "BrachyTreatmentType", vr: CS }, // DICOM
    E { tag: Single(TREATMENT_MACHINE_SEQUENCE), alias: "TreatmentMachineSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_SEQUENCE), alias: "SourceSequence", vr: SQ }, // DICOM
    E { tag: Single(SOURCE_NUMBER), alias: "SourceNumber", vr: IS }, // DICOM
    E { tag: Single(SOURCE_TYPE), alias: "SourceType", vr: CS }, // DICOM
    E { tag: Single(SOURCE_MANUFACTURER), alias: "SourceManufacturer", vr: LO }, // DICOM
    E { tag: Single(ACTIVE_SOURCE_DIAMETER), alias: "ActiveSourceDiameter", vr: DS }, // DICOM
    E { tag: Single(ACTIVE_SOURCE_LENGTH), alias: "ActiveSourceLength", vr: DS }, // DICOM
    E { tag: Single(SOURCE_MODEL_ID), alias: "SourceModelID", vr: SH }, // DICOM
    E { tag: Single(SOURCE_DESCRIPTION), alias: "SourceDescription", vr: LO }, // DICOM
    E { tag: Single(SOURCE_ENCAPSULATION_NOMINAL_THICKNESS), alias: "SourceEncapsulationNominalThickness", vr: DS }, // DICOM
    E { tag: Single(SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION), alias: "SourceEncapsulationNominalTransmission", vr: DS }, // DICOM
    E { tag: Single(SOURCE_ISOTOPE_NAME), alias: "SourceIsotopeName", vr: LO }, // DICOM
    E { tag: Single(SOURCE_ISOTOPE_HALF_LIFE), alias: "SourceIsotopeHalfLife", vr: DS }, // DICOM
    E { tag: Single(SOURCE_STRENGTH_UNITS), alias: "SourceStrengthUnits", vr: CS }, // DICOM
    E { tag: Single(REFERENCE_AIR_KERMA_RATE), alias: "ReferenceAirKermaRate", vr: DS }, // DICOM
    E { tag: Single(SOURCE_STRENGTH), alias: "SourceStrength", vr: DS }, // DICOM
    E { tag: Single(SOURCE_STRENGTH_REFERENCE_DATE), alias: "SourceStrengthReferenceDate", vr: DA }, // DICOM
    E { tag: Single(SOURCE_STRENGTH_REFERENCE_TIME), alias: "SourceStrengthReferenceTime", vr: TM }, // DICOM
    E { tag: Single(APPLICATION_SETUP_SEQUENCE), alias: "ApplicationSetupSequence", vr: SQ }, // DICOM
    E { tag: Single(APPLICATION_SETUP_TYPE), alias: "ApplicationSetupType", vr: CS }, // DICOM
    E { tag: Single(APPLICATION_SETUP_NUMBER), alias: "ApplicationSetupNumber", vr: IS }, // DICOM
    E { tag: Single(APPLICATION_SETUP_NAME), alias: "ApplicationSetupName", vr: LO }, // DICOM
    E { tag: Single(APPLICATION_SETUP_MANUFACTURER), alias: "ApplicationSetupManufacturer", vr: LO }, // DICOM
    E { tag: Single(TEMPLATE_NUMBER), alias: "TemplateNumber", vr: IS }, // DICOM
    E { tag: Single(TEMPLATE_TYPE), alias: "TemplateType", vr: SH }, // DICOM
    E { tag: Single(TEMPLATE_NAME), alias: "TemplateName", vr: LO }, // DICOM
    E { tag: Single(TOTAL_REFERENCE_AIR_KERMA), alias: "TotalReferenceAirKerma", vr: DS }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_SEQUENCE), alias: "BrachyAccessoryDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_NUMBER), alias: "BrachyAccessoryDeviceNumber", vr: IS }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_ID), alias: "BrachyAccessoryDeviceID", vr: SH }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_TYPE), alias: "BrachyAccessoryDeviceType", vr: CS }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_NAME), alias: "BrachyAccessoryDeviceName", vr: LO }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS), alias: "BrachyAccessoryDeviceNominalThickness", vr: DS }, // DICOM
    E { tag: Single(BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION), alias: "BrachyAccessoryDeviceNominalTransmission", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_EFFECTIVE_LENGTH), alias: "ChannelEffectiveLength", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_INNER_LENGTH), alias: "ChannelInnerLength", vr: DS }, // DICOM
    E { tag: Single(AFTERLOADER_CHANNEL_ID), alias: "AfterloaderChannelID", vr: SH }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_TIP_LENGTH), alias: "SourceApplicatorTipLength", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_SEQUENCE), alias: "ChannelSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_NUMBER), alias: "ChannelNumber", vr: IS }, // DICOM
    E { tag: Single(CHANNEL_LENGTH), alias: "ChannelLength", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_TOTAL_TIME), alias: "ChannelTotalTime", vr: DS }, // DICOM
    E { tag: Single(SOURCE_MOVEMENT_TYPE), alias: "SourceMovementType", vr: CS }, // DICOM
    E { tag: Single(NUMBER_OF_PULSES), alias: "NumberOfPulses", vr: IS }, // DICOM
    E { tag: Single(PULSE_REPETITION_INTERVAL), alias: "PulseRepetitionInterval", vr: DS }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_NUMBER), alias: "SourceApplicatorNumber", vr: IS }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_ID), alias: "SourceApplicatorID", vr: SH }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_TYPE), alias: "SourceApplicatorType", vr: CS }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_NAME), alias: "SourceApplicatorName", vr: LO }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_LENGTH), alias: "SourceApplicatorLength", vr: DS }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_MANUFACTURER), alias: "SourceApplicatorManufacturer", vr: LO }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS), alias: "SourceApplicatorWallNominalThickness", vr: DS }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION), alias: "SourceApplicatorWallNominalTransmission", vr: DS }, // DICOM
    E { tag: Single(SOURCE_APPLICATOR_STEP_SIZE), alias: "SourceApplicatorStepSize", vr: DS }, // DICOM
    E { tag: Single(TRANSFER_TUBE_NUMBER), alias: "TransferTubeNumber", vr: IS }, // DICOM
    E { tag: Single(TRANSFER_TUBE_LENGTH), alias: "TransferTubeLength", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_SHIELD_SEQUENCE), alias: "ChannelShieldSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_SHIELD_NUMBER), alias: "ChannelShieldNumber", vr: IS }, // DICOM
    E { tag: Single(CHANNEL_SHIELD_ID), alias: "ChannelShieldID", vr: SH }, // DICOM
    E { tag: Single(CHANNEL_SHIELD_NAME), alias: "ChannelShieldName", vr: LO }, // DICOM
    E { tag: Single(CHANNEL_SHIELD_NOMINAL_THICKNESS), alias: "ChannelShieldNominalThickness", vr: DS }, // DICOM
    E { tag: Single(CHANNEL_SHIELD_NOMINAL_TRANSMISSION), alias: "ChannelShieldNominalTransmission", vr: DS }, // DICOM
    E { tag: Single(FINAL_CUMULATIVE_TIME_WEIGHT), alias: "FinalCumulativeTimeWeight", vr: DS }, // DICOM
    E { tag: Single(BRACHY_CONTROL_POINT_SEQUENCE), alias: "BrachyControlPointSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTROL_POINT_RELATIVE_POSITION), alias: "ControlPointRelativePosition", vr: DS }, // DICOM
    E { tag: Single(CONTROL_POINT3_D_POSITION), alias: "ControlPoint3DPosition", vr: DS }, // DICOM
    E { tag: Single(CUMULATIVE_TIME_WEIGHT), alias: "CumulativeTimeWeight", vr: DS }, // DICOM
    E { tag: Single(COMPENSATOR_DIVERGENCE), alias: "CompensatorDivergence", vr: CS }, // DICOM
    E { tag: Single(COMPENSATOR_MOUNTING_POSITION), alias: "CompensatorMountingPosition", vr: CS }, // DICOM
    E { tag: Single(SOURCE_TO_COMPENSATOR_DISTANCE), alias: "SourceToCompensatorDistance", vr: DS }, // DICOM
    E { tag: Single(TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS), alias: "TotalCompensatorTrayWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE), alias: "IsocenterToCompensatorTrayDistance", vr: FL }, // DICOM
    E { tag: Single(COMPENSATOR_COLUMN_OFFSET), alias: "CompensatorColumnOffset", vr: FL }, // DICOM
    E { tag: Single(ISOCENTER_TO_COMPENSATOR_DISTANCES), alias: "IsocenterToCompensatorDistances", vr: FL }, // DICOM
    E { tag: Single(COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO), alias: "CompensatorRelativeStoppingPowerRatio", vr: FL }, // DICOM
    E { tag: Single(COMPENSATOR_MILLING_TOOL_DIAMETER), alias: "CompensatorMillingToolDiameter", vr: FL }, // DICOM
    E { tag: Single(ION_RANGE_COMPENSATOR_SEQUENCE), alias: "IonRangeCompensatorSequence", vr: SQ }, // DICOM
    E { tag: Single(COMPENSATOR_DESCRIPTION), alias: "CompensatorDescription", vr: LT }, // DICOM
    E { tag: Single(RADIATION_MASS_NUMBER), alias: "RadiationMassNumber", vr: IS }, // DICOM
    E { tag: Single(RADIATION_ATOMIC_NUMBER), alias: "RadiationAtomicNumber", vr: IS }, // DICOM
    E { tag: Single(RADIATION_CHARGE_STATE), alias: "RadiationChargeState", vr: SS }, // DICOM
    E { tag: Single(SCAN_MODE), alias: "ScanMode", vr: CS }, // DICOM
    E { tag: Single(MODULATED_SCAN_MODE_TYPE), alias: "ModulatedScanModeType", vr: CS }, // DICOM
    E { tag: Single(VIRTUAL_SOURCE_AXIS_DISTANCES), alias: "VirtualSourceAxisDistances", vr: FL }, // DICOM
    E { tag: Single(SNOUT_SEQUENCE), alias: "SnoutSequence", vr: SQ }, // DICOM
    E { tag: Single(SNOUT_POSITION), alias: "SnoutPosition", vr: FL }, // DICOM
    E { tag: Single(SNOUT_ID), alias: "SnoutID", vr: SH }, // DICOM
    E { tag: Single(NUMBER_OF_RANGE_SHIFTERS), alias: "NumberOfRangeShifters", vr: IS }, // DICOM
    E { tag: Single(RANGE_SHIFTER_SEQUENCE), alias: "RangeShifterSequence", vr: SQ }, // DICOM
    E { tag: Single(RANGE_SHIFTER_NUMBER), alias: "RangeShifterNumber", vr: IS }, // DICOM
    E { tag: Single(RANGE_SHIFTER_ID), alias: "RangeShifterID", vr: SH }, // DICOM
    E { tag: Single(RANGE_SHIFTER_TYPE), alias: "RangeShifterType", vr: CS }, // DICOM
    E { tag: Single(RANGE_SHIFTER_DESCRIPTION), alias: "RangeShifterDescription", vr: LO }, // DICOM
    E { tag: Single(NUMBER_OF_LATERAL_SPREADING_DEVICES), alias: "NumberOfLateralSpreadingDevices", vr: IS }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_SEQUENCE), alias: "LateralSpreadingDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_NUMBER), alias: "LateralSpreadingDeviceNumber", vr: IS }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_ID), alias: "LateralSpreadingDeviceID", vr: SH }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_TYPE), alias: "LateralSpreadingDeviceType", vr: CS }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_DESCRIPTION), alias: "LateralSpreadingDeviceDescription", vr: LO }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS), alias: "LateralSpreadingDeviceWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_RANGE_MODULATORS), alias: "NumberOfRangeModulators", vr: IS }, // DICOM
    E { tag: Single(RANGE_MODULATOR_SEQUENCE), alias: "RangeModulatorSequence", vr: SQ }, // DICOM
    E { tag: Single(RANGE_MODULATOR_NUMBER), alias: "RangeModulatorNumber", vr: IS }, // DICOM
    E { tag: Single(RANGE_MODULATOR_ID), alias: "RangeModulatorID", vr: SH }, // DICOM
    E { tag: Single(RANGE_MODULATOR_TYPE), alias: "RangeModulatorType", vr: CS }, // DICOM
    E { tag: Single(RANGE_MODULATOR_DESCRIPTION), alias: "RangeModulatorDescription", vr: LO }, // DICOM
    E { tag: Single(BEAM_CURRENT_MODULATION_ID), alias: "BeamCurrentModulationID", vr: SH }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_TYPE), alias: "PatientSupportType", vr: CS }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_ID), alias: "PatientSupportID", vr: SH }, // DICOM
    E { tag: Single(PATIENT_SUPPORT_ACCESSORY_CODE), alias: "PatientSupportAccessoryCode", vr: LO }, // DICOM
    E { tag: Single(TRAY_ACCESSORY_CODE), alias: "TrayAccessoryCode", vr: LO }, // DICOM
    E { tag: Single(FIXATION_LIGHT_AZIMUTHAL_ANGLE), alias: "FixationLightAzimuthalAngle", vr: FL }, // DICOM
    E { tag: Single(FIXATION_LIGHT_POLAR_ANGLE), alias: "FixationLightPolarAngle", vr: FL }, // DICOM
    E { tag: Single(METERSET_RATE), alias: "MetersetRate", vr: FL }, // DICOM
    E { tag: Single(RANGE_SHIFTER_SETTINGS_SEQUENCE), alias: "RangeShifterSettingsSequence", vr: SQ }, // DICOM
    E { tag: Single(RANGE_SHIFTER_SETTING), alias: "RangeShifterSetting", vr: LO }, // DICOM
    E { tag: Single(ISOCENTER_TO_RANGE_SHIFTER_DISTANCE), alias: "IsocenterToRangeShifterDistance", vr: FL }, // DICOM
    E { tag: Single(RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS), alias: "RangeShifterWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE), alias: "LateralSpreadingDeviceSettingsSequence", vr: SQ }, // DICOM
    E { tag: Single(LATERAL_SPREADING_DEVICE_SETTING), alias: "LateralSpreadingDeviceSetting", vr: LO }, // DICOM
    E { tag: Single(ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE), alias: "IsocenterToLateralSpreadingDeviceDistance", vr: FL }, // DICOM
    E { tag: Single(RANGE_MODULATOR_SETTINGS_SEQUENCE), alias: "RangeModulatorSettingsSequence", vr: SQ }, // DICOM
    E { tag: Single(RANGE_MODULATOR_GATING_START_VALUE), alias: "RangeModulatorGatingStartValue", vr: FL }, // DICOM
    E { tag: Single(RANGE_MODULATOR_GATING_STOP_VALUE), alias: "RangeModulatorGatingStopValue", vr: FL }, // DICOM
    E { tag: Single(RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS), alias: "RangeModulatorGatingStartWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS), alias: "RangeModulatorGatingStopWaterEquivalentThickness", vr: FL }, // DICOM
    E { tag: Single(ISOCENTER_TO_RANGE_MODULATOR_DISTANCE), alias: "IsocenterToRangeModulatorDistance", vr: FL }, // DICOM
    E { tag: Single(SCAN_SPOT_TIME_OFFSET), alias: "ScanSpotTimeOffset", vr: FL }, // DICOM
    E { tag: Single(SCAN_SPOT_TUNE_ID), alias: "ScanSpotTuneID", vr: SH }, // DICOM
    E { tag: Single(SCAN_SPOT_PRESCRIBED_INDICES), alias: "ScanSpotPrescribedIndices", vr: IS }, // DICOM
    E { tag: Single(NUMBER_OF_SCAN_SPOT_POSITIONS), alias: "NumberOfScanSpotPositions", vr: IS }, // DICOM
    E { tag: Single(SCAN_SPOT_REORDERED), alias: "ScanSpotReordered", vr: CS }, // DICOM
    E { tag: Single(SCAN_SPOT_POSITION_MAP), alias: "ScanSpotPositionMap", vr: FL }, // DICOM
    E { tag: Single(SCAN_SPOT_REORDERING_ALLOWED), alias: "ScanSpotReorderingAllowed", vr: CS }, // DICOM
    E { tag: Single(SCAN_SPOT_METERSET_WEIGHTS), alias: "ScanSpotMetersetWeights", vr: FL }, // DICOM
    E { tag: Single(SCANNING_SPOT_SIZE), alias: "ScanningSpotSize", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_PAINTINGS), alias: "NumberOfPaintings", vr: IS }, // DICOM
    E { tag: Single(ION_TOLERANCE_TABLE_SEQUENCE), alias: "IonToleranceTableSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_BEAM_SEQUENCE), alias: "IonBeamSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_BEAM_LIMITING_DEVICE_SEQUENCE), alias: "IonBeamLimitingDeviceSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_BLOCK_SEQUENCE), alias: "IonBlockSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_CONTROL_POINT_SEQUENCE), alias: "IonControlPointSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_WEDGE_SEQUENCE), alias: "IonWedgeSequence", vr: SQ }, // DICOM
    E { tag: Single(ION_WEDGE_POSITION_SEQUENCE), alias: "IonWedgePositionSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_SETUP_IMAGE_SEQUENCE), alias: "ReferencedSetupImageSequence", vr: SQ }, // DICOM
    E { tag: Single(SETUP_IMAGE_COMMENT), alias: "SetupImageComment", vr: ST }, // DICOM
    E { tag: Single(MOTION_SYNCHRONIZATION_SEQUENCE), alias: "MotionSynchronizationSequence", vr: SQ }, // DICOM
    E { tag: Single(CONTROL_POINT_ORIENTATION), alias: "ControlPointOrientation", vr: FL }, // DICOM
    E { tag: Single(GENERAL_ACCESSORY_SEQUENCE), alias: "GeneralAccessorySequence", vr: SQ }, // DICOM
    E { tag: Single(GENERAL_ACCESSORY_ID), alias: "GeneralAccessoryID", vr: SH }, // DICOM
    E { tag: Single(GENERAL_ACCESSORY_DESCRIPTION), alias: "GeneralAccessoryDescription", vr: ST }, // DICOM
    E { tag: Single(GENERAL_ACCESSORY_TYPE), alias: "GeneralAccessoryType", vr: CS }, // DICOM
    E { tag: Single(GENERAL_ACCESSORY_NUMBER), alias: "GeneralAccessoryNumber", vr: IS }, // DICOM
    E { tag: Single(SOURCE_TO_GENERAL_ACCESSORY_DISTANCE), alias: "SourceToGeneralAccessoryDistance", vr: FL }, // DICOM
    E { tag: Single(APPLICATOR_GEOMETRY_SEQUENCE), alias: "ApplicatorGeometrySequence", vr: SQ }, // DICOM
    E { tag: Single(APPLICATOR_APERTURE_SHAPE), alias: "ApplicatorApertureShape", vr: CS }, // DICOM
    E { tag: Single(APPLICATOR_OPENING), alias: "ApplicatorOpening", vr: FL }, // DICOM
    E { tag: Single(APPLICATOR_OPENING_X), alias: "ApplicatorOpeningX", vr: FL }, // DICOM
    E { tag: Single(APPLICATOR_OPENING_Y), alias: "ApplicatorOpeningY", vr: FL }, // DICOM
    E { tag: Single(SOURCE_TO_APPLICATOR_MOUNTING_POSITION_DISTANCE), alias: "SourceToApplicatorMountingPositionDistance", vr: FL }, // DICOM
    E { tag: Single(NUMBER_OF_BLOCK_SLAB_ITEMS), alias: "NumberOfBlockSlabItems", vr: IS }, // DICOM
    E { tag: Single(BLOCK_SLAB_SEQUENCE), alias: "BlockSlabSequence", vr: SQ }, // DICOM
    E { tag: Single(BLOCK_SLAB_THICKNESS), alias: "BlockSlabThickness", vr: DS }, // DICOM
    E { tag: Single(BLOCK_SLAB_NUMBER), alias: "BlockSlabNumber", vr: US }, // DICOM
    E { tag: Single(DEVICE_MOTION_CONTROL_SEQUENCE), alias: "DeviceMotionControlSequence", vr: SQ }, // DICOM
    E { tag: Single(DEVICE_MOTION_EXECUTION_MODE), alias: "DeviceMotionExecutionMode", vr: CS }, // DICOM
    E { tag: Single(DEVICE_MOTION_OBSERVATION_MODE), alias: "DeviceMotionObservationMode", vr: CS }, // DICOM
    E { tag: Single(DEVICE_MOTION_PARAMETER_CODE_SEQUENCE), alias: "DeviceMotionParameterCodeSequence", vr: SQ }, // DICOM
    E { tag: Single(DISTAL_DEPTH_FRACTION), alias: "DistalDepthFraction", vr: FL }, // DICOM
    E { tag: Single(DISTAL_DEPTH), alias: "DistalDepth", vr: FL }, // DICOM
    E { tag: Single(NOMINAL_RANGE_MODULATION_FRACTIONS), alias: "NominalRangeModulationFractions", vr: FL }, // DICOM
    E { tag: Single(NOMINAL_RANGE_MODULATED_REGION_DEPTHS), alias: "NominalRangeModulatedRegionDepths", vr: FL }, // DICOM
    E { tag: Single(DEPTH_DOSE_PARAMETERS_SEQUENCE), alias: "DepthDoseParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(DELIVERED_DEPTH_DOSE_PARAMETERS_SEQUENCE), alias: "DeliveredDepthDoseParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(DELIVERED_DISTAL_DEPTH_FRACTION), alias: "DeliveredDistalDepthFraction", vr: FL }, // DICOM
    E { tag: Single(DELIVERED_DISTAL_DEPTH), alias: "DeliveredDistalDepth", vr: FL }, // DICOM
    E { tag: Single(DELIVERED_NOMINAL_RANGE_MODULATION_FRACTIONS), alias: "DeliveredNominalRangeModulationFractions", vr: FL }, // DICOM
    E { tag: Single(DELIVERED_NOMINAL_RANGE_MODULATED_REGION_DEPTHS), alias: "DeliveredNominalRangeModulatedRegionDepths", vr: FL }, // DICOM
    E { tag: Single(DELIVERED_REFERENCE_DOSE_DEFINITION), alias: "DeliveredReferenceDoseDefinition", vr: CS }, // DICOM
    E { tag: Single(REFERENCE_DOSE_DEFINITION), alias: "ReferenceDoseDefinition", vr: CS }, // DICOM
    E { tag: Single(REFERENCED_RT_PLAN_SEQUENCE), alias: "ReferencedRTPlanSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_BEAM_SEQUENCE), alias: "ReferencedBeamSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_BEAM_NUMBER), alias: "ReferencedBeamNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_REFERENCE_IMAGE_NUMBER), alias: "ReferencedReferenceImageNumber", vr: IS }, // DICOM
    E { tag: Single(START_CUMULATIVE_METERSET_WEIGHT), alias: "StartCumulativeMetersetWeight", vr: DS }, // DICOM
    E { tag: Single(END_CUMULATIVE_METERSET_WEIGHT), alias: "EndCumulativeMetersetWeight", vr: DS }, // DICOM
    E { tag: Single(REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE), alias: "ReferencedBrachyApplicationSetupSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER), alias: "ReferencedBrachyApplicationSetupNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_SOURCE_NUMBER), alias: "ReferencedSourceNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_FRACTION_GROUP_SEQUENCE), alias: "ReferencedFractionGroupSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_FRACTION_GROUP_NUMBER), alias: "ReferencedFractionGroupNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_VERIFICATION_IMAGE_SEQUENCE), alias: "ReferencedVerificationImageSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_REFERENCE_IMAGE_SEQUENCE), alias: "ReferencedReferenceImageSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_DOSE_REFERENCE_SEQUENCE), alias: "ReferencedDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_DOSE_REFERENCE_NUMBER), alias: "ReferencedDoseReferenceNumber", vr: IS }, // DICOM
    E { tag: Single(BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE), alias: "BrachyReferencedDoseReferenceSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_STRUCTURE_SET_SEQUENCE), alias: "ReferencedStructureSetSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_PATIENT_SETUP_NUMBER), alias: "ReferencedPatientSetupNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_DOSE_SEQUENCE), alias: "ReferencedDoseSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_TOLERANCE_TABLE_NUMBER), alias: "ReferencedToleranceTableNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_BOLUS_SEQUENCE), alias: "ReferencedBolusSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_WEDGE_NUMBER), alias: "ReferencedWedgeNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_COMPENSATOR_NUMBER), alias: "ReferencedCompensatorNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_BLOCK_NUMBER), alias: "ReferencedBlockNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_CONTROL_POINT_INDEX), alias: "ReferencedControlPointIndex", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_CONTROL_POINT_SEQUENCE), alias: "ReferencedControlPointSequence", vr: SQ }, // DICOM
    E { tag: Single(REFERENCED_START_CONTROL_POINT_INDEX), alias: "ReferencedStartControlPointIndex", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_STOP_CONTROL_POINT_INDEX), alias: "ReferencedStopControlPointIndex", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_RANGE_SHIFTER_NUMBER), alias: "ReferencedRangeShifterNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER), alias: "ReferencedLateralSpreadingDeviceNumber", vr: IS }, // DICOM
    E { tag: Single(REFERENCED_RANGE_MODULATOR_NUMBER), alias: "ReferencedRangeModulatorNumber", vr: IS }, // DICOM
    E { tag: Single(OMITTED_BEAM_TASK_SEQUENCE), alias: "OmittedBeamTaskSequence", vr: SQ }, // DICOM
    E { tag: Single(REASON_FOR_OMISSION), alias: "ReasonForOmission", vr: CS }, // DICOM
    E { tag: Single(REASON_FOR_OMISSION_DESCRIPTION), alias: "ReasonForOmissionDescription", vr: LO }, // DICOM
    E { tag: Single(APPROVAL_STATUS), alias: "ApprovalStatus", vr: CS }, // DICOM
    E { tag: Single(REVIEW_DATE), alias: "ReviewDate", vr: DA }, // DICOM
    E { tag: Single(REVIEW_TIME), alias: "ReviewTime", vr: TM }, // DICOM
    E { tag: Single(REVIEWER_NAME), alias: "ReviewerName", vr: PN }, // DICOM
    E { tag: Single(LOW_ENERGY_DETECTORS), alias: "LowEnergyDetectors", vr: CS }, // DICOM/DICOS
    E { tag: Single(HIGH_ENERGY_DETECTORS), alias: "HighEnergyDetectors", vr: CS }, // DICOM/DICOS
    E { tag: Single(DETECTOR_GEOMETRY_SEQUENCE), alias: "DetectorGeometrySequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(THREAT_ROI_VOXEL_SEQUENCE), alias: "ThreatROIVoxelSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(THREAT_ROI_BASE), alias: "ThreatROIBase", vr: FL }, // DICOM/DICOS
    E { tag: Single(THREAT_ROI_EXTENTS), alias: "ThreatROIExtents", vr: FL }, // DICOM/DICOS
    E { tag: Single(THREAT_ROI_BITMAP), alias: "ThreatROIBitmap", vr: OB }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_ID), alias: "RouteSegmentID", vr: SH }, // DICOM/DICOS
    E { tag: Single(GANTRY_TYPE), alias: "GantryType", vr: CS }, // DICOM/DICOS
    E { tag: Single(OOI_OWNER_TYPE), alias: "OOIOwnerType", vr: CS }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_SEQUENCE), alias: "RouteSegmentSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(POTENTIAL_THREAT_OBJECT_ID), alias: "PotentialThreatObjectID", vr: US }, // DICOM/DICOS
    E { tag: Single(THREAT_SEQUENCE), alias: "ThreatSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(THREAT_CATEGORY), alias: "ThreatCategory", vr: CS }, // DICOM/DICOS
    E { tag: Single(THREAT_CATEGORY_DESCRIPTION), alias: "ThreatCategoryDescription", vr: LT }, // DICOM/DICOS
    E { tag: Single(ATD_ABILITY_ASSESSMENT), alias: "ATDAbilityAssessment", vr: CS }, // DICOM/DICOS
    E { tag: Single(ATD_ASSESSMENT_FLAG), alias: "ATDAssessmentFlag", vr: CS }, // DICOM/DICOS
    E { tag: Single(ATD_ASSESSMENT_PROBABILITY), alias: "ATDAssessmentProbability", vr: FL }, // DICOM/DICOS
    E { tag: Single(MASS), alias: "Mass", vr: FL }, // DICOM/DICOS
    E { tag: Single(DENSITY), alias: "Density", vr: FL }, // DICOM/DICOS
    E { tag: Single(Z_EFFECTIVE), alias: "ZEffective", vr: FL }, // DICOM/DICOS
    E { tag: Single(BOARDING_PASS_ID), alias: "BoardingPassID", vr: SH }, // DICOM/DICOS
    E { tag: Single(CENTER_OF_MASS), alias: "CenterOfMass", vr: FL }, // DICOM/DICOS
    E { tag: Single(CENTER_OF_PTO), alias: "CenterOfPTO", vr: FL }, // DICOM/DICOS
    E { tag: Single(BOUNDING_POLYGON), alias: "BoundingPolygon", vr: FL }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_START_LOCATION_ID), alias: "RouteSegmentStartLocationID", vr: SH }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_END_LOCATION_ID), alias: "RouteSegmentEndLocationID", vr: SH }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_LOCATION_ID_TYPE), alias: "RouteSegmentLocationIDType", vr: CS }, // DICOM/DICOS
    E { tag: Single(ABORT_REASON), alias: "AbortReason", vr: CS }, // DICOM/DICOS
    E { tag: Single(VOLUME_OF_PTO), alias: "VolumeOfPTO", vr: FL }, // DICOM/DICOS
    E { tag: Single(ABORT_FLAG), alias: "AbortFlag", vr: CS }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_START_TIME), alias: "RouteSegmentStartTime", vr: DT }, // DICOM/DICOS
    E { tag: Single(ROUTE_SEGMENT_END_TIME), alias: "RouteSegmentEndTime", vr: DT }, // DICOM/DICOS
    E { tag: Single(TDR_TYPE), alias: "TDRType", vr: CS }, // DICOM/DICOS
    E { tag: Single(INTERNATIONAL_ROUTE_SEGMENT), alias: "InternationalRouteSegment", vr: CS }, // DICOM/DICOS
    E { tag: Single(THREAT_DETECTION_ALGORITHMAND_VERSION), alias: "ThreatDetectionAlgorithmandVersion", vr: LO }, // DICOM/DICOS
    E { tag: Single(ASSIGNED_LOCATION), alias: "AssignedLocation", vr: SH }, // DICOM/DICOS
    E { tag: Single(ALARM_DECISION_TIME), alias: "AlarmDecisionTime", vr: DT }, // DICOM/DICOS
    E { tag: Single(ALARM_DECISION), alias: "AlarmDecision", vr: CS }, // DICOM/DICOS
    E { tag: Single(NUMBER_OF_TOTAL_OBJECTS), alias: "NumberOfTotalObjects", vr: US }, // DICOM/DICOS
    E { tag: Single(NUMBER_OF_ALARM_OBJECTS), alias: "NumberOfAlarmObjects", vr: US }, // DICOM/DICOS
    E { tag: Single(PTO_REPRESENTATION_SEQUENCE), alias: "PTORepresentationSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(ATD_ASSESSMENT_SEQUENCE), alias: "ATDAssessmentSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(TIP_TYPE), alias: "TIPType", vr: CS }, // DICOM/DICOS
    E { tag: Single(DICOS_VERSION), alias: "DICOSVersion", vr: CS }, // DICOM/DICOS
    E { tag: Single(OOI_OWNER_CREATION_TIME), alias: "OOIOwnerCreationTime", vr: DT }, // DICOM/DICOS
    E { tag: Single(OOI_TYPE), alias: "OOIType", vr: CS }, // DICOM/DICOS
    E { tag: Single(OOI_SIZE), alias: "OOISize", vr: FL }, // DICOM/DICOS
    E { tag: Single(ACQUISITION_STATUS), alias: "AcquisitionStatus", vr: CS }, // DICOM/DICOS
    E { tag: Single(BASIS_MATERIALS_CODE_SEQUENCE), alias: "BasisMaterialsCodeSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(PHANTOM_TYPE), alias: "PhantomType", vr: CS }, // DICOM/DICOS
    E { tag: Single(OOI_OWNER_SEQUENCE), alias: "OOIOwnerSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(SCAN_TYPE), alias: "ScanType", vr: CS }, // DICOM/DICOS
    E { tag: Single(ITINERARY_ID), alias: "ItineraryID", vr: LO }, // DICOM/DICOS
    E { tag: Single(ITINERARY_ID_TYPE), alias: "ItineraryIDType", vr: SH }, // DICOM/DICOS
    E { tag: Single(ITINERARY_ID_ASSIGNING_AUTHORITY), alias: "ItineraryIDAssigningAuthority", vr: LO }, // DICOM/DICOS
    E { tag: Single(ROUTE_ID), alias: "RouteID", vr: SH }, // DICOM/DICOS
    E { tag: Single(ROUTE_ID_ASSIGNING_AUTHORITY), alias: "RouteIDAssigningAuthority", vr: SH }, // DICOM/DICOS
    E { tag: Single(INBOUND_ARRIVAL_TYPE), alias: "InboundArrivalType", vr: CS }, // DICOM/DICOS
    E { tag: Single(CARRIER_ID), alias: "CarrierID", vr: SH }, // DICOM/DICOS
    E { tag: Single(CARRIER_ID_ASSIGNING_AUTHORITY), alias: "CarrierIDAssigningAuthority", vr: CS }, // DICOM/DICOS
    E { tag: Single(SOURCE_ORIENTATION), alias: "SourceOrientation", vr: FL }, // DICOM/DICOS
    E { tag: Single(SOURCE_POSITION), alias: "SourcePosition", vr: FL }, // DICOM/DICOS
    E { tag: Single(BELT_HEIGHT), alias: "BeltHeight", vr: FL }, // DICOM/DICOS
    E { tag: Single(ALGORITHM_ROUTING_CODE_SEQUENCE), alias: "AlgorithmRoutingCodeSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(TRANSPORT_CLASSIFICATION), alias: "TransportClassification", vr: CS }, // DICOM/DICOS
    E { tag: Single(OOI_TYPE_DESCRIPTOR), alias: "OOITypeDescriptor", vr: LT }, // DICOM/DICOS
    E { tag: Single(TOTAL_PROCESSING_TIME), alias: "TotalProcessingTime", vr: FL }, // DICOM/DICOS
    E { tag: Single(DETECTOR_CALIBRATION_DATA), alias: "DetectorCalibrationData", vr: OB }, // DICOM/DICOS
    E { tag: Single(ADDITIONAL_SCREENING_PERFORMED), alias: "AdditionalScreeningPerformed", vr: CS }, // DICOM/DICOS
    E { tag: Single(ADDITIONAL_INSPECTION_SELECTION_CRITERIA), alias: "AdditionalInspectionSelectionCriteria", vr: CS }, // DICOM/DICOS
    E { tag: Single(ADDITIONAL_INSPECTION_METHOD_SEQUENCE), alias: "AdditionalInspectionMethodSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(AIT_DEVICE_TYPE), alias: "AITDeviceType", vr: CS }, // DICOM/DICOS
    E { tag: Single(QR_MEASUREMENTS_SEQUENCE), alias: "QRMeasurementsSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(TARGET_MATERIAL_SEQUENCE), alias: "TargetMaterialSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(SNR_THRESHOLD), alias: "SNRThreshold", vr: FD }, // DICOM/DICOS
    E { tag: Single(IMAGE_SCALE_REPRESENTATION), alias: "ImageScaleRepresentation", vr: DS }, // DICOM/DICOS
    E { tag: Single(REFERENCED_PTO_SEQUENCE), alias: "ReferencedPTOSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(REFERENCED_TDR_INSTANCE_SEQUENCE), alias: "ReferencedTDRInstanceSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(PTO_LOCATION_DESCRIPTION), alias: "PTOLocationDescription", vr: ST }, // DICOM/DICOS
    E { tag: Single(ANOMALY_LOCATOR_INDICATOR_SEQUENCE), alias: "AnomalyLocatorIndicatorSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(ANOMALY_LOCATOR_INDICATOR), alias: "AnomalyLocatorIndicator", vr: FL }, // DICOM/DICOS
    E { tag: Single(PTO_REGION_SEQUENCE), alias: "PTORegionSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(INSPECTION_SELECTION_CRITERIA), alias: "InspectionSelectionCriteria", vr: CS }, // DICOM/DICOS
    E { tag: Single(SECONDARY_INSPECTION_METHOD_SEQUENCE), alias: "SecondaryInspectionMethodSequence", vr: SQ }, // DICOM/DICOS
    E { tag: Single(PRCS_TO_RCS_ORIENTATION), alias: "PRCSToRCSOrientation", vr: DS }, // DICOM/DICOS
    E { tag: Single(MAC_PARAMETERS_SEQUENCE), alias: "MACParametersSequence", vr: SQ }, // DICOM
    E { tag: Single(SHARED_FUNCTIONAL_GROUPS_SEQUENCE), alias: "SharedFunctionalGroupsSequence", vr: SQ }, // DICOM
    E { tag: Single(PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE), alias: "PerFrameFunctionalGroupsSequence", vr: SQ }, // DICOM
    E { tag: Single(WAVEFORM_SEQUENCE), alias: "WaveformSequence", vr: SQ }, // DICOM
    E { tag: Single(CHANNEL_MINIMUM_VALUE), alias: "ChannelMinimumValue", vr: OB }, // DICOM
    E { tag: Single(CHANNEL_MAXIMUM_VALUE), alias: "ChannelMaximumValue", vr: OB }, // DICOM
    E { tag: Single(WAVEFORM_BITS_ALLOCATED), alias: "WaveformBitsAllocated", vr: US }, // DICOM
    E { tag: Single(WAVEFORM_SAMPLE_INTERPRETATION), alias: "WaveformSampleInterpretation", vr: CS }, // DICOM
    E { tag: Single(WAVEFORM_PADDING_VALUE), alias: "WaveformPaddingValue", vr: OB }, // DICOM
    E { tag: Single(WAVEFORM_DATA), alias: "WaveformData", vr: OB }, // DICOM
    E { tag: Single(FIRST_ORDER_PHASE_CORRECTION_ANGLE), alias: "FirstOrderPhaseCorrectionAngle", vr: OF }, // DICOM
    E { tag: Single(SPECTROSCOPY_DATA), alias: "SpectroscopyData", vr: OF }, // DICOM
    E { tag: OVERLAY_ROWS, alias: "OverlayRows", vr: US }, // DICOM
    E { tag: OVERLAY_COLUMNS, alias: "OverlayColumns", vr: US }, // DICOM
    E { tag: NUMBER_OF_FRAMES_IN_OVERLAY, alias: "NumberOfFramesInOverlay", vr: IS }, // DICOM
    E { tag: OVERLAY_DESCRIPTION, alias: "OverlayDescription", vr: LO }, // DICOM
    E { tag: OVERLAY_TYPE, alias: "OverlayType", vr: CS }, // DICOM
    E { tag: OVERLAY_SUBTYPE, alias: "OverlaySubtype", vr: LO }, // DICOM
    E { tag: OVERLAY_ORIGIN, alias: "OverlayOrigin", vr: SS }, // DICOM
    E { tag: IMAGE_FRAME_ORIGIN, alias: "ImageFrameOrigin", vr: US }, // DICOM
    E { tag: OVERLAY_BITS_ALLOCATED, alias: "OverlayBitsAllocated", vr: US }, // DICOM
    E { tag: OVERLAY_BIT_POSITION, alias: "OverlayBitPosition", vr: US }, // DICOM
    E { tag: OVERLAY_ACTIVATION_LAYER, alias: "OverlayActivationLayer", vr: CS }, // DICOM
    E { tag: ROI_AREA, alias: "ROIArea", vr: IS }, // DICOM
    E { tag: ROI_MEAN, alias: "ROIMean", vr: DS }, // DICOM
    E { tag: ROI_STANDARD_DEVIATION, alias: "ROIStandardDeviation", vr: DS }, // DICOM
    E { tag: OVERLAY_LABEL, alias: "OverlayLabel", vr: LO }, // DICOM
    E { tag: OVERLAY_DATA, alias: "OverlayData", vr: OB }, // DICOM
    E { tag: Single(FLOAT_PIXEL_DATA), alias: "FloatPixelData", vr: OF }, // DICOM
    E { tag: Single(DOUBLE_FLOAT_PIXEL_DATA), alias: "DoubleFloatPixelData", vr: OD }, // DICOM
    E { tag: Single(PIXEL_DATA), alias: "PixelData", vr: OB }, // DICOM
    E { tag: Single(DIGITAL_SIGNATURES_SEQUENCE), alias: "DigitalSignaturesSequence", vr: SQ }, // DICOM
    E { tag: Single(DATA_SET_TRAILING_PADDING), alias: "DataSetTrailingPadding", vr: OB }, // DICOM
    E { tag: Single(COMMAND_LENGTH_TO_END), alias: "CommandLengthToEnd", vr: UL }, // DICOM/retired
    E { tag: Single(COMMAND_RECOGNITION_CODE), alias: "CommandRecognitionCode", vr: SH }, // DICOM/retired
    E { tag: Single(INITIATOR), alias: "Initiator", vr: AE }, // DICOM/retired
    E { tag: Single(RECEIVER), alias: "Receiver", vr: AE }, // DICOM/retired
    E { tag: Single(FIND_LOCATION), alias: "FindLocation", vr: AE }, // DICOM/retired
    E { tag: Single(NUMBER_OF_MATCHES), alias: "NumberOfMatches", vr: US }, // DICOM/retired
    E { tag: Single(RESPONSE_SEQUENCE_NUMBER), alias: "ResponseSequenceNumber", vr: US }, // DICOM/retired
    E { tag: Single(DIALOG_RECEIVER), alias: "DialogReceiver", vr: LT }, // DICOM/retired
    E { tag: Single(TERMINAL_TYPE), alias: "TerminalType", vr: LT }, // DICOM/retired
    E { tag: Single(MESSAGE_SET_ID), alias: "MessageSetID", vr: SH }, // DICOM/retired
    E { tag: Single(END_MESSAGE_ID), alias: "EndMessageID", vr: SH }, // DICOM/retired
    E { tag: Single(DISPLAY_FORMAT), alias: "DisplayFormat", vr: LT }, // DICOM/retired
    E { tag: Single(PAGE_POSITION_ID), alias: "PagePositionID", vr: LT }, // DICOM/retired
    E { tag: Single(TEXT_FORMAT_ID), alias: "TextFormatID", vr: CS }, // DICOM/retired
    E { tag: Single(NORMAL_REVERSE), alias: "NormalReverse", vr: CS }, // DICOM/retired
    E { tag: Single(ADD_GRAY_SCALE), alias: "AddGrayScale", vr: CS }, // DICOM/retired
    E { tag: Single(BORDERS), alias: "Borders", vr: CS }, // DICOM/retired
    E { tag: Single(COPIES), alias: "Copies", vr: IS }, // DICOM/retired
    E { tag: Single(COMMAND_MAGNIFICATION_TYPE), alias: "CommandMagnificationType", vr: CS }, // DICOM/retired
    E { tag: Single(ERASE), alias: "Erase", vr: CS }, // DICOM/retired
    E { tag: Single(PRINT), alias: "Print", vr: CS }, // DICOM/retired
    E { tag: Single(OVERLAYS), alias: "Overlays", vr: US }, // DICOM/retired
    E { tag: Single(MRDR_DIRECTORY_RECORD_OFFSET), alias: "MRDRDirectoryRecordOffset", vr: UL }, // DICOM/retired
    E { tag: Single(NUMBER_OF_REFERENCES), alias: "NumberOfReferences", vr: UL }, // DICOM/retired
    E { tag: Single(LENGTH_TO_END), alias: "LengthToEnd", vr: UL }, // DICOM/retired
    E { tag: Single(RECOGNITION_CODE), alias: "RecognitionCode", vr: SH }, // DICOM/retired
    E { tag: Single(OVERLAY_DATE), alias: "OverlayDate", vr: DA }, // DICOM/retired
    E { tag: Single(CURVE_DATE), alias: "CurveDate", vr: DA }, // DICOM/retired
    E { tag: Single(OVERLAY_TIME), alias: "OverlayTime", vr: TM }, // DICOM/retired
    E { tag: Single(CURVE_TIME), alias: "CurveTime", vr: TM }, // DICOM/retired
    E { tag: Single(DATA_SET_TYPE), alias: "DataSetType", vr: US }, // DICOM/retired
    E { tag: Single(DATA_SET_SUBTYPE), alias: "DataSetSubtype", vr: LO }, // DICOM/retired
    E { tag: Single(NUCLEAR_MEDICINE_SERIES_TYPE), alias: "NuclearMedicineSeriesType", vr: CS }, // DICOM/retired
    E { tag: Single(NETWORK_ID), alias: "NetworkID", vr: AE }, // DICOM/retired
    E { tag: Single(REFERENCED_RESULTS_SEQUENCE), alias: "ReferencedResultsSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_OVERLAY_SEQUENCE), alias: "ReferencedOverlaySequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_CURVE_SEQUENCE), alias: "ReferencedCurveSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(LOSSY_IMAGE_COMPRESSION_RETIRED), alias: "LossyImageCompressionRetired", vr: CS }, // DICOM/retired
    E { tag: Single(TRANSDUCER_POSITION), alias: "TransducerPosition", vr: CS }, // DICOM/retired
    E { tag: Single(TRANSDUCER_ORIENTATION), alias: "TransducerOrientation", vr: CS }, // DICOM/retired
    E { tag: Single(ANATOMIC_STRUCTURE), alias: "AnatomicStructure", vr: CS }, // DICOM/retired
    E { tag: Single(ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE), alias: "AnatomicStructureSpaceOrRegionSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(TRANSDUCER_POSITION_SEQUENCE), alias: "TransducerPositionSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(TRANSDUCER_POSITION_MODIFIER_SEQUENCE), alias: "TransducerPositionModifierSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(TRANSDUCER_ORIENTATION_SEQUENCE), alias: "TransducerOrientationSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE), alias: "TransducerOrientationModifierSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL), alias: "AnatomicStructureSpaceOrRegionCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL), alias: "AnatomicPortalOfEntranceCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL), alias: "AnatomicApproachDirectionCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL), alias: "AnatomicPerspectiveDescriptionTrial", vr: ST }, // DICOM/retired
    E { tag: Single(ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL), alias: "AnatomicPerspectiveCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL), alias: "AnatomicLocationOfExaminingInstrumentDescriptionTrial", vr: ST }, // DICOM/retired
    E { tag: Single(ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL), alias: "AnatomicLocationOfExaminingInstrumentCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL), alias: "AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL), alias: "OnAxisBackgroundAnatomicStructureCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(IDENTIFYING_COMMENTS), alias: "IdentifyingComments", vr: LT }, // DICOM/retired
    E { tag: Single(OTHER_PATIENT_I_DS), alias: "OtherPatientIDs", vr: LO }, // DICOM/retired
    E { tag: Single(INSURANCE_PLAN_IDENTIFICATION), alias: "InsurancePlanIdentification", vr: LO }, // DICOM/retired
    E { tag: Single(MEDICAL_RECORD_LOCATOR), alias: "MedicalRecordLocator", vr: LO }, // DICOM/retired
    E { tag: Single(CAD_FILE_FORMAT), alias: "CADFileFormat", vr: ST }, // DICOM/retired
    E { tag: Single(COMPONENT_REFERENCE_SYSTEM), alias: "ComponentReferenceSystem", vr: ST }, // DICOM/retired
    E { tag: Single(MATERIAL_PROPERTIES_FILE_FORMAT_RETIRED), alias: "MaterialPropertiesFileFormatRetired", vr: ST }, // DICOM/retired
    E { tag: Single(RADIONUCLIDE), alias: "Radionuclide", vr: LO }, // DICOM/retired
    E { tag: Single(ENERGY_WINDOW_CENTERLINE), alias: "EnergyWindowCenterline", vr: DS }, // DICOM/retired
    E { tag: Single(ENERGY_WINDOW_TOTAL_WIDTH), alias: "EnergyWindowTotalWidth", vr: DS }, // DICOM/retired
    E { tag: Single(THERAPY_TYPE), alias: "TherapyType", vr: CS }, // DICOM/retired
    E { tag: Single(THERAPY_DESCRIPTION), alias: "TherapyDescription", vr: CS }, // DICOM/retired
    E { tag: Single(HARDCOPY_CREATION_DEVICE_ID), alias: "HardcopyCreationDeviceID", vr: LO }, // DICOM/retired
    E { tag: Single(HARDCOPY_DEVICE_MANUFACTURER), alias: "HardcopyDeviceManufacturer", vr: LO }, // DICOM/retired
    E { tag: Single(HARDCOPY_DEVICE_SOFTWARE_VERSION), alias: "HardcopyDeviceSoftwareVersion", vr: LO }, // DICOM/retired
    E { tag: Single(HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME), alias: "HardcopyDeviceManufacturerModelName", vr: LO }, // DICOM/retired
    E { tag: Single(ANGULAR_POSITION), alias: "AngularPosition", vr: DS }, // DICOM/retired
    E { tag: Single(ROTATION_OFFSET), alias: "RotationOffset", vr: DS }, // DICOM/retired
    E { tag: Single(UPPER_LOWER_PIXEL_VALUES), alias: "UpperLowerPixelValues", vr: IS }, // DICOM/retired
    E { tag: Single(ACQUISITION_COMMENTS), alias: "AcquisitionComments", vr: LT }, // DICOM/retired
    E { tag: Single(POSTPROCESSING_FUNCTION), alias: "PostprocessingFunction", vr: LO }, // DICOM/retired
    E { tag: Single(DYNAMIC_RANGE), alias: "DynamicRange", vr: DS }, // DICOM/retired
    E { tag: Single(TOTAL_GAIN), alias: "TotalGain", vr: DS }, // DICOM/retired
    E { tag: Single(IMAGE_TRANSFORMATION_MATRIX), alias: "ImageTransformationMatrix", vr: DS }, // DICOM/retired
    E { tag: Single(IMAGE_TRANSLATION_VECTOR), alias: "ImageTranslationVector", vr: DS }, // DICOM/retired
    E { tag: Single(DOPPLER_SAMPLE_VOLUME_X_POSITION_RETIRED), alias: "DopplerSampleVolumeXPositionRetired", vr: UL }, // DICOM/retired
    E { tag: Single(DOPPLER_SAMPLE_VOLUME_Y_POSITION_RETIRED), alias: "DopplerSampleVolumeYPositionRetired", vr: UL }, // DICOM/retired
    E { tag: Single(TM_LINE_POSITION_X0_RETIRED), alias: "TMLinePositionX0Retired", vr: UL }, // DICOM/retired
    E { tag: Single(TM_LINE_POSITION_Y0_RETIRED), alias: "TMLinePositionY0Retired", vr: UL }, // DICOM/retired
    E { tag: Single(TM_LINE_POSITION_X1_RETIRED), alias: "TMLinePositionX1Retired", vr: UL }, // DICOM/retired
    E { tag: Single(TM_LINE_POSITION_Y1_RETIRED), alias: "TMLinePositionY1Retired", vr: UL }, // DICOM/retired
    E { tag: Single(PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED), alias: "ParallelReductionFactorInPlaneRetired", vr: FD }, // DICOM/retired
    E { tag: Single(BULK_MOTION_STATUS), alias: "BulkMotionStatus", vr: CS }, // DICOM/retired
    E { tag: Single(CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ), alias: "ChemicalShiftMinimumIntegrationLimitInHz", vr: FD }, // DICOM/retired
    E { tag: Single(CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ), alias: "ChemicalShiftMaximumIntegrationLimitInHz", vr: FD }, // DICOM/retired
    E { tag: Single(ISOTOPE_NUMBER), alias: "IsotopeNumber", vr: IS }, // DICOM/retired
    E { tag: Single(PHASE_NUMBER), alias: "PhaseNumber", vr: IS }, // DICOM/retired
    E { tag: Single(INTERVAL_NUMBER), alias: "IntervalNumber", vr: IS }, // DICOM/retired
    E { tag: Single(TIME_SLOT_NUMBER), alias: "TimeSlotNumber", vr: IS }, // DICOM/retired
    E { tag: Single(ANGLE_NUMBER), alias: "AngleNumber", vr: IS }, // DICOM/retired
    E { tag: Single(OVERLAY_NUMBER), alias: "OverlayNumber", vr: IS }, // DICOM/retired
    E { tag: Single(CURVE_NUMBER), alias: "CurveNumber", vr: IS }, // DICOM/retired
    E { tag: Single(LUT_NUMBER), alias: "LUTNumber", vr: IS }, // DICOM/retired
    E { tag: Single(IMAGE_POSITION), alias: "ImagePosition", vr: DS }, // DICOM/retired
    E { tag: Single(IMAGE_ORIENTATION), alias: "ImageOrientation", vr: DS }, // DICOM/retired
    E { tag: Single(LOCATION), alias: "Location", vr: DS }, // DICOM/retired
    E { tag: Single(IMAGE_GEOMETRY_TYPE), alias: "ImageGeometryType", vr: LO }, // DICOM/retired
    E { tag: Single(MASKING_IMAGE), alias: "MaskingImage", vr: CS }, // DICOM/retired
    E { tag: Single(REPORT_NUMBER), alias: "ReportNumber", vr: IS }, // DICOM/retired
    E { tag: Single(SERIES_IN_STUDY), alias: "SeriesInStudy", vr: IS }, // DICOM/retired
    E { tag: Single(ACQUISITIONS_IN_SERIES), alias: "AcquisitionsInSeries", vr: IS }, // DICOM/retired
    E { tag: Single(IMAGES_IN_SERIES), alias: "ImagesInSeries", vr: IS }, // DICOM/retired
    E { tag: Single(ACQUISITIONS_IN_STUDY), alias: "AcquisitionsInStudy", vr: IS }, // DICOM/retired
    E { tag: Single(IMAGES_IN_STUDY), alias: "ImagesInStudy", vr: IS }, // DICOM/retired
    E { tag: Single(REFERENCE), alias: "Reference", vr: LO }, // DICOM/retired
    E { tag: Single(OTHER_STUDY_NUMBERS), alias: "OtherStudyNumbers", vr: IS }, // DICOM/retired
    E { tag: SOURCE_IMAGE_I_DS, alias: "SourceImageIDs", vr: CS }, // DICOM/retired
    E { tag: Single(MODIFYING_DEVICE_ID), alias: "ModifyingDeviceID", vr: CS }, // DICOM/retired
    E { tag: Single(MODIFIED_IMAGE_ID), alias: "ModifiedImageID", vr: CS }, // DICOM/retired
    E { tag: Single(MODIFIED_IMAGE_DATE), alias: "ModifiedImageDate", vr: DA }, // DICOM/retired
    E { tag: Single(MODIFYING_DEVICE_MANUFACTURER), alias: "ModifyingDeviceManufacturer", vr: LO }, // DICOM/retired
    E { tag: Single(MODIFIED_IMAGE_TIME), alias: "ModifiedImageTime", vr: TM }, // DICOM/retired
    E { tag: Single(MODIFIED_IMAGE_DESCRIPTION), alias: "ModifiedImageDescription", vr: LO }, // DICOM/retired
    E { tag: Single(ORIGINAL_IMAGE_IDENTIFICATION), alias: "OriginalImageIdentification", vr: AT }, // DICOM/retired
    E { tag: Single(ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE), alias: "OriginalImageIdentificationNomenclature", vr: LO }, // DICOM/retired
    E { tag: Single(LENS_CONSTANT_DESCRIPTION), alias: "LensConstantDescription", vr: LO }, // DICOM/retired
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_ACQUISITION_METHOD_CODE_SEQUENCE), alias: "OphthalmicAxialLengthAcquisitionMethodCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_CODE_SEQUENCE), alias: "OphthalmicAxialLengthQualityMetricTypeCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_DESCRIPTION), alias: "OphthalmicAxialLengthQualityMetricTypeDescription", vr: LO }, // DICOM/retired
    E { tag: Single(IMAGE_DIMENSIONS), alias: "ImageDimensions", vr: US }, // DICOM/retired
    E { tag: Single(PLANES), alias: "Planes", vr: US }, // DICOM/retired
    E { tag: Single(IMAGE_FORMAT), alias: "ImageFormat", vr: CS }, // DICOM/retired
    E { tag: Single(MANIPULATED_IMAGE), alias: "ManipulatedImage", vr: LO }, // DICOM/retired
    E { tag: Single(COMPRESSION_RECOGNITION_CODE), alias: "CompressionRecognitionCode", vr: LO }, // DICOM/retired
    E { tag: Single(COMPRESSION_CODE), alias: "CompressionCode", vr: CS }, // DICOM/retired
    E { tag: Single(COMPRESSION_ORIGINATOR), alias: "CompressionOriginator", vr: SH }, // DICOM/retired
    E { tag: Single(COMPRESSION_LABEL), alias: "CompressionLabel", vr: LO }, // DICOM/retired
    E { tag: Single(COMPRESSION_DESCRIPTION), alias: "CompressionDescription", vr: SH }, // DICOM/retired
    E { tag: Single(COMPRESSION_SEQUENCE), alias: "CompressionSequence", vr: CS }, // DICOM/retired
    E { tag: Single(COMPRESSION_STEP_POINTERS), alias: "CompressionStepPointers", vr: AT }, // DICOM/retired
    E { tag: Single(REPEAT_INTERVAL), alias: "RepeatInterval", vr: US }, // DICOM/retired
    E { tag: Single(BITS_GROUPED), alias: "BitsGrouped", vr: US }, // DICOM/retired
    E { tag: Single(PERIMETER_TABLE), alias: "PerimeterTable", vr: US }, // DICOM/retired
    E { tag: Single(PERIMETER_VALUE), alias: "PerimeterValue", vr: US }, // DICOM/retired
    E { tag: Single(PREDICTOR_ROWS), alias: "PredictorRows", vr: US }, // DICOM/retired
    E { tag: Single(PREDICTOR_COLUMNS), alias: "PredictorColumns", vr: US }, // DICOM/retired
    E { tag: Single(PREDICTOR_CONSTANTS), alias: "PredictorConstants", vr: US }, // DICOM/retired
    E { tag: Single(BLOCKED_PIXELS), alias: "BlockedPixels", vr: CS }, // DICOM/retired
    E { tag: Single(BLOCK_ROWS), alias: "BlockRows", vr: US }, // DICOM/retired
    E { tag: Single(BLOCK_COLUMNS), alias: "BlockColumns", vr: US }, // DICOM/retired
    E { tag: Single(ROW_OVERLAP), alias: "RowOverlap", vr: US }, // DICOM/retired
    E { tag: Single(COLUMN_OVERLAP), alias: "ColumnOverlap", vr: US }, // DICOM/retired
    E { tag: Single(SMALLEST_VALID_PIXEL_VALUE), alias: "SmallestValidPixelValue", vr: US }, // DICOM/retired
    E { tag: Single(LARGEST_VALID_PIXEL_VALUE), alias: "LargestValidPixelValue", vr: US }, // DICOM/retired
    E { tag: Single(SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE), alias: "SmallestImagePixelValueInPlane", vr: US }, // DICOM/retired
    E { tag: Single(LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE), alias: "LargestImagePixelValueInPlane", vr: US }, // DICOM/retired
    E { tag: Single(IMAGE_LOCATION), alias: "ImageLocation", vr: US }, // DICOM/retired
    E { tag: Single(TRANSFORM_LABEL), alias: "TransformLabel", vr: LO }, // DICOM/retired
    E { tag: Single(TRANSFORM_VERSION_NUMBER), alias: "TransformVersionNumber", vr: LO }, // DICOM/retired
    E { tag: Single(NUMBER_OF_TRANSFORM_STEPS), alias: "NumberOfTransformSteps", vr: US }, // DICOM/retired
    E { tag: Single(SEQUENCE_OF_COMPRESSED_DATA), alias: "SequenceOfCompressedData", vr: LO }, // DICOM/retired
    E { tag: Single(DETAILS_OF_COEFFICIENTS), alias: "DetailsOfCoefficients", vr: AT }, // DICOM/retired
    E { tag: Single(DCT_LABEL), alias: "DCTLabel", vr: LO }, // DICOM/retired
    E { tag: Single(DATA_BLOCK_DESCRIPTION), alias: "DataBlockDescription", vr: CS }, // DICOM/retired
    E { tag: Single(DATA_BLOCK), alias: "DataBlock", vr: AT }, // DICOM/retired
    E { tag: Single(NORMALIZATION_FACTOR_FORMAT), alias: "NormalizationFactorFormat", vr: US }, // DICOM/retired
    E { tag: Single(ZONAL_MAP_NUMBER_FORMAT), alias: "ZonalMapNumberFormat", vr: US }, // DICOM/retired
    E { tag: Single(ZONAL_MAP_LOCATION), alias: "ZonalMapLocation", vr: AT }, // DICOM/retired
    E { tag: Single(ZONAL_MAP_FORMAT), alias: "ZonalMapFormat", vr: US }, // DICOM/retired
    E { tag: Single(ADAPTIVE_MAP_FORMAT), alias: "AdaptiveMapFormat", vr: US }, // DICOM/retired
    E { tag: Single(CODE_NUMBER_FORMAT), alias: "CodeNumberFormat", vr: US }, // DICOM/retired
    E { tag: Single(GRAY_SCALE), alias: "GrayScale", vr: CS }, // DICOM/retired
    E { tag: Single(GRAY_LOOKUP_TABLE_DESCRIPTOR), alias: "GrayLookupTableDescriptor", vr: US }, // DICOM/retired
    E { tag: Single(LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "LargeRedPaletteColorLookupTableDescriptor", vr: US }, // DICOM/retired
    E { tag: Single(LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "LargeGreenPaletteColorLookupTableDescriptor", vr: US }, // DICOM/retired
    E { tag: Single(LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR), alias: "LargeBluePaletteColorLookupTableDescriptor", vr: US }, // DICOM/retired
    E { tag: Single(GRAY_LOOKUP_TABLE_DATA), alias: "GrayLookupTableData", vr: OW }, // DICOM/retired
    E { tag: Single(LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "LargeRedPaletteColorLookupTableData", vr: OW }, // DICOM/retired
    E { tag: Single(LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "LargeGreenPaletteColorLookupTableData", vr: OW }, // DICOM/retired
    E { tag: Single(LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA), alias: "LargeBluePaletteColorLookupTableData", vr: OW }, // DICOM/retired
    E { tag: Single(LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID), alias: "LargePaletteColorLookupTableUID", vr: UI }, // DICOM/retired
    E { tag: Single(IMAGE_PRESENTATION_COMMENTS), alias: "ImagePresentationComments", vr: LT }, // DICOM/retired
    E { tag: Single(BI_PLANE_ACQUISITION_SEQUENCE), alias: "BiPlaneAcquisitionSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(MASK_POINTERS), alias: "MaskPointers", vr: US }, // DICOM/retired
    E { tag: Single(LARGEST_MONOCHROME_PIXEL_VALUE), alias: "LargestMonochromePixelValue", vr: US }, // DICOM/retired
    E { tag: Single(STUDY_STATUS_ID), alias: "StudyStatusID", vr: CS }, // DICOM/retired
    E { tag: Single(STUDY_PRIORITY_ID), alias: "StudyPriorityID", vr: CS }, // DICOM/retired
    E { tag: Single(STUDY_ID_ISSUER), alias: "StudyIDIssuer", vr: LO }, // DICOM/retired
    E { tag: Single(STUDY_VERIFIED_DATE), alias: "StudyVerifiedDate", vr: DA }, // DICOM/retired
    E { tag: Single(STUDY_VERIFIED_TIME), alias: "StudyVerifiedTime", vr: TM }, // DICOM/retired
    E { tag: Single(STUDY_READ_DATE), alias: "StudyReadDate", vr: DA }, // DICOM/retired
    E { tag: Single(STUDY_READ_TIME), alias: "StudyReadTime", vr: TM }, // DICOM/retired
    E { tag: Single(SCHEDULED_STUDY_START_DATE), alias: "ScheduledStudyStartDate", vr: DA }, // DICOM/retired
    E { tag: Single(SCHEDULED_STUDY_START_TIME), alias: "ScheduledStudyStartTime", vr: TM }, // DICOM/retired
    E { tag: Single(SCHEDULED_STUDY_STOP_DATE), alias: "ScheduledStudyStopDate", vr: DA }, // DICOM/retired
    E { tag: Single(SCHEDULED_STUDY_STOP_TIME), alias: "ScheduledStudyStopTime", vr: TM }, // DICOM/retired
    E { tag: Single(SCHEDULED_STUDY_LOCATION), alias: "ScheduledStudyLocation", vr: LO }, // DICOM/retired
    E { tag: Single(SCHEDULED_STUDY_LOCATION_AE_TITLE), alias: "ScheduledStudyLocationAETitle", vr: AE }, // DICOM/retired
    E { tag: Single(REASON_FOR_STUDY), alias: "ReasonForStudy", vr: LO }, // DICOM/retired
    E { tag: Single(STUDY_ARRIVAL_DATE), alias: "StudyArrivalDate", vr: DA }, // DICOM/retired
    E { tag: Single(STUDY_ARRIVAL_TIME), alias: "StudyArrivalTime", vr: TM }, // DICOM/retired
    E { tag: Single(STUDY_COMPLETION_DATE), alias: "StudyCompletionDate", vr: DA }, // DICOM/retired
    E { tag: Single(STUDY_COMPLETION_TIME), alias: "StudyCompletionTime", vr: TM }, // DICOM/retired
    E { tag: Single(STUDY_COMPONENT_STATUS_ID), alias: "StudyComponentStatusID", vr: CS }, // DICOM/retired
    E { tag: Single(STUDY_COMMENTS), alias: "StudyComments", vr: LT }, // DICOM/retired
    E { tag: Single(ISSUER_OF_ADMISSION_ID), alias: "IssuerOfAdmissionID", vr: LO }, // DICOM/retired
    E { tag: Single(SCHEDULED_ADMISSION_DATE), alias: "ScheduledAdmissionDate", vr: DA }, // DICOM/retired
    E { tag: Single(SCHEDULED_ADMISSION_TIME), alias: "ScheduledAdmissionTime", vr: TM }, // DICOM/retired
    E { tag: Single(SCHEDULED_DISCHARGE_DATE), alias: "ScheduledDischargeDate", vr: DA }, // DICOM/retired
    E { tag: Single(SCHEDULED_DISCHARGE_TIME), alias: "ScheduledDischargeTime", vr: TM }, // DICOM/retired
    E { tag: Single(SCHEDULED_PATIENT_INSTITUTION_RESIDENCE), alias: "ScheduledPatientInstitutionResidence", vr: LO }, // DICOM/retired
    E { tag: Single(DISCHARGE_DATE), alias: "DischargeDate", vr: DA }, // DICOM/retired
    E { tag: Single(DISCHARGE_TIME), alias: "DischargeTime", vr: TM }, // DICOM/retired
    E { tag: Single(DISCHARGE_DIAGNOSIS_DESCRIPTION), alias: "DischargeDiagnosisDescription", vr: LO }, // DICOM/retired
    E { tag: Single(DISCHARGE_DIAGNOSIS_CODE_SEQUENCE), alias: "DischargeDiagnosisCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(ISSUER_OF_SERVICE_EPISODE_ID), alias: "IssuerOfServiceEpisodeID", vr: LO }, // DICOM/retired
    E { tag: Single(TOTAL_TIME_OF_FLUOROSCOPY), alias: "TotalTimeOfFluoroscopy", vr: US }, // DICOM/retired
    E { tag: Single(TOTAL_NUMBER_OF_EXPOSURES), alias: "TotalNumberOfExposures", vr: US }, // DICOM/retired
    E { tag: Single(DISTANCE_SOURCE_TO_SUPPORT), alias: "DistanceSourceToSupport", vr: DS }, // DICOM/retired
    E { tag: Single(EXPOSURE_DOSE_SEQUENCE), alias: "ExposureDoseSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_PROCEDURE_STEP_SEQUENCE), alias: "ReferencedProcedureStepSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(SPECIMEN_ACCESSION_NUMBER), alias: "SpecimenAccessionNumber", vr: LO }, // DICOM/retired
    E { tag: Single(SPECIMEN_SEQUENCE), alias: "SpecimenSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL), alias: "SpecimenDescriptionSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(SPECIMEN_DESCRIPTION_TRIAL), alias: "SpecimenDescriptionTrial", vr: ST }, // DICOM/retired
    E { tag: Single(SLIDE_IDENTIFIER), alias: "SlideIdentifier", vr: LO }, // DICOM/retired
    E { tag: Single(PIXEL_SPACING_SEQUENCE), alias: "PixelSpacingSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE), alias: "CoordinateSystemAxisCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(VITAL_STAIN_CODE_SEQUENCE_TRIAL), alias: "VitalStainCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(PLACER_ORDER_NUMBER_PROCEDURE), alias: "PlacerOrderNumberProcedure", vr: SH }, // DICOM/retired
    E { tag: Single(FILLER_ORDER_NUMBER_PROCEDURE), alias: "FillerOrderNumberProcedure", vr: SH }, // DICOM/retired
    E { tag: Single(REQUESTED_PROCEDURE_DESCRIPTION_TRIAL), alias: "RequestedProcedureDescriptionTrial", vr: LO }, // DICOM/retired
    E { tag: Single(REASON_FOR_THE_IMAGING_SERVICE_REQUEST), alias: "ReasonForTheImagingServiceRequest", vr: LO }, // DICOM/retired
    E { tag: Single(PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED), alias: "PlacerOrderNumberImagingServiceRequestRetired", vr: SH }, // DICOM/retired
    E { tag: Single(FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED), alias: "FillerOrderNumberImagingServiceRequestRetired", vr: SH }, // DICOM/retired
    E { tag: Single(GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS), alias: "GeneralPurposeScheduledProcedureStepStatus", vr: CS }, // DICOM/retired
    E { tag: Single(GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS), alias: "GeneralPurposePerformedProcedureStepStatus", vr: CS }, // DICOM/retired
    E { tag: Single(GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY), alias: "GeneralPurposeScheduledProcedureStepPriority", vr: CS }, // DICOM/retired
    E { tag: Single(SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE), alias: "ScheduledProcessingApplicationsCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(MULTIPLE_COPIES_FLAG), alias: "MultipleCopiesFlag", vr: CS }, // DICOM/retired
    E { tag: Single(RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE), alias: "ResultingGeneralPurposePerformedProcedureStepsSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE), alias: "ReferencedGeneralPurposeScheduledProcedureStepSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(INPUT_AVAILABILITY_FLAG), alias: "InputAvailabilityFlag", vr: CS }, // DICOM/retired
    E { tag: Single(RELEVANT_INFORMATION_SEQUENCE), alias: "RelevantInformationSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID), alias: "ReferencedGeneralPurposeScheduledProcedureStepTransactionUID", vr: UI }, // DICOM/retired
    E { tag: Single(REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE), alias: "RequestedSubsequentWorkitemCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(NON_DICOM_OUTPUT_CODE_SEQUENCE), alias: "NonDICOMOutputCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(FINDINGS_FLAG_TRIAL), alias: "FindingsFlagTrial", vr: CS }, // DICOM/retired
    E { tag: Single(FINDINGS_SEQUENCE_TRIAL), alias: "FindingsSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(FINDINGS_GROUP_UID_TRIAL), alias: "FindingsGroupUIDTrial", vr: UI }, // DICOM/retired
    E { tag: Single(REFERENCED_FINDINGS_GROUP_UID_TRIAL), alias: "ReferencedFindingsGroupUIDTrial", vr: UI }, // DICOM/retired
    E { tag: Single(FINDINGS_GROUP_RECORDING_DATE_TRIAL), alias: "FindingsGroupRecordingDateTrial", vr: DA }, // DICOM/retired
    E { tag: Single(FINDINGS_GROUP_RECORDING_TIME_TRIAL), alias: "FindingsGroupRecordingTimeTrial", vr: TM }, // DICOM/retired
    E { tag: Single(FINDINGS_SOURCE_CATEGORY_CODE_SEQUENCE_TRIAL), alias: "FindingsSourceCategoryCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(DOCUMENTING_ORGANIZATION_IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "DocumentingOrganizationIdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(MEASUREMENT_PRECISION_DESCRIPTION_TRIAL), alias: "MeasurementPrecisionDescriptionTrial", vr: LO }, // DICOM/retired
    E { tag: Single(URGENCY_OR_PRIORITY_ALERTS_TRIAL), alias: "UrgencyOrPriorityAlertsTrial", vr: CS }, // DICOM/retired
    E { tag: Single(SEQUENCING_INDICATOR_TRIAL), alias: "SequencingIndicatorTrial", vr: LO }, // DICOM/retired
    E { tag: Single(DOCUMENT_IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "DocumentIdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(DOCUMENT_AUTHOR_TRIAL), alias: "DocumentAuthorTrial", vr: PN }, // DICOM/retired
    E { tag: Single(DOCUMENT_AUTHOR_IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "DocumentAuthorIdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "IdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(OBJECT_BINARY_IDENTIFIER_TRIAL), alias: "ObjectBinaryIdentifierTrial", vr: OB }, // DICOM/retired
    E { tag: Single(DOCUMENTING_OBSERVER_IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "DocumentingObserverIdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(PROCEDURE_IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "ProcedureIdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(OBJECT_DIRECTORY_BINARY_IDENTIFIER_TRIAL), alias: "ObjectDirectoryBinaryIdentifierTrial", vr: OB }, // DICOM/retired
    E { tag: Single(EQUIVALENT_CDA_DOCUMENT_SEQUENCE), alias: "EquivalentCDADocumentSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(DATE_OF_DOCUMENT_OR_VERBAL_TRANSACTION_TRIAL), alias: "DateOfDocumentOrVerbalTransactionTrial", vr: DA }, // DICOM/retired
    E { tag: Single(TIME_OF_DOCUMENT_CREATION_OR_VERBAL_TRANSACTION_TRIAL), alias: "TimeOfDocumentCreationOrVerbalTransactionTrial", vr: TM }, // DICOM/retired
    E { tag: Single(REPORT_STATUS_ID_TRIAL), alias: "ReportStatusIDTrial", vr: CS }, // DICOM/retired
    E { tag: Single(OBSERVATION_CATEGORY_CODE_SEQUENCE_TRIAL), alias: "ObservationCategoryCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(BIBLIOGRAPHIC_CITATION_TRIAL), alias: "BibliographicCitationTrial", vr: ST }, // DICOM/retired
    E { tag: Single(REFERENCED_OBSERVATION_UID_TRIAL), alias: "ReferencedObservationUIDTrial", vr: UI }, // DICOM/retired
    E { tag: Single(REFERENCED_OBSERVATION_CLASS_TRIAL), alias: "ReferencedObservationClassTrial", vr: CS }, // DICOM/retired
    E { tag: Single(REFERENCED_OBJECT_OBSERVATION_CLASS_TRIAL), alias: "ReferencedObjectObservationClassTrial", vr: CS }, // DICOM/retired
    E { tag: Single(OBSERVATION_DATE_TRIAL), alias: "ObservationDateTrial", vr: DA }, // DICOM/retired
    E { tag: Single(OBSERVATION_TIME_TRIAL), alias: "ObservationTimeTrial", vr: TM }, // DICOM/retired
    E { tag: Single(MEASUREMENT_AUTOMATION_TRIAL), alias: "MeasurementAutomationTrial", vr: CS }, // DICOM/retired
    E { tag: Single(IDENTIFICATION_DESCRIPTION_TRIAL), alias: "IdentificationDescriptionTrial", vr: ST }, // DICOM/retired
    E { tag: Single(COORDINATES_SET_GEOMETRIC_TYPE_TRIAL), alias: "CoordinatesSetGeometricTypeTrial", vr: CS }, // DICOM/retired
    E { tag: Single(ALGORITHM_CODE_SEQUENCE_TRIAL), alias: "AlgorithmCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(ALGORITHM_DESCRIPTION_TRIAL), alias: "AlgorithmDescriptionTrial", vr: ST }, // DICOM/retired
    E { tag: Single(PIXEL_COORDINATES_SET_TRIAL), alias: "PixelCoordinatesSetTrial", vr: SL }, // DICOM/retired
    E { tag: Single(CURRENT_OBSERVER_TRIAL), alias: "CurrentObserverTrial", vr: PN }, // DICOM/retired
    E { tag: Single(REFERENCED_ACCESSION_SEQUENCE_TRIAL), alias: "ReferencedAccessionSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(REPORT_STATUS_COMMENT_TRIAL), alias: "ReportStatusCommentTrial", vr: ST }, // DICOM/retired
    E { tag: Single(PROCEDURE_CONTEXT_SEQUENCE_TRIAL), alias: "ProcedureContextSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(VERBAL_SOURCE_TRIAL), alias: "VerbalSourceTrial", vr: PN }, // DICOM/retired
    E { tag: Single(ADDRESS_TRIAL), alias: "AddressTrial", vr: ST }, // DICOM/retired
    E { tag: Single(TELEPHONE_NUMBER_TRIAL), alias: "TelephoneNumberTrial", vr: LO }, // DICOM/retired
    E { tag: Single(VERBAL_SOURCE_IDENTIFIER_CODE_SEQUENCE_TRIAL), alias: "VerbalSourceIdentifierCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(REPORT_DETAIL_SEQUENCE_TRIAL), alias: "ReportDetailSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(OBSERVATION_SUBJECT_UID_TRIAL), alias: "ObservationSubjectUIDTrial", vr: UI }, // DICOM/retired
    E { tag: Single(OBSERVATION_SUBJECT_CLASS_TRIAL), alias: "ObservationSubjectClassTrial", vr: CS }, // DICOM/retired
    E { tag: Single(OBSERVATION_SUBJECT_TYPE_CODE_SEQUENCE_TRIAL), alias: "ObservationSubjectTypeCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(OBSERVATION_SUBJECT_CONTEXT_FLAG_TRIAL), alias: "ObservationSubjectContextFlagTrial", vr: CS }, // DICOM/retired
    E { tag: Single(OBSERVER_CONTEXT_FLAG_TRIAL), alias: "ObserverContextFlagTrial", vr: CS }, // DICOM/retired
    E { tag: Single(PROCEDURE_CONTEXT_FLAG_TRIAL), alias: "ProcedureContextFlagTrial", vr: CS }, // DICOM/retired
    E { tag: Single(RELATIONSHIP_SEQUENCE_TRIAL), alias: "RelationshipSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(RELATIONSHIP_TYPE_CODE_SEQUENCE_TRIAL), alias: "RelationshipTypeCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(LANGUAGE_CODE_SEQUENCE_TRIAL), alias: "LanguageCodeSequenceTrial", vr: SQ }, // DICOM/retired
    E { tag: Single(UNIFORM_RESOURCE_LOCATOR_TRIAL), alias: "UniformResourceLocatorTrial", vr: ST }, // DICOM/retired
    E { tag: Single(TEMPLATE_VERSION), alias: "TemplateVersion", vr: DT }, // DICOM/retired
    E { tag: Single(TEMPLATE_LOCAL_VERSION), alias: "TemplateLocalVersion", vr: DT }, // DICOM/retired
    E { tag: Single(TEMPLATE_EXTENSION_FLAG), alias: "TemplateExtensionFlag", vr: CS }, // DICOM/retired
    E { tag: Single(TEMPLATE_EXTENSION_ORGANIZATION_UID), alias: "TemplateExtensionOrganizationUID", vr: UI }, // DICOM/retired
    E { tag: Single(TEMPLATE_EXTENSION_CREATOR_UID), alias: "TemplateExtensionCreatorUID", vr: UI }, // DICOM/retired
    E { tag: Single(COUNTS_INCLUDED), alias: "CountsIncluded", vr: CS }, // DICOM/retired
    E { tag: Single(DEAD_TIME_CORRECTION_FLAG), alias: "DeadTimeCorrectionFlag", vr: CS }, // DICOM/retired
    E { tag: Single(TRIANGLE_POINT_INDEX_LIST), alias: "TrianglePointIndexList", vr: OW }, // DICOM/retired
    E { tag: Single(EDGE_POINT_INDEX_LIST), alias: "EdgePointIndexList", vr: OW }, // DICOM/retired
    E { tag: Single(VERTEX_POINT_INDEX_LIST), alias: "VertexPointIndexList", vr: OW }, // DICOM/retired
    E { tag: Single(PRIMITIVE_POINT_INDEX_LIST), alias: "PrimitivePointIndexList", vr: OW }, // DICOM/retired
    E { tag: Single(IMAGE_ROTATION_RETIRED), alias: "ImageRotationRetired", vr: IS }, // DICOM/retired
    E { tag: Single(DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL), alias: "DisplayedAreaTopLeftHandCornerTrial", vr: US }, // DICOM/retired
    E { tag: Single(DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL), alias: "DisplayedAreaBottomRightHandCornerTrial", vr: US }, // DICOM/retired
    E { tag: Single(GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGB_VALUE), alias: "GraphicLayerRecommendedDisplayRGBValue", vr: US }, // DICOM/retired
    E { tag: Single(COMPOSITING_METHOD), alias: "CompositingMethod", vr: CS }, // DICOM/retired
    E { tag: Single(BEAM_ORDER_INDEX_TRIAL), alias: "BeamOrderIndexTrial", vr: IS }, // DICOM/retired
    E { tag: Single(DOUBLE_EXPOSURE_METERSET_TRIAL), alias: "DoubleExposureMetersetTrial", vr: DS }, // DICOM/retired
    E { tag: Single(DOUBLE_EXPOSURE_FIELD_DELTA_TRIAL), alias: "DoubleExposureFieldDeltaTrial", vr: DS }, // DICOM/retired
    E { tag: Single(RELATED_PROCEDURE_STEP_SEQUENCE), alias: "RelatedProcedureStepSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(PROCEDURE_STEP_RELATIONSHIP_TYPE), alias: "ProcedureStepRelationshipType", vr: LO }, // DICOM/retired
    E { tag: Single(TOPIC_TITLE), alias: "TopicTitle", vr: LO }, // DICOM/retired
    E { tag: Single(TOPIC_SUBJECT), alias: "TopicSubject", vr: ST }, // DICOM/retired
    E { tag: Single(TOPIC_AUTHOR), alias: "TopicAuthor", vr: LO }, // DICOM/retired
    E { tag: Single(TOPIC_KEYWORDS), alias: "TopicKeywords", vr: LO }, // DICOM/retired
    E { tag: Single(COLOR_IMAGE_PRINTING_FLAG), alias: "ColorImagePrintingFlag", vr: CS }, // DICOM/retired
    E { tag: Single(COLLATION_FLAG), alias: "CollationFlag", vr: CS }, // DICOM/retired
    E { tag: Single(ANNOTATION_FLAG), alias: "AnnotationFlag", vr: CS }, // DICOM/retired
    E { tag: Single(IMAGE_OVERLAY_FLAG), alias: "ImageOverlayFlag", vr: CS }, // DICOM/retired
    E { tag: Single(PRESENTATION_LUT_FLAG), alias: "PresentationLUTFlag", vr: CS }, // DICOM/retired
    E { tag: Single(IMAGE_BOX_PRESENTATION_LUT_FLAG), alias: "ImageBoxPresentationLUTFlag", vr: CS }, // DICOM/retired
    E { tag: Single(REFERENCED_STORED_PRINT_SEQUENCE), alias: "ReferencedStoredPrintSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE), alias: "ReferencedImageOverlayBoxSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_VOILUT_BOX_SEQUENCE), alias: "ReferencedVOILUTBoxSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_OVERLAY_PLANE_SEQUENCE), alias: "ReferencedOverlayPlaneSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_OVERLAY_PLANE_GROUPS), alias: "ReferencedOverlayPlaneGroups", vr: US }, // DICOM/retired
    E { tag: Single(OVERLAY_PIXEL_DATA_SEQUENCE), alias: "OverlayPixelDataSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(OVERLAY_MAGNIFICATION_TYPE), alias: "OverlayMagnificationType", vr: CS }, // DICOM/retired
    E { tag: Single(OVERLAY_SMOOTHING_TYPE), alias: "OverlaySmoothingType", vr: CS }, // DICOM/retired
    E { tag: Single(OVERLAY_OR_IMAGE_MAGNIFICATION), alias: "OverlayOrImageMagnification", vr: CS }, // DICOM/retired
    E { tag: Single(MAGNIFY_TO_NUMBER_OF_COLUMNS), alias: "MagnifyToNumberOfColumns", vr: US }, // DICOM/retired
    E { tag: Single(OVERLAY_FOREGROUND_DENSITY), alias: "OverlayForegroundDensity", vr: CS }, // DICOM/retired
    E { tag: Single(OVERLAY_BACKGROUND_DENSITY), alias: "OverlayBackgroundDensity", vr: CS }, // DICOM/retired
    E { tag: Single(OVERLAY_MODE), alias: "OverlayMode", vr: CS }, // DICOM/retired
    E { tag: Single(THRESHOLD_DENSITY), alias: "ThresholdDensity", vr: CS }, // DICOM/retired
    E { tag: Single(REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED), alias: "ReferencedImageBoxSequenceRetired", vr: SQ }, // DICOM/retired
    E { tag: Single(PRINT_JOB_ID), alias: "PrintJobID", vr: SH }, // DICOM/retired
    E { tag: Single(REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT), alias: "ReferencedPrintJobSequencePullStoredPrint", vr: SQ }, // DICOM/retired
    E { tag: Single(PRINT_QUEUE_ID), alias: "PrintQueueID", vr: SH }, // DICOM/retired
    E { tag: Single(QUEUE_STATUS), alias: "QueueStatus", vr: CS }, // DICOM/retired
    E { tag: Single(PRINT_JOB_DESCRIPTION_SEQUENCE), alias: "PrintJobDescriptionSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REFERENCED_PRINT_JOB_SEQUENCE), alias: "ReferencedPrintJobSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE), alias: "PrintManagementCapabilitiesSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(PRINTER_CHARACTERISTICS_SEQUENCE), alias: "PrinterCharacteristicsSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(FILM_BOX_CONTENT_SEQUENCE), alias: "FilmBoxContentSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(IMAGE_BOX_CONTENT_SEQUENCE), alias: "ImageBoxContentSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(ANNOTATION_CONTENT_SEQUENCE), alias: "AnnotationContentSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE), alias: "ImageOverlayBoxContentSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(PRESENTATION_LUT_CONTENT_SEQUENCE), alias: "PresentationLUTContentSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(PROPOSED_STUDY_SEQUENCE), alias: "ProposedStudySequence", vr: SQ }, // DICOM/retired
    E { tag: Single(ORIGINAL_IMAGE_SEQUENCE), alias: "OriginalImageSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(ADDITIONAL_RTROI_IDENTIFICATION_CODE_SEQUENCE), alias: "AdditionalRTROIIdentificationCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE), alias: "FrameOfReferenceRelationshipSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(RELATED_FRAME_OF_REFERENCE_UID), alias: "RelatedFrameOfReferenceUID", vr: UI }, // DICOM/retired
    E { tag: Single(FRAME_OF_REFERENCE_TRANSFORMATION_TYPE), alias: "FrameOfReferenceTransformationType", vr: CS }, // DICOM/retired
    E { tag: Single(AVERAGE_BEAM_DOSE_POINT_DEPTH), alias: "AverageBeamDosePointDepth", vr: FL }, // DICOM/retired
    E { tag: Single(AVERAGE_BEAM_DOSE_POINT_EQUIVALENT_DEPTH), alias: "AverageBeamDosePointEquivalentDepth", vr: FL }, // DICOM/retired
    E { tag: Single(AVERAGE_BEAM_DOSE_POINT_SSD), alias: "AverageBeamDosePointSSD", vr: FL }, // DICOM/retired
    E { tag: Single(ARBITRARY), alias: "Arbitrary", vr: LT }, // DICOM/retired
    E { tag: Single(TEXT_COMMENTS), alias: "TextComments", vr: LT }, // DICOM/retired
    E { tag: Single(RESULTS_ID), alias: "ResultsID", vr: SH }, // DICOM/retired
    E { tag: Single(RESULTS_ID_ISSUER), alias: "ResultsIDIssuer", vr: LO }, // DICOM/retired
    E { tag: Single(REFERENCED_INTERPRETATION_SEQUENCE), alias: "ReferencedInterpretationSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(REPORT_PRODUCTION_STATUS_TRIAL), alias: "ReportProductionStatusTrial", vr: CS }, // DICOM/retired
    E { tag: Single(INTERPRETATION_RECORDED_DATE), alias: "InterpretationRecordedDate", vr: DA }, // DICOM/retired
    E { tag: Single(INTERPRETATION_RECORDED_TIME), alias: "InterpretationRecordedTime", vr: TM }, // DICOM/retired
    E { tag: Single(INTERPRETATION_RECORDER), alias: "InterpretationRecorder", vr: PN }, // DICOM/retired
    E { tag: Single(REFERENCE_TO_RECORDED_SOUND), alias: "ReferenceToRecordedSound", vr: LO }, // DICOM/retired
    E { tag: Single(INTERPRETATION_TRANSCRIPTION_DATE), alias: "InterpretationTranscriptionDate", vr: DA }, // DICOM/retired
    E { tag: Single(INTERPRETATION_TRANSCRIPTION_TIME), alias: "InterpretationTranscriptionTime", vr: TM }, // DICOM/retired
    E { tag: Single(INTERPRETATION_TRANSCRIBER), alias: "InterpretationTranscriber", vr: PN }, // DICOM/retired
    E { tag: Single(INTERPRETATION_TEXT), alias: "InterpretationText", vr: ST }, // DICOM/retired
    E { tag: Single(INTERPRETATION_AUTHOR), alias: "InterpretationAuthor", vr: PN }, // DICOM/retired
    E { tag: Single(INTERPRETATION_APPROVER_SEQUENCE), alias: "InterpretationApproverSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(INTERPRETATION_APPROVAL_DATE), alias: "InterpretationApprovalDate", vr: DA }, // DICOM/retired
    E { tag: Single(INTERPRETATION_APPROVAL_TIME), alias: "InterpretationApprovalTime", vr: TM }, // DICOM/retired
    E { tag: Single(PHYSICIAN_APPROVING_INTERPRETATION), alias: "PhysicianApprovingInterpretation", vr: PN }, // DICOM/retired
    E { tag: Single(INTERPRETATION_DIAGNOSIS_DESCRIPTION), alias: "InterpretationDiagnosisDescription", vr: LT }, // DICOM/retired
    E { tag: Single(INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE), alias: "InterpretationDiagnosisCodeSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(RESULTS_DISTRIBUTION_LIST_SEQUENCE), alias: "ResultsDistributionListSequence", vr: SQ }, // DICOM/retired
    E { tag: Single(DISTRIBUTION_NAME), alias: "DistributionName", vr: PN }, // DICOM/retired
    E { tag: Single(DISTRIBUTION_ADDRESS), alias: "DistributionAddress", vr: LO }, // DICOM/retired
    E { tag: Single(INTERPRETATION_ID), alias: "InterpretationID", vr: SH }, // DICOM/retired
    E { tag: Single(INTERPRETATION_ID_ISSUER), alias: "InterpretationIDIssuer", vr: LO }, // DICOM/retired
    E { tag: Single(INTERPRETATION_TYPE_ID), alias: "InterpretationTypeID", vr: CS }, // DICOM/retired
    E { tag: Single(INTERPRETATION_STATUS_ID), alias: "InterpretationStatusID", vr: CS }, // DICOM/retired
    E { tag: Single(IMPRESSIONS), alias: "Impressions", vr: ST }, // DICOM/retired
    E { tag: Single(RESULTS_COMMENTS), alias: "ResultsComments", vr: ST }, // DICOM/retired
    E { tag: CURVE_DIMENSIONS, alias: "CurveDimensions", vr: US }, // DICOM/retired
    E { tag: NUMBER_OF_POINTS, alias: "NumberOfPoints", vr: US }, // DICOM/retired
    E { tag: TYPE_OF_DATA, alias: "TypeOfData", vr: CS }, // DICOM/retired
    E { tag: CURVE_DESCRIPTION, alias: "CurveDescription", vr: LO }, // DICOM/retired
    E { tag: AXIS_UNITS, alias: "AxisUnits", vr: SH }, // DICOM/retired
    E { tag: AXIS_LABELS, alias: "AxisLabels", vr: SH }, // DICOM/retired
    E { tag: DATA_VALUE_REPRESENTATION, alias: "DataValueRepresentation", vr: US }, // DICOM/retired
    E { tag: MINIMUM_COORDINATE_VALUE, alias: "MinimumCoordinateValue", vr: US }, // DICOM/retired
    E { tag: MAXIMUM_COORDINATE_VALUE, alias: "MaximumCoordinateValue", vr: US }, // DICOM/retired
    E { tag: CURVE_RANGE, alias: "CurveRange", vr: SH }, // DICOM/retired
    E { tag: CURVE_DATA_DESCRIPTOR, alias: "CurveDataDescriptor", vr: US }, // DICOM/retired
    E { tag: COORDINATE_START_VALUE, alias: "CoordinateStartValue", vr: US }, // DICOM/retired
    E { tag: COORDINATE_STEP_VALUE, alias: "CoordinateStepValue", vr: US }, // DICOM/retired
    E { tag: CURVE_ACTIVATION_LAYER, alias: "CurveActivationLayer", vr: CS }, // DICOM/retired
    E { tag: AUDIO_TYPE, alias: "AudioType", vr: US }, // DICOM/retired
    E { tag: AUDIO_SAMPLE_FORMAT, alias: "AudioSampleFormat", vr: US }, // DICOM/retired
    E { tag: NUMBER_OF_CHANNELS, alias: "NumberOfChannels", vr: US }, // DICOM/retired
    E { tag: NUMBER_OF_SAMPLES, alias: "NumberOfSamples", vr: UL }, // DICOM/retired
    E { tag: SAMPLE_RATE, alias: "SampleRate", vr: UL }, // DICOM/retired
    E { tag: TOTAL_TIME, alias: "TotalTime", vr: UL }, // DICOM/retired
    E { tag: AUDIO_SAMPLE_DATA, alias: "AudioSampleData", vr: OB }, // DICOM/retired
    E { tag: AUDIO_COMMENTS, alias: "AudioComments", vr: LT }, // DICOM/retired
    E { tag: CURVE_LABEL, alias: "CurveLabel", vr: LO }, // DICOM/retired
    E { tag: CURVE_REFERENCED_OVERLAY_SEQUENCE, alias: "CurveReferencedOverlaySequence", vr: SQ }, // DICOM/retired
    E { tag: CURVE_REFERENCED_OVERLAY_GROUP, alias: "CurveReferencedOverlayGroup", vr: US }, // DICOM/retired
    E { tag: CURVE_DATA, alias: "CurveData", vr: OB }, // DICOM/retired
    E { tag: OVERLAY_PLANES, alias: "OverlayPlanes", vr: US }, // DICOM/retired
    E { tag: OVERLAY_PLANE_ORIGIN, alias: "OverlayPlaneOrigin", vr: US }, // DICOM/retired
    E { tag: OVERLAY_COMPRESSION_CODE, alias: "OverlayCompressionCode", vr: CS }, // DICOM/retired
    E { tag: OVERLAY_COMPRESSION_ORIGINATOR, alias: "OverlayCompressionOriginator", vr: SH }, // DICOM/retired
    E { tag: OVERLAY_COMPRESSION_LABEL, alias: "OverlayCompressionLabel", vr: SH }, // DICOM/retired
    E { tag: OVERLAY_COMPRESSION_DESCRIPTION, alias: "OverlayCompressionDescription", vr: CS }, // DICOM/retired
    E { tag: OVERLAY_COMPRESSION_STEP_POINTERS, alias: "OverlayCompressionStepPointers", vr: AT }, // DICOM/retired
    E { tag: OVERLAY_REPEAT_INTERVAL, alias: "OverlayRepeatInterval", vr: US }, // DICOM/retired
    E { tag: OVERLAY_BITS_GROUPED, alias: "OverlayBitsGrouped", vr: US }, // DICOM/retired
    E { tag: OVERLAY_FORMAT, alias: "OverlayFormat", vr: CS }, // DICOM/retired
    E { tag: OVERLAY_LOCATION, alias: "OverlayLocation", vr: US }, // DICOM/retired
    E { tag: OVERLAY_CODE_LABEL, alias: "OverlayCodeLabel", vr: CS }, // DICOM/retired
    E { tag: OVERLAY_NUMBER_OF_TABLES, alias: "OverlayNumberOfTables", vr: US }, // DICOM/retired
    E { tag: OVERLAY_CODE_TABLE_LOCATION, alias: "OverlayCodeTableLocation", vr: AT }, // DICOM/retired
    E { tag: OVERLAY_BITS_FOR_CODE_WORD, alias: "OverlayBitsForCodeWord", vr: US }, // DICOM/retired
    E { tag: OVERLAY_DESCRIPTOR_GRAY, alias: "OverlayDescriptorGray", vr: US }, // DICOM/retired
    E { tag: OVERLAY_DESCRIPTOR_RED, alias: "OverlayDescriptorRed", vr: US }, // DICOM/retired
    E { tag: OVERLAY_DESCRIPTOR_GREEN, alias: "OverlayDescriptorGreen", vr: US }, // DICOM/retired
    E { tag: OVERLAY_DESCRIPTOR_BLUE, alias: "OverlayDescriptorBlue", vr: US }, // DICOM/retired
    E { tag: OVERLAYS_GRAY, alias: "OverlaysGray", vr: US }, // DICOM/retired
    E { tag: OVERLAYS_RED, alias: "OverlaysRed", vr: US }, // DICOM/retired
    E { tag: OVERLAYS_GREEN, alias: "OverlaysGreen", vr: US }, // DICOM/retired
    E { tag: OVERLAYS_BLUE, alias: "OverlaysBlue", vr: US }, // DICOM/retired
    E { tag: OVERLAY_COMMENTS, alias: "OverlayComments", vr: LT }, // DICOM/retired
    E { tag: Single(COEFFICIENTS_SDVN), alias: "CoefficientsSDVN", vr: OW }, // DICOM/retired
    E { tag: Single(COEFFICIENTS_SDHN), alias: "CoefficientsSDHN", vr: OW }, // DICOM/retired
    E { tag: Single(COEFFICIENTS_SDDN), alias: "CoefficientsSDDN", vr: OW }, // DICOM/retired
    E { tag: VARIABLE_PIXEL_DATA, alias: "VariablePixelData", vr: OB }, // DICOM/retired
    E { tag: VARIABLE_NEXT_DATA_GROUP, alias: "VariableNextDataGroup", vr: US }, // DICOM/retired
    E { tag: VARIABLE_COEFFICIENTS_SDVN, alias: "VariableCoefficientsSDVN", vr: OW }, // DICOM/retired
    E { tag: VARIABLE_COEFFICIENTS_SDHN, alias: "VariableCoefficientsSDHN", vr: OW }, // DICOM/retired
    E { tag: VARIABLE_COEFFICIENTS_SDDN, alias: "VariableCoefficientsSDDN", vr: OW }, // DICOM/retired
    E { tag: Single(ROWS_FOR_NTH_ORDER_COEFFICIENTS), alias: "RowsForNthOrderCoefficients", vr: US }, // DICOM/retired
    E { tag: Single(COLUMNS_FOR_NTH_ORDER_COEFFICIENTS), alias: "ColumnsForNthOrderCoefficients", vr: US }, // DICOM/retired
    E { tag: Single(COEFFICIENT_CODING), alias: "CoefficientCoding", vr: LO }, // DICOM/retired
    E { tag: Single(COEFFICIENT_CODING_POINTERS), alias: "CoefficientCodingPointers", vr: AT }, // DICOM/retired
    E { tag: Single(CODE_LABEL), alias: "CodeLabel", vr: CS }, // DICOM/retired
    E { tag: Single(NUMBER_OF_TABLES), alias: "NumberOfTables", vr: US }, // DICOM/retired
    E { tag: Single(CODE_TABLE_LOCATION), alias: "CodeTableLocation", vr: AT }, // DICOM/retired
    E { tag: Single(BITS_FOR_CODE_WORD), alias: "BitsForCodeWord", vr: US }, // DICOM/retired
    E { tag: Single(IMAGE_DATA_LOCATION), alias: "ImageDataLocation", vr: AT }, // DICOM/retired
    E { tag: Single(ESCAPE_TRIPLET), alias: "EscapeTriplet", vr: US }, // DICOM/retired
    E { tag: Single(RUN_LENGTH_TRIPLET), alias: "RunLengthTriplet", vr: US }, // DICOM/retired
    E { tag: Single(HUFFMAN_TABLE_SIZE), alias: "HuffmanTableSize", vr: US }, // DICOM/retired
    E { tag: Single(HUFFMAN_TABLE_TRIPLET), alias: "HuffmanTableTriplet", vr: US }, // DICOM/retired
    E { tag: Single(SHIFT_TABLE_SIZE), alias: "ShiftTableSize", vr: US }, // DICOM/retired
    E { tag: Single(SHIFT_TABLE_TRIPLET), alias: "ShiftTableTriplet", vr: US }, // DICOM/retired
    E { tag: Single(ZONAL_MAP), alias: "ZonalMap", vr: US }, // DICOM/retired
];
